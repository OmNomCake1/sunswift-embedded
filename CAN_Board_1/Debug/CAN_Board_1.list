
CAN_Board_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004374  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004688  08004688  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004688  08004688  00005688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004690  08004690  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004690  08004690  00005690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004698  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000068  08004700  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08004700  00006288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef0d  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d7  00000000  00000000  00014fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00017080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf8  00000000  00000000  00018020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001edc3  00000000  00000000  00018c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbb4  00000000  00000000  000379db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ea3  00000000  00000000  0004758f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e432  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d4  00000000  00000000  0010e478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00112e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800453c 	.word	0x0800453c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800453c 	.word	0x0800453c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f000 fb95 	bl	80009f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f828 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 f900 	bl	80004d0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002d0:	f000 f864 	bl	800039c <MX_FDCAN1_Init>
  MX_TIM2_Init();
 80002d4:	f000 f8ae 	bl	8000434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80002d8:	480c      	ldr	r0, [pc, #48]	@ (800030c <main+0x4c>)
 80002da:	f000 fe65 	bl	8000fa8 <HAL_FDCAN_Start>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d008      	beq.n	80002f6 <main+0x36>
      printf("Error starting FDCAN!\n");
 80002e4:	480a      	ldr	r0, [pc, #40]	@ (8000310 <main+0x50>)
 80002e6:	f003 fb71 	bl	80039cc <puts>
      fflush(stdout);
 80002ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <main+0x54>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f003 fa2d 	bl	8003750 <fflush>
  }
  HAL_TIM_Base_Start_IT(&htim2);
 80002f6:	4808      	ldr	r0, [pc, #32]	@ (8000318 <main+0x58>)
 80002f8:	f002 fca2 	bl	8002c40 <HAL_TIM_Base_Start_IT>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2101      	movs	r1, #1
 8000300:	4802      	ldr	r0, [pc, #8]	@ (800030c <main+0x4c>)
 8000302:	f000 ffd7 	bl	80012b4 <HAL_FDCAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000306:	bf00      	nop
 8000308:	e7fd      	b.n	8000306 <main+0x46>
 800030a:	bf00      	nop
 800030c:	20000084 	.word	0x20000084
 8000310:	08004554 	.word	0x08004554
 8000314:	20000018 	.word	0x20000018
 8000318:	200000e8 	.word	0x200000e8

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b094      	sub	sp, #80	@ 0x50
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2238      	movs	r2, #56	@ 0x38
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 fc2e 	bl	8003b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800033e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000342:	f001 fc8b 	bl	8001c5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800034e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000350:	2340      	movs	r3, #64	@ 0x40
 8000352:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000354:	2300      	movs	r3, #0
 8000356:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000358:	f107 0318 	add.w	r3, r7, #24
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fd31 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000368:	f000 f948 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036c:	230f      	movs	r3, #15
 800036e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000370:	2301      	movs	r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	2100      	movs	r1, #0
 8000384:	4618      	mov	r0, r3
 8000386:	f002 f82f 	bl	80023e8 <HAL_RCC_ClockConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000390:	f000 f934 	bl	80005fc <Error_Handler>
  }
}
 8000394:	bf00      	nop
 8000396:	3750      	adds	r7, #80	@ 0x50
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80003a0:	4b21      	ldr	r3, [pc, #132]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003a2:	4a22      	ldr	r2, [pc, #136]	@ (800042c <MX_FDCAN1_Init+0x90>)
 80003a4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80003a6:	4b20      	ldr	r3, [pc, #128]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003b2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003bc:	2201      	movs	r2, #1
 80003be:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003c0:	4b19      	ldr	r3, [pc, #100]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003c6:	4b18      	ldr	r3, [pc, #96]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003cc:	4b16      	ldr	r3, [pc, #88]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003ce:	2201      	movs	r2, #1
 80003d0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003d4:	2202      	movs	r2, #2
 80003d6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80003d8:	4b13      	ldr	r3, [pc, #76]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003da:	221d      	movs	r2, #29
 80003dc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003de:	4b12      	ldr	r3, [pc, #72]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003e0:	2202      	movs	r2, #2
 80003e2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003e4:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80003ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003ec:	220f      	movs	r2, #15
 80003ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80003f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003f2:	2210      	movs	r2, #16
 80003f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80003f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003f8:	220f      	movs	r2, #15
 80003fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000402:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 8000404:	2200      	movs	r2, #0
 8000406:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000408:	4b07      	ldr	r3, [pc, #28]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 800040a:	2200      	movs	r2, #0
 800040c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800040e:	4806      	ldr	r0, [pc, #24]	@ (8000428 <MX_FDCAN1_Init+0x8c>)
 8000410:	f000 fc70 	bl	8000cf4 <HAL_FDCAN_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d004      	beq.n	8000424 <MX_FDCAN1_Init+0x88>
  {
	  printf("FD CAN init issue\n");
 800041a:	4805      	ldr	r0, [pc, #20]	@ (8000430 <MX_FDCAN1_Init+0x94>)
 800041c:	f003 fad6 	bl	80039cc <puts>
    Error_Handler();
 8000420:	f000 f8ec 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000084 	.word	0x20000084
 800042c:	40006400 	.word	0x40006400
 8000430:	0800456c 	.word	0x0800456c

08000434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	f107 0310 	add.w	r3, r7, #16
 800043e:	2200      	movs	r2, #0
 8000440:	601a      	str	r2, [r3, #0]
 8000442:	605a      	str	r2, [r3, #4]
 8000444:	609a      	str	r2, [r3, #8]
 8000446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000452:	4b1e      	ldr	r3, [pc, #120]	@ (80004cc <MX_TIM2_Init+0x98>)
 8000454:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 800045a:	4b1c      	ldr	r3, [pc, #112]	@ (80004cc <MX_TIM2_Init+0x98>)
 800045c:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000462:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <MX_TIM2_Init+0x98>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <MX_TIM2_Init+0x98>)
 800046a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800046e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000470:	4b16      	ldr	r3, [pc, #88]	@ (80004cc <MX_TIM2_Init+0x98>)
 8000472:	2200      	movs	r2, #0
 8000474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000476:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <MX_TIM2_Init+0x98>)
 8000478:	2280      	movs	r2, #128	@ 0x80
 800047a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800047c:	4813      	ldr	r0, [pc, #76]	@ (80004cc <MX_TIM2_Init+0x98>)
 800047e:	f002 fb87 	bl	8002b90 <HAL_TIM_Base_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000488:	f000 f8b8 	bl	80005fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800048c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	480c      	ldr	r0, [pc, #48]	@ (80004cc <MX_TIM2_Init+0x98>)
 800049a:	f002 fd8b 	bl	8002fb4 <HAL_TIM_ConfigClockSource>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80004a4:	f000 f8aa 	bl	80005fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4619      	mov	r1, r3
 80004b4:	4805      	ldr	r0, [pc, #20]	@ (80004cc <MX_TIM2_Init+0x98>)
 80004b6:	f002 ffd7 	bl	8003468 <HAL_TIMEx_MasterConfigSynchronization>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80004c0:	f000 f89c 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004c4:	bf00      	nop
 80004c6:	3720      	adds	r7, #32
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	200000e8 	.word	0x200000e8

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_GPIO_Init+0x2c>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004da:	4a08      	ldr	r2, [pc, #32]	@ (80004fc <MX_GPIO_Init+0x2c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004e2:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_GPIO_Init+0x2c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b08e      	sub	sp, #56	@ 0x38
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	// send that CAN message bro
	FDCAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData = 0x08;
 8000508:	2308      	movs	r3, #8
 800050a:	72fb      	strb	r3, [r7, #11]

	TxHeader.Identifier = CAN_TX_ID;
 800050c:	2301      	movs	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
	TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000518:	2301      	movs	r3, #1
 800051a:	61bb      	str	r3, [r7, #24]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800051c:	2300      	movs	r3, #0
 800051e:	623b      	str	r3, [r7, #32]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8000520:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000524:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000526:	2300      	movs	r3, #0
 8000528:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.MessageMarker = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	uint32_t free_slots = HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1);
 800052e:	4813      	ldr	r0, [pc, #76]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000530:	f000 feae 	bl	8001290 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000534:	6378      	str	r0, [r7, #52]	@ 0x34
	printf("FIFO0 space: %lu\n", free_slots);
 8000536:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000538:	4811      	ldr	r0, [pc, #68]	@ (8000580 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800053a:	f003 f9df 	bl	80038fc <iprintf>
	fflush(stdout);
 800053e:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	4618      	mov	r0, r3
 8000546:	f003 f903 	bl	8003750 <fflush>

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, &TxData) != HAL_OK) {
 800054a:	f107 020b 	add.w	r2, r7, #11
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000556:	f000 fd4f 	bl	8000ff8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00a      	beq.n	8000576 <HAL_TIM_PeriodElapsedCallback+0x76>
		printf("Error adding CAN message to FIFO\n");
 8000560:	4809      	ldr	r0, [pc, #36]	@ (8000588 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000562:	f003 fa33 	bl	80039cc <puts>
		uint32_t error = HAL_FDCAN_GetError(&hfdcan1);
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000568:	f001 f918 	bl	800179c <HAL_FDCAN_GetError>
 800056c:	6338      	str	r0, [r7, #48]	@ 0x30
		printf("Error code: 0x%lx\n", error);
 800056e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000570:	4806      	ldr	r0, [pc, #24]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000572:	f003 f9c3 	bl	80038fc <iprintf>
		return;
	}
}
 8000576:	3738      	adds	r7, #56	@ 0x38
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000084 	.word	0x20000084
 8000580:	08004580 	.word	0x08004580
 8000584:	20000018 	.word	0x20000018
 8000588:	08004594 	.word	0x08004594
 800058c:	080045b8 	.word	0x080045b8

08000590 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	@ 0x38
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData;

	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, &RxData) != HAL_OK) {
 800059a:	f107 030f 	add.w	r3, r7, #15
 800059e:	f107 0210 	add.w	r2, r7, #16
 80005a2:	2140      	movs	r1, #64	@ 0x40
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 fd6b 	bl	8001080 <HAL_FDCAN_GetRxMessage>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d008      	beq.n	80005c2 <HAL_FDCAN_RxFifo0Callback+0x32>
		printf("Error receiving CAN message\n");
 80005b0:	480e      	ldr	r0, [pc, #56]	@ (80005ec <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80005b2:	f003 fa0b 	bl	80039cc <puts>
		HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2101      	movs	r1, #1
 80005ba:	480d      	ldr	r0, [pc, #52]	@ (80005f0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005bc:	f000 fe7a 	bl	80012b4 <HAL_FDCAN_ActivateNotification>
 80005c0:	e011      	b.n	80005e6 <HAL_FDCAN_RxFifo0Callback+0x56>
		return;
	}

	// show messages
	if (RxHeader.Identifier == CAN_RX_ID) {
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d106      	bne.n	80005d6 <HAL_FDCAN_RxFifo0Callback+0x46>
		printf("Message Received:\nID: %lu\nData: %u\n", RxHeader.Identifier, RxData);
 80005c8:	693b      	ldr	r3, [r7, #16]
 80005ca:	7bfa      	ldrb	r2, [r7, #15]
 80005cc:	4619      	mov	r1, r3
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005d0:	f003 f994 	bl	80038fc <iprintf>
 80005d4:	e002      	b.n	80005dc <HAL_FDCAN_RxFifo0Callback+0x4c>
	} else {
		printf("RxHeader ignored (incorrect ID number)\n");
 80005d6:	4808      	ldr	r0, [pc, #32]	@ (80005f8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80005d8:	f003 f9f8 	bl	80039cc <puts>
	}
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4803      	ldr	r0, [pc, #12]	@ (80005f0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005e2:	f000 fe67 	bl	80012b4 <HAL_FDCAN_ActivateNotification>
}
 80005e6:	3738      	adds	r7, #56	@ 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	080045cc 	.word	0x080045cc
 80005f0:	20000084 	.word	0x20000084
 80005f4:	080045e8 	.word	0x080045e8
 80005f8:	0800460c 	.word	0x0800460c

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <Error_Handler+0x8>

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000612:	4a0e      	ldr	r2, [pc, #56]	@ (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6613      	str	r3, [r2, #96]	@ 0x60
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <HAL_MspInit+0x44>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	@ (800064c <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062a:	4a08      	ldr	r2, [pc, #32]	@ (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000630:	6593      	str	r3, [r2, #88]	@ 0x58
 8000632:	4b06      	ldr	r3, [pc, #24]	@ (800064c <HAL_MspInit+0x44>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800063e:	f001 fbb1 	bl	8001da4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09a      	sub	sp, #104	@ 0x68
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000658:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2244      	movs	r2, #68	@ 0x44
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fa8b 	bl	8003b8c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a24      	ldr	r2, [pc, #144]	@ (800070c <HAL_FDCAN_MspInit+0xbc>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d141      	bne.n	8000704 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000684:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800068a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800068c:	f107 0310 	add.w	r3, r7, #16
 8000690:	4618      	mov	r0, r3
 8000692:	f002 f88d 	bl	80027b0 <HAL_RCCEx_PeriphCLKConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800069c:	f7ff ffae 	bl	80005fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006a4:	4a1a      	ldr	r2, [pc, #104]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80006ac:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_FDCAN_MspInit+0xc0>)
 80006c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006d0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80006e2:	2309      	movs	r3, #9
 80006e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f0:	f001 f932 	bl	8001958 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	2015      	movs	r0, #21
 80006fa:	f000 fac6 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80006fe:	2015      	movs	r0, #21
 8000700:	f000 fadd 	bl	8000cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000704:	bf00      	nop
 8000706:	3768      	adds	r7, #104	@ 0x68
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40006400 	.word	0x40006400
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000724:	d113      	bne.n	800074e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000726:	4b0c      	ldr	r3, [pc, #48]	@ (8000758 <HAL_TIM_Base_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <HAL_TIM_Base_MspInit+0x44>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6593      	str	r3, [r2, #88]	@ 0x58
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <HAL_TIM_Base_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	201c      	movs	r0, #28
 8000744:	f000 faa1 	bl	8000c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000748:	201c      	movs	r0, #28
 800074a:	f000 fab8 	bl	8000cbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800074e:	bf00      	nop
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <NMI_Handler+0x4>

08000764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <MemManage_Handler+0x4>

08000774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <UsageFault_Handler+0x4>

08000784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b2:	f000 f971 	bl	8000a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <FDCAN1_IT0_IRQHandler+0x10>)
 80007c2:	f000 fe5d 	bl	8001480 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000084 	.word	0x20000084

080007d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <TIM2_IRQHandler+0x10>)
 80007d6:	f002 fa9d 	bl	8002d14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000e8 	.word	0x200000e8

080007e4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007ee:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <ITM_SendChar+0x48>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a0e      	ldr	r2, [pc, #56]	@ (800082c <ITM_SendChar+0x48>)
 80007f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007f8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <ITM_SendChar+0x4c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <ITM_SendChar+0x4c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000806:	bf00      	nop
 8000808:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f8      	beq.n	8000808 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000816:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	6013      	str	r3, [r2, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000edfc 	.word	0xe000edfc
 8000830:	e0000e00 	.word	0xe0000e00

08000834 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00a      	b.n	800085c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000846:	f3af 8000 	nop.w
 800084a:	4601      	mov	r1, r0
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	b2ca      	uxtb	r2, r1
 8000854:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	3301      	adds	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697a      	ldr	r2, [r7, #20]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	429a      	cmp	r2, r3
 8000862:	dbf0      	blt.n	8000846 <_read+0x12>
  }

  return len;
 8000864:	687b      	ldr	r3, [r7, #4]
}
 8000866:	4618      	mov	r0, r3
 8000868:	3718      	adds	r7, #24
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	b086      	sub	sp, #24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
 800087e:	e009      	b.n	8000894 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	ITM_SendChar(*ptr++);
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	60ba      	str	r2, [r7, #8]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ffab 	bl	80007e4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf1      	blt.n	8000880 <_write+0x12>
  }
  return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_close>:

int _close(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
 80008c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ce:	605a      	str	r2, [r3, #4]
  return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_isatty>:

int _isatty(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000918:	4a14      	ldr	r2, [pc, #80]	@ (800096c <_sbrk+0x5c>)
 800091a:	4b15      	ldr	r3, [pc, #84]	@ (8000970 <_sbrk+0x60>)
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000924:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <_sbrk+0x64>)
 800092e:	4a12      	ldr	r2, [pc, #72]	@ (8000978 <_sbrk+0x68>)
 8000930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <_sbrk+0x64>)
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4413      	add	r3, r2
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d207      	bcs.n	8000950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000940:	f003 f972 	bl	8003c28 <__errno>
 8000944:	4603      	mov	r3, r0
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	e009      	b.n	8000964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000950:	4b08      	ldr	r3, [pc, #32]	@ (8000974 <_sbrk+0x64>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000956:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <_sbrk+0x64>)
 8000960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000962:	68fb      	ldr	r3, [r7, #12]
}
 8000964:	4618      	mov	r0, r3
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20008000 	.word	0x20008000
 8000970:	00000400 	.word	0x00000400
 8000974:	20000134 	.word	0x20000134
 8000978:	20000288 	.word	0x20000288

0800097c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	@ (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	@ (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	@ (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	@ (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	@ (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80009ce:	f003 f931 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d2:	f7ff fc75 	bl	80002c0 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   r0, =_estack
 80009d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009e4:	08004698 	.word	0x08004698
  ldr r2, =_sbss
 80009e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009ec:	20000288 	.word	0x20000288

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>

080009f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f939 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f80e 	bl	8000a24 <HAL_InitTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a14:	f7ff fdf8 	bl	8000608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	79fb      	ldrb	r3, [r7, #7]

}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_InitTick+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d022      	beq.n	8000a7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <HAL_InitTick+0x6c>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_InitTick+0x68>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a44:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 f944 	bl	8000cda <HAL_SYSTICK_Config>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10f      	bne.n	8000a78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b0f      	cmp	r3, #15
 8000a5c:	d809      	bhi.n	8000a72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	f04f 30ff 	mov.w	r0, #4294967295
 8000a66:	f000 f910 	bl	8000c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_InitTick+0x70>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6013      	str	r3, [r2, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e004      	b.n	8000a82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
 8000a7c:	e001      	b.n	8000a82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000000 	.word	0x20000000
 8000a94:	20000004 	.word	0x20000004

08000a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <HAL_IncTick+0x20>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	4a03      	ldr	r2, [pc, #12]	@ (8000ab4 <HAL_IncTick+0x1c>)
 8000aa8:	6013      	str	r3, [r2, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	20000138 	.word	0x20000138
 8000ab8:	20000008 	.word	0x20000008

08000abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	@ (8000ad0 <HAL_GetTick+0x14>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000138 	.word	0x20000138

08000ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <__NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	@ (8000b34 <__NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	db0b      	blt.n	8000b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 021f 	and.w	r2, r3, #31
 8000b50:	4907      	ldr	r1, [pc, #28]	@ (8000b70 <__NVIC_EnableIRQ+0x38>)
 8000b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	2001      	movs	r0, #1
 8000b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b62:	bf00      	nop
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff8e 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff29 	bl	8000ad4 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff40 	bl	8000b1c <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff33 	bl	8000b38 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa4 	bl	8000c30 <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e147      	b.n	8000f96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d106      	bne.n	8000d20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fc98 	bl	8000650 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0210 	bic.w	r2, r2, #16
 8000d2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d30:	f7ff fec4 	bl	8000abc <HAL_GetTick>
 8000d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d36:	e012      	b.n	8000d5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d38:	f7ff fec0 	bl	8000abc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b0a      	cmp	r3, #10
 8000d44:	d90b      	bls.n	8000d5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2203      	movs	r2, #3
 8000d56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e11b      	b.n	8000f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	f003 0308 	and.w	r3, r3, #8
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d0e5      	beq.n	8000d38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	699a      	ldr	r2, [r3, #24]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f042 0201 	orr.w	r2, r2, #1
 8000d7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d7c:	f7ff fe9e 	bl	8000abc <HAL_GetTick>
 8000d80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d82:	e012      	b.n	8000daa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d84:	f7ff fe9a 	bl	8000abc <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b0a      	cmp	r3, #10
 8000d90:	d90b      	bls.n	8000daa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d96:	f043 0201 	orr.w	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0f5      	b.n	8000f96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0e5      	beq.n	8000d84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0202 	orr.w	r2, r2, #2
 8000dc6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a74      	ldr	r2, [pc, #464]	@ (8000fa0 <HAL_FDCAN_Init+0x2ac>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d103      	bne.n	8000dda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000dd2:	4a74      	ldr	r2, [pc, #464]	@ (8000fa4 <HAL_FDCAN_Init+0x2b0>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7c1b      	ldrb	r3, [r3, #16]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	699a      	ldr	r2, [r3, #24]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000df0:	619a      	str	r2, [r3, #24]
 8000df2:	e007      	b.n	8000e04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7c5b      	ldrb	r3, [r3, #17]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d108      	bne.n	8000e1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	699a      	ldr	r2, [r3, #24]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000e1a:	619a      	str	r2, [r3, #24]
 8000e1c:	e007      	b.n	8000e2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	699a      	ldr	r2, [r3, #24]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000e2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7c9b      	ldrb	r3, [r3, #18]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d108      	bne.n	8000e48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	699a      	ldr	r2, [r3, #24]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000e44:	619a      	str	r2, [r3, #24]
 8000e46:	e007      	b.n	8000e58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	699a      	ldr	r2, [r3, #24]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000e56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000e7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	691a      	ldr	r2, [r3, #16]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0210 	bic.w	r2, r2, #16
 8000e8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	68db      	ldr	r3, [r3, #12]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d108      	bne.n	8000ea8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	699a      	ldr	r2, [r3, #24]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f042 0204 	orr.w	r2, r2, #4
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	e02c      	b.n	8000f02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d028      	beq.n	8000f02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d01c      	beq.n	8000ef2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ec6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f042 0210 	orr.w	r2, r2, #16
 8000ed6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d110      	bne.n	8000f02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	619a      	str	r2, [r3, #24]
 8000ef0:	e007      	b.n	8000f02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	699a      	ldr	r2, [r3, #24]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f042 0220 	orr.w	r2, r2, #32
 8000f00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000f2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000f36:	d115      	bne.n	8000f64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f42:	3b01      	subs	r3, #1
 8000f44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000f50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000f60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000f62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fc1a 	bl	80017b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2200      	movs	r2, #0
 8000f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40006400 	.word	0x40006400
 8000fa4:	40006500 	.word	0x40006500

08000fa8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d110      	bne.n	8000fde <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	699a      	ldr	r2, [r3, #24]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0201 	bic.w	r2, r2, #1
 8000fd2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e006      	b.n	8000fec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe2:	f043 0204 	orr.w	r2, r3, #4
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
  }
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d12c      	bne.n	800106a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001024:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	e023      	b.n	8001078 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001038:	0c1b      	lsrs	r3, r3, #16
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f000 fc0a 	bl	8001860 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	fa01 f202 	lsl.w	r2, r1, r2
 8001058:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800105c:	2201      	movs	r2, #1
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	409a      	lsls	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e006      	b.n	8001078 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106e:	f043 0208 	orr.w	r2, r3, #8
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
  }
}
 8001078:	4618      	mov	r0, r3
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001080:	b480      	push	{r7}
 8001082:	b08b      	sub	sp, #44	@ 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001098:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800109a:	7efb      	ldrb	r3, [r7, #27]
 800109c:	2b02      	cmp	r3, #2
 800109e:	f040 80e8 	bne.w	8001272 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	2b40      	cmp	r3, #64	@ 0x40
 80010a6:	d137      	bne.n	8001118 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0db      	b.n	8001280 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010d0:	0e1b      	lsrs	r3, r3, #24
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d10a      	bne.n	80010f0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e2:	0a5b      	lsrs	r3, r3, #9
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	69fa      	ldr	r2, [r7, #28]
 8001100:	4413      	add	r3, r2
 8001102:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
 8001116:	e036      	b.n	8001186 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e0a3      	b.n	8001280 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b01      	cmp	r3, #1
 8001148:	d10a      	bne.n	8001160 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001152:	0a1b      	lsrs	r3, r3, #8
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800115c:	2301      	movs	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4413      	add	r3, r2
 8001172:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	4413      	add	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	440b      	add	r3, r1
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d107      	bne.n	80011aa <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	0c9b      	lsrs	r3, r3, #18
 80011a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e005      	b.n	80011b6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	3304      	adds	r3, #4
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80011d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80011de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	0c1b      	lsrs	r3, r3, #16
 80011e4:	f003 020f 	and.w	r2, r3, #15
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0e1b      	lsrs	r3, r3, #24
 800120a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0fda      	lsrs	r2, r3, #31
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121e:	3304      	adds	r3, #4
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	e00a      	b.n	8001242 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	6a3b      	ldr	r3, [r7, #32]
 8001230:	441a      	add	r2, r3
 8001232:	6839      	ldr	r1, [r7, #0]
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	440b      	add	r3, r1
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	3301      	adds	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	461a      	mov	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	4293      	cmp	r3, r2
 8001250:	d3ec      	bcc.n	800122c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b40      	cmp	r3, #64	@ 0x40
 8001256:	d105      	bne.n	8001264 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001262:	e004      	b.n	800126e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e006      	b.n	8001280 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001276:	f043 0208 	orr.w	r2, r3, #8
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
  }
}
 8001280:	4618      	mov	r0, r3
 8001282:	372c      	adds	r7, #44	@ 0x2c
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	08004644 	.word	0x08004644

08001290 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80012c6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d003      	beq.n	80012d6 <HAL_FDCAN_ActivateNotification+0x22>
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	f040 80c8 	bne.w	8001466 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012dc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d004      	beq.n	80012f2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03b      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d031      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d027      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d01d      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d013      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001348:	2b00      	cmp	r3, #0
 800134a:	d004      	beq.n	8001356 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	d13b      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d131      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d127      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d11d      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d004      	beq.n	80013de <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d113      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d109      	bne.n	8001406 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00c      	beq.n	8001416 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d007      	beq.n	8001416 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0202 	orr.w	r2, r2, #2
 8001414:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141c:	2b00      	cmp	r3, #0
 800141e:	d009      	beq.n	8001434 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	430a      	orrs	r2, r1
 8001430:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	430a      	orrs	r2, r1
 800144e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	e006      	b.n	8001474 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f043 0202 	orr.w	r2, r3, #2
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	@ 0x30
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800149c:	4013      	ands	r3, r2
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014b4:	4013      	ands	r3, r2
 80014b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014cc:	4013      	ands	r3, r2
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014d6:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80014da:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e2:	6a3a      	ldr	r2, [r7, #32]
 80014e4:	4013      	ands	r3, r2
 80014e6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80014ee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80014f2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001506:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800150e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2240      	movs	r2, #64	@ 0x40
 800152a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f916 	bl	800175e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d019      	beq.n	8001570 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	2b00      	cmp	r3, #0
 8001544:	d014      	beq.n	8001570 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800154e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001566:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001568:	6939      	ldr	r1, [r7, #16]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f8d8 	bl	8001720 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001572:	2b00      	cmp	r3, #0
 8001574:	d007      	beq.n	8001586 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800157c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800157e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8a2 	bl	80016ca <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001592:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe fffa 	bl	8000590 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80015aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f000 f897 	bl	80016e0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ce:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 f890 	bl	80016f6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d018      	beq.n	8001612 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d013      	beq.n	8001612 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015f2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2280      	movs	r2, #128	@ 0x80
 8001608:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f87c 	bl	800170a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d007      	beq.n	8001636 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f880 	bl	8001736 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00c      	beq.n	800165a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001652:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f878 	bl	800174a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00f      	beq.n	8001684 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00a      	beq.n	8001684 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001676:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001692:	69f9      	ldr	r1, [r7, #28]
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f876 	bl	8001786 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d002      	beq.n	80016c2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f858 	bl	8001772 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	@ 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_FDCAN_GetError>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval FDCAN Error Code
  */
uint32_t HAL_FDCAN_GetError(const FDCAN_HandleTypeDef *hfdcan)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Return FDCAN error code */
  return hfdcan->ErrorCode;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80017bc:	4b27      	ldr	r3, [pc, #156]	@ (800185c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80017be:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017f4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017fc:	061a      	lsls	r2, r3, #24
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e005      	b.n	8001842 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	3304      	adds	r3, #4
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3f3      	bcc.n	8001836 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800184e:	bf00      	nop
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	4000a400 	.word	0x4000a400

08001860 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800187e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001886:	4313      	orrs	r3, r2
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	e00a      	b.n	80018a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001894:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800189a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800189c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80018ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80018b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80018b8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	3304      	adds	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	3304      	adds	r3, #4
 80018ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	e020      	b.n	8001936 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3303      	adds	r3, #3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3302      	adds	r3, #2
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	440b      	add	r3, r1
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800190c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	440b      	add	r3, r1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800191a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	440a      	add	r2, r1
 8001922:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001924:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3304      	adds	r3, #4
 800192e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3304      	adds	r3, #4
 8001934:	617b      	str	r3, [r7, #20]
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	4a06      	ldr	r2, [pc, #24]	@ (8001954 <FDCAN_CopyMessageToRAM+0xf4>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	461a      	mov	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	4293      	cmp	r3, r2
 8001944:	d3d6      	bcc.n	80018f4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	3724      	adds	r7, #36	@ 0x24
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	08004644 	.word	0x08004644

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001966:	e15a      	b.n	8001c1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 814c 	beq.w	8001c18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 80a6 	beq.w	8001c18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c3c <HAL_GPIO_Init+0x2e4>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c3c <HAL_GPIO_Init+0x2e4>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad8:	4b58      	ldr	r3, [pc, #352]	@ (8001c3c <HAL_GPIO_Init+0x2e4>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ae4:	4a56      	ldr	r2, [pc, #344]	@ (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b0e:	d01f      	beq.n	8001b50 <HAL_GPIO_Init+0x1f8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a4c      	ldr	r2, [pc, #304]	@ (8001c44 <HAL_GPIO_Init+0x2ec>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d019      	beq.n	8001b4c <HAL_GPIO_Init+0x1f4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c48 <HAL_GPIO_Init+0x2f0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_GPIO_Init+0x1f0>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a4a      	ldr	r2, [pc, #296]	@ (8001c4c <HAL_GPIO_Init+0x2f4>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d00d      	beq.n	8001b44 <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	@ (8001c50 <HAL_GPIO_Init+0x2f8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d007      	beq.n	8001b40 <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a48      	ldr	r2, [pc, #288]	@ (8001c54 <HAL_GPIO_Init+0x2fc>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d101      	bne.n	8001b3c <HAL_GPIO_Init+0x1e4>
 8001b38:	2305      	movs	r3, #5
 8001b3a:	e00a      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b3c:	2306      	movs	r3, #6
 8001b3e:	e008      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e006      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b44:	2303      	movs	r3, #3
 8001b46:	e004      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_GPIO_Init+0x1fa>
 8001b50:	2300      	movs	r3, #0
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	f002 0203 	and.w	r2, r2, #3
 8001b58:	0092      	lsls	r2, r2, #2
 8001b5a:	4093      	lsls	r3, r2
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b62:	4937      	ldr	r1, [pc, #220]	@ (8001c40 <HAL_GPIO_Init+0x2e8>)
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b70:	4b39      	ldr	r3, [pc, #228]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b94:	4a30      	ldr	r2, [pc, #192]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bbe:	4a26      	ldr	r2, [pc, #152]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c12:	4a11      	ldr	r2, [pc, #68]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa22 f303 	lsr.w	r3, r2, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f ae9d 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	bf00      	nop
 8001c32:	371c      	adds	r7, #28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	48000400 	.word	0x48000400
 8001c48:	48000800 	.word	0x48000800
 8001c4c:	48000c00 	.word	0x48000c00
 8001c50:	48001000 	.word	0x48001000
 8001c54:	48001400 	.word	0x48001400
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d141      	bne.n	8001cee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d131      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c78:	4b47      	ldr	r3, [pc, #284]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7e:	4a46      	ldr	r2, [pc, #280]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c90:	4a41      	ldr	r2, [pc, #260]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c98:	4b40      	ldr	r3, [pc, #256]	@ (8001d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2232      	movs	r2, #50	@ 0x32
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	0c9b      	lsrs	r3, r3, #18
 8001caa:	3301      	adds	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cae:	e002      	b.n	8001cb6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc2:	d102      	bne.n	8001cca <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cca:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd6:	d158      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e057      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ce8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cec:	e04d      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf4:	d141      	bne.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cf6:	4b28      	ldr	r3, [pc, #160]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d131      	bne.n	8001d68 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d0a:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2232      	movs	r2, #50	@ 0x32
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001da0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3a:	e002      	b.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4e:	d102      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f2      	bne.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d62:	d112      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e011      	b.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d78:	e007      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d88:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001da8:	4b05      	ldr	r3, [pc, #20]	@ (8001dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	4a04      	ldr	r2, [pc, #16]	@ (8001dc0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db2:	6093      	str	r3, [r2, #8]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e2fe      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b97      	ldr	r3, [pc, #604]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b94      	ldr	r3, [pc, #592]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_OscConfig+0x3e>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b8d      	ldr	r3, [pc, #564]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e2d9      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b85      	ldr	r3, [pc, #532]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a84      	ldr	r2, [pc, #528]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b7f      	ldr	r3, [pc, #508]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a7b      	ldr	r2, [pc, #492]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b78      	ldr	r3, [pc, #480]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a77      	ldr	r2, [pc, #476]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b75      	ldr	r3, [pc, #468]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a74      	ldr	r2, [pc, #464]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fe1e 	bl	8000abc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e84:	f7fe fe1a 	bl	8000abc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	@ 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e29e      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe fe0a 	bl	8000abc <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe fe06 	bl	8000abc <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	@ 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e28a      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ebe:	4b60      	ldr	r3, [pc, #384]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eda:	4b59      	ldr	r3, [pc, #356]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee4:	4b56      	ldr	r3, [pc, #344]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d102      	bne.n	8001efa <HAL_RCC_OscConfig+0x136>
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_OscConfig+0x13c>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d11f      	bne.n	8001f40 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	4b4f      	ldr	r3, [pc, #316]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_OscConfig+0x154>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e25d      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b49      	ldr	r3, [pc, #292]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4946      	ldr	r1, [pc, #280]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f2c:	4b45      	ldr	r3, [pc, #276]	@ (8002044 <HAL_RCC_OscConfig+0x280>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fd77 	bl	8000a24 <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d043      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e249      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b3d      	ldr	r3, [pc, #244]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fdb2 	bl	8000abc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fdae 	bl	8000abc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e232      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f6e:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	492d      	ldr	r1, [pc, #180]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	604b      	str	r3, [r1, #4]
 8001f8e:	e01a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2a      	ldr	r2, [pc, #168]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fd8e 	bl	8000abc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7fe fd8a 	bl	8000abc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e20e      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb6:	4b22      	ldr	r3, [pc, #136]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x1e0>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d041      	beq.n	8002056 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01c      	beq.n	8002014 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fe0:	4a17      	ldr	r2, [pc, #92]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7fe fd67 	bl	8000abc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fd63 	bl	8000abc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1e7      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0ef      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
 8002012:	e020      	b.n	8002056 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800201a:	4a09      	ldr	r2, [pc, #36]	@ (8002040 <HAL_RCC_OscConfig+0x27c>)
 800201c:	f023 0301 	bic.w	r3, r3, #1
 8002020:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe fd4a 	bl	8000abc <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202a:	e00d      	b.n	8002048 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7fe fd46 	bl	8000abc <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d906      	bls.n	8002048 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e1ca      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002048:	4b8c      	ldr	r3, [pc, #560]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1ea      	bne.n	800202c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80a6 	beq.w	80021b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002064:	2300      	movs	r3, #0
 8002066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002068:	4b84      	ldr	r3, [pc, #528]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_OscConfig+0x2b4>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x2b6>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00d      	beq.n	800209a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	4b7f      	ldr	r3, [pc, #508]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	4a7e      	ldr	r2, [pc, #504]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002088:	6593      	str	r3, [r2, #88]	@ 0x58
 800208a:	4b7c      	ldr	r3, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800208c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002092:	60fb      	str	r3, [r7, #12]
 8002094:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002096:	2301      	movs	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	4b79      	ldr	r3, [pc, #484]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d118      	bne.n	80020d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a6:	4b76      	ldr	r3, [pc, #472]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a75      	ldr	r2, [pc, #468]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b2:	f7fe fd03 	bl	8000abc <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ba:	f7fe fcff 	bl	8000abc <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e183      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002280 <HAL_RCC_OscConfig+0x4bc>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d108      	bne.n	80020f2 <HAL_RCC_OscConfig+0x32e>
 80020e0:	4b66      	ldr	r3, [pc, #408]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020e6:	4a65      	ldr	r2, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f0:	e024      	b.n	800213c <HAL_RCC_OscConfig+0x378>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b05      	cmp	r3, #5
 80020f8:	d110      	bne.n	800211c <HAL_RCC_OscConfig+0x358>
 80020fa:	4b60      	ldr	r3, [pc, #384]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002100:	4a5e      	ldr	r2, [pc, #376]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800210a:	4b5c      	ldr	r3, [pc, #368]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002110:	4a5a      	ldr	r2, [pc, #360]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x378>
 800211c:	4b57      	ldr	r3, [pc, #348]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002122:	4a56      	ldr	r2, [pc, #344]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f023 0301 	bic.w	r3, r3, #1
 8002128:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800212c:	4b53      	ldr	r3, [pc, #332]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a52      	ldr	r2, [pc, #328]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f023 0304 	bic.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d016      	beq.n	8002172 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fcba 	bl	8000abc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214a:	e00a      	b.n	8002162 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800214c:	f7fe fcb6 	bl	8000abc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e138      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	4b46      	ldr	r3, [pc, #280]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0ed      	beq.n	800214c <HAL_RCC_OscConfig+0x388>
 8002170:	e015      	b.n	800219e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002172:	f7fe fca3 	bl	8000abc <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fc9f 	bl	8000abc <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e121      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002190:	4b3a      	ldr	r3, [pc, #232]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ed      	bne.n	800217a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a8:	4a34      	ldr	r2, [pc, #208]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d03c      	beq.n	8002236 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ca:	4a2c      	ldr	r2, [pc, #176]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe fc72 	bl	8000abc <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021da:	e008      	b.n	80021ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021dc:	f7fe fc6e 	bl	8000abc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e0f2      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ee:	4b23      	ldr	r3, [pc, #140]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 80021f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ef      	beq.n	80021dc <HAL_RCC_OscConfig+0x418>
 80021fc:	e01b      	b.n	8002236 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002204:	4a1d      	ldr	r2, [pc, #116]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f023 0301 	bic.w	r3, r3, #1
 800220a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220e:	f7fe fc55 	bl	8000abc <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002216:	f7fe fc51 	bl	8000abc <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0d5      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002228:	4b14      	ldr	r3, [pc, #80]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800222a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1ef      	bne.n	8002216 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80c9 	beq.w	80023d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002240:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f000 8083 	beq.w	8002354 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d15e      	bne.n	8002314 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b09      	ldr	r3, [pc, #36]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a08      	ldr	r2, [pc, #32]	@ (800227c <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7fe fc2b 	bl	8000abc <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002268:	e00c      	b.n	8002284 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7fe fc27 	bl	8000abc <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d905      	bls.n	8002284 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0ab      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002284:	4b55      	ldr	r3, [pc, #340]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ec      	bne.n	800226a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b52      	ldr	r3, [pc, #328]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4b52      	ldr	r3, [pc, #328]	@ (80023e0 <HAL_RCC_OscConfig+0x61c>)
 8002296:	4013      	ands	r3, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6a11      	ldr	r1, [r2, #32]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022a0:	3a01      	subs	r2, #1
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022aa:	0212      	lsls	r2, r2, #8
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0552      	lsls	r2, r2, #21
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022be:	0852      	lsrs	r2, r2, #1
 80022c0:	3a01      	subs	r2, #1
 80022c2:	0652      	lsls	r2, r2, #25
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80022ca:	06d2      	lsls	r2, r2, #27
 80022cc:	430a      	orrs	r2, r1
 80022ce:	4943      	ldr	r1, [pc, #268]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b41      	ldr	r3, [pc, #260]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a40      	ldr	r2, [pc, #256]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022e0:	4b3e      	ldr	r3, [pc, #248]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	4a3d      	ldr	r2, [pc, #244]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 80022e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ec:	f7fe fbe6 	bl	8000abc <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe fbe2 	bl	8000abc <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e066      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002306:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x530>
 8002312:	e05e      	b.n	80023d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b31      	ldr	r3, [pc, #196]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a30      	ldr	r2, [pc, #192]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fbcc 	bl	8000abc <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe fbc8 	bl	8000abc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e04c      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233a:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	4924      	ldr	r1, [pc, #144]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 800234c:	4b25      	ldr	r3, [pc, #148]	@ (80023e4 <HAL_RCC_OscConfig+0x620>)
 800234e:	4013      	ands	r3, r2
 8002350:	60cb      	str	r3, [r1, #12]
 8002352:	e03e      	b.n	80023d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d101      	bne.n	8002360 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e039      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002360:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_RCC_OscConfig+0x618>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	429a      	cmp	r2, r3
 8002372:	d12c      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	3b01      	subs	r3, #1
 8002380:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d123      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d11b      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d113      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	3b01      	subs	r3, #1
 80023c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d001      	beq.n	80023d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40021000 	.word	0x40021000
 80023e0:	019f800c 	.word	0x019f800c
 80023e4:	feeefffc 	.word	0xfeeefffc

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e11e      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b91      	ldr	r3, [pc, #580]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d910      	bls.n	8002430 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b8e      	ldr	r3, [pc, #568]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 020f 	bic.w	r2, r3, #15
 8002416:	498c      	ldr	r1, [pc, #560]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	4b8a      	ldr	r3, [pc, #552]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d001      	beq.n	8002430 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e106      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d073      	beq.n	8002524 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d129      	bne.n	8002498 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002444:	4b81      	ldr	r3, [pc, #516]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0f4      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002454:	f000 f966 	bl	8002724 <RCC_GetSysClockFreqFromPLLSource>
 8002458:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4a7c      	ldr	r2, [pc, #496]	@ (8002650 <HAL_RCC_ClockConfig+0x268>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d93f      	bls.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002462:	4b7a      	ldr	r3, [pc, #488]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002476:	2b00      	cmp	r3, #0
 8002478:	d033      	beq.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12f      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002482:	4b72      	ldr	r3, [pc, #456]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800248a:	4a70      	ldr	r2, [pc, #448]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800248c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002490:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e024      	b.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d107      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	4b6a      	ldr	r3, [pc, #424]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0c6      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b0:	4b66      	ldr	r3, [pc, #408]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0be      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80024c0:	f000 f8ce 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4a61      	ldr	r2, [pc, #388]	@ (8002650 <HAL_RCC_ClockConfig+0x268>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d909      	bls.n	80024e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ce:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d6:	4a5d      	ldr	r2, [pc, #372]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80024de:	2380      	movs	r3, #128	@ 0x80
 80024e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b5a      	ldr	r3, [pc, #360]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4957      	ldr	r1, [pc, #348]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fae2 	bl	8000abc <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fade 	bl	8000abc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e095      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d023      	beq.n	8002578 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d005      	beq.n	8002548 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800253c:	4b43      	ldr	r3, [pc, #268]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a42      	ldr	r2, [pc, #264]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002542:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002546:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d007      	beq.n	8002564 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002554:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800255c:	4a3b      	ldr	r2, [pc, #236]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800255e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002562:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002564:	4b39      	ldr	r3, [pc, #228]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	4936      	ldr	r1, [pc, #216]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
 8002576:	e008      	b.n	800258a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d105      	bne.n	800258a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800257e:	4b33      	ldr	r3, [pc, #204]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	4a32      	ldr	r2, [pc, #200]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002584:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002588:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258a:	4b2f      	ldr	r3, [pc, #188]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d21d      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002598:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 020f 	bic.w	r2, r3, #15
 80025a0:	4929      	ldr	r1, [pc, #164]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a8:	f7fe fa88 	bl	8000abc <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b0:	f7fe fa84 	bl	8000abc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e03b      	b.n	800263e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	@ (8002648 <HAL_RCC_ClockConfig+0x260>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d1ed      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4917      	ldr	r1, [pc, #92]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490f      	ldr	r1, [pc, #60]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002612:	f000 f825 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_ClockConfig+0x264>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490c      	ldr	r1, [pc, #48]	@ (8002654 <HAL_RCC_ClockConfig+0x26c>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_RCC_ClockConfig+0x270>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002632:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_RCC_ClockConfig+0x274>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f9f4 	bl	8000a24 <HAL_InitTick>
 800263c:	4603      	mov	r3, r0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	04c4b400 	.word	0x04c4b400
 8002654:	08004634 	.word	0x08004634
 8002658:	20000000 	.word	0x20000000
 800265c:	20000004 	.word	0x20000004

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
 800266e:	2b04      	cmp	r3, #4
 8002670:	d102      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002672:	4b2a      	ldr	r3, [pc, #168]	@ (800271c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e047      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d102      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b26      	ldr	r3, [pc, #152]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	e03e      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d136      	bne.n	8002704 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	3301      	adds	r3, #1
 80026ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	4a16      	ldr	r2, [pc, #88]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026be:	68d2      	ldr	r2, [r2, #12]
 80026c0:	0a12      	lsrs	r2, r2, #8
 80026c2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	617b      	str	r3, [r7, #20]
      break;
 80026cc:	e00c      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ce:	4a13      	ldr	r2, [pc, #76]	@ (800271c <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	0a12      	lsrs	r2, r2, #8
 80026dc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026e0:	fb02 f303 	mul.w	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
      break;
 80026e6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002718 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0e5b      	lsrs	r3, r3, #25
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	3301      	adds	r3, #1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	e001      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002708:	693b      	ldr	r3, [r7, #16]
}
 800270a:	4618      	mov	r0, r3
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800272a:	4b1e      	ldr	r3, [pc, #120]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002734:	4b1b      	ldr	r3, [pc, #108]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3301      	adds	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d10c      	bne.n	8002762 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002748:	4a17      	ldr	r2, [pc, #92]	@ (80027a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002750:	4a14      	ldr	r2, [pc, #80]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002752:	68d2      	ldr	r2, [r2, #12]
 8002754:	0a12      	lsrs	r2, r2, #8
 8002756:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	617b      	str	r3, [r7, #20]
    break;
 8002760:	e00c      	b.n	800277c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002762:	4a12      	ldr	r2, [pc, #72]	@ (80027ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4a0e      	ldr	r2, [pc, #56]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800276c:	68d2      	ldr	r2, [r2, #12]
 800276e:	0a12      	lsrs	r2, r2, #8
 8002770:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    break;
 800277a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800277c:	4b09      	ldr	r3, [pc, #36]	@ (80027a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	0e5b      	lsrs	r3, r3, #25
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	3301      	adds	r3, #1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002796:	687b      	ldr	r3, [r7, #4]
}
 8002798:	4618      	mov	r0, r3
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40021000 	.word	0x40021000
 80027a8:	007a1200 	.word	0x007a1200
 80027ac:	00f42400 	.word	0x00f42400

080027b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027b8:	2300      	movs	r3, #0
 80027ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027bc:	2300      	movs	r3, #0
 80027be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	f000 8098 	beq.w	80028fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d2:	4b43      	ldr	r3, [pc, #268]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10d      	bne.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b40      	ldr	r3, [pc, #256]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	4a3f      	ldr	r2, [pc, #252]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ea:	4b3d      	ldr	r3, [pc, #244]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f6:	2301      	movs	r3, #1
 80027f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027fa:	4b3a      	ldr	r3, [pc, #232]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a39      	ldr	r2, [pc, #228]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002804:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002806:	f7fe f959 	bl	8000abc <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800280c:	e009      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7fe f955 	bl	8000abc <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d902      	bls.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	74fb      	strb	r3, [r7, #19]
        break;
 8002820:	e005      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002822:	4b30      	ldr	r3, [pc, #192]	@ (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ef      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800282e:	7cfb      	ldrb	r3, [r7, #19]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d159      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002834:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800283a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800283e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01e      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	429a      	cmp	r2, r3
 800284e:	d019      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002850:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002852:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800285a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800286c:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	4a1b      	ldr	r2, [pc, #108]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002874:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800287c:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d016      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7fe f915 	bl	8000abc <HAL_GetTick>
 8002892:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002894:	e00b      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002896:	f7fe f911 	bl	8000abc <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d902      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	74fb      	strb	r3, [r7, #19]
            break;
 80028ac:	e006      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ec      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028c2:	4b07      	ldr	r3, [pc, #28]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	4903      	ldr	r1, [pc, #12]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028d8:	e008      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	74bb      	strb	r3, [r7, #18]
 80028de:	e005      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028e0:	40021000 	.word	0x40021000
 80028e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e8:	7cfb      	ldrb	r3, [r7, #19]
 80028ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028ec:	7c7b      	ldrb	r3, [r7, #17]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4ba6      	ldr	r3, [pc, #664]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	4aa5      	ldr	r2, [pc, #660]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800290a:	4ba0      	ldr	r3, [pc, #640]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002910:	f023 0203 	bic.w	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	499c      	ldr	r1, [pc, #624]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800292c:	4b97      	ldr	r3, [pc, #604]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002932:	f023 020c 	bic.w	r2, r3, #12
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4994      	ldr	r1, [pc, #592]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800294e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002954:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	498b      	ldr	r1, [pc, #556]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002970:	4b86      	ldr	r3, [pc, #536]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	4983      	ldr	r1, [pc, #524]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0320 	and.w	r3, r3, #32
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002992:	4b7e      	ldr	r3, [pc, #504]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002998:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	497a      	ldr	r1, [pc, #488]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029b4:	4b75      	ldr	r3, [pc, #468]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	4972      	ldr	r1, [pc, #456]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029dc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4969      	ldr	r1, [pc, #420]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00a      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f8:	4b64      	ldr	r3, [pc, #400]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4961      	ldr	r1, [pc, #388]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a20:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	4958      	ldr	r1, [pc, #352]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a3c:	4b53      	ldr	r3, [pc, #332]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	4950      	ldr	r1, [pc, #320]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a5c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	4a4a      	ldr	r2, [pc, #296]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a66:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a74:	4b45      	ldr	r3, [pc, #276]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	4942      	ldr	r1, [pc, #264]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a94:	4b3d      	ldr	r3, [pc, #244]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a3c      	ldr	r2, [pc, #240]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a9e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002aac:	4b37      	ldr	r3, [pc, #220]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4934      	ldr	r1, [pc, #208]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002acc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ad6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ae4:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af2:	4926      	ldr	r1, [pc, #152]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a20      	ldr	r2, [pc, #128]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d015      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b2a:	4918      	ldr	r1, [pc, #96]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b3a:	d105      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b3c:	4b13      	ldr	r3, [pc, #76]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b62:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b72:	d105      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e049      	b.n	8002c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d106      	bne.n	8002bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd fdac 	bl	8000714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3304      	adds	r3, #4
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	f000 fb12 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e04a      	b.n	8002cee <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a21      	ldr	r2, [pc, #132]	@ (8002cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c82:	d013      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a1c      	ldr	r2, [pc, #112]	@ (8002d04 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002d08 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d115      	bne.n	8002cd8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <HAL_TIM_Base_Start_IT+0xd0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d015      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0xaa>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc4:	d011      	beq.n	8002cea <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f042 0201 	orr.w	r2, r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cd6:	e008      	b.n	8002cea <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e000      	b.n	8002cec <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00
 8002d00:	40000400 	.word	0x40000400
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40013400 	.word	0x40013400
 8002d0c:	40014000 	.word	0x40014000
 8002d10:	00010007 	.word	0x00010007

08002d14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d020      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f06f 0202 	mvn.w	r2, #2
 8002d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa2c 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002d64:	e005      	b.n	8002d72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa1e 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fa2f 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d020      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0204 	mvn.w	r2, #4
 8002d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fa06 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002db0:	e005      	b.n	8002dbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 f9f8 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fa09 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d020      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0208 	mvn.w	r2, #8
 8002de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2204      	movs	r2, #4
 8002de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9e0 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002dfc:	e005      	b.n	8002e0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f9d2 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f9e3 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0310 	and.w	r3, r3, #16
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d020      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f06f 0210 	mvn.w	r2, #16
 8002e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2208      	movs	r2, #8
 8002e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 f9ba 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9ac 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f9bd 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00c      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fb40 	bl	8000500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d104      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb69 	bl	8003580 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d007      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fb61 	bl	8003594 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f977 	bl	80031e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00c      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0220 	mvn.w	r2, #32
 8002f12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb29 	bl	800356c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00c      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8002f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fb35 	bl	80035a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00c      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8002f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fb2d 	bl	80035bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00c      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb25 	bl	80035d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00c      	beq.n	8002faa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb1d 	bl	80035e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e0de      	b.n	800318e <HAL_TIM_ConfigClockSource+0x1da>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8002fee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a63      	ldr	r2, [pc, #396]	@ (8003198 <HAL_TIM_ConfigClockSource+0x1e4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	f000 80a9 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003010:	4a61      	ldr	r2, [pc, #388]	@ (8003198 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	f200 80ae 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003018:	4a60      	ldr	r2, [pc, #384]	@ (800319c <HAL_TIM_ConfigClockSource+0x1e8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	f000 80a1 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003020:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_TIM_ConfigClockSource+0x1e8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f200 80a6 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003028:	4a5d      	ldr	r2, [pc, #372]	@ (80031a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800302a:	4293      	cmp	r3, r2
 800302c:	f000 8099 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003030:	4a5b      	ldr	r2, [pc, #364]	@ (80031a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003032:	4293      	cmp	r3, r2
 8003034:	f200 809e 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003038:	4a5a      	ldr	r2, [pc, #360]	@ (80031a4 <HAL_TIM_ConfigClockSource+0x1f0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	f000 8091 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003040:	4a58      	ldr	r2, [pc, #352]	@ (80031a4 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	f200 8096 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003048:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800304c:	f000 8089 	beq.w	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003050:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003054:	f200 808e 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800305c:	d03e      	beq.n	80030dc <HAL_TIM_ConfigClockSource+0x128>
 800305e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003062:	f200 8087 	bhi.w	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800306a:	f000 8086 	beq.w	800317a <HAL_TIM_ConfigClockSource+0x1c6>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003072:	d87f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003074:	2b70      	cmp	r3, #112	@ 0x70
 8003076:	d01a      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0xfa>
 8003078:	2b70      	cmp	r3, #112	@ 0x70
 800307a:	d87b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 800307c:	2b60      	cmp	r3, #96	@ 0x60
 800307e:	d050      	beq.n	8003122 <HAL_TIM_ConfigClockSource+0x16e>
 8003080:	2b60      	cmp	r3, #96	@ 0x60
 8003082:	d877      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003084:	2b50      	cmp	r3, #80	@ 0x50
 8003086:	d03c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x14e>
 8003088:	2b50      	cmp	r3, #80	@ 0x50
 800308a:	d873      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 800308c:	2b40      	cmp	r3, #64	@ 0x40
 800308e:	d058      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0x18e>
 8003090:	2b40      	cmp	r3, #64	@ 0x40
 8003092:	d86f      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 8003094:	2b30      	cmp	r3, #48	@ 0x30
 8003096:	d064      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 8003098:	2b30      	cmp	r3, #48	@ 0x30
 800309a:	d86b      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 800309c:	2b20      	cmp	r3, #32
 800309e:	d060      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	d867      	bhi.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05c      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d05a      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x1ae>
 80030ac:	e062      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030be:	f000 f9b3 	bl	8003428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80030d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	609a      	str	r2, [r3, #8]
      break;
 80030da:	e04f      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030ec:	f000 f99c 	bl	8003428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030fe:	609a      	str	r2, [r3, #8]
      break;
 8003100:	e03c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310e:	461a      	mov	r2, r3
 8003110:	f000 f90e 	bl	8003330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2150      	movs	r1, #80	@ 0x50
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f967 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003120:	e02c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312e:	461a      	mov	r2, r3
 8003130:	f000 f92d 	bl	800338e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2160      	movs	r1, #96	@ 0x60
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f957 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003140:	e01c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314e:	461a      	mov	r2, r3
 8003150:	f000 f8ee 	bl	8003330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2140      	movs	r1, #64	@ 0x40
 800315a:	4618      	mov	r0, r3
 800315c:	f000 f947 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003160:	e00c      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4619      	mov	r1, r3
 800316c:	4610      	mov	r0, r2
 800316e:	f000 f93e 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8003172:	e003      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e000      	b.n	800317c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800317a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	00100070 	.word	0x00100070
 800319c:	00100040 	.word	0x00100040
 80031a0:	00100030 	.word	0x00100030
 80031a4:	00100020 	.word	0x00100020

080031a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a42      	ldr	r2, [pc, #264]	@ (8003314 <TIM_Base_SetConfig+0x11c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d00b      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3f      	ldr	r2, [pc, #252]	@ (8003318 <TIM_Base_SetConfig+0x120>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3e      	ldr	r2, [pc, #248]	@ (800331c <TIM_Base_SetConfig+0x124>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <TIM_Base_SetConfig+0x38>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3d      	ldr	r2, [pc, #244]	@ (8003320 <TIM_Base_SetConfig+0x128>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d108      	bne.n	8003242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a33      	ldr	r2, [pc, #204]	@ (8003314 <TIM_Base_SetConfig+0x11c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01b      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003250:	d017      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a30      	ldr	r2, [pc, #192]	@ (8003318 <TIM_Base_SetConfig+0x120>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	@ (800331c <TIM_Base_SetConfig+0x124>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00f      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2e      	ldr	r2, [pc, #184]	@ (8003320 <TIM_Base_SetConfig+0x128>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2d      	ldr	r2, [pc, #180]	@ (8003324 <TIM_Base_SetConfig+0x12c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2c      	ldr	r2, [pc, #176]	@ (8003328 <TIM_Base_SetConfig+0x130>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0x8a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2b      	ldr	r2, [pc, #172]	@ (800332c <TIM_Base_SetConfig+0x134>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a16      	ldr	r2, [pc, #88]	@ (8003314 <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00f      	beq.n	80032e0 <TIM_Base_SetConfig+0xe8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <TIM_Base_SetConfig+0x128>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <TIM_Base_SetConfig+0xe8>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a16      	ldr	r2, [pc, #88]	@ (8003324 <TIM_Base_SetConfig+0x12c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0xe8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a15      	ldr	r2, [pc, #84]	@ (8003328 <TIM_Base_SetConfig+0x130>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0xe8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a14      	ldr	r2, [pc, #80]	@ (800332c <TIM_Base_SetConfig+0x134>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d103      	bne.n	80032e8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d105      	bne.n	8003306 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f023 0201 	bic.w	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	611a      	str	r2, [r3, #16]
  }
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40013400 	.word	0x40013400
 8003324:	40014000 	.word	0x40014000
 8003328:	40014400 	.word	0x40014400
 800332c:	40014800 	.word	0x40014800

08003330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800335a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 030a 	bic.w	r3, r3, #10
 800336c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800338e:	b480      	push	{r7}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	f023 0210 	bic.w	r2, r3, #16
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	031b      	lsls	r3, r3, #12
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80033ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	f043 0307 	orr.w	r3, r3, #7
 8003414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	609a      	str	r2, [r3, #8]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	021a      	lsls	r2, r3, #8
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	431a      	orrs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800347c:	2302      	movs	r3, #2
 800347e:	e065      	b.n	800354c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2202      	movs	r2, #2
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d004      	beq.n	80034b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a2b      	ldr	r2, [pc, #172]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d108      	bne.n	80034c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80034ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d018      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d013      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00e      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d009      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a12      	ldr	r2, [pc, #72]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d004      	beq.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d10c      	bne.n	800353a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003526:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4313      	orrs	r3, r2
 8003530:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40013400 	.word	0x40013400
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40014000 	.word	0x40014000

0800356c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <__sflush_r>:
 80035f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80035fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003600:	0716      	lsls	r6, r2, #28
 8003602:	4605      	mov	r5, r0
 8003604:	460c      	mov	r4, r1
 8003606:	d454      	bmi.n	80036b2 <__sflush_r+0xba>
 8003608:	684b      	ldr	r3, [r1, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	dc02      	bgt.n	8003614 <__sflush_r+0x1c>
 800360e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	dd48      	ble.n	80036a6 <__sflush_r+0xae>
 8003614:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003616:	2e00      	cmp	r6, #0
 8003618:	d045      	beq.n	80036a6 <__sflush_r+0xae>
 800361a:	2300      	movs	r3, #0
 800361c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003620:	682f      	ldr	r7, [r5, #0]
 8003622:	6a21      	ldr	r1, [r4, #32]
 8003624:	602b      	str	r3, [r5, #0]
 8003626:	d030      	beq.n	800368a <__sflush_r+0x92>
 8003628:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	0759      	lsls	r1, r3, #29
 800362e:	d505      	bpl.n	800363c <__sflush_r+0x44>
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	1ad2      	subs	r2, r2, r3
 8003634:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003636:	b10b      	cbz	r3, 800363c <__sflush_r+0x44>
 8003638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800363a:	1ad2      	subs	r2, r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003640:	6a21      	ldr	r1, [r4, #32]
 8003642:	4628      	mov	r0, r5
 8003644:	47b0      	blx	r6
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	d106      	bne.n	800365a <__sflush_r+0x62>
 800364c:	6829      	ldr	r1, [r5, #0]
 800364e:	291d      	cmp	r1, #29
 8003650:	d82b      	bhi.n	80036aa <__sflush_r+0xb2>
 8003652:	4a2a      	ldr	r2, [pc, #168]	@ (80036fc <__sflush_r+0x104>)
 8003654:	410a      	asrs	r2, r1
 8003656:	07d6      	lsls	r6, r2, #31
 8003658:	d427      	bmi.n	80036aa <__sflush_r+0xb2>
 800365a:	2200      	movs	r2, #0
 800365c:	6062      	str	r2, [r4, #4]
 800365e:	04d9      	lsls	r1, r3, #19
 8003660:	6922      	ldr	r2, [r4, #16]
 8003662:	6022      	str	r2, [r4, #0]
 8003664:	d504      	bpl.n	8003670 <__sflush_r+0x78>
 8003666:	1c42      	adds	r2, r0, #1
 8003668:	d101      	bne.n	800366e <__sflush_r+0x76>
 800366a:	682b      	ldr	r3, [r5, #0]
 800366c:	b903      	cbnz	r3, 8003670 <__sflush_r+0x78>
 800366e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003672:	602f      	str	r7, [r5, #0]
 8003674:	b1b9      	cbz	r1, 80036a6 <__sflush_r+0xae>
 8003676:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800367a:	4299      	cmp	r1, r3
 800367c:	d002      	beq.n	8003684 <__sflush_r+0x8c>
 800367e:	4628      	mov	r0, r5
 8003680:	f000 fb00 	bl	8003c84 <_free_r>
 8003684:	2300      	movs	r3, #0
 8003686:	6363      	str	r3, [r4, #52]	@ 0x34
 8003688:	e00d      	b.n	80036a6 <__sflush_r+0xae>
 800368a:	2301      	movs	r3, #1
 800368c:	4628      	mov	r0, r5
 800368e:	47b0      	blx	r6
 8003690:	4602      	mov	r2, r0
 8003692:	1c50      	adds	r0, r2, #1
 8003694:	d1c9      	bne.n	800362a <__sflush_r+0x32>
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0c6      	beq.n	800362a <__sflush_r+0x32>
 800369c:	2b1d      	cmp	r3, #29
 800369e:	d001      	beq.n	80036a4 <__sflush_r+0xac>
 80036a0:	2b16      	cmp	r3, #22
 80036a2:	d11e      	bne.n	80036e2 <__sflush_r+0xea>
 80036a4:	602f      	str	r7, [r5, #0]
 80036a6:	2000      	movs	r0, #0
 80036a8:	e022      	b.n	80036f0 <__sflush_r+0xf8>
 80036aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ae:	b21b      	sxth	r3, r3
 80036b0:	e01b      	b.n	80036ea <__sflush_r+0xf2>
 80036b2:	690f      	ldr	r7, [r1, #16]
 80036b4:	2f00      	cmp	r7, #0
 80036b6:	d0f6      	beq.n	80036a6 <__sflush_r+0xae>
 80036b8:	0793      	lsls	r3, r2, #30
 80036ba:	680e      	ldr	r6, [r1, #0]
 80036bc:	bf08      	it	eq
 80036be:	694b      	ldreq	r3, [r1, #20]
 80036c0:	600f      	str	r7, [r1, #0]
 80036c2:	bf18      	it	ne
 80036c4:	2300      	movne	r3, #0
 80036c6:	eba6 0807 	sub.w	r8, r6, r7
 80036ca:	608b      	str	r3, [r1, #8]
 80036cc:	f1b8 0f00 	cmp.w	r8, #0
 80036d0:	dde9      	ble.n	80036a6 <__sflush_r+0xae>
 80036d2:	6a21      	ldr	r1, [r4, #32]
 80036d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80036d6:	4643      	mov	r3, r8
 80036d8:	463a      	mov	r2, r7
 80036da:	4628      	mov	r0, r5
 80036dc:	47b0      	blx	r6
 80036de:	2800      	cmp	r0, #0
 80036e0:	dc08      	bgt.n	80036f4 <__sflush_r+0xfc>
 80036e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ea:	81a3      	strh	r3, [r4, #12]
 80036ec:	f04f 30ff 	mov.w	r0, #4294967295
 80036f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f4:	4407      	add	r7, r0
 80036f6:	eba8 0800 	sub.w	r8, r8, r0
 80036fa:	e7e7      	b.n	80036cc <__sflush_r+0xd4>
 80036fc:	dfbffffe 	.word	0xdfbffffe

08003700 <_fflush_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	690b      	ldr	r3, [r1, #16]
 8003704:	4605      	mov	r5, r0
 8003706:	460c      	mov	r4, r1
 8003708:	b913      	cbnz	r3, 8003710 <_fflush_r+0x10>
 800370a:	2500      	movs	r5, #0
 800370c:	4628      	mov	r0, r5
 800370e:	bd38      	pop	{r3, r4, r5, pc}
 8003710:	b118      	cbz	r0, 800371a <_fflush_r+0x1a>
 8003712:	6a03      	ldr	r3, [r0, #32]
 8003714:	b90b      	cbnz	r3, 800371a <_fflush_r+0x1a>
 8003716:	f000 f8bb 	bl	8003890 <__sinit>
 800371a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f3      	beq.n	800370a <_fflush_r+0xa>
 8003722:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003724:	07d0      	lsls	r0, r2, #31
 8003726:	d404      	bmi.n	8003732 <_fflush_r+0x32>
 8003728:	0599      	lsls	r1, r3, #22
 800372a:	d402      	bmi.n	8003732 <_fflush_r+0x32>
 800372c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800372e:	f000 faa6 	bl	8003c7e <__retarget_lock_acquire_recursive>
 8003732:	4628      	mov	r0, r5
 8003734:	4621      	mov	r1, r4
 8003736:	f7ff ff5f 	bl	80035f8 <__sflush_r>
 800373a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800373c:	07da      	lsls	r2, r3, #31
 800373e:	4605      	mov	r5, r0
 8003740:	d4e4      	bmi.n	800370c <_fflush_r+0xc>
 8003742:	89a3      	ldrh	r3, [r4, #12]
 8003744:	059b      	lsls	r3, r3, #22
 8003746:	d4e1      	bmi.n	800370c <_fflush_r+0xc>
 8003748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800374a:	f000 fa99 	bl	8003c80 <__retarget_lock_release_recursive>
 800374e:	e7dd      	b.n	800370c <_fflush_r+0xc>

08003750 <fflush>:
 8003750:	4601      	mov	r1, r0
 8003752:	b920      	cbnz	r0, 800375e <fflush+0xe>
 8003754:	4a04      	ldr	r2, [pc, #16]	@ (8003768 <fflush+0x18>)
 8003756:	4905      	ldr	r1, [pc, #20]	@ (800376c <fflush+0x1c>)
 8003758:	4805      	ldr	r0, [pc, #20]	@ (8003770 <fflush+0x20>)
 800375a:	f000 b8b1 	b.w	80038c0 <_fwalk_sglue>
 800375e:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <fflush+0x24>)
 8003760:	6818      	ldr	r0, [r3, #0]
 8003762:	f7ff bfcd 	b.w	8003700 <_fflush_r>
 8003766:	bf00      	nop
 8003768:	2000000c 	.word	0x2000000c
 800376c:	08003701 	.word	0x08003701
 8003770:	2000001c 	.word	0x2000001c
 8003774:	20000018 	.word	0x20000018

08003778 <std>:
 8003778:	2300      	movs	r3, #0
 800377a:	b510      	push	{r4, lr}
 800377c:	4604      	mov	r4, r0
 800377e:	e9c0 3300 	strd	r3, r3, [r0]
 8003782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003786:	6083      	str	r3, [r0, #8]
 8003788:	8181      	strh	r1, [r0, #12]
 800378a:	6643      	str	r3, [r0, #100]	@ 0x64
 800378c:	81c2      	strh	r2, [r0, #14]
 800378e:	6183      	str	r3, [r0, #24]
 8003790:	4619      	mov	r1, r3
 8003792:	2208      	movs	r2, #8
 8003794:	305c      	adds	r0, #92	@ 0x5c
 8003796:	f000 f9f9 	bl	8003b8c <memset>
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <std+0x58>)
 800379c:	6263      	str	r3, [r4, #36]	@ 0x24
 800379e:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <std+0x5c>)
 80037a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037a2:	4b0d      	ldr	r3, [pc, #52]	@ (80037d8 <std+0x60>)
 80037a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037a6:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <std+0x64>)
 80037a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80037aa:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <std+0x68>)
 80037ac:	6224      	str	r4, [r4, #32]
 80037ae:	429c      	cmp	r4, r3
 80037b0:	d006      	beq.n	80037c0 <std+0x48>
 80037b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037b6:	4294      	cmp	r4, r2
 80037b8:	d002      	beq.n	80037c0 <std+0x48>
 80037ba:	33d0      	adds	r3, #208	@ 0xd0
 80037bc:	429c      	cmp	r4, r3
 80037be:	d105      	bne.n	80037cc <std+0x54>
 80037c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c8:	f000 ba58 	b.w	8003c7c <__retarget_lock_init_recursive>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	bf00      	nop
 80037d0:	080039dd 	.word	0x080039dd
 80037d4:	080039ff 	.word	0x080039ff
 80037d8:	08003a37 	.word	0x08003a37
 80037dc:	08003a5b 	.word	0x08003a5b
 80037e0:	2000013c 	.word	0x2000013c

080037e4 <stdio_exit_handler>:
 80037e4:	4a02      	ldr	r2, [pc, #8]	@ (80037f0 <stdio_exit_handler+0xc>)
 80037e6:	4903      	ldr	r1, [pc, #12]	@ (80037f4 <stdio_exit_handler+0x10>)
 80037e8:	4803      	ldr	r0, [pc, #12]	@ (80037f8 <stdio_exit_handler+0x14>)
 80037ea:	f000 b869 	b.w	80038c0 <_fwalk_sglue>
 80037ee:	bf00      	nop
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	08003701 	.word	0x08003701
 80037f8:	2000001c 	.word	0x2000001c

080037fc <cleanup_stdio>:
 80037fc:	6841      	ldr	r1, [r0, #4]
 80037fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003830 <cleanup_stdio+0x34>)
 8003800:	4299      	cmp	r1, r3
 8003802:	b510      	push	{r4, lr}
 8003804:	4604      	mov	r4, r0
 8003806:	d001      	beq.n	800380c <cleanup_stdio+0x10>
 8003808:	f7ff ff7a 	bl	8003700 <_fflush_r>
 800380c:	68a1      	ldr	r1, [r4, #8]
 800380e:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <cleanup_stdio+0x38>)
 8003810:	4299      	cmp	r1, r3
 8003812:	d002      	beq.n	800381a <cleanup_stdio+0x1e>
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff ff73 	bl	8003700 <_fflush_r>
 800381a:	68e1      	ldr	r1, [r4, #12]
 800381c:	4b06      	ldr	r3, [pc, #24]	@ (8003838 <cleanup_stdio+0x3c>)
 800381e:	4299      	cmp	r1, r3
 8003820:	d004      	beq.n	800382c <cleanup_stdio+0x30>
 8003822:	4620      	mov	r0, r4
 8003824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003828:	f7ff bf6a 	b.w	8003700 <_fflush_r>
 800382c:	bd10      	pop	{r4, pc}
 800382e:	bf00      	nop
 8003830:	2000013c 	.word	0x2000013c
 8003834:	200001a4 	.word	0x200001a4
 8003838:	2000020c 	.word	0x2000020c

0800383c <global_stdio_init.part.0>:
 800383c:	b510      	push	{r4, lr}
 800383e:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <global_stdio_init.part.0+0x30>)
 8003840:	4c0b      	ldr	r4, [pc, #44]	@ (8003870 <global_stdio_init.part.0+0x34>)
 8003842:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <global_stdio_init.part.0+0x38>)
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	4620      	mov	r0, r4
 8003848:	2200      	movs	r2, #0
 800384a:	2104      	movs	r1, #4
 800384c:	f7ff ff94 	bl	8003778 <std>
 8003850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003854:	2201      	movs	r2, #1
 8003856:	2109      	movs	r1, #9
 8003858:	f7ff ff8e 	bl	8003778 <std>
 800385c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003860:	2202      	movs	r2, #2
 8003862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003866:	2112      	movs	r1, #18
 8003868:	f7ff bf86 	b.w	8003778 <std>
 800386c:	20000274 	.word	0x20000274
 8003870:	2000013c 	.word	0x2000013c
 8003874:	080037e5 	.word	0x080037e5

08003878 <__sfp_lock_acquire>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__sfp_lock_acquire+0x8>)
 800387a:	f000 ba00 	b.w	8003c7e <__retarget_lock_acquire_recursive>
 800387e:	bf00      	nop
 8003880:	2000027d 	.word	0x2000027d

08003884 <__sfp_lock_release>:
 8003884:	4801      	ldr	r0, [pc, #4]	@ (800388c <__sfp_lock_release+0x8>)
 8003886:	f000 b9fb 	b.w	8003c80 <__retarget_lock_release_recursive>
 800388a:	bf00      	nop
 800388c:	2000027d 	.word	0x2000027d

08003890 <__sinit>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4604      	mov	r4, r0
 8003894:	f7ff fff0 	bl	8003878 <__sfp_lock_acquire>
 8003898:	6a23      	ldr	r3, [r4, #32]
 800389a:	b11b      	cbz	r3, 80038a4 <__sinit+0x14>
 800389c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038a0:	f7ff bff0 	b.w	8003884 <__sfp_lock_release>
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <__sinit+0x28>)
 80038a6:	6223      	str	r3, [r4, #32]
 80038a8:	4b04      	ldr	r3, [pc, #16]	@ (80038bc <__sinit+0x2c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1f5      	bne.n	800389c <__sinit+0xc>
 80038b0:	f7ff ffc4 	bl	800383c <global_stdio_init.part.0>
 80038b4:	e7f2      	b.n	800389c <__sinit+0xc>
 80038b6:	bf00      	nop
 80038b8:	080037fd 	.word	0x080037fd
 80038bc:	20000274 	.word	0x20000274

080038c0 <_fwalk_sglue>:
 80038c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c4:	4607      	mov	r7, r0
 80038c6:	4688      	mov	r8, r1
 80038c8:	4614      	mov	r4, r2
 80038ca:	2600      	movs	r6, #0
 80038cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038d0:	f1b9 0901 	subs.w	r9, r9, #1
 80038d4:	d505      	bpl.n	80038e2 <_fwalk_sglue+0x22>
 80038d6:	6824      	ldr	r4, [r4, #0]
 80038d8:	2c00      	cmp	r4, #0
 80038da:	d1f7      	bne.n	80038cc <_fwalk_sglue+0xc>
 80038dc:	4630      	mov	r0, r6
 80038de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e2:	89ab      	ldrh	r3, [r5, #12]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d907      	bls.n	80038f8 <_fwalk_sglue+0x38>
 80038e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038ec:	3301      	adds	r3, #1
 80038ee:	d003      	beq.n	80038f8 <_fwalk_sglue+0x38>
 80038f0:	4629      	mov	r1, r5
 80038f2:	4638      	mov	r0, r7
 80038f4:	47c0      	blx	r8
 80038f6:	4306      	orrs	r6, r0
 80038f8:	3568      	adds	r5, #104	@ 0x68
 80038fa:	e7e9      	b.n	80038d0 <_fwalk_sglue+0x10>

080038fc <iprintf>:
 80038fc:	b40f      	push	{r0, r1, r2, r3}
 80038fe:	b507      	push	{r0, r1, r2, lr}
 8003900:	4906      	ldr	r1, [pc, #24]	@ (800391c <iprintf+0x20>)
 8003902:	ab04      	add	r3, sp, #16
 8003904:	6808      	ldr	r0, [r1, #0]
 8003906:	f853 2b04 	ldr.w	r2, [r3], #4
 800390a:	6881      	ldr	r1, [r0, #8]
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	f000 fadb 	bl	8003ec8 <_vfiprintf_r>
 8003912:	b003      	add	sp, #12
 8003914:	f85d eb04 	ldr.w	lr, [sp], #4
 8003918:	b004      	add	sp, #16
 800391a:	4770      	bx	lr
 800391c:	20000018 	.word	0x20000018

08003920 <_puts_r>:
 8003920:	6a03      	ldr	r3, [r0, #32]
 8003922:	b570      	push	{r4, r5, r6, lr}
 8003924:	6884      	ldr	r4, [r0, #8]
 8003926:	4605      	mov	r5, r0
 8003928:	460e      	mov	r6, r1
 800392a:	b90b      	cbnz	r3, 8003930 <_puts_r+0x10>
 800392c:	f7ff ffb0 	bl	8003890 <__sinit>
 8003930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003932:	07db      	lsls	r3, r3, #31
 8003934:	d405      	bmi.n	8003942 <_puts_r+0x22>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	0598      	lsls	r0, r3, #22
 800393a:	d402      	bmi.n	8003942 <_puts_r+0x22>
 800393c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800393e:	f000 f99e 	bl	8003c7e <__retarget_lock_acquire_recursive>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	0719      	lsls	r1, r3, #28
 8003946:	d502      	bpl.n	800394e <_puts_r+0x2e>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d135      	bne.n	80039ba <_puts_r+0x9a>
 800394e:	4621      	mov	r1, r4
 8003950:	4628      	mov	r0, r5
 8003952:	f000 f8c5 	bl	8003ae0 <__swsetup_r>
 8003956:	b380      	cbz	r0, 80039ba <_puts_r+0x9a>
 8003958:	f04f 35ff 	mov.w	r5, #4294967295
 800395c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800395e:	07da      	lsls	r2, r3, #31
 8003960:	d405      	bmi.n	800396e <_puts_r+0x4e>
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	059b      	lsls	r3, r3, #22
 8003966:	d402      	bmi.n	800396e <_puts_r+0x4e>
 8003968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800396a:	f000 f989 	bl	8003c80 <__retarget_lock_release_recursive>
 800396e:	4628      	mov	r0, r5
 8003970:	bd70      	pop	{r4, r5, r6, pc}
 8003972:	2b00      	cmp	r3, #0
 8003974:	da04      	bge.n	8003980 <_puts_r+0x60>
 8003976:	69a2      	ldr	r2, [r4, #24]
 8003978:	429a      	cmp	r2, r3
 800397a:	dc17      	bgt.n	80039ac <_puts_r+0x8c>
 800397c:	290a      	cmp	r1, #10
 800397e:	d015      	beq.n	80039ac <_puts_r+0x8c>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	6022      	str	r2, [r4, #0]
 8003986:	7019      	strb	r1, [r3, #0]
 8003988:	68a3      	ldr	r3, [r4, #8]
 800398a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800398e:	3b01      	subs	r3, #1
 8003990:	60a3      	str	r3, [r4, #8]
 8003992:	2900      	cmp	r1, #0
 8003994:	d1ed      	bne.n	8003972 <_puts_r+0x52>
 8003996:	2b00      	cmp	r3, #0
 8003998:	da11      	bge.n	80039be <_puts_r+0x9e>
 800399a:	4622      	mov	r2, r4
 800399c:	210a      	movs	r1, #10
 800399e:	4628      	mov	r0, r5
 80039a0:	f000 f85f 	bl	8003a62 <__swbuf_r>
 80039a4:	3001      	adds	r0, #1
 80039a6:	d0d7      	beq.n	8003958 <_puts_r+0x38>
 80039a8:	250a      	movs	r5, #10
 80039aa:	e7d7      	b.n	800395c <_puts_r+0x3c>
 80039ac:	4622      	mov	r2, r4
 80039ae:	4628      	mov	r0, r5
 80039b0:	f000 f857 	bl	8003a62 <__swbuf_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d1e7      	bne.n	8003988 <_puts_r+0x68>
 80039b8:	e7ce      	b.n	8003958 <_puts_r+0x38>
 80039ba:	3e01      	subs	r6, #1
 80039bc:	e7e4      	b.n	8003988 <_puts_r+0x68>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	6022      	str	r2, [r4, #0]
 80039c4:	220a      	movs	r2, #10
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e7ee      	b.n	80039a8 <_puts_r+0x88>
	...

080039cc <puts>:
 80039cc:	4b02      	ldr	r3, [pc, #8]	@ (80039d8 <puts+0xc>)
 80039ce:	4601      	mov	r1, r0
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	f7ff bfa5 	b.w	8003920 <_puts_r>
 80039d6:	bf00      	nop
 80039d8:	20000018 	.word	0x20000018

080039dc <__sread>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	460c      	mov	r4, r1
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	f000 f8fc 	bl	8003be0 <_read_r>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	bfab      	itete	ge
 80039ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039ee:	89a3      	ldrhlt	r3, [r4, #12]
 80039f0:	181b      	addge	r3, r3, r0
 80039f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039f6:	bfac      	ite	ge
 80039f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039fa:	81a3      	strhlt	r3, [r4, #12]
 80039fc:	bd10      	pop	{r4, pc}

080039fe <__swrite>:
 80039fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	461f      	mov	r7, r3
 8003a04:	898b      	ldrh	r3, [r1, #12]
 8003a06:	05db      	lsls	r3, r3, #23
 8003a08:	4605      	mov	r5, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	d505      	bpl.n	8003a1c <__swrite+0x1e>
 8003a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a14:	2302      	movs	r3, #2
 8003a16:	2200      	movs	r2, #0
 8003a18:	f000 f8d0 	bl	8003bbc <_lseek_r>
 8003a1c:	89a3      	ldrh	r3, [r4, #12]
 8003a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a26:	81a3      	strh	r3, [r4, #12]
 8003a28:	4632      	mov	r2, r6
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f000 b8e7 	b.w	8003c04 <_write_r>

08003a36 <__sseek>:
 8003a36:	b510      	push	{r4, lr}
 8003a38:	460c      	mov	r4, r1
 8003a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3e:	f000 f8bd 	bl	8003bbc <_lseek_r>
 8003a42:	1c43      	adds	r3, r0, #1
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	bf15      	itete	ne
 8003a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a52:	81a3      	strheq	r3, [r4, #12]
 8003a54:	bf18      	it	ne
 8003a56:	81a3      	strhne	r3, [r4, #12]
 8003a58:	bd10      	pop	{r4, pc}

08003a5a <__sclose>:
 8003a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a5e:	f000 b89d 	b.w	8003b9c <_close_r>

08003a62 <__swbuf_r>:
 8003a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a64:	460e      	mov	r6, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	4605      	mov	r5, r0
 8003a6a:	b118      	cbz	r0, 8003a74 <__swbuf_r+0x12>
 8003a6c:	6a03      	ldr	r3, [r0, #32]
 8003a6e:	b90b      	cbnz	r3, 8003a74 <__swbuf_r+0x12>
 8003a70:	f7ff ff0e 	bl	8003890 <__sinit>
 8003a74:	69a3      	ldr	r3, [r4, #24]
 8003a76:	60a3      	str	r3, [r4, #8]
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	071a      	lsls	r2, r3, #28
 8003a7c:	d501      	bpl.n	8003a82 <__swbuf_r+0x20>
 8003a7e:	6923      	ldr	r3, [r4, #16]
 8003a80:	b943      	cbnz	r3, 8003a94 <__swbuf_r+0x32>
 8003a82:	4621      	mov	r1, r4
 8003a84:	4628      	mov	r0, r5
 8003a86:	f000 f82b 	bl	8003ae0 <__swsetup_r>
 8003a8a:	b118      	cbz	r0, 8003a94 <__swbuf_r+0x32>
 8003a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003a90:	4638      	mov	r0, r7
 8003a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	6922      	ldr	r2, [r4, #16]
 8003a98:	1a98      	subs	r0, r3, r2
 8003a9a:	6963      	ldr	r3, [r4, #20]
 8003a9c:	b2f6      	uxtb	r6, r6
 8003a9e:	4283      	cmp	r3, r0
 8003aa0:	4637      	mov	r7, r6
 8003aa2:	dc05      	bgt.n	8003ab0 <__swbuf_r+0x4e>
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f7ff fe2a 	bl	8003700 <_fflush_r>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d1ed      	bne.n	8003a8c <__swbuf_r+0x2a>
 8003ab0:	68a3      	ldr	r3, [r4, #8]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	60a3      	str	r3, [r4, #8]
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	6022      	str	r2, [r4, #0]
 8003abc:	701e      	strb	r6, [r3, #0]
 8003abe:	6962      	ldr	r2, [r4, #20]
 8003ac0:	1c43      	adds	r3, r0, #1
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d004      	beq.n	8003ad0 <__swbuf_r+0x6e>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	07db      	lsls	r3, r3, #31
 8003aca:	d5e1      	bpl.n	8003a90 <__swbuf_r+0x2e>
 8003acc:	2e0a      	cmp	r6, #10
 8003ace:	d1df      	bne.n	8003a90 <__swbuf_r+0x2e>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7ff fe14 	bl	8003700 <_fflush_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d0d9      	beq.n	8003a90 <__swbuf_r+0x2e>
 8003adc:	e7d6      	b.n	8003a8c <__swbuf_r+0x2a>
	...

08003ae0 <__swsetup_r>:
 8003ae0:	b538      	push	{r3, r4, r5, lr}
 8003ae2:	4b29      	ldr	r3, [pc, #164]	@ (8003b88 <__swsetup_r+0xa8>)
 8003ae4:	4605      	mov	r5, r0
 8003ae6:	6818      	ldr	r0, [r3, #0]
 8003ae8:	460c      	mov	r4, r1
 8003aea:	b118      	cbz	r0, 8003af4 <__swsetup_r+0x14>
 8003aec:	6a03      	ldr	r3, [r0, #32]
 8003aee:	b90b      	cbnz	r3, 8003af4 <__swsetup_r+0x14>
 8003af0:	f7ff fece 	bl	8003890 <__sinit>
 8003af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003af8:	0719      	lsls	r1, r3, #28
 8003afa:	d422      	bmi.n	8003b42 <__swsetup_r+0x62>
 8003afc:	06da      	lsls	r2, r3, #27
 8003afe:	d407      	bmi.n	8003b10 <__swsetup_r+0x30>
 8003b00:	2209      	movs	r2, #9
 8003b02:	602a      	str	r2, [r5, #0]
 8003b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b08:	81a3      	strh	r3, [r4, #12]
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	e033      	b.n	8003b78 <__swsetup_r+0x98>
 8003b10:	0758      	lsls	r0, r3, #29
 8003b12:	d512      	bpl.n	8003b3a <__swsetup_r+0x5a>
 8003b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b16:	b141      	cbz	r1, 8003b2a <__swsetup_r+0x4a>
 8003b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b1c:	4299      	cmp	r1, r3
 8003b1e:	d002      	beq.n	8003b26 <__swsetup_r+0x46>
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f8af 	bl	8003c84 <_free_r>
 8003b26:	2300      	movs	r3, #0
 8003b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	2300      	movs	r3, #0
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f043 0308 	orr.w	r3, r3, #8
 8003b40:	81a3      	strh	r3, [r4, #12]
 8003b42:	6923      	ldr	r3, [r4, #16]
 8003b44:	b94b      	cbnz	r3, 8003b5a <__swsetup_r+0x7a>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b50:	d003      	beq.n	8003b5a <__swsetup_r+0x7a>
 8003b52:	4621      	mov	r1, r4
 8003b54:	4628      	mov	r0, r5
 8003b56:	f000 fc83 	bl	8004460 <__smakebuf_r>
 8003b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b5e:	f013 0201 	ands.w	r2, r3, #1
 8003b62:	d00a      	beq.n	8003b7a <__swsetup_r+0x9a>
 8003b64:	2200      	movs	r2, #0
 8003b66:	60a2      	str	r2, [r4, #8]
 8003b68:	6962      	ldr	r2, [r4, #20]
 8003b6a:	4252      	negs	r2, r2
 8003b6c:	61a2      	str	r2, [r4, #24]
 8003b6e:	6922      	ldr	r2, [r4, #16]
 8003b70:	b942      	cbnz	r2, 8003b84 <__swsetup_r+0xa4>
 8003b72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b76:	d1c5      	bne.n	8003b04 <__swsetup_r+0x24>
 8003b78:	bd38      	pop	{r3, r4, r5, pc}
 8003b7a:	0799      	lsls	r1, r3, #30
 8003b7c:	bf58      	it	pl
 8003b7e:	6962      	ldrpl	r2, [r4, #20]
 8003b80:	60a2      	str	r2, [r4, #8]
 8003b82:	e7f4      	b.n	8003b6e <__swsetup_r+0x8e>
 8003b84:	2000      	movs	r0, #0
 8003b86:	e7f7      	b.n	8003b78 <__swsetup_r+0x98>
 8003b88:	20000018 	.word	0x20000018

08003b8c <memset>:
 8003b8c:	4402      	add	r2, r0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d100      	bne.n	8003b96 <memset+0xa>
 8003b94:	4770      	bx	lr
 8003b96:	f803 1b01 	strb.w	r1, [r3], #1
 8003b9a:	e7f9      	b.n	8003b90 <memset+0x4>

08003b9c <_close_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4d06      	ldr	r5, [pc, #24]	@ (8003bb8 <_close_r+0x1c>)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	f7fc fe7d 	bl	80008a6 <_close>
 8003bac:	1c43      	adds	r3, r0, #1
 8003bae:	d102      	bne.n	8003bb6 <_close_r+0x1a>
 8003bb0:	682b      	ldr	r3, [r5, #0]
 8003bb2:	b103      	cbz	r3, 8003bb6 <_close_r+0x1a>
 8003bb4:	6023      	str	r3, [r4, #0]
 8003bb6:	bd38      	pop	{r3, r4, r5, pc}
 8003bb8:	20000278 	.word	0x20000278

08003bbc <_lseek_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4d07      	ldr	r5, [pc, #28]	@ (8003bdc <_lseek_r+0x20>)
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	4608      	mov	r0, r1
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	602a      	str	r2, [r5, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f7fc fe92 	bl	80008f4 <_lseek>
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d102      	bne.n	8003bda <_lseek_r+0x1e>
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	b103      	cbz	r3, 8003bda <_lseek_r+0x1e>
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	bd38      	pop	{r3, r4, r5, pc}
 8003bdc:	20000278 	.word	0x20000278

08003be0 <_read_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d07      	ldr	r5, [pc, #28]	@ (8003c00 <_read_r+0x20>)
 8003be4:	4604      	mov	r4, r0
 8003be6:	4608      	mov	r0, r1
 8003be8:	4611      	mov	r1, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	602a      	str	r2, [r5, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f7fc fe20 	bl	8000834 <_read>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_read_r+0x1e>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_read_r+0x1e>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000278 	.word	0x20000278

08003c04 <_write_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	4d07      	ldr	r5, [pc, #28]	@ (8003c24 <_write_r+0x20>)
 8003c08:	4604      	mov	r4, r0
 8003c0a:	4608      	mov	r0, r1
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	2200      	movs	r2, #0
 8003c10:	602a      	str	r2, [r5, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f7fc fe2b 	bl	800086e <_write>
 8003c18:	1c43      	adds	r3, r0, #1
 8003c1a:	d102      	bne.n	8003c22 <_write_r+0x1e>
 8003c1c:	682b      	ldr	r3, [r5, #0]
 8003c1e:	b103      	cbz	r3, 8003c22 <_write_r+0x1e>
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	bd38      	pop	{r3, r4, r5, pc}
 8003c24:	20000278 	.word	0x20000278

08003c28 <__errno>:
 8003c28:	4b01      	ldr	r3, [pc, #4]	@ (8003c30 <__errno+0x8>)
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20000018 	.word	0x20000018

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	@ (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	@ (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	@ (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	@ (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 fc78 	bl	800453c <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08004690 	.word	0x08004690
 8003c70:	08004690 	.word	0x08004690
 8003c74:	08004690 	.word	0x08004690
 8003c78:	08004694 	.word	0x08004694

08003c7c <__retarget_lock_init_recursive>:
 8003c7c:	4770      	bx	lr

08003c7e <__retarget_lock_acquire_recursive>:
 8003c7e:	4770      	bx	lr

08003c80 <__retarget_lock_release_recursive>:
 8003c80:	4770      	bx	lr
	...

08003c84 <_free_r>:
 8003c84:	b538      	push	{r3, r4, r5, lr}
 8003c86:	4605      	mov	r5, r0
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	d041      	beq.n	8003d10 <_free_r+0x8c>
 8003c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c90:	1f0c      	subs	r4, r1, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	bfb8      	it	lt
 8003c96:	18e4      	addlt	r4, r4, r3
 8003c98:	f000 f8e0 	bl	8003e5c <__malloc_lock>
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <_free_r+0x90>)
 8003c9e:	6813      	ldr	r3, [r2, #0]
 8003ca0:	b933      	cbnz	r3, 8003cb0 <_free_r+0x2c>
 8003ca2:	6063      	str	r3, [r4, #4]
 8003ca4:	6014      	str	r4, [r2, #0]
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cac:	f000 b8dc 	b.w	8003e68 <__malloc_unlock>
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	d908      	bls.n	8003cc6 <_free_r+0x42>
 8003cb4:	6820      	ldr	r0, [r4, #0]
 8003cb6:	1821      	adds	r1, r4, r0
 8003cb8:	428b      	cmp	r3, r1
 8003cba:	bf01      	itttt	eq
 8003cbc:	6819      	ldreq	r1, [r3, #0]
 8003cbe:	685b      	ldreq	r3, [r3, #4]
 8003cc0:	1809      	addeq	r1, r1, r0
 8003cc2:	6021      	streq	r1, [r4, #0]
 8003cc4:	e7ed      	b.n	8003ca2 <_free_r+0x1e>
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	b10b      	cbz	r3, 8003cd0 <_free_r+0x4c>
 8003ccc:	42a3      	cmp	r3, r4
 8003cce:	d9fa      	bls.n	8003cc6 <_free_r+0x42>
 8003cd0:	6811      	ldr	r1, [r2, #0]
 8003cd2:	1850      	adds	r0, r2, r1
 8003cd4:	42a0      	cmp	r0, r4
 8003cd6:	d10b      	bne.n	8003cf0 <_free_r+0x6c>
 8003cd8:	6820      	ldr	r0, [r4, #0]
 8003cda:	4401      	add	r1, r0
 8003cdc:	1850      	adds	r0, r2, r1
 8003cde:	4283      	cmp	r3, r0
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	d1e0      	bne.n	8003ca6 <_free_r+0x22>
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	6053      	str	r3, [r2, #4]
 8003cea:	4408      	add	r0, r1
 8003cec:	6010      	str	r0, [r2, #0]
 8003cee:	e7da      	b.n	8003ca6 <_free_r+0x22>
 8003cf0:	d902      	bls.n	8003cf8 <_free_r+0x74>
 8003cf2:	230c      	movs	r3, #12
 8003cf4:	602b      	str	r3, [r5, #0]
 8003cf6:	e7d6      	b.n	8003ca6 <_free_r+0x22>
 8003cf8:	6820      	ldr	r0, [r4, #0]
 8003cfa:	1821      	adds	r1, r4, r0
 8003cfc:	428b      	cmp	r3, r1
 8003cfe:	bf04      	itt	eq
 8003d00:	6819      	ldreq	r1, [r3, #0]
 8003d02:	685b      	ldreq	r3, [r3, #4]
 8003d04:	6063      	str	r3, [r4, #4]
 8003d06:	bf04      	itt	eq
 8003d08:	1809      	addeq	r1, r1, r0
 8003d0a:	6021      	streq	r1, [r4, #0]
 8003d0c:	6054      	str	r4, [r2, #4]
 8003d0e:	e7ca      	b.n	8003ca6 <_free_r+0x22>
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
 8003d12:	bf00      	nop
 8003d14:	20000284 	.word	0x20000284

08003d18 <sbrk_aligned>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d58 <sbrk_aligned+0x40>)
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	6831      	ldr	r1, [r6, #0]
 8003d20:	4605      	mov	r5, r0
 8003d22:	b911      	cbnz	r1, 8003d2a <sbrk_aligned+0x12>
 8003d24:	f000 fbfa 	bl	800451c <_sbrk_r>
 8003d28:	6030      	str	r0, [r6, #0]
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	4628      	mov	r0, r5
 8003d2e:	f000 fbf5 	bl	800451c <_sbrk_r>
 8003d32:	1c43      	adds	r3, r0, #1
 8003d34:	d103      	bne.n	8003d3e <sbrk_aligned+0x26>
 8003d36:	f04f 34ff 	mov.w	r4, #4294967295
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	bd70      	pop	{r4, r5, r6, pc}
 8003d3e:	1cc4      	adds	r4, r0, #3
 8003d40:	f024 0403 	bic.w	r4, r4, #3
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	d0f8      	beq.n	8003d3a <sbrk_aligned+0x22>
 8003d48:	1a21      	subs	r1, r4, r0
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f000 fbe6 	bl	800451c <_sbrk_r>
 8003d50:	3001      	adds	r0, #1
 8003d52:	d1f2      	bne.n	8003d3a <sbrk_aligned+0x22>
 8003d54:	e7ef      	b.n	8003d36 <sbrk_aligned+0x1e>
 8003d56:	bf00      	nop
 8003d58:	20000280 	.word	0x20000280

08003d5c <_malloc_r>:
 8003d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d60:	1ccd      	adds	r5, r1, #3
 8003d62:	f025 0503 	bic.w	r5, r5, #3
 8003d66:	3508      	adds	r5, #8
 8003d68:	2d0c      	cmp	r5, #12
 8003d6a:	bf38      	it	cc
 8003d6c:	250c      	movcc	r5, #12
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	4606      	mov	r6, r0
 8003d72:	db01      	blt.n	8003d78 <_malloc_r+0x1c>
 8003d74:	42a9      	cmp	r1, r5
 8003d76:	d904      	bls.n	8003d82 <_malloc_r+0x26>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	6033      	str	r3, [r6, #0]
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e58 <_malloc_r+0xfc>
 8003d86:	f000 f869 	bl	8003e5c <__malloc_lock>
 8003d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d8e:	461c      	mov	r4, r3
 8003d90:	bb44      	cbnz	r4, 8003de4 <_malloc_r+0x88>
 8003d92:	4629      	mov	r1, r5
 8003d94:	4630      	mov	r0, r6
 8003d96:	f7ff ffbf 	bl	8003d18 <sbrk_aligned>
 8003d9a:	1c43      	adds	r3, r0, #1
 8003d9c:	4604      	mov	r4, r0
 8003d9e:	d158      	bne.n	8003e52 <_malloc_r+0xf6>
 8003da0:	f8d8 4000 	ldr.w	r4, [r8]
 8003da4:	4627      	mov	r7, r4
 8003da6:	2f00      	cmp	r7, #0
 8003da8:	d143      	bne.n	8003e32 <_malloc_r+0xd6>
 8003daa:	2c00      	cmp	r4, #0
 8003dac:	d04b      	beq.n	8003e46 <_malloc_r+0xea>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	4639      	mov	r1, r7
 8003db2:	4630      	mov	r0, r6
 8003db4:	eb04 0903 	add.w	r9, r4, r3
 8003db8:	f000 fbb0 	bl	800451c <_sbrk_r>
 8003dbc:	4581      	cmp	r9, r0
 8003dbe:	d142      	bne.n	8003e46 <_malloc_r+0xea>
 8003dc0:	6821      	ldr	r1, [r4, #0]
 8003dc2:	1a6d      	subs	r5, r5, r1
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7ff ffa6 	bl	8003d18 <sbrk_aligned>
 8003dcc:	3001      	adds	r0, #1
 8003dce:	d03a      	beq.n	8003e46 <_malloc_r+0xea>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	442b      	add	r3, r5
 8003dd4:	6023      	str	r3, [r4, #0]
 8003dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	bb62      	cbnz	r2, 8003e38 <_malloc_r+0xdc>
 8003dde:	f8c8 7000 	str.w	r7, [r8]
 8003de2:	e00f      	b.n	8003e04 <_malloc_r+0xa8>
 8003de4:	6822      	ldr	r2, [r4, #0]
 8003de6:	1b52      	subs	r2, r2, r5
 8003de8:	d420      	bmi.n	8003e2c <_malloc_r+0xd0>
 8003dea:	2a0b      	cmp	r2, #11
 8003dec:	d917      	bls.n	8003e1e <_malloc_r+0xc2>
 8003dee:	1961      	adds	r1, r4, r5
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	6025      	str	r5, [r4, #0]
 8003df4:	bf18      	it	ne
 8003df6:	6059      	strne	r1, [r3, #4]
 8003df8:	6863      	ldr	r3, [r4, #4]
 8003dfa:	bf08      	it	eq
 8003dfc:	f8c8 1000 	streq.w	r1, [r8]
 8003e00:	5162      	str	r2, [r4, r5]
 8003e02:	604b      	str	r3, [r1, #4]
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 f82f 	bl	8003e68 <__malloc_unlock>
 8003e0a:	f104 000b 	add.w	r0, r4, #11
 8003e0e:	1d23      	adds	r3, r4, #4
 8003e10:	f020 0007 	bic.w	r0, r0, #7
 8003e14:	1ac2      	subs	r2, r0, r3
 8003e16:	bf1c      	itt	ne
 8003e18:	1a1b      	subne	r3, r3, r0
 8003e1a:	50a3      	strne	r3, [r4, r2]
 8003e1c:	e7af      	b.n	8003d7e <_malloc_r+0x22>
 8003e1e:	6862      	ldr	r2, [r4, #4]
 8003e20:	42a3      	cmp	r3, r4
 8003e22:	bf0c      	ite	eq
 8003e24:	f8c8 2000 	streq.w	r2, [r8]
 8003e28:	605a      	strne	r2, [r3, #4]
 8003e2a:	e7eb      	b.n	8003e04 <_malloc_r+0xa8>
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	6864      	ldr	r4, [r4, #4]
 8003e30:	e7ae      	b.n	8003d90 <_malloc_r+0x34>
 8003e32:	463c      	mov	r4, r7
 8003e34:	687f      	ldr	r7, [r7, #4]
 8003e36:	e7b6      	b.n	8003da6 <_malloc_r+0x4a>
 8003e38:	461a      	mov	r2, r3
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	42a3      	cmp	r3, r4
 8003e3e:	d1fb      	bne.n	8003e38 <_malloc_r+0xdc>
 8003e40:	2300      	movs	r3, #0
 8003e42:	6053      	str	r3, [r2, #4]
 8003e44:	e7de      	b.n	8003e04 <_malloc_r+0xa8>
 8003e46:	230c      	movs	r3, #12
 8003e48:	6033      	str	r3, [r6, #0]
 8003e4a:	4630      	mov	r0, r6
 8003e4c:	f000 f80c 	bl	8003e68 <__malloc_unlock>
 8003e50:	e794      	b.n	8003d7c <_malloc_r+0x20>
 8003e52:	6005      	str	r5, [r0, #0]
 8003e54:	e7d6      	b.n	8003e04 <_malloc_r+0xa8>
 8003e56:	bf00      	nop
 8003e58:	20000284 	.word	0x20000284

08003e5c <__malloc_lock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	@ (8003e64 <__malloc_lock+0x8>)
 8003e5e:	f7ff bf0e 	b.w	8003c7e <__retarget_lock_acquire_recursive>
 8003e62:	bf00      	nop
 8003e64:	2000027c 	.word	0x2000027c

08003e68 <__malloc_unlock>:
 8003e68:	4801      	ldr	r0, [pc, #4]	@ (8003e70 <__malloc_unlock+0x8>)
 8003e6a:	f7ff bf09 	b.w	8003c80 <__retarget_lock_release_recursive>
 8003e6e:	bf00      	nop
 8003e70:	2000027c 	.word	0x2000027c

08003e74 <__sfputc_r>:
 8003e74:	6893      	ldr	r3, [r2, #8]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	b410      	push	{r4}
 8003e7c:	6093      	str	r3, [r2, #8]
 8003e7e:	da08      	bge.n	8003e92 <__sfputc_r+0x1e>
 8003e80:	6994      	ldr	r4, [r2, #24]
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	db01      	blt.n	8003e8a <__sfputc_r+0x16>
 8003e86:	290a      	cmp	r1, #10
 8003e88:	d103      	bne.n	8003e92 <__sfputc_r+0x1e>
 8003e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e8e:	f7ff bde8 	b.w	8003a62 <__swbuf_r>
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	1c58      	adds	r0, r3, #1
 8003e96:	6010      	str	r0, [r2, #0]
 8003e98:	7019      	strb	r1, [r3, #0]
 8003e9a:	4608      	mov	r0, r1
 8003e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <__sfputs_r>:
 8003ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea4:	4606      	mov	r6, r0
 8003ea6:	460f      	mov	r7, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	18d5      	adds	r5, r2, r3
 8003eac:	42ac      	cmp	r4, r5
 8003eae:	d101      	bne.n	8003eb4 <__sfputs_r+0x12>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e007      	b.n	8003ec4 <__sfputs_r+0x22>
 8003eb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eb8:	463a      	mov	r2, r7
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f7ff ffda 	bl	8003e74 <__sfputc_r>
 8003ec0:	1c43      	adds	r3, r0, #1
 8003ec2:	d1f3      	bne.n	8003eac <__sfputs_r+0xa>
 8003ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ec8 <_vfiprintf_r>:
 8003ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ecc:	460d      	mov	r5, r1
 8003ece:	b09d      	sub	sp, #116	@ 0x74
 8003ed0:	4614      	mov	r4, r2
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	4606      	mov	r6, r0
 8003ed6:	b118      	cbz	r0, 8003ee0 <_vfiprintf_r+0x18>
 8003ed8:	6a03      	ldr	r3, [r0, #32]
 8003eda:	b90b      	cbnz	r3, 8003ee0 <_vfiprintf_r+0x18>
 8003edc:	f7ff fcd8 	bl	8003890 <__sinit>
 8003ee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ee2:	07d9      	lsls	r1, r3, #31
 8003ee4:	d405      	bmi.n	8003ef2 <_vfiprintf_r+0x2a>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	059a      	lsls	r2, r3, #22
 8003eea:	d402      	bmi.n	8003ef2 <_vfiprintf_r+0x2a>
 8003eec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003eee:	f7ff fec6 	bl	8003c7e <__retarget_lock_acquire_recursive>
 8003ef2:	89ab      	ldrh	r3, [r5, #12]
 8003ef4:	071b      	lsls	r3, r3, #28
 8003ef6:	d501      	bpl.n	8003efc <_vfiprintf_r+0x34>
 8003ef8:	692b      	ldr	r3, [r5, #16]
 8003efa:	b99b      	cbnz	r3, 8003f24 <_vfiprintf_r+0x5c>
 8003efc:	4629      	mov	r1, r5
 8003efe:	4630      	mov	r0, r6
 8003f00:	f7ff fdee 	bl	8003ae0 <__swsetup_r>
 8003f04:	b170      	cbz	r0, 8003f24 <_vfiprintf_r+0x5c>
 8003f06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f08:	07dc      	lsls	r4, r3, #31
 8003f0a:	d504      	bpl.n	8003f16 <_vfiprintf_r+0x4e>
 8003f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f10:	b01d      	add	sp, #116	@ 0x74
 8003f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f16:	89ab      	ldrh	r3, [r5, #12]
 8003f18:	0598      	lsls	r0, r3, #22
 8003f1a:	d4f7      	bmi.n	8003f0c <_vfiprintf_r+0x44>
 8003f1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f1e:	f7ff feaf 	bl	8003c80 <__retarget_lock_release_recursive>
 8003f22:	e7f3      	b.n	8003f0c <_vfiprintf_r+0x44>
 8003f24:	2300      	movs	r3, #0
 8003f26:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f28:	2320      	movs	r3, #32
 8003f2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f32:	2330      	movs	r3, #48	@ 0x30
 8003f34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040e4 <_vfiprintf_r+0x21c>
 8003f38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f3c:	f04f 0901 	mov.w	r9, #1
 8003f40:	4623      	mov	r3, r4
 8003f42:	469a      	mov	sl, r3
 8003f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f48:	b10a      	cbz	r2, 8003f4e <_vfiprintf_r+0x86>
 8003f4a:	2a25      	cmp	r2, #37	@ 0x25
 8003f4c:	d1f9      	bne.n	8003f42 <_vfiprintf_r+0x7a>
 8003f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8003f52:	d00b      	beq.n	8003f6c <_vfiprintf_r+0xa4>
 8003f54:	465b      	mov	r3, fp
 8003f56:	4622      	mov	r2, r4
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f7ff ffa1 	bl	8003ea2 <__sfputs_r>
 8003f60:	3001      	adds	r0, #1
 8003f62:	f000 80a7 	beq.w	80040b4 <_vfiprintf_r+0x1ec>
 8003f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f68:	445a      	add	r2, fp
 8003f6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 809f 	beq.w	80040b4 <_vfiprintf_r+0x1ec>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f80:	f10a 0a01 	add.w	sl, sl, #1
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	9307      	str	r3, [sp, #28]
 8003f88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f8e:	4654      	mov	r4, sl
 8003f90:	2205      	movs	r2, #5
 8003f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f96:	4853      	ldr	r0, [pc, #332]	@ (80040e4 <_vfiprintf_r+0x21c>)
 8003f98:	f7fc f942 	bl	8000220 <memchr>
 8003f9c:	9a04      	ldr	r2, [sp, #16]
 8003f9e:	b9d8      	cbnz	r0, 8003fd8 <_vfiprintf_r+0x110>
 8003fa0:	06d1      	lsls	r1, r2, #27
 8003fa2:	bf44      	itt	mi
 8003fa4:	2320      	movmi	r3, #32
 8003fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003faa:	0713      	lsls	r3, r2, #28
 8003fac:	bf44      	itt	mi
 8003fae:	232b      	movmi	r3, #43	@ 0x2b
 8003fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8003fb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fba:	d015      	beq.n	8003fe8 <_vfiprintf_r+0x120>
 8003fbc:	9a07      	ldr	r2, [sp, #28]
 8003fbe:	4654      	mov	r4, sl
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	f04f 0c0a 	mov.w	ip, #10
 8003fc6:	4621      	mov	r1, r4
 8003fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fcc:	3b30      	subs	r3, #48	@ 0x30
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d94b      	bls.n	800406a <_vfiprintf_r+0x1a2>
 8003fd2:	b1b0      	cbz	r0, 8004002 <_vfiprintf_r+0x13a>
 8003fd4:	9207      	str	r2, [sp, #28]
 8003fd6:	e014      	b.n	8004002 <_vfiprintf_r+0x13a>
 8003fd8:	eba0 0308 	sub.w	r3, r0, r8
 8003fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	46a2      	mov	sl, r4
 8003fe6:	e7d2      	b.n	8003f8e <_vfiprintf_r+0xc6>
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	1d19      	adds	r1, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	9103      	str	r1, [sp, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfbb      	ittet	lt
 8003ff4:	425b      	neglt	r3, r3
 8003ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8003ffa:	9307      	strge	r3, [sp, #28]
 8003ffc:	9307      	strlt	r3, [sp, #28]
 8003ffe:	bfb8      	it	lt
 8004000:	9204      	strlt	r2, [sp, #16]
 8004002:	7823      	ldrb	r3, [r4, #0]
 8004004:	2b2e      	cmp	r3, #46	@ 0x2e
 8004006:	d10a      	bne.n	800401e <_vfiprintf_r+0x156>
 8004008:	7863      	ldrb	r3, [r4, #1]
 800400a:	2b2a      	cmp	r3, #42	@ 0x2a
 800400c:	d132      	bne.n	8004074 <_vfiprintf_r+0x1ac>
 800400e:	9b03      	ldr	r3, [sp, #12]
 8004010:	1d1a      	adds	r2, r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	9203      	str	r2, [sp, #12]
 8004016:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800401a:	3402      	adds	r4, #2
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80040f4 <_vfiprintf_r+0x22c>
 8004022:	7821      	ldrb	r1, [r4, #0]
 8004024:	2203      	movs	r2, #3
 8004026:	4650      	mov	r0, sl
 8004028:	f7fc f8fa 	bl	8000220 <memchr>
 800402c:	b138      	cbz	r0, 800403e <_vfiprintf_r+0x176>
 800402e:	9b04      	ldr	r3, [sp, #16]
 8004030:	eba0 000a 	sub.w	r0, r0, sl
 8004034:	2240      	movs	r2, #64	@ 0x40
 8004036:	4082      	lsls	r2, r0
 8004038:	4313      	orrs	r3, r2
 800403a:	3401      	adds	r4, #1
 800403c:	9304      	str	r3, [sp, #16]
 800403e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004042:	4829      	ldr	r0, [pc, #164]	@ (80040e8 <_vfiprintf_r+0x220>)
 8004044:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004048:	2206      	movs	r2, #6
 800404a:	f7fc f8e9 	bl	8000220 <memchr>
 800404e:	2800      	cmp	r0, #0
 8004050:	d03f      	beq.n	80040d2 <_vfiprintf_r+0x20a>
 8004052:	4b26      	ldr	r3, [pc, #152]	@ (80040ec <_vfiprintf_r+0x224>)
 8004054:	bb1b      	cbnz	r3, 800409e <_vfiprintf_r+0x1d6>
 8004056:	9b03      	ldr	r3, [sp, #12]
 8004058:	3307      	adds	r3, #7
 800405a:	f023 0307 	bic.w	r3, r3, #7
 800405e:	3308      	adds	r3, #8
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004064:	443b      	add	r3, r7
 8004066:	9309      	str	r3, [sp, #36]	@ 0x24
 8004068:	e76a      	b.n	8003f40 <_vfiprintf_r+0x78>
 800406a:	fb0c 3202 	mla	r2, ip, r2, r3
 800406e:	460c      	mov	r4, r1
 8004070:	2001      	movs	r0, #1
 8004072:	e7a8      	b.n	8003fc6 <_vfiprintf_r+0xfe>
 8004074:	2300      	movs	r3, #0
 8004076:	3401      	adds	r4, #1
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	4619      	mov	r1, r3
 800407c:	f04f 0c0a 	mov.w	ip, #10
 8004080:	4620      	mov	r0, r4
 8004082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004086:	3a30      	subs	r2, #48	@ 0x30
 8004088:	2a09      	cmp	r2, #9
 800408a:	d903      	bls.n	8004094 <_vfiprintf_r+0x1cc>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0c6      	beq.n	800401e <_vfiprintf_r+0x156>
 8004090:	9105      	str	r1, [sp, #20]
 8004092:	e7c4      	b.n	800401e <_vfiprintf_r+0x156>
 8004094:	fb0c 2101 	mla	r1, ip, r1, r2
 8004098:	4604      	mov	r4, r0
 800409a:	2301      	movs	r3, #1
 800409c:	e7f0      	b.n	8004080 <_vfiprintf_r+0x1b8>
 800409e:	ab03      	add	r3, sp, #12
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	462a      	mov	r2, r5
 80040a4:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <_vfiprintf_r+0x228>)
 80040a6:	a904      	add	r1, sp, #16
 80040a8:	4630      	mov	r0, r6
 80040aa:	f3af 8000 	nop.w
 80040ae:	4607      	mov	r7, r0
 80040b0:	1c78      	adds	r0, r7, #1
 80040b2:	d1d6      	bne.n	8004062 <_vfiprintf_r+0x19a>
 80040b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040b6:	07d9      	lsls	r1, r3, #31
 80040b8:	d405      	bmi.n	80040c6 <_vfiprintf_r+0x1fe>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	059a      	lsls	r2, r3, #22
 80040be:	d402      	bmi.n	80040c6 <_vfiprintf_r+0x1fe>
 80040c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040c2:	f7ff fddd 	bl	8003c80 <__retarget_lock_release_recursive>
 80040c6:	89ab      	ldrh	r3, [r5, #12]
 80040c8:	065b      	lsls	r3, r3, #25
 80040ca:	f53f af1f 	bmi.w	8003f0c <_vfiprintf_r+0x44>
 80040ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040d0:	e71e      	b.n	8003f10 <_vfiprintf_r+0x48>
 80040d2:	ab03      	add	r3, sp, #12
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	462a      	mov	r2, r5
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <_vfiprintf_r+0x228>)
 80040da:	a904      	add	r1, sp, #16
 80040dc:	4630      	mov	r0, r6
 80040de:	f000 f879 	bl	80041d4 <_printf_i>
 80040e2:	e7e4      	b.n	80040ae <_vfiprintf_r+0x1e6>
 80040e4:	08004654 	.word	0x08004654
 80040e8:	0800465e 	.word	0x0800465e
 80040ec:	00000000 	.word	0x00000000
 80040f0:	08003ea3 	.word	0x08003ea3
 80040f4:	0800465a 	.word	0x0800465a

080040f8 <_printf_common>:
 80040f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040fc:	4616      	mov	r6, r2
 80040fe:	4698      	mov	r8, r3
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	690b      	ldr	r3, [r1, #16]
 8004104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004108:	4293      	cmp	r3, r2
 800410a:	bfb8      	it	lt
 800410c:	4613      	movlt	r3, r2
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004114:	4607      	mov	r7, r0
 8004116:	460c      	mov	r4, r1
 8004118:	b10a      	cbz	r2, 800411e <_printf_common+0x26>
 800411a:	3301      	adds	r3, #1
 800411c:	6033      	str	r3, [r6, #0]
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	0699      	lsls	r1, r3, #26
 8004122:	bf42      	ittt	mi
 8004124:	6833      	ldrmi	r3, [r6, #0]
 8004126:	3302      	addmi	r3, #2
 8004128:	6033      	strmi	r3, [r6, #0]
 800412a:	6825      	ldr	r5, [r4, #0]
 800412c:	f015 0506 	ands.w	r5, r5, #6
 8004130:	d106      	bne.n	8004140 <_printf_common+0x48>
 8004132:	f104 0a19 	add.w	sl, r4, #25
 8004136:	68e3      	ldr	r3, [r4, #12]
 8004138:	6832      	ldr	r2, [r6, #0]
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	42ab      	cmp	r3, r5
 800413e:	dc26      	bgt.n	800418e <_printf_common+0x96>
 8004140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004144:	6822      	ldr	r2, [r4, #0]
 8004146:	3b00      	subs	r3, #0
 8004148:	bf18      	it	ne
 800414a:	2301      	movne	r3, #1
 800414c:	0692      	lsls	r2, r2, #26
 800414e:	d42b      	bmi.n	80041a8 <_printf_common+0xb0>
 8004150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004154:	4641      	mov	r1, r8
 8004156:	4638      	mov	r0, r7
 8004158:	47c8      	blx	r9
 800415a:	3001      	adds	r0, #1
 800415c:	d01e      	beq.n	800419c <_printf_common+0xa4>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	6922      	ldr	r2, [r4, #16]
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	2b04      	cmp	r3, #4
 8004168:	bf02      	ittt	eq
 800416a:	68e5      	ldreq	r5, [r4, #12]
 800416c:	6833      	ldreq	r3, [r6, #0]
 800416e:	1aed      	subeq	r5, r5, r3
 8004170:	68a3      	ldr	r3, [r4, #8]
 8004172:	bf0c      	ite	eq
 8004174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004178:	2500      	movne	r5, #0
 800417a:	4293      	cmp	r3, r2
 800417c:	bfc4      	itt	gt
 800417e:	1a9b      	subgt	r3, r3, r2
 8004180:	18ed      	addgt	r5, r5, r3
 8004182:	2600      	movs	r6, #0
 8004184:	341a      	adds	r4, #26
 8004186:	42b5      	cmp	r5, r6
 8004188:	d11a      	bne.n	80041c0 <_printf_common+0xc8>
 800418a:	2000      	movs	r0, #0
 800418c:	e008      	b.n	80041a0 <_printf_common+0xa8>
 800418e:	2301      	movs	r3, #1
 8004190:	4652      	mov	r2, sl
 8004192:	4641      	mov	r1, r8
 8004194:	4638      	mov	r0, r7
 8004196:	47c8      	blx	r9
 8004198:	3001      	adds	r0, #1
 800419a:	d103      	bne.n	80041a4 <_printf_common+0xac>
 800419c:	f04f 30ff 	mov.w	r0, #4294967295
 80041a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041a4:	3501      	adds	r5, #1
 80041a6:	e7c6      	b.n	8004136 <_printf_common+0x3e>
 80041a8:	18e1      	adds	r1, r4, r3
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	2030      	movs	r0, #48	@ 0x30
 80041ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041b2:	4422      	add	r2, r4
 80041b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041bc:	3302      	adds	r3, #2
 80041be:	e7c7      	b.n	8004150 <_printf_common+0x58>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4622      	mov	r2, r4
 80041c4:	4641      	mov	r1, r8
 80041c6:	4638      	mov	r0, r7
 80041c8:	47c8      	blx	r9
 80041ca:	3001      	adds	r0, #1
 80041cc:	d0e6      	beq.n	800419c <_printf_common+0xa4>
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7d9      	b.n	8004186 <_printf_common+0x8e>
	...

080041d4 <_printf_i>:
 80041d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041d8:	7e0f      	ldrb	r7, [r1, #24]
 80041da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041dc:	2f78      	cmp	r7, #120	@ 0x78
 80041de:	4691      	mov	r9, r2
 80041e0:	4680      	mov	r8, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	469a      	mov	sl, r3
 80041e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041ea:	d807      	bhi.n	80041fc <_printf_i+0x28>
 80041ec:	2f62      	cmp	r7, #98	@ 0x62
 80041ee:	d80a      	bhi.n	8004206 <_printf_i+0x32>
 80041f0:	2f00      	cmp	r7, #0
 80041f2:	f000 80d2 	beq.w	800439a <_printf_i+0x1c6>
 80041f6:	2f58      	cmp	r7, #88	@ 0x58
 80041f8:	f000 80b9 	beq.w	800436e <_printf_i+0x19a>
 80041fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004204:	e03a      	b.n	800427c <_printf_i+0xa8>
 8004206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800420a:	2b15      	cmp	r3, #21
 800420c:	d8f6      	bhi.n	80041fc <_printf_i+0x28>
 800420e:	a101      	add	r1, pc, #4	@ (adr r1, 8004214 <_printf_i+0x40>)
 8004210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004214:	0800426d 	.word	0x0800426d
 8004218:	08004281 	.word	0x08004281
 800421c:	080041fd 	.word	0x080041fd
 8004220:	080041fd 	.word	0x080041fd
 8004224:	080041fd 	.word	0x080041fd
 8004228:	080041fd 	.word	0x080041fd
 800422c:	08004281 	.word	0x08004281
 8004230:	080041fd 	.word	0x080041fd
 8004234:	080041fd 	.word	0x080041fd
 8004238:	080041fd 	.word	0x080041fd
 800423c:	080041fd 	.word	0x080041fd
 8004240:	08004381 	.word	0x08004381
 8004244:	080042ab 	.word	0x080042ab
 8004248:	0800433b 	.word	0x0800433b
 800424c:	080041fd 	.word	0x080041fd
 8004250:	080041fd 	.word	0x080041fd
 8004254:	080043a3 	.word	0x080043a3
 8004258:	080041fd 	.word	0x080041fd
 800425c:	080042ab 	.word	0x080042ab
 8004260:	080041fd 	.word	0x080041fd
 8004264:	080041fd 	.word	0x080041fd
 8004268:	08004343 	.word	0x08004343
 800426c:	6833      	ldr	r3, [r6, #0]
 800426e:	1d1a      	adds	r2, r3, #4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6032      	str	r2, [r6, #0]
 8004274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800427c:	2301      	movs	r3, #1
 800427e:	e09d      	b.n	80043bc <_printf_i+0x1e8>
 8004280:	6833      	ldr	r3, [r6, #0]
 8004282:	6820      	ldr	r0, [r4, #0]
 8004284:	1d19      	adds	r1, r3, #4
 8004286:	6031      	str	r1, [r6, #0]
 8004288:	0606      	lsls	r6, r0, #24
 800428a:	d501      	bpl.n	8004290 <_printf_i+0xbc>
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	e003      	b.n	8004298 <_printf_i+0xc4>
 8004290:	0645      	lsls	r5, r0, #25
 8004292:	d5fb      	bpl.n	800428c <_printf_i+0xb8>
 8004294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004298:	2d00      	cmp	r5, #0
 800429a:	da03      	bge.n	80042a4 <_printf_i+0xd0>
 800429c:	232d      	movs	r3, #45	@ 0x2d
 800429e:	426d      	negs	r5, r5
 80042a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042a4:	4859      	ldr	r0, [pc, #356]	@ (800440c <_printf_i+0x238>)
 80042a6:	230a      	movs	r3, #10
 80042a8:	e011      	b.n	80042ce <_printf_i+0xfa>
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	0608      	lsls	r0, r1, #24
 80042b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042b4:	d402      	bmi.n	80042bc <_printf_i+0xe8>
 80042b6:	0649      	lsls	r1, r1, #25
 80042b8:	bf48      	it	mi
 80042ba:	b2ad      	uxthmi	r5, r5
 80042bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80042be:	4853      	ldr	r0, [pc, #332]	@ (800440c <_printf_i+0x238>)
 80042c0:	6033      	str	r3, [r6, #0]
 80042c2:	bf14      	ite	ne
 80042c4:	230a      	movne	r3, #10
 80042c6:	2308      	moveq	r3, #8
 80042c8:	2100      	movs	r1, #0
 80042ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ce:	6866      	ldr	r6, [r4, #4]
 80042d0:	60a6      	str	r6, [r4, #8]
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	bfa2      	ittt	ge
 80042d6:	6821      	ldrge	r1, [r4, #0]
 80042d8:	f021 0104 	bicge.w	r1, r1, #4
 80042dc:	6021      	strge	r1, [r4, #0]
 80042de:	b90d      	cbnz	r5, 80042e4 <_printf_i+0x110>
 80042e0:	2e00      	cmp	r6, #0
 80042e2:	d04b      	beq.n	800437c <_printf_i+0x1a8>
 80042e4:	4616      	mov	r6, r2
 80042e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80042ea:	fb03 5711 	mls	r7, r3, r1, r5
 80042ee:	5dc7      	ldrb	r7, [r0, r7]
 80042f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042f4:	462f      	mov	r7, r5
 80042f6:	42bb      	cmp	r3, r7
 80042f8:	460d      	mov	r5, r1
 80042fa:	d9f4      	bls.n	80042e6 <_printf_i+0x112>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d10b      	bne.n	8004318 <_printf_i+0x144>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	07df      	lsls	r7, r3, #31
 8004304:	d508      	bpl.n	8004318 <_printf_i+0x144>
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	6861      	ldr	r1, [r4, #4]
 800430a:	4299      	cmp	r1, r3
 800430c:	bfde      	ittt	le
 800430e:	2330      	movle	r3, #48	@ 0x30
 8004310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004314:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004318:	1b92      	subs	r2, r2, r6
 800431a:	6122      	str	r2, [r4, #16]
 800431c:	f8cd a000 	str.w	sl, [sp]
 8004320:	464b      	mov	r3, r9
 8004322:	aa03      	add	r2, sp, #12
 8004324:	4621      	mov	r1, r4
 8004326:	4640      	mov	r0, r8
 8004328:	f7ff fee6 	bl	80040f8 <_printf_common>
 800432c:	3001      	adds	r0, #1
 800432e:	d14a      	bne.n	80043c6 <_printf_i+0x1f2>
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	b004      	add	sp, #16
 8004336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	f043 0320 	orr.w	r3, r3, #32
 8004340:	6023      	str	r3, [r4, #0]
 8004342:	4833      	ldr	r0, [pc, #204]	@ (8004410 <_printf_i+0x23c>)
 8004344:	2778      	movs	r7, #120	@ 0x78
 8004346:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	6831      	ldr	r1, [r6, #0]
 800434e:	061f      	lsls	r7, r3, #24
 8004350:	f851 5b04 	ldr.w	r5, [r1], #4
 8004354:	d402      	bmi.n	800435c <_printf_i+0x188>
 8004356:	065f      	lsls	r7, r3, #25
 8004358:	bf48      	it	mi
 800435a:	b2ad      	uxthmi	r5, r5
 800435c:	6031      	str	r1, [r6, #0]
 800435e:	07d9      	lsls	r1, r3, #31
 8004360:	bf44      	itt	mi
 8004362:	f043 0320 	orrmi.w	r3, r3, #32
 8004366:	6023      	strmi	r3, [r4, #0]
 8004368:	b11d      	cbz	r5, 8004372 <_printf_i+0x19e>
 800436a:	2310      	movs	r3, #16
 800436c:	e7ac      	b.n	80042c8 <_printf_i+0xf4>
 800436e:	4827      	ldr	r0, [pc, #156]	@ (800440c <_printf_i+0x238>)
 8004370:	e7e9      	b.n	8004346 <_printf_i+0x172>
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	f023 0320 	bic.w	r3, r3, #32
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	e7f6      	b.n	800436a <_printf_i+0x196>
 800437c:	4616      	mov	r6, r2
 800437e:	e7bd      	b.n	80042fc <_printf_i+0x128>
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	6825      	ldr	r5, [r4, #0]
 8004384:	6961      	ldr	r1, [r4, #20]
 8004386:	1d18      	adds	r0, r3, #4
 8004388:	6030      	str	r0, [r6, #0]
 800438a:	062e      	lsls	r6, r5, #24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	d501      	bpl.n	8004394 <_printf_i+0x1c0>
 8004390:	6019      	str	r1, [r3, #0]
 8004392:	e002      	b.n	800439a <_printf_i+0x1c6>
 8004394:	0668      	lsls	r0, r5, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0x1bc>
 8004398:	8019      	strh	r1, [r3, #0]
 800439a:	2300      	movs	r3, #0
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	4616      	mov	r6, r2
 80043a0:	e7bc      	b.n	800431c <_printf_i+0x148>
 80043a2:	6833      	ldr	r3, [r6, #0]
 80043a4:	1d1a      	adds	r2, r3, #4
 80043a6:	6032      	str	r2, [r6, #0]
 80043a8:	681e      	ldr	r6, [r3, #0]
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	2100      	movs	r1, #0
 80043ae:	4630      	mov	r0, r6
 80043b0:	f7fb ff36 	bl	8000220 <memchr>
 80043b4:	b108      	cbz	r0, 80043ba <_printf_i+0x1e6>
 80043b6:	1b80      	subs	r0, r0, r6
 80043b8:	6060      	str	r0, [r4, #4]
 80043ba:	6863      	ldr	r3, [r4, #4]
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	2300      	movs	r3, #0
 80043c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043c4:	e7aa      	b.n	800431c <_printf_i+0x148>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	4632      	mov	r2, r6
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d0ad      	beq.n	8004330 <_printf_i+0x15c>
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d413      	bmi.n	8004402 <_printf_i+0x22e>
 80043da:	68e0      	ldr	r0, [r4, #12]
 80043dc:	9b03      	ldr	r3, [sp, #12]
 80043de:	4298      	cmp	r0, r3
 80043e0:	bfb8      	it	lt
 80043e2:	4618      	movlt	r0, r3
 80043e4:	e7a6      	b.n	8004334 <_printf_i+0x160>
 80043e6:	2301      	movs	r3, #1
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d09d      	beq.n	8004330 <_printf_i+0x15c>
 80043f4:	3501      	adds	r5, #1
 80043f6:	68e3      	ldr	r3, [r4, #12]
 80043f8:	9903      	ldr	r1, [sp, #12]
 80043fa:	1a5b      	subs	r3, r3, r1
 80043fc:	42ab      	cmp	r3, r5
 80043fe:	dcf2      	bgt.n	80043e6 <_printf_i+0x212>
 8004400:	e7eb      	b.n	80043da <_printf_i+0x206>
 8004402:	2500      	movs	r5, #0
 8004404:	f104 0619 	add.w	r6, r4, #25
 8004408:	e7f5      	b.n	80043f6 <_printf_i+0x222>
 800440a:	bf00      	nop
 800440c:	08004665 	.word	0x08004665
 8004410:	08004676 	.word	0x08004676

08004414 <__swhatbuf_r>:
 8004414:	b570      	push	{r4, r5, r6, lr}
 8004416:	460c      	mov	r4, r1
 8004418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441c:	2900      	cmp	r1, #0
 800441e:	b096      	sub	sp, #88	@ 0x58
 8004420:	4615      	mov	r5, r2
 8004422:	461e      	mov	r6, r3
 8004424:	da0d      	bge.n	8004442 <__swhatbuf_r+0x2e>
 8004426:	89a3      	ldrh	r3, [r4, #12]
 8004428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	bf14      	ite	ne
 8004432:	2340      	movne	r3, #64	@ 0x40
 8004434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004438:	2000      	movs	r0, #0
 800443a:	6031      	str	r1, [r6, #0]
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	b016      	add	sp, #88	@ 0x58
 8004440:	bd70      	pop	{r4, r5, r6, pc}
 8004442:	466a      	mov	r2, sp
 8004444:	f000 f848 	bl	80044d8 <_fstat_r>
 8004448:	2800      	cmp	r0, #0
 800444a:	dbec      	blt.n	8004426 <__swhatbuf_r+0x12>
 800444c:	9901      	ldr	r1, [sp, #4]
 800444e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004456:	4259      	negs	r1, r3
 8004458:	4159      	adcs	r1, r3
 800445a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800445e:	e7eb      	b.n	8004438 <__swhatbuf_r+0x24>

08004460 <__smakebuf_r>:
 8004460:	898b      	ldrh	r3, [r1, #12]
 8004462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004464:	079d      	lsls	r5, r3, #30
 8004466:	4606      	mov	r6, r0
 8004468:	460c      	mov	r4, r1
 800446a:	d507      	bpl.n	800447c <__smakebuf_r+0x1c>
 800446c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	6123      	str	r3, [r4, #16]
 8004474:	2301      	movs	r3, #1
 8004476:	6163      	str	r3, [r4, #20]
 8004478:	b003      	add	sp, #12
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800447c:	ab01      	add	r3, sp, #4
 800447e:	466a      	mov	r2, sp
 8004480:	f7ff ffc8 	bl	8004414 <__swhatbuf_r>
 8004484:	9f00      	ldr	r7, [sp, #0]
 8004486:	4605      	mov	r5, r0
 8004488:	4639      	mov	r1, r7
 800448a:	4630      	mov	r0, r6
 800448c:	f7ff fc66 	bl	8003d5c <_malloc_r>
 8004490:	b948      	cbnz	r0, 80044a6 <__smakebuf_r+0x46>
 8004492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004496:	059a      	lsls	r2, r3, #22
 8004498:	d4ee      	bmi.n	8004478 <__smakebuf_r+0x18>
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	81a3      	strh	r3, [r4, #12]
 80044a4:	e7e2      	b.n	800446c <__smakebuf_r+0xc>
 80044a6:	89a3      	ldrh	r3, [r4, #12]
 80044a8:	6020      	str	r0, [r4, #0]
 80044aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ae:	81a3      	strh	r3, [r4, #12]
 80044b0:	9b01      	ldr	r3, [sp, #4]
 80044b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044b6:	b15b      	cbz	r3, 80044d0 <__smakebuf_r+0x70>
 80044b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044bc:	4630      	mov	r0, r6
 80044be:	f000 f81d 	bl	80044fc <_isatty_r>
 80044c2:	b128      	cbz	r0, 80044d0 <__smakebuf_r+0x70>
 80044c4:	89a3      	ldrh	r3, [r4, #12]
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	81a3      	strh	r3, [r4, #12]
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	431d      	orrs	r5, r3
 80044d4:	81a5      	strh	r5, [r4, #12]
 80044d6:	e7cf      	b.n	8004478 <__smakebuf_r+0x18>

080044d8 <_fstat_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d07      	ldr	r5, [pc, #28]	@ (80044f8 <_fstat_r+0x20>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	602b      	str	r3, [r5, #0]
 80044e6:	f7fc f9ea 	bl	80008be <_fstat>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	d102      	bne.n	80044f4 <_fstat_r+0x1c>
 80044ee:	682b      	ldr	r3, [r5, #0]
 80044f0:	b103      	cbz	r3, 80044f4 <_fstat_r+0x1c>
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	bf00      	nop
 80044f8:	20000278 	.word	0x20000278

080044fc <_isatty_r>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4d06      	ldr	r5, [pc, #24]	@ (8004518 <_isatty_r+0x1c>)
 8004500:	2300      	movs	r3, #0
 8004502:	4604      	mov	r4, r0
 8004504:	4608      	mov	r0, r1
 8004506:	602b      	str	r3, [r5, #0]
 8004508:	f7fc f9e9 	bl	80008de <_isatty>
 800450c:	1c43      	adds	r3, r0, #1
 800450e:	d102      	bne.n	8004516 <_isatty_r+0x1a>
 8004510:	682b      	ldr	r3, [r5, #0]
 8004512:	b103      	cbz	r3, 8004516 <_isatty_r+0x1a>
 8004514:	6023      	str	r3, [r4, #0]
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	20000278 	.word	0x20000278

0800451c <_sbrk_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	4d06      	ldr	r5, [pc, #24]	@ (8004538 <_sbrk_r+0x1c>)
 8004520:	2300      	movs	r3, #0
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fc f9f2 	bl	8000910 <_sbrk>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_sbrk_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_sbrk_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	20000278 	.word	0x20000278

0800453c <_init>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	bf00      	nop
 8004540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004542:	bc08      	pop	{r3}
 8004544:	469e      	mov	lr, r3
 8004546:	4770      	bx	lr

08004548 <_fini>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	bf00      	nop
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr
