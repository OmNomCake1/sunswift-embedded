
CAN_Board_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08003924  08003924  00004924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039a0  080039a0  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080039a0  080039a0  000049a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a8  080039a8  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a8  080039a8  000049a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080039b0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  08003a18  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003a18  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008747  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001984  00000000  00000000  0000d7df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0000f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006e4  00000000  00000000  0000fac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8f3  00000000  00000000  000101a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009908  00000000  00000000  0002da97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b72cf  00000000  00000000  0003739f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee66e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ca8  00000000  00000000  000ee6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f135c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800390c 	.word	0x0800390c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800390c 	.word	0x0800390c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fac4 	bl	8000852 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f823 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f8a9 	bl	8000424 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002d2:	f000 f85f 	bl	8000394 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80002d6:	480c      	ldr	r0, [pc, #48]	@ (8000308 <main+0x48>)
 80002d8:	f000 fd96 	bl	8000e08 <HAL_FDCAN_Start>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d002      	beq.n	80002e8 <main+0x28>
	  printf("error in start\n");
 80002e2:	480a      	ldr	r0, [pc, #40]	@ (800030c <main+0x4c>)
 80002e4:	f002 fcae 	bl	8002c44 <puts>
  }
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2101      	movs	r1, #1
 80002ec:	4806      	ldr	r0, [pc, #24]	@ (8000308 <main+0x48>)
 80002ee:	f000 ff1d 	bl	800112c <HAL_FDCAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint32_t fifo1_level = HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0);
 80002f2:	2140      	movs	r1, #64	@ 0x40
 80002f4:	4804      	ldr	r0, [pc, #16]	@ (8000308 <main+0x48>)
 80002f6:	f000 fefb 	bl	80010f0 <HAL_FDCAN_GetRxFifoFillLevel>
 80002fa:	6078      	str	r0, [r7, #4]
	  printf("Rxfifo1_level = %lu\n", fifo1_level);
 80002fc:	6879      	ldr	r1, [r7, #4]
 80002fe:	4804      	ldr	r0, [pc, #16]	@ (8000310 <main+0x50>)
 8000300:	f002 fc38 	bl	8002b74 <iprintf>
  {
 8000304:	bf00      	nop
 8000306:	e7f4      	b.n	80002f2 <main+0x32>
 8000308:	20000084 	.word	0x20000084
 800030c:	08003924 	.word	0x08003924
 8000310:	08003934 	.word	0x08003934

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b094      	sub	sp, #80	@ 0x50
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0318 	add.w	r3, r7, #24
 800031e:	2238      	movs	r2, #56	@ 0x38
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fd6e 	bl	8002e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
 8000334:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000336:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800033a:	f001 fbbf 	bl	8001abc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800033e:	2302      	movs	r3, #2
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000346:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000348:	2340      	movs	r3, #64	@ 0x40
 800034a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800034c:	2300      	movs	r3, #0
 800034e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	4618      	mov	r0, r3
 8000356:	f001 fc65 	bl	8001c24 <HAL_RCC_OscConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000360:	f000 f8a9 	bl	80004b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000364:	230f      	movs	r3, #15
 8000366:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000368:	2301      	movs	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f001 ff63 	bl	8002248 <HAL_RCC_ClockConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000388:	f000 f895 	bl	80004b6 <Error_Handler>
  }
}
 800038c:	bf00      	nop
 800038e:	3750      	adds	r7, #80	@ 0x50
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000398:	4b20      	ldr	r3, [pc, #128]	@ (800041c <MX_FDCAN1_Init+0x88>)
 800039a:	4a21      	ldr	r2, [pc, #132]	@ (8000420 <MX_FDCAN1_Init+0x8c>)
 800039c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800039e:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 80003a4:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003aa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003b8:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003be:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003c4:	4b15      	ldr	r3, [pc, #84]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003ca:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003cc:	2202      	movs	r2, #2
 80003ce:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80003d0:	4b12      	ldr	r3, [pc, #72]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003d2:	221d      	movs	r2, #29
 80003d4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003d6:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003d8:	2202      	movs	r2, #2
 80003da:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003de:	2201      	movs	r2, #1
 80003e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003e4:	220f      	movs	r2, #15
 80003e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003ea:	2210      	movs	r2, #16
 80003ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003f0:	220f      	movs	r2, #15
 80003f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <MX_FDCAN1_Init+0x88>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <MX_FDCAN1_Init+0x88>)
 8000402:	2200      	movs	r2, #0
 8000404:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	@ (800041c <MX_FDCAN1_Init+0x88>)
 8000408:	f000 fba4 	bl	8000b54 <HAL_FDCAN_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000412:	f000 f850 	bl	80004b6 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000084 	.word	0x20000084
 8000420:	40006400 	.word	0x40006400

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	@ (8000450 <MX_GPIO_Init+0x2c>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	4a08      	ldr	r2, [pc, #32]	@ (8000450 <MX_GPIO_Init+0x2c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000436:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <MX_GPIO_Init+0x2c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	40021000 	.word	0x40021000

08000454 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b098      	sub	sp, #96	@ 0x60
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	uint8_t RxData;

	FDCAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData;

	HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, &RxData);
 800045e:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8000462:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000466:	2140      	movs	r1, #64	@ 0x40
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f000 fd39 	bl	8000ee0 <HAL_FDCAN_GetRxMessage>

	if (RxHeader.Identifier == CAN_RX_ID && RxData == 0x08) {
 800046e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000470:	2b01      	cmp	r3, #1
 8000472:	d11c      	bne.n	80004ae <HAL_FDCAN_RxFifo0Callback+0x5a>
 8000474:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000478:	2b08      	cmp	r3, #8
 800047a:	d118      	bne.n	80004ae <HAL_FDCAN_RxFifo0Callback+0x5a>
		TxHeader.Identifier = CAN_TX_ID;
 800047c:	2302      	movs	r3, #2
 800047e:	613b      	str	r3, [r7, #16]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000484:	2300      	movs	r3, #0
 8000486:	61bb      	str	r3, [r7, #24]
		TxHeader.DataLength = FDCAN_DLC_BYTES_1;
 8000488:	2301      	movs	r3, #1
 800048a:	61fb      	str	r3, [r7, #28]
		TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8000490:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000494:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000496:	2300      	movs	r3, #0
 8000498:	62fb      	str	r3, [r7, #44]	@ 0x2c
		TxHeader.MessageMarker = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	633b      	str	r3, [r7, #48]	@ 0x30

		HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &TxHeader, &TxData);
 800049e:	f107 020f 	add.w	r2, r7, #15
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f000 fcd5 	bl	8000e58 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 80004ae:	bf00      	nop
 80004b0:	3760      	adds	r7, #96	@ 0x60
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ba:	b672      	cpsid	i
}
 80004bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004be:	bf00      	nop
 80004c0:	e7fd      	b.n	80004be <Error_Handler+0x8>
	...

080004c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000508 <HAL_MspInit+0x44>)
 80004cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000508 <HAL_MspInit+0x44>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80004d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <HAL_MspInit+0x44>)
 80004d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <HAL_MspInit+0x44>)
 80004e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004e6:	4a08      	ldr	r2, [pc, #32]	@ (8000508 <HAL_MspInit+0x44>)
 80004e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_MspInit+0x44>)
 80004f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80004fa:	f001 fb83 	bl	8001c04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b09a      	sub	sp, #104	@ 0x68
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2244      	movs	r2, #68	@ 0x44
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fc69 	bl	8002e04 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a24      	ldr	r2, [pc, #144]	@ (80005c8 <HAL_FDCAN_MspInit+0xbc>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d141      	bne.n	80005c0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800053c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000540:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000546:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4618      	mov	r0, r3
 800054e:	f002 f85f 	bl	8002610 <HAL_RCCEx_PeriphCLKConfig>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000558:	f7ff ffad 	bl	80004b6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800055c:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 800055e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000560:	4a1a      	ldr	r2, [pc, #104]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000566:	6593      	str	r3, [r2, #88]	@ 0x58
 8000568:	4b18      	ldr	r3, [pc, #96]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 800056a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800056c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	4b15      	ldr	r3, [pc, #84]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 8000576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000578:	4a14      	ldr	r2, [pc, #80]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 800057a:	f043 0301 	orr.w	r3, r3, #1
 800057e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <HAL_FDCAN_MspInit+0xc0>)
 8000582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000590:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000592:	2302      	movs	r3, #2
 8000594:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059a:	2300      	movs	r3, #0
 800059c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800059e:	2309      	movs	r3, #9
 80005a0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f001 f904 	bl	80017b8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2100      	movs	r1, #0
 80005b4:	2015      	movs	r0, #21
 80005b6:	f000 fa98 	bl	8000aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80005ba:	2015      	movs	r0, #21
 80005bc:	f000 faaf 	bl	8000b1e <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80005c0:	bf00      	nop
 80005c2:	3768      	adds	r7, #104	@ 0x68
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40006400 	.word	0x40006400
 80005cc:	40021000 	.word	0x40021000

080005d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <NMI_Handler+0x4>

080005d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <MemManage_Handler+0x4>

080005e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <BusFault_Handler+0x4>

080005f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <UsageFault_Handler+0x4>

080005f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000626:	f000 f967 	bl	80008f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000634:	4802      	ldr	r0, [pc, #8]	@ (8000640 <FDCAN1_IT0_IRQHandler+0x10>)
 8000636:	f000 fe5f 	bl	80012f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000084 	.word	0x20000084

08000644 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800064e:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <ITM_SendChar+0x48>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <ITM_SendChar+0x48>)
 8000654:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000658:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <ITM_SendChar+0x4c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a0c      	ldr	r2, [pc, #48]	@ (8000690 <ITM_SendChar+0x4c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000666:	bf00      	nop
 8000668:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0f8      	beq.n	8000668 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000676:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000edfc 	.word	0xe000edfc
 8000690:	e0000e00 	.word	0xe0000e00

08000694 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]
 80006a4:	e00a      	b.n	80006bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006a6:	f3af 8000 	nop.w
 80006aa:	4601      	mov	r1, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	b2ca      	uxtb	r2, r1
 80006b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	3301      	adds	r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbf0      	blt.n	80006a6 <_read+0x12>
  }

  return len;
 80006c4:	687b      	ldr	r3, [r7, #4]
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
 80006de:	e009      	b.n	80006f4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	1c5a      	adds	r2, r3, #1
 80006e4:	60ba      	str	r2, [r7, #8]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffab 	bl	8000644 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697a      	ldr	r2, [r7, #20]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	dbf1      	blt.n	80006e0 <_write+0x12>
  }
  return len;
 80006fc:	687b      	ldr	r3, [r7, #4]
}
 80006fe:	4618      	mov	r0, r3
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <_close>:

int _close(int file)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000712:	4618      	mov	r0, r3
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800071e:	b480      	push	{r7}
 8000720:	b083      	sub	sp, #12
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800072e:	605a      	str	r2, [r3, #4]
  return 0;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <_isatty>:

int _isatty(int file)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000746:	2301      	movs	r3, #1
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
	...

08000770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000778:	4a14      	ldr	r2, [pc, #80]	@ (80007cc <_sbrk+0x5c>)
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <_sbrk+0x60>)
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000784:	4b13      	ldr	r3, [pc, #76]	@ (80007d4 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800078c:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <_sbrk+0x64>)
 800078e:	4a12      	ldr	r2, [pc, #72]	@ (80007d8 <_sbrk+0x68>)
 8000790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <_sbrk+0x64>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4413      	add	r3, r2
 800079a:	693a      	ldr	r2, [r7, #16]
 800079c:	429a      	cmp	r2, r3
 800079e:	d207      	bcs.n	80007b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007a0:	f002 fb7e 	bl	8002ea0 <__errno>
 80007a4:	4603      	mov	r3, r0
 80007a6:	220c      	movs	r2, #12
 80007a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	e009      	b.n	80007c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007b0:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b6:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	4a05      	ldr	r2, [pc, #20]	@ (80007d4 <_sbrk+0x64>)
 80007c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20008000 	.word	0x20008000
 80007d0:	00000400 	.word	0x00000400
 80007d4:	200000e8 	.word	0x200000e8
 80007d8:	20000240 	.word	0x20000240

080007dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	@ (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000802:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000804:	f7ff ffea 	bl	80007dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	@ (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	@ (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	@ (800084c <LoopForever+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f002 fb3d 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000832:	f7ff fd45 	bl	80002c0 <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   r0, =_estack
 8000838:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000844:	080039b0 	.word	0x080039b0
  ldr r2, =_sbss
 8000848:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800084c:	2000023c 	.word	0x2000023c

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>

08000852 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000858:	2300      	movs	r3, #0
 800085a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f939 	bl	8000ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f80e 	bl	8000884 <HAL_InitTick>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	71fb      	strb	r3, [r7, #7]
 8000872:	e001      	b.n	8000878 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000874:	f7ff fe26 	bl	80004c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000878:	79fb      	ldrb	r3, [r7, #7]

}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000890:	4b16      	ldr	r3, [pc, #88]	@ (80008ec <HAL_InitTick+0x68>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d022      	beq.n	80008de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000898:	4b15      	ldr	r3, [pc, #84]	@ (80008f0 <HAL_InitTick+0x6c>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <HAL_InitTick+0x68>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80008a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f944 	bl	8000b3a <HAL_SYSTICK_Config>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d10f      	bne.n	80008d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d809      	bhi.n	80008d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008be:	2200      	movs	r2, #0
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	f04f 30ff 	mov.w	r0, #4294967295
 80008c6:	f000 f910 	bl	8000aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <HAL_InitTick+0x70>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6013      	str	r3, [r2, #0]
 80008d0:	e007      	b.n	80008e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
 80008d6:	e004      	b.n	80008e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008d8:	2301      	movs	r3, #1
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e001      	b.n	80008e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008de:	2301      	movs	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008fc:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <HAL_IncTick+0x1c>)
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	4b05      	ldr	r3, [pc, #20]	@ (8000918 <HAL_IncTick+0x20>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4413      	add	r3, r2
 8000906:	4a03      	ldr	r2, [pc, #12]	@ (8000914 <HAL_IncTick+0x1c>)
 8000908:	6013      	str	r3, [r2, #0]
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	200000ec 	.word	0x200000ec
 8000918:	20000008 	.word	0x20000008

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b03      	ldr	r3, [pc, #12]	@ (8000930 <HAL_GetTick+0x14>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	200000ec 	.word	0x200000ec

08000934 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f003 0307 	and.w	r3, r3, #7
 8000942:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000944:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000946:	68db      	ldr	r3, [r3, #12]
 8000948:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000950:	4013      	ands	r3, r2
 8000952:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800095c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000966:	4a04      	ldr	r2, [pc, #16]	@ (8000978 <__NVIC_SetPriorityGrouping+0x44>)
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	60d3      	str	r3, [r2, #12]
}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000980:	4b04      	ldr	r3, [pc, #16]	@ (8000994 <__NVIC_GetPriorityGrouping+0x18>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	f003 0307 	and.w	r3, r3, #7
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	db0b      	blt.n	80009c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 021f 	and.w	r2, r3, #31
 80009b0:	4907      	ldr	r1, [pc, #28]	@ (80009d0 <__NVIC_EnableIRQ+0x38>)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	095b      	lsrs	r3, r3, #5
 80009b8:	2001      	movs	r0, #1
 80009ba:	fa00 f202 	lsl.w	r2, r0, r2
 80009be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000e100 	.word	0xe000e100

080009d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	6039      	str	r1, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	db0a      	blt.n	80009fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	490c      	ldr	r1, [pc, #48]	@ (8000a20 <__NVIC_SetPriority+0x4c>)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	0112      	lsls	r2, r2, #4
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	440b      	add	r3, r1
 80009f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009fc:	e00a      	b.n	8000a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4908      	ldr	r1, [pc, #32]	@ (8000a24 <__NVIC_SetPriority+0x50>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	3b04      	subs	r3, #4
 8000a0c:	0112      	lsls	r2, r2, #4
 8000a0e:	b2d2      	uxtb	r2, r2
 8000a10:	440b      	add	r3, r1
 8000a12:	761a      	strb	r2, [r3, #24]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e100 	.word	0xe000e100
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	f1c3 0307 	rsb	r3, r3, #7
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	bf28      	it	cs
 8000a46:	2304      	movcs	r3, #4
 8000a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2b06      	cmp	r3, #6
 8000a50:	d902      	bls.n	8000a58 <NVIC_EncodePriority+0x30>
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	3b03      	subs	r3, #3
 8000a56:	e000      	b.n	8000a5a <NVIC_EncodePriority+0x32>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	43da      	mvns	r2, r3
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a70:	f04f 31ff 	mov.w	r1, #4294967295
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	43d9      	mvns	r1, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	4313      	orrs	r3, r2
         );
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3724      	adds	r7, #36	@ 0x24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
	...

08000a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000aa0:	d301      	bcc.n	8000aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00f      	b.n	8000ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aae:	210f      	movs	r1, #15
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f7ff ff8e 	bl	80009d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <SysTick_Config+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000abe:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <SysTick_Config+0x40>)
 8000ac0:	2207      	movs	r2, #7
 8000ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	e000e010 	.word	0xe000e010

08000ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f7ff ff29 	bl	8000934 <__NVIC_SetPriorityGrouping>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	4603      	mov	r3, r0
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
 8000af6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000af8:	f7ff ff40 	bl	800097c <__NVIC_GetPriorityGrouping>
 8000afc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	6978      	ldr	r0, [r7, #20]
 8000b04:	f7ff ff90 	bl	8000a28 <NVIC_EncodePriority>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff5f 	bl	80009d4 <__NVIC_SetPriority>
}
 8000b16:	bf00      	nop
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	4603      	mov	r3, r0
 8000b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff33 	bl	8000998 <__NVIC_EnableIRQ>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ffa4 	bl	8000a90 <SysTick_Config>
 8000b48:	4603      	mov	r3, r0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e147      	b.n	8000df6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d106      	bne.n	8000b80 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2200      	movs	r2, #0
 8000b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff fcc6 	bl	800050c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0210 	bic.w	r2, r2, #16
 8000b8e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b90:	f7ff fec4 	bl	800091c <HAL_GetTick>
 8000b94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000b96:	e012      	b.n	8000bbe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000b98:	f7ff fec0 	bl	800091c <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b0a      	cmp	r3, #10
 8000ba4:	d90b      	bls.n	8000bbe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e11b      	b.n	8000df6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	f003 0308 	and.w	r3, r3, #8
 8000bc8:	2b08      	cmp	r3, #8
 8000bca:	d0e5      	beq.n	8000b98 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	699a      	ldr	r2, [r3, #24]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bdc:	f7ff fe9e 	bl	800091c <HAL_GetTick>
 8000be0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000be2:	e012      	b.n	8000c0a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000be4:	f7ff fe9a 	bl	800091c <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b0a      	cmp	r3, #10
 8000bf0:	d90b      	bls.n	8000c0a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2203      	movs	r2, #3
 8000c02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
 8000c08:	e0f5      	b.n	8000df6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0e5      	beq.n	8000be4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	699a      	ldr	r2, [r3, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f042 0202 	orr.w	r2, r2, #2
 8000c26:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a74      	ldr	r2, [pc, #464]	@ (8000e00 <HAL_FDCAN_Init+0x2ac>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d103      	bne.n	8000c3a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000c32:	4a74      	ldr	r2, [pc, #464]	@ (8000e04 <HAL_FDCAN_Init+0x2b0>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7c1b      	ldrb	r3, [r3, #16]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d108      	bne.n	8000c54 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	699a      	ldr	r2, [r3, #24]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c50:	619a      	str	r2, [r3, #24]
 8000c52:	e007      	b.n	8000c64 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	699a      	ldr	r2, [r3, #24]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c62:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7c5b      	ldrb	r3, [r3, #17]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d108      	bne.n	8000c7e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	e007      	b.n	8000c8e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	699a      	ldr	r2, [r3, #24]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000c8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7c9b      	ldrb	r3, [r3, #18]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d108      	bne.n	8000ca8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ca4:	619a      	str	r2, [r3, #24]
 8000ca6:	e007      	b.n	8000cb8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	699a      	ldr	r2, [r3, #24]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000cb6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689a      	ldr	r2, [r3, #8]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	699a      	ldr	r2, [r3, #24]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000cdc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	691a      	ldr	r2, [r3, #16]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0210 	bic.w	r2, r2, #16
 8000cec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0204 	orr.w	r2, r2, #4
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	e02c      	b.n	8000d62 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d028      	beq.n	8000d62 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d01c      	beq.n	8000d52 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	699a      	ldr	r2, [r3, #24]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d26:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0210 	orr.w	r2, r2, #16
 8000d36:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	2b03      	cmp	r3, #3
 8000d3e:	d110      	bne.n	8000d62 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f042 0220 	orr.w	r2, r2, #32
 8000d4e:	619a      	str	r2, [r3, #24]
 8000d50:	e007      	b.n	8000d62 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	699a      	ldr	r2, [r3, #24]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f042 0220 	orr.w	r2, r2, #32
 8000d60:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d72:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a1b      	ldr	r3, [r3, #32]
 8000d78:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000d7a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000d8a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000d8c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000d96:	d115      	bne.n	8000dc4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000da2:	3b01      	subs	r3, #1
 8000da4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000da6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dac:	3b01      	subs	r3, #1
 8000dae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000db0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db8:	3b01      	subs	r3, #1
 8000dba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000dc0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000dc2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fc1a 	bl	8001614 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40006400 	.word	0x40006400
 8000e04:	40006500 	.word	0x40006500

08000e08 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d110      	bne.n	8000e3e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0201 	bic.w	r2, r2, #1
 8000e32:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e006      	b.n	8000e4c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e42:	f043 0204 	orr.w	r2, r3, #4
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
  }
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d12c      	bne.n	8000eca <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e023      	b.n	8000ed8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000e98:	0c1b      	lsrs	r3, r3, #16
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 fc0a 	bl	80016c0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e006      	b.n	8000ed8 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	f043 0208 	orr.w	r2, r3, #8
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
  }
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ef8:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000efa:	7efb      	ldrb	r3, [r7, #27]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	f040 80e8 	bne.w	80010d2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b40      	cmp	r3, #64	@ 0x40
 8000f06:	d137      	bne.n	8000f78 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d107      	bne.n	8000f28 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0db      	b.n	80010e0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f30:	0e1b      	lsrs	r3, r3, #24
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d10a      	bne.n	8000f50 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f42:	0a5b      	lsrs	r3, r3, #9
 8000f44:	f003 0301 	and.w	r3, r3, #1
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d101      	bne.n	8000f50 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4413      	add	r3, r2
 8000f62:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	e036      	b.n	8000fe6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d107      	bne.n	8000f98 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e0a3      	b.n	80010e0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fa0:	0e1b      	lsrs	r3, r3, #24
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d10a      	bne.n	8000fc0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d101      	bne.n	8000fc0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0303 	and.w	r3, r3, #3
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d107      	bne.n	800100a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	0c9b      	lsrs	r3, r3, #18
 8001000:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	e005      	b.n	8001016 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	3304      	adds	r3, #4
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	0c1b      	lsrs	r3, r3, #16
 8001044:	f003 020f 	and.w	r2, r3, #15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	0e1b      	lsrs	r3, r3, #24
 800106a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0fda      	lsrs	r2, r3, #31
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	3304      	adds	r3, #4
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	e00a      	b.n	80010a2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	6a3b      	ldr	r3, [r7, #32]
 8001090:	441a      	add	r2, r3
 8001092:	6839      	ldr	r1, [r7, #0]
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	440b      	add	r3, r1
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	3301      	adds	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_FDCAN_GetRxMessage+0x20c>)
 80010a8:	5cd3      	ldrb	r3, [r2, r3]
 80010aa:	461a      	mov	r2, r3
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d3ec      	bcc.n	800108c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	2b40      	cmp	r3, #64	@ 0x40
 80010b6:	d105      	bne.n	80010c4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80010c2:	e004      	b.n	80010ce <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e006      	b.n	80010e0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d6:	f043 0208 	orr.w	r2, r3, #8
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
  }
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	372c      	adds	r7, #44	@ 0x2c
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	0800395c 	.word	0x0800395c

080010f0 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b40      	cmp	r3, #64	@ 0x40
 80010fe:	d107      	bne.n	8001110 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001108:	f003 030f 	and.w	r3, r3, #15
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e006      	b.n	800111e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001118:	f003 030f 	and.w	r3, r3, #15
 800111c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800113e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d003      	beq.n	800114e <HAL_FDCAN_ActivateNotification+0x22>
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b02      	cmp	r3, #2
 800114a:	f040 80c8 	bne.w	80012de <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d03b      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d031      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d027      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001198:	2b00      	cmp	r3, #0
 800119a:	d004      	beq.n	80011a6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d01d      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d013      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d009      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00c      	beq.n	80011f2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f003 0307 	and.w	r3, r3, #7
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13b      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d131      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b00      	cmp	r3, #0
 800122c:	d127      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001234:	2b00      	cmp	r3, #0
 8001236:	d004      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11d      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d113      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	2b00      	cmp	r3, #0
 8001268:	d109      	bne.n	800127e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00c      	beq.n	800128e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f042 0202 	orr.w	r2, r2, #2
 800128c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001294:	2b00      	cmp	r3, #0
 8001296:	d009      	beq.n	80012ac <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	430a      	orrs	r2, r1
 80012a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d009      	beq.n	80012ca <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e006      	b.n	80012ec <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	f043 0202 	orr.w	r2, r3, #2
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08c      	sub	sp, #48	@ 0x30
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001306:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001314:	4013      	ands	r3, r2
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800132a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800132c:	4013      	ands	r3, r2
 800132e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001344:	4013      	ands	r3, r2
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800134e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8001352:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800135a:	6a3a      	ldr	r2, [r7, #32]
 800135c:	4013      	ands	r3, r2
 800135e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800136a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800137e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001386:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00b      	beq.n	80013aa <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001398:	2b00      	cmp	r3, #0
 800139a:	d006      	beq.n	80013aa <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2240      	movs	r2, #64	@ 0x40
 80013a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f916 	bl	80015d6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d019      	beq.n	80013e8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d014      	beq.n	80013e8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80013c6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80013e0:	6939      	ldr	r1, [r7, #16]
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 f8d8 	bl	8001598 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80013e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80013f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8a2 	bl	8001542 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80013fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800140a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800140c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff f820 	bl	8000454 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001420:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001422:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f897 	bl	8001558 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001446:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f890 	bl	800156e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001454:	2b00      	cmp	r3, #0
 8001456:	d018      	beq.n	800148a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145e:	2b00      	cmp	r3, #0
 8001460:	d013      	beq.n	800148a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800146a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f87c 	bl	8001582 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f880 	bl	80015ae <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00c      	beq.n	80014d2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f878 	bl	80015c2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00f      	beq.n	80014fc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800150a:	69f9      	ldr	r1, [r7, #28]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f876 	bl	80015fe <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001512:	6a3b      	ldr	r3, [r7, #32]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a3a      	ldr	r2, [r7, #32]
 800151e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	431a      	orrs	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f858 	bl	80015ea <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	@ 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800161c:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800161e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800162e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	430a      	orrs	r2, r1
 800163e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001654:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165c:	061a      	lsls	r2, r3, #24
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	e005      	b.n	80016a2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	3304      	adds	r3, #4
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3f3      	bcc.n	8001696 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	4000a400 	.word	0x4000a400

080016c0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10a      	bne.n	80016ec <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80016de:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e00a      	b.n	8001702 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80016f4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80016fa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001700:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800170c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001712:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001718:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	3304      	adds	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	3304      	adds	r3, #4
 800174c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e020      	b.n	8001796 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3303      	adds	r3, #3
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3302      	adds	r3, #2
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	440b      	add	r3, r1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800176c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3301      	adds	r3, #1
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	440b      	add	r3, r1
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800177a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	440a      	add	r2, r1
 8001782:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001784:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	3304      	adds	r3, #4
 800178e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3304      	adds	r3, #4
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	4a06      	ldr	r2, [pc, #24]	@ (80017b4 <FDCAN_CopyMessageToRAM+0xf4>)
 800179c:	5cd3      	ldrb	r3, [r2, r3]
 800179e:	461a      	mov	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d3d6      	bcc.n	8001754 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	3724      	adds	r7, #36	@ 0x24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	0800395c 	.word	0x0800395c

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017c6:	e15a      	b.n	8001a7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2101      	movs	r1, #1
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	4013      	ands	r3, r2
 80017d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 814c 	beq.w	8001a78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d005      	beq.n	80017f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d130      	bne.n	800185a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182e:	2201      	movs	r2, #1
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	f003 0201 	and.w	r2, r3, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b03      	cmp	r3, #3
 8001864:	d017      	beq.n	8001896 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	2203      	movs	r2, #3
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d123      	bne.n	80018ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691a      	ldr	r2, [r3, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	6939      	ldr	r1, [r7, #16]
 80018e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0203 	and.w	r2, r3, #3
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 80a6 	beq.w	8001a78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192c:	4b5b      	ldr	r3, [pc, #364]	@ (8001a9c <HAL_GPIO_Init+0x2e4>)
 800192e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001930:	4a5a      	ldr	r2, [pc, #360]	@ (8001a9c <HAL_GPIO_Init+0x2e4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6613      	str	r3, [r2, #96]	@ 0x60
 8001938:	4b58      	ldr	r3, [pc, #352]	@ (8001a9c <HAL_GPIO_Init+0x2e4>)
 800193a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001944:	4a56      	ldr	r2, [pc, #344]	@ (8001aa0 <HAL_GPIO_Init+0x2e8>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	220f      	movs	r2, #15
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800196e:	d01f      	beq.n	80019b0 <HAL_GPIO_Init+0x1f8>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa4 <HAL_GPIO_Init+0x2ec>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d019      	beq.n	80019ac <HAL_GPIO_Init+0x1f4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a4b      	ldr	r2, [pc, #300]	@ (8001aa8 <HAL_GPIO_Init+0x2f0>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d013      	beq.n	80019a8 <HAL_GPIO_Init+0x1f0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a4a      	ldr	r2, [pc, #296]	@ (8001aac <HAL_GPIO_Init+0x2f4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00d      	beq.n	80019a4 <HAL_GPIO_Init+0x1ec>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a49      	ldr	r2, [pc, #292]	@ (8001ab0 <HAL_GPIO_Init+0x2f8>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d007      	beq.n	80019a0 <HAL_GPIO_Init+0x1e8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a48      	ldr	r2, [pc, #288]	@ (8001ab4 <HAL_GPIO_Init+0x2fc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d101      	bne.n	800199c <HAL_GPIO_Init+0x1e4>
 8001998:	2305      	movs	r3, #5
 800199a:	e00a      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 800199c:	2306      	movs	r3, #6
 800199e:	e008      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a0:	2304      	movs	r3, #4
 80019a2:	e006      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a4:	2303      	movs	r3, #3
 80019a6:	e004      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e002      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_GPIO_Init+0x1fa>
 80019b0:	2300      	movs	r3, #0
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	f002 0203 	and.w	r2, r2, #3
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	4093      	lsls	r3, r2
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019c2:	4937      	ldr	r1, [pc, #220]	@ (8001aa0 <HAL_GPIO_Init+0x2e8>)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019d0:	4b39      	ldr	r3, [pc, #228]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019f4:	4a30      	ldr	r2, [pc, #192]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019fa:	4b2f      	ldr	r3, [pc, #188]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a1e:	4a26      	ldr	r2, [pc, #152]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a48:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a72:	4a11      	ldr	r2, [pc, #68]	@ (8001ab8 <HAL_GPIO_Init+0x300>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f47f ae9d 	bne.w	80017c8 <HAL_GPIO_Init+0x10>
  }
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	48000400 	.word	0x48000400
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000c00 	.word	0x48000c00
 8001ab0:	48001000 	.word	0x48001000
 8001ab4:	48001400 	.word	0x48001400
 8001ab8:	40010400 	.word	0x40010400

08001abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d141      	bne.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aca:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad6:	d131      	bne.n	8001b3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad8:	4b47      	ldr	r3, [pc, #284]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ade:	4a46      	ldr	r2, [pc, #280]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae8:	4b43      	ldr	r3, [pc, #268]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001af0:	4a41      	ldr	r2, [pc, #260]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af8:	4b40      	ldr	r3, [pc, #256]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2232      	movs	r2, #50	@ 0x32
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	4a3f      	ldr	r2, [pc, #252]	@ (8001c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	0c9b      	lsrs	r3, r3, #18
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0e:	e002      	b.n	8001b16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b16:	4b38      	ldr	r3, [pc, #224]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b22:	d102      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f2      	bne.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b36:	d158      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e057      	b.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b42:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b4c:	e04d      	b.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b54:	d141      	bne.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b56:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b62:	d131      	bne.n	8001bc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b64:	4b24      	ldr	r3, [pc, #144]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b6a:	4a23      	ldr	r2, [pc, #140]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b84:	4b1d      	ldr	r3, [pc, #116]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2232      	movs	r2, #50	@ 0x32
 8001b8a:	fb02 f303 	mul.w	r3, r2, r3
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8001c00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	0c9b      	lsrs	r3, r3, #18
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9a:	e002      	b.n	8001ba2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bae:	d102      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f2      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d112      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e011      	b.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bd8:	e007      	b.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be2:	4a05      	ldr	r2, [pc, #20]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c08:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c12:	6093      	str	r3, [r2, #8]
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40007000 	.word	0x40007000

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e2fe      	b.n	8002234 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	4b97      	ldr	r3, [pc, #604]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4c:	4b94      	ldr	r3, [pc, #592]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b0c      	cmp	r3, #12
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3e>
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d002      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b8d      	ldr	r3, [pc, #564]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e2d9      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4b85      	ldr	r3, [pc, #532]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a84      	ldr	r2, [pc, #528]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a7b      	ldr	r2, [pc, #492]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4b78      	ldr	r3, [pc, #480]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a77      	ldr	r2, [pc, #476]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b75      	ldr	r3, [pc, #468]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a74      	ldr	r2, [pc, #464]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fe1e 	bl	800091c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7fe fe1a 	bl	800091c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	@ 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e29e      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7fe fe0a 	bl	800091c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7fe fe06 	bl	800091c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	@ 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e28a      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1e:	4b60      	ldr	r3, [pc, #384]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d075      	beq.n	8001e26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b59      	ldr	r3, [pc, #356]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d44:	4b56      	ldr	r3, [pc, #344]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	2b0c      	cmp	r3, #12
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x136>
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_OscConfig+0x13c>
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11f      	bne.n	8001da0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x154>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e25d      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b49      	ldr	r3, [pc, #292]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	4946      	ldr	r1, [pc, #280]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d8c:	4b45      	ldr	r3, [pc, #276]	@ (8001ea4 <HAL_RCC_OscConfig+0x280>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fd77 	bl	8000884 <HAL_InitTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d043      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e249      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe fdb2 	bl	800091c <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7fe fdae 	bl	800091c <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e232      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dce:	4b34      	ldr	r3, [pc, #208]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b31      	ldr	r3, [pc, #196]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	061b      	lsls	r3, r3, #24
 8001de8:	492d      	ldr	r1, [pc, #180]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	604b      	str	r3, [r1, #4]
 8001dee:	e01a      	b.n	8001e26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df0:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001df6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe fd8e 	bl	800091c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7fe fd8a 	bl	800091c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e20e      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e16:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e0>
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d041      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01c      	beq.n	8001e74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e40:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4a:	f7fe fd67 	bl	800091c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e52:	f7fe fd63 	bl	800091c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e1e7      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ef      	beq.n	8001e52 <HAL_RCC_OscConfig+0x22e>
 8001e72:	e020      	b.n	8001eb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ea0 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe fd4a 	bl	800091c <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e8a:	e00d      	b.n	8001ea8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8c:	f7fe fd46 	bl	800091c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d906      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e1ca      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1ea      	bne.n	8001e8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80a6 	beq.w	8002010 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ec8:	4b84      	ldr	r3, [pc, #528]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x2b4>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_RCC_OscConfig+0x2b6>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00d      	beq.n	8001efa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ede:	4b7f      	ldr	r3, [pc, #508]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eea:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001efa:	4b79      	ldr	r3, [pc, #484]	@ (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f06:	4b76      	ldr	r3, [pc, #472]	@ (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a75      	ldr	r2, [pc, #468]	@ (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f12:	f7fe fd03 	bl	800091c <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7fe fcff 	bl	800091c <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e183      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80020e0 <HAL_RCC_OscConfig+0x4bc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d0f0      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d108      	bne.n	8001f52 <HAL_RCC_OscConfig+0x32e>
 8001f40:	4b66      	ldr	r3, [pc, #408]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	4a65      	ldr	r2, [pc, #404]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f50:	e024      	b.n	8001f9c <HAL_RCC_OscConfig+0x378>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d110      	bne.n	8001f7c <HAL_RCC_OscConfig+0x358>
 8001f5a:	4b60      	ldr	r3, [pc, #384]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	4a5e      	ldr	r2, [pc, #376]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f70:	4a5a      	ldr	r2, [pc, #360]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f7a:	e00f      	b.n	8001f9c <HAL_RCC_OscConfig+0x378>
 8001f7c:	4b57      	ldr	r3, [pc, #348]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f82:	4a56      	ldr	r2, [pc, #344]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f8c:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	4a52      	ldr	r2, [pc, #328]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f023 0304 	bic.w	r3, r3, #4
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d016      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7fe fcba 	bl	800091c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fac:	f7fe fcb6 	bl	800091c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e138      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ed      	beq.n	8001fac <HAL_RCC_OscConfig+0x388>
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fca3 	bl	800091c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd8:	e00a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f7fe fc9f 	bl	800091c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e121      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ed      	bne.n	8001fda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b35      	ldr	r3, [pc, #212]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	4a34      	ldr	r2, [pc, #208]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0320 	and.w	r3, r3, #32
 8002018:	2b00      	cmp	r3, #0
 800201a:	d03c      	beq.n	8002096 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01c      	beq.n	800205e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002024:	4b2d      	ldr	r3, [pc, #180]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800202a:	4a2c      	ldr	r2, [pc, #176]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002034:	f7fe fc72 	bl	800091c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800203c:	f7fe fc6e 	bl	800091c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0f2      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800204e:	4b23      	ldr	r3, [pc, #140]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0ef      	beq.n	800203c <HAL_RCC_OscConfig+0x418>
 800205c:	e01b      	b.n	8002096 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800205e:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002064:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206e:	f7fe fc55 	bl	800091c <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002074:	e008      	b.n	8002088 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002076:	f7fe fc51 	bl	800091c <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0d5      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002088:	4b14      	ldr	r3, [pc, #80]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80c9 	beq.w	8002232 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a0:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	f000 8083 	beq.w	80021b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d15e      	bne.n	8002174 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_RCC_OscConfig+0x4b8>)
 80020bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fc2b 	bl	800091c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c8:	e00c      	b.n	80020e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ca:	f7fe fc27 	bl	800091c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d905      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0ab      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	4b55      	ldr	r3, [pc, #340]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ec      	bne.n	80020ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f0:	4b52      	ldr	r3, [pc, #328]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b52      	ldr	r3, [pc, #328]	@ (8002240 <HAL_RCC_OscConfig+0x61c>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6a11      	ldr	r1, [r2, #32]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002100:	3a01      	subs	r2, #1
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800210a:	0212      	lsls	r2, r2, #8
 800210c:	4311      	orrs	r1, r2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002112:	0852      	lsrs	r2, r2, #1
 8002114:	3a01      	subs	r2, #1
 8002116:	0552      	lsls	r2, r2, #21
 8002118:	4311      	orrs	r1, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800211e:	0852      	lsrs	r2, r2, #1
 8002120:	3a01      	subs	r2, #1
 8002122:	0652      	lsls	r2, r2, #25
 8002124:	4311      	orrs	r1, r2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800212a:	06d2      	lsls	r2, r2, #27
 800212c:	430a      	orrs	r2, r1
 800212e:	4943      	ldr	r1, [pc, #268]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002130:	4313      	orrs	r3, r2
 8002132:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002134:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a40      	ldr	r2, [pc, #256]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 800213a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002140:	4b3e      	ldr	r3, [pc, #248]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a3d      	ldr	r2, [pc, #244]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7fe fbe6 	bl	800091c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fbe2 	bl	800091c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e066      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002166:	4b35      	ldr	r3, [pc, #212]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x530>
 8002172:	e05e      	b.n	8002232 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002174:	4b31      	ldr	r3, [pc, #196]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a30      	ldr	r2, [pc, #192]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 800217a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe fbcc 	bl	800091c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fbc8 	bl	800091c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e04c      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219a:	4b28      	ldr	r3, [pc, #160]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021a6:	4b25      	ldr	r3, [pc, #148]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	4924      	ldr	r1, [pc, #144]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 80021ac:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <HAL_RCC_OscConfig+0x620>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	60cb      	str	r3, [r1, #12]
 80021b2:	e03e      	b.n	8002232 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e039      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021c0:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_RCC_OscConfig+0x618>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0203 	and.w	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d12c      	bne.n	800222e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021de:	3b01      	subs	r3, #1
 80021e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d123      	bne.n	800222e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d11b      	bne.n	800222e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002200:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d113      	bne.n	800222e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d109      	bne.n	800222e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3720      	adds	r7, #32
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	019f800c 	.word	0x019f800c
 8002244:	feeefffc 	.word	0xfeeefffc

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e11e      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b91      	ldr	r3, [pc, #580]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b8e      	ldr	r3, [pc, #568]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	498c      	ldr	r1, [pc, #560]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b8a      	ldr	r3, [pc, #552]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e106      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d073      	beq.n	8002384 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d129      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a4:	4b81      	ldr	r3, [pc, #516]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0f4      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022b4:	f000 f966 	bl	8002584 <RCC_GetSysClockFreqFromPLLSource>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4a7c      	ldr	r2, [pc, #496]	@ (80024b0 <HAL_RCC_ClockConfig+0x268>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d93f      	bls.n	8002342 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022c2:	4b7a      	ldr	r3, [pc, #488]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d033      	beq.n	8002342 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d12f      	bne.n	8002342 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022e2:	4b72      	ldr	r3, [pc, #456]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022ea:	4a70      	ldr	r2, [pc, #448]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80022ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022f2:	2380      	movs	r3, #128	@ 0x80
 80022f4:	617b      	str	r3, [r7, #20]
 80022f6:	e024      	b.n	8002342 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002300:	4b6a      	ldr	r3, [pc, #424]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d109      	bne.n	8002320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0c6      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002310:	4b66      	ldr	r3, [pc, #408]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0be      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002320:	f000 f8ce 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8002324:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4a61      	ldr	r2, [pc, #388]	@ (80024b0 <HAL_RCC_ClockConfig+0x268>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d909      	bls.n	8002342 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800232e:	4b5f      	ldr	r3, [pc, #380]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002336:	4a5d      	ldr	r2, [pc, #372]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800233c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800233e:	2380      	movs	r3, #128	@ 0x80
 8002340:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b5a      	ldr	r3, [pc, #360]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4957      	ldr	r1, [pc, #348]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002354:	f7fe fae2 	bl	800091c <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe fade 	bl	800091c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e095      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b4e      	ldr	r3, [pc, #312]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d023      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b43      	ldr	r3, [pc, #268]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4a42      	ldr	r2, [pc, #264]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023b4:	4b3d      	ldr	r3, [pc, #244]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023bc:	4a3b      	ldr	r2, [pc, #236]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b39      	ldr	r3, [pc, #228]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4936      	ldr	r1, [pc, #216]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
 80023d6:	e008      	b.n	80023ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b80      	cmp	r3, #128	@ 0x80
 80023dc:	d105      	bne.n	80023ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023de:	4b33      	ldr	r3, [pc, #204]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	4a32      	ldr	r2, [pc, #200]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 80023e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ea:	4b2f      	ldr	r3, [pc, #188]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d21d      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 020f 	bic.w	r2, r3, #15
 8002400:	4929      	ldr	r1, [pc, #164]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	4313      	orrs	r3, r2
 8002406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002408:	f7fe fa88 	bl	800091c <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fa84 	bl	800091c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e03b      	b.n	800249e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002426:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_RCC_ClockConfig+0x260>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d1ed      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4917      	ldr	r1, [pc, #92]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490f      	ldr	r1, [pc, #60]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002472:	f000 f825 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <HAL_RCC_ClockConfig+0x264>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490c      	ldr	r1, [pc, #48]	@ (80024b4 <HAL_RCC_ClockConfig+0x26c>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	fa22 f303 	lsr.w	r3, r2, r3
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_RCC_ClockConfig+0x270>)
 8002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002492:	4b0a      	ldr	r3, [pc, #40]	@ (80024bc <HAL_RCC_ClockConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f9f4 	bl	8000884 <HAL_InitTick>
 800249c:	4603      	mov	r3, r0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40022000 	.word	0x40022000
 80024ac:	40021000 	.word	0x40021000
 80024b0:	04c4b400 	.word	0x04c4b400
 80024b4:	0800394c 	.word	0x0800394c
 80024b8:	20000000 	.word	0x20000000
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d2:	4b2a      	ldr	r3, [pc, #168]	@ (800257c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e047      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024d8:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e4:	4b26      	ldr	r3, [pc, #152]	@ (8002580 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	e03e      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ea:	4b23      	ldr	r3, [pc, #140]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d136      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024f6:	4b20      	ldr	r3, [pc, #128]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d10c      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002514:	4a1a      	ldr	r2, [pc, #104]	@ (8002580 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	fbb2 f3f3 	udiv	r3, r2, r3
 800251c:	4a16      	ldr	r2, [pc, #88]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251e:	68d2      	ldr	r2, [r2, #12]
 8002520:	0a12      	lsrs	r2, r2, #8
 8002522:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002526:	fb02 f303 	mul.w	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
      break;
 800252c:	e00c      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800252e:	4a13      	ldr	r2, [pc, #76]	@ (800257c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	fbb2 f3f3 	udiv	r3, r2, r3
 8002536:	4a10      	ldr	r2, [pc, #64]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002538:	68d2      	ldr	r2, [r2, #12]
 800253a:	0a12      	lsrs	r2, r2, #8
 800253c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002540:	fb02 f303 	mul.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
      break;
 8002546:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0e5b      	lsrs	r3, r3, #25
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e001      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002568:	693b      	ldr	r3, [r7, #16]
}
 800256a:	4618      	mov	r0, r3
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	00f42400 	.word	0x00f42400
 8002580:	007a1200 	.word	0x007a1200

08002584 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258a:	4b1e      	ldr	r3, [pc, #120]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3301      	adds	r3, #1
 80025a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d10c      	bne.n	80025c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025a8:	4a17      	ldr	r2, [pc, #92]	@ (8002608 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	4a14      	ldr	r2, [pc, #80]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025b2:	68d2      	ldr	r2, [r2, #12]
 80025b4:	0a12      	lsrs	r2, r2, #8
 80025b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
    break;
 80025c0:	e00c      	b.n	80025dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ca:	4a0e      	ldr	r2, [pc, #56]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025cc:	68d2      	ldr	r2, [r2, #12]
 80025ce:	0a12      	lsrs	r2, r2, #8
 80025d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025d4:	fb02 f303 	mul.w	r3, r2, r3
 80025d8:	617b      	str	r3, [r7, #20]
    break;
 80025da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0e5b      	lsrs	r3, r3, #25
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	3301      	adds	r3, #1
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80025f6:	687b      	ldr	r3, [r7, #4]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	00f42400 	.word	0x00f42400

08002610 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002618:	2300      	movs	r3, #0
 800261a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800261c:	2300      	movs	r3, #0
 800261e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8098 	beq.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10d      	bne.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	4b40      	ldr	r3, [pc, #256]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	6593      	str	r3, [r2, #88]	@ 0x58
 800264a:	4b3d      	ldr	r3, [pc, #244]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	60bb      	str	r3, [r7, #8]
 8002654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002656:	2301      	movs	r3, #1
 8002658:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265a:	4b3a      	ldr	r3, [pc, #232]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a39      	ldr	r2, [pc, #228]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002664:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002666:	f7fe f959 	bl	800091c <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266c:	e009      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7fe f955 	bl	800091c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d902      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	74fb      	strb	r3, [r7, #19]
        break;
 8002680:	e005      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002682:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0ef      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d159      	bne.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002694:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800269e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01e      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d019      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026b0:	4b23      	ldr	r3, [pc, #140]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026bc:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026dc:	4a18      	ldr	r2, [pc, #96]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d016      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe f915 	bl	800091c <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f4:	e00b      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7fe f911 	bl	800091c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d902      	bls.n	800270e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	74fb      	strb	r3, [r7, #19]
            break;
 800270c:	e006      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800270e:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ec      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800271c:	7cfb      	ldrb	r3, [r7, #19]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002722:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002728:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	4903      	ldr	r1, [pc, #12]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002738:	e008      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
 800273e:	e005      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002740:	40021000 	.word	0x40021000
 8002744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800274c:	7c7b      	ldrb	r3, [r7, #17]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4ba6      	ldr	r3, [pc, #664]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002756:	4aa5      	ldr	r2, [pc, #660]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800276a:	4ba0      	ldr	r3, [pc, #640]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002770:	f023 0203 	bic.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	499c      	ldr	r1, [pc, #624]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800278c:	4b97      	ldr	r3, [pc, #604]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 020c 	bic.w	r2, r3, #12
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4994      	ldr	r1, [pc, #592]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ae:	4b8f      	ldr	r3, [pc, #572]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	498b      	ldr	r1, [pc, #556]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027d0:	4b86      	ldr	r3, [pc, #536]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	4983      	ldr	r1, [pc, #524]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027f2:	4b7e      	ldr	r3, [pc, #504]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	497a      	ldr	r1, [pc, #488]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002814:	4b75      	ldr	r3, [pc, #468]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	4972      	ldr	r1, [pc, #456]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002836:	4b6d      	ldr	r3, [pc, #436]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4969      	ldr	r1, [pc, #420]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002858:	4b64      	ldr	r3, [pc, #400]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4961      	ldr	r1, [pc, #388]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287a:	4b5c      	ldr	r3, [pc, #368]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002880:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	4958      	ldr	r1, [pc, #352]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d015      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800289c:	4b53      	ldr	r3, [pc, #332]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028aa:	4950      	ldr	r1, [pc, #320]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028ba:	d105      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028bc:	4b4b      	ldr	r3, [pc, #300]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d4:	4b45      	ldr	r3, [pc, #276]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e2:	4942      	ldr	r1, [pc, #264]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f2:	d105      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f4:	4b3d      	ldr	r3, [pc, #244]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4a3c      	ldr	r2, [pc, #240]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d015      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800290c:	4b37      	ldr	r3, [pc, #220]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002912:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4934      	ldr	r1, [pc, #208]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800292a:	d105      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a2e      	ldr	r2, [pc, #184]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002936:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002952:	4926      	ldr	r1, [pc, #152]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800295e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002962:	d105      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a20      	ldr	r2, [pc, #128]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800297c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	4918      	ldr	r1, [pc, #96]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299a:	d105      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a12      	ldr	r2, [pc, #72]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	490a      	ldr	r1, [pc, #40]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029d2:	d105      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029de:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80029e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40021000 	.word	0x40021000

080029f0 <std>:
 80029f0:	2300      	movs	r3, #0
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	e9c0 3300 	strd	r3, r3, [r0]
 80029fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029fe:	6083      	str	r3, [r0, #8]
 8002a00:	8181      	strh	r1, [r0, #12]
 8002a02:	6643      	str	r3, [r0, #100]	@ 0x64
 8002a04:	81c2      	strh	r2, [r0, #14]
 8002a06:	6183      	str	r3, [r0, #24]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	305c      	adds	r0, #92	@ 0x5c
 8002a0e:	f000 f9f9 	bl	8002e04 <memset>
 8002a12:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <std+0x58>)
 8002a14:	6263      	str	r3, [r4, #36]	@ 0x24
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <std+0x5c>)
 8002a18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <std+0x60>)
 8002a1c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <std+0x64>)
 8002a20:	6323      	str	r3, [r4, #48]	@ 0x30
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <std+0x68>)
 8002a24:	6224      	str	r4, [r4, #32]
 8002a26:	429c      	cmp	r4, r3
 8002a28:	d006      	beq.n	8002a38 <std+0x48>
 8002a2a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002a2e:	4294      	cmp	r4, r2
 8002a30:	d002      	beq.n	8002a38 <std+0x48>
 8002a32:	33d0      	adds	r3, #208	@ 0xd0
 8002a34:	429c      	cmp	r4, r3
 8002a36:	d105      	bne.n	8002a44 <std+0x54>
 8002a38:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a40:	f000 ba58 	b.w	8002ef4 <__retarget_lock_init_recursive>
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	bf00      	nop
 8002a48:	08002c55 	.word	0x08002c55
 8002a4c:	08002c77 	.word	0x08002c77
 8002a50:	08002caf 	.word	0x08002caf
 8002a54:	08002cd3 	.word	0x08002cd3
 8002a58:	200000f0 	.word	0x200000f0

08002a5c <stdio_exit_handler>:
 8002a5c:	4a02      	ldr	r2, [pc, #8]	@ (8002a68 <stdio_exit_handler+0xc>)
 8002a5e:	4903      	ldr	r1, [pc, #12]	@ (8002a6c <stdio_exit_handler+0x10>)
 8002a60:	4803      	ldr	r0, [pc, #12]	@ (8002a70 <stdio_exit_handler+0x14>)
 8002a62:	f000 b869 	b.w	8002b38 <_fwalk_sglue>
 8002a66:	bf00      	nop
 8002a68:	2000000c 	.word	0x2000000c
 8002a6c:	08003795 	.word	0x08003795
 8002a70:	2000001c 	.word	0x2000001c

08002a74 <cleanup_stdio>:
 8002a74:	6841      	ldr	r1, [r0, #4]
 8002a76:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <cleanup_stdio+0x34>)
 8002a78:	4299      	cmp	r1, r3
 8002a7a:	b510      	push	{r4, lr}
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	d001      	beq.n	8002a84 <cleanup_stdio+0x10>
 8002a80:	f000 fe88 	bl	8003794 <_fflush_r>
 8002a84:	68a1      	ldr	r1, [r4, #8]
 8002a86:	4b09      	ldr	r3, [pc, #36]	@ (8002aac <cleanup_stdio+0x38>)
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d002      	beq.n	8002a92 <cleanup_stdio+0x1e>
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f000 fe81 	bl	8003794 <_fflush_r>
 8002a92:	68e1      	ldr	r1, [r4, #12]
 8002a94:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <cleanup_stdio+0x3c>)
 8002a96:	4299      	cmp	r1, r3
 8002a98:	d004      	beq.n	8002aa4 <cleanup_stdio+0x30>
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aa0:	f000 be78 	b.w	8003794 <_fflush_r>
 8002aa4:	bd10      	pop	{r4, pc}
 8002aa6:	bf00      	nop
 8002aa8:	200000f0 	.word	0x200000f0
 8002aac:	20000158 	.word	0x20000158
 8002ab0:	200001c0 	.word	0x200001c0

08002ab4 <global_stdio_init.part.0>:
 8002ab4:	b510      	push	{r4, lr}
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae4 <global_stdio_init.part.0+0x30>)
 8002ab8:	4c0b      	ldr	r4, [pc, #44]	@ (8002ae8 <global_stdio_init.part.0+0x34>)
 8002aba:	4a0c      	ldr	r2, [pc, #48]	@ (8002aec <global_stdio_init.part.0+0x38>)
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	4620      	mov	r0, r4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	f7ff ff94 	bl	80029f0 <std>
 8002ac8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002acc:	2201      	movs	r2, #1
 8002ace:	2109      	movs	r1, #9
 8002ad0:	f7ff ff8e 	bl	80029f0 <std>
 8002ad4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002ad8:	2202      	movs	r2, #2
 8002ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ade:	2112      	movs	r1, #18
 8002ae0:	f7ff bf86 	b.w	80029f0 <std>
 8002ae4:	20000228 	.word	0x20000228
 8002ae8:	200000f0 	.word	0x200000f0
 8002aec:	08002a5d 	.word	0x08002a5d

08002af0 <__sfp_lock_acquire>:
 8002af0:	4801      	ldr	r0, [pc, #4]	@ (8002af8 <__sfp_lock_acquire+0x8>)
 8002af2:	f000 ba00 	b.w	8002ef6 <__retarget_lock_acquire_recursive>
 8002af6:	bf00      	nop
 8002af8:	20000231 	.word	0x20000231

08002afc <__sfp_lock_release>:
 8002afc:	4801      	ldr	r0, [pc, #4]	@ (8002b04 <__sfp_lock_release+0x8>)
 8002afe:	f000 b9fb 	b.w	8002ef8 <__retarget_lock_release_recursive>
 8002b02:	bf00      	nop
 8002b04:	20000231 	.word	0x20000231

08002b08 <__sinit>:
 8002b08:	b510      	push	{r4, lr}
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	f7ff fff0 	bl	8002af0 <__sfp_lock_acquire>
 8002b10:	6a23      	ldr	r3, [r4, #32]
 8002b12:	b11b      	cbz	r3, 8002b1c <__sinit+0x14>
 8002b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b18:	f7ff bff0 	b.w	8002afc <__sfp_lock_release>
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <__sinit+0x28>)
 8002b1e:	6223      	str	r3, [r4, #32]
 8002b20:	4b04      	ldr	r3, [pc, #16]	@ (8002b34 <__sinit+0x2c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1f5      	bne.n	8002b14 <__sinit+0xc>
 8002b28:	f7ff ffc4 	bl	8002ab4 <global_stdio_init.part.0>
 8002b2c:	e7f2      	b.n	8002b14 <__sinit+0xc>
 8002b2e:	bf00      	nop
 8002b30:	08002a75 	.word	0x08002a75
 8002b34:	20000228 	.word	0x20000228

08002b38 <_fwalk_sglue>:
 8002b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b3c:	4607      	mov	r7, r0
 8002b3e:	4688      	mov	r8, r1
 8002b40:	4614      	mov	r4, r2
 8002b42:	2600      	movs	r6, #0
 8002b44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b48:	f1b9 0901 	subs.w	r9, r9, #1
 8002b4c:	d505      	bpl.n	8002b5a <_fwalk_sglue+0x22>
 8002b4e:	6824      	ldr	r4, [r4, #0]
 8002b50:	2c00      	cmp	r4, #0
 8002b52:	d1f7      	bne.n	8002b44 <_fwalk_sglue+0xc>
 8002b54:	4630      	mov	r0, r6
 8002b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5a:	89ab      	ldrh	r3, [r5, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d907      	bls.n	8002b70 <_fwalk_sglue+0x38>
 8002b60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b64:	3301      	adds	r3, #1
 8002b66:	d003      	beq.n	8002b70 <_fwalk_sglue+0x38>
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	47c0      	blx	r8
 8002b6e:	4306      	orrs	r6, r0
 8002b70:	3568      	adds	r5, #104	@ 0x68
 8002b72:	e7e9      	b.n	8002b48 <_fwalk_sglue+0x10>

08002b74 <iprintf>:
 8002b74:	b40f      	push	{r0, r1, r2, r3}
 8002b76:	b507      	push	{r0, r1, r2, lr}
 8002b78:	4906      	ldr	r1, [pc, #24]	@ (8002b94 <iprintf+0x20>)
 8002b7a:	ab04      	add	r3, sp, #16
 8002b7c:	6808      	ldr	r0, [r1, #0]
 8002b7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b82:	6881      	ldr	r1, [r0, #8]
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	f000 fadb 	bl	8003140 <_vfiprintf_r>
 8002b8a:	b003      	add	sp, #12
 8002b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b90:	b004      	add	sp, #16
 8002b92:	4770      	bx	lr
 8002b94:	20000018 	.word	0x20000018

08002b98 <_puts_r>:
 8002b98:	6a03      	ldr	r3, [r0, #32]
 8002b9a:	b570      	push	{r4, r5, r6, lr}
 8002b9c:	6884      	ldr	r4, [r0, #8]
 8002b9e:	4605      	mov	r5, r0
 8002ba0:	460e      	mov	r6, r1
 8002ba2:	b90b      	cbnz	r3, 8002ba8 <_puts_r+0x10>
 8002ba4:	f7ff ffb0 	bl	8002b08 <__sinit>
 8002ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002baa:	07db      	lsls	r3, r3, #31
 8002bac:	d405      	bmi.n	8002bba <_puts_r+0x22>
 8002bae:	89a3      	ldrh	r3, [r4, #12]
 8002bb0:	0598      	lsls	r0, r3, #22
 8002bb2:	d402      	bmi.n	8002bba <_puts_r+0x22>
 8002bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002bb6:	f000 f99e 	bl	8002ef6 <__retarget_lock_acquire_recursive>
 8002bba:	89a3      	ldrh	r3, [r4, #12]
 8002bbc:	0719      	lsls	r1, r3, #28
 8002bbe:	d502      	bpl.n	8002bc6 <_puts_r+0x2e>
 8002bc0:	6923      	ldr	r3, [r4, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d135      	bne.n	8002c32 <_puts_r+0x9a>
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f000 f8c5 	bl	8002d58 <__swsetup_r>
 8002bce:	b380      	cbz	r0, 8002c32 <_puts_r+0x9a>
 8002bd0:	f04f 35ff 	mov.w	r5, #4294967295
 8002bd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002bd6:	07da      	lsls	r2, r3, #31
 8002bd8:	d405      	bmi.n	8002be6 <_puts_r+0x4e>
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	059b      	lsls	r3, r3, #22
 8002bde:	d402      	bmi.n	8002be6 <_puts_r+0x4e>
 8002be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002be2:	f000 f989 	bl	8002ef8 <__retarget_lock_release_recursive>
 8002be6:	4628      	mov	r0, r5
 8002be8:	bd70      	pop	{r4, r5, r6, pc}
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da04      	bge.n	8002bf8 <_puts_r+0x60>
 8002bee:	69a2      	ldr	r2, [r4, #24]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dc17      	bgt.n	8002c24 <_puts_r+0x8c>
 8002bf4:	290a      	cmp	r1, #10
 8002bf6:	d015      	beq.n	8002c24 <_puts_r+0x8c>
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	6022      	str	r2, [r4, #0]
 8002bfe:	7019      	strb	r1, [r3, #0]
 8002c00:	68a3      	ldr	r3, [r4, #8]
 8002c02:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60a3      	str	r3, [r4, #8]
 8002c0a:	2900      	cmp	r1, #0
 8002c0c:	d1ed      	bne.n	8002bea <_puts_r+0x52>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da11      	bge.n	8002c36 <_puts_r+0x9e>
 8002c12:	4622      	mov	r2, r4
 8002c14:	210a      	movs	r1, #10
 8002c16:	4628      	mov	r0, r5
 8002c18:	f000 f85f 	bl	8002cda <__swbuf_r>
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d0d7      	beq.n	8002bd0 <_puts_r+0x38>
 8002c20:	250a      	movs	r5, #10
 8002c22:	e7d7      	b.n	8002bd4 <_puts_r+0x3c>
 8002c24:	4622      	mov	r2, r4
 8002c26:	4628      	mov	r0, r5
 8002c28:	f000 f857 	bl	8002cda <__swbuf_r>
 8002c2c:	3001      	adds	r0, #1
 8002c2e:	d1e7      	bne.n	8002c00 <_puts_r+0x68>
 8002c30:	e7ce      	b.n	8002bd0 <_puts_r+0x38>
 8002c32:	3e01      	subs	r6, #1
 8002c34:	e7e4      	b.n	8002c00 <_puts_r+0x68>
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	6022      	str	r2, [r4, #0]
 8002c3c:	220a      	movs	r2, #10
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	e7ee      	b.n	8002c20 <_puts_r+0x88>
	...

08002c44 <puts>:
 8002c44:	4b02      	ldr	r3, [pc, #8]	@ (8002c50 <puts+0xc>)
 8002c46:	4601      	mov	r1, r0
 8002c48:	6818      	ldr	r0, [r3, #0]
 8002c4a:	f7ff bfa5 	b.w	8002b98 <_puts_r>
 8002c4e:	bf00      	nop
 8002c50:	20000018 	.word	0x20000018

08002c54 <__sread>:
 8002c54:	b510      	push	{r4, lr}
 8002c56:	460c      	mov	r4, r1
 8002c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5c:	f000 f8fc 	bl	8002e58 <_read_r>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	bfab      	itete	ge
 8002c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002c66:	89a3      	ldrhlt	r3, [r4, #12]
 8002c68:	181b      	addge	r3, r3, r0
 8002c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002c6e:	bfac      	ite	ge
 8002c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002c72:	81a3      	strhlt	r3, [r4, #12]
 8002c74:	bd10      	pop	{r4, pc}

08002c76 <__swrite>:
 8002c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c7a:	461f      	mov	r7, r3
 8002c7c:	898b      	ldrh	r3, [r1, #12]
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	4605      	mov	r5, r0
 8002c82:	460c      	mov	r4, r1
 8002c84:	4616      	mov	r6, r2
 8002c86:	d505      	bpl.n	8002c94 <__swrite+0x1e>
 8002c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f000 f8d0 	bl	8002e34 <_lseek_r>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c9e:	81a3      	strh	r3, [r4, #12]
 8002ca0:	4632      	mov	r2, r6
 8002ca2:	463b      	mov	r3, r7
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002caa:	f000 b8e7 	b.w	8002e7c <_write_r>

08002cae <__sseek>:
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	460c      	mov	r4, r1
 8002cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cb6:	f000 f8bd 	bl	8002e34 <_lseek_r>
 8002cba:	1c43      	adds	r3, r0, #1
 8002cbc:	89a3      	ldrh	r3, [r4, #12]
 8002cbe:	bf15      	itete	ne
 8002cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002cca:	81a3      	strheq	r3, [r4, #12]
 8002ccc:	bf18      	it	ne
 8002cce:	81a3      	strhne	r3, [r4, #12]
 8002cd0:	bd10      	pop	{r4, pc}

08002cd2 <__sclose>:
 8002cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cd6:	f000 b89d 	b.w	8002e14 <_close_r>

08002cda <__swbuf_r>:
 8002cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cdc:	460e      	mov	r6, r1
 8002cde:	4614      	mov	r4, r2
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	b118      	cbz	r0, 8002cec <__swbuf_r+0x12>
 8002ce4:	6a03      	ldr	r3, [r0, #32]
 8002ce6:	b90b      	cbnz	r3, 8002cec <__swbuf_r+0x12>
 8002ce8:	f7ff ff0e 	bl	8002b08 <__sinit>
 8002cec:	69a3      	ldr	r3, [r4, #24]
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	071a      	lsls	r2, r3, #28
 8002cf4:	d501      	bpl.n	8002cfa <__swbuf_r+0x20>
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	b943      	cbnz	r3, 8002d0c <__swbuf_r+0x32>
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	4628      	mov	r0, r5
 8002cfe:	f000 f82b 	bl	8002d58 <__swsetup_r>
 8002d02:	b118      	cbz	r0, 8002d0c <__swbuf_r+0x32>
 8002d04:	f04f 37ff 	mov.w	r7, #4294967295
 8002d08:	4638      	mov	r0, r7
 8002d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	6922      	ldr	r2, [r4, #16]
 8002d10:	1a98      	subs	r0, r3, r2
 8002d12:	6963      	ldr	r3, [r4, #20]
 8002d14:	b2f6      	uxtb	r6, r6
 8002d16:	4283      	cmp	r3, r0
 8002d18:	4637      	mov	r7, r6
 8002d1a:	dc05      	bgt.n	8002d28 <__swbuf_r+0x4e>
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f000 fd38 	bl	8003794 <_fflush_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d1ed      	bne.n	8002d04 <__swbuf_r+0x2a>
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	60a3      	str	r3, [r4, #8]
 8002d2e:	6823      	ldr	r3, [r4, #0]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	6022      	str	r2, [r4, #0]
 8002d34:	701e      	strb	r6, [r3, #0]
 8002d36:	6962      	ldr	r2, [r4, #20]
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d004      	beq.n	8002d48 <__swbuf_r+0x6e>
 8002d3e:	89a3      	ldrh	r3, [r4, #12]
 8002d40:	07db      	lsls	r3, r3, #31
 8002d42:	d5e1      	bpl.n	8002d08 <__swbuf_r+0x2e>
 8002d44:	2e0a      	cmp	r6, #10
 8002d46:	d1df      	bne.n	8002d08 <__swbuf_r+0x2e>
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4628      	mov	r0, r5
 8002d4c:	f000 fd22 	bl	8003794 <_fflush_r>
 8002d50:	2800      	cmp	r0, #0
 8002d52:	d0d9      	beq.n	8002d08 <__swbuf_r+0x2e>
 8002d54:	e7d6      	b.n	8002d04 <__swbuf_r+0x2a>
	...

08002d58 <__swsetup_r>:
 8002d58:	b538      	push	{r3, r4, r5, lr}
 8002d5a:	4b29      	ldr	r3, [pc, #164]	@ (8002e00 <__swsetup_r+0xa8>)
 8002d5c:	4605      	mov	r5, r0
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	460c      	mov	r4, r1
 8002d62:	b118      	cbz	r0, 8002d6c <__swsetup_r+0x14>
 8002d64:	6a03      	ldr	r3, [r0, #32]
 8002d66:	b90b      	cbnz	r3, 8002d6c <__swsetup_r+0x14>
 8002d68:	f7ff fece 	bl	8002b08 <__sinit>
 8002d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d70:	0719      	lsls	r1, r3, #28
 8002d72:	d422      	bmi.n	8002dba <__swsetup_r+0x62>
 8002d74:	06da      	lsls	r2, r3, #27
 8002d76:	d407      	bmi.n	8002d88 <__swsetup_r+0x30>
 8002d78:	2209      	movs	r2, #9
 8002d7a:	602a      	str	r2, [r5, #0]
 8002d7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d80:	81a3      	strh	r3, [r4, #12]
 8002d82:	f04f 30ff 	mov.w	r0, #4294967295
 8002d86:	e033      	b.n	8002df0 <__swsetup_r+0x98>
 8002d88:	0758      	lsls	r0, r3, #29
 8002d8a:	d512      	bpl.n	8002db2 <__swsetup_r+0x5a>
 8002d8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d8e:	b141      	cbz	r1, 8002da2 <__swsetup_r+0x4a>
 8002d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d94:	4299      	cmp	r1, r3
 8002d96:	d002      	beq.n	8002d9e <__swsetup_r+0x46>
 8002d98:	4628      	mov	r0, r5
 8002d9a:	f000 f8af 	bl	8002efc <_free_r>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002da8:	81a3      	strh	r3, [r4, #12]
 8002daa:	2300      	movs	r3, #0
 8002dac:	6063      	str	r3, [r4, #4]
 8002dae:	6923      	ldr	r3, [r4, #16]
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	89a3      	ldrh	r3, [r4, #12]
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	81a3      	strh	r3, [r4, #12]
 8002dba:	6923      	ldr	r3, [r4, #16]
 8002dbc:	b94b      	cbnz	r3, 8002dd2 <__swsetup_r+0x7a>
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc8:	d003      	beq.n	8002dd2 <__swsetup_r+0x7a>
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 fd2f 	bl	8003830 <__smakebuf_r>
 8002dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd6:	f013 0201 	ands.w	r2, r3, #1
 8002dda:	d00a      	beq.n	8002df2 <__swsetup_r+0x9a>
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60a2      	str	r2, [r4, #8]
 8002de0:	6962      	ldr	r2, [r4, #20]
 8002de2:	4252      	negs	r2, r2
 8002de4:	61a2      	str	r2, [r4, #24]
 8002de6:	6922      	ldr	r2, [r4, #16]
 8002de8:	b942      	cbnz	r2, 8002dfc <__swsetup_r+0xa4>
 8002dea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002dee:	d1c5      	bne.n	8002d7c <__swsetup_r+0x24>
 8002df0:	bd38      	pop	{r3, r4, r5, pc}
 8002df2:	0799      	lsls	r1, r3, #30
 8002df4:	bf58      	it	pl
 8002df6:	6962      	ldrpl	r2, [r4, #20]
 8002df8:	60a2      	str	r2, [r4, #8]
 8002dfa:	e7f4      	b.n	8002de6 <__swsetup_r+0x8e>
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	e7f7      	b.n	8002df0 <__swsetup_r+0x98>
 8002e00:	20000018 	.word	0x20000018

08002e04 <memset>:
 8002e04:	4402      	add	r2, r0
 8002e06:	4603      	mov	r3, r0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <memset+0xa>
 8002e0c:	4770      	bx	lr
 8002e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e12:	e7f9      	b.n	8002e08 <memset+0x4>

08002e14 <_close_r>:
 8002e14:	b538      	push	{r3, r4, r5, lr}
 8002e16:	4d06      	ldr	r5, [pc, #24]	@ (8002e30 <_close_r+0x1c>)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	602b      	str	r3, [r5, #0]
 8002e20:	f7fd fc71 	bl	8000706 <_close>
 8002e24:	1c43      	adds	r3, r0, #1
 8002e26:	d102      	bne.n	8002e2e <_close_r+0x1a>
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	b103      	cbz	r3, 8002e2e <_close_r+0x1a>
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	bd38      	pop	{r3, r4, r5, pc}
 8002e30:	2000022c 	.word	0x2000022c

08002e34 <_lseek_r>:
 8002e34:	b538      	push	{r3, r4, r5, lr}
 8002e36:	4d07      	ldr	r5, [pc, #28]	@ (8002e54 <_lseek_r+0x20>)
 8002e38:	4604      	mov	r4, r0
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	2200      	movs	r2, #0
 8002e40:	602a      	str	r2, [r5, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	f7fd fc86 	bl	8000754 <_lseek>
 8002e48:	1c43      	adds	r3, r0, #1
 8002e4a:	d102      	bne.n	8002e52 <_lseek_r+0x1e>
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	b103      	cbz	r3, 8002e52 <_lseek_r+0x1e>
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	bd38      	pop	{r3, r4, r5, pc}
 8002e54:	2000022c 	.word	0x2000022c

08002e58 <_read_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4d07      	ldr	r5, [pc, #28]	@ (8002e78 <_read_r+0x20>)
 8002e5c:	4604      	mov	r4, r0
 8002e5e:	4608      	mov	r0, r1
 8002e60:	4611      	mov	r1, r2
 8002e62:	2200      	movs	r2, #0
 8002e64:	602a      	str	r2, [r5, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f7fd fc14 	bl	8000694 <_read>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	d102      	bne.n	8002e76 <_read_r+0x1e>
 8002e70:	682b      	ldr	r3, [r5, #0]
 8002e72:	b103      	cbz	r3, 8002e76 <_read_r+0x1e>
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	bd38      	pop	{r3, r4, r5, pc}
 8002e78:	2000022c 	.word	0x2000022c

08002e7c <_write_r>:
 8002e7c:	b538      	push	{r3, r4, r5, lr}
 8002e7e:	4d07      	ldr	r5, [pc, #28]	@ (8002e9c <_write_r+0x20>)
 8002e80:	4604      	mov	r4, r0
 8002e82:	4608      	mov	r0, r1
 8002e84:	4611      	mov	r1, r2
 8002e86:	2200      	movs	r2, #0
 8002e88:	602a      	str	r2, [r5, #0]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f7fd fc1f 	bl	80006ce <_write>
 8002e90:	1c43      	adds	r3, r0, #1
 8002e92:	d102      	bne.n	8002e9a <_write_r+0x1e>
 8002e94:	682b      	ldr	r3, [r5, #0]
 8002e96:	b103      	cbz	r3, 8002e9a <_write_r+0x1e>
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
 8002e9c:	2000022c 	.word	0x2000022c

08002ea0 <__errno>:
 8002ea0:	4b01      	ldr	r3, [pc, #4]	@ (8002ea8 <__errno+0x8>)
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20000018 	.word	0x20000018

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	4d0d      	ldr	r5, [pc, #52]	@ (8002ee4 <__libc_init_array+0x38>)
 8002eb0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ee8 <__libc_init_array+0x3c>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	2600      	movs	r6, #0
 8002eb8:	42a6      	cmp	r6, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	4d0b      	ldr	r5, [pc, #44]	@ (8002eec <__libc_init_array+0x40>)
 8002ebe:	4c0c      	ldr	r4, [pc, #48]	@ (8002ef0 <__libc_init_array+0x44>)
 8002ec0:	f000 fd24 	bl	800390c <_init>
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	2600      	movs	r6, #0
 8002eca:	42a6      	cmp	r6, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ed4:	4798      	blx	r3
 8002ed6:	3601      	adds	r6, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ede:	4798      	blx	r3
 8002ee0:	3601      	adds	r6, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	080039a8 	.word	0x080039a8
 8002ee8:	080039a8 	.word	0x080039a8
 8002eec:	080039a8 	.word	0x080039a8
 8002ef0:	080039ac 	.word	0x080039ac

08002ef4 <__retarget_lock_init_recursive>:
 8002ef4:	4770      	bx	lr

08002ef6 <__retarget_lock_acquire_recursive>:
 8002ef6:	4770      	bx	lr

08002ef8 <__retarget_lock_release_recursive>:
 8002ef8:	4770      	bx	lr
	...

08002efc <_free_r>:
 8002efc:	b538      	push	{r3, r4, r5, lr}
 8002efe:	4605      	mov	r5, r0
 8002f00:	2900      	cmp	r1, #0
 8002f02:	d041      	beq.n	8002f88 <_free_r+0x8c>
 8002f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f08:	1f0c      	subs	r4, r1, #4
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bfb8      	it	lt
 8002f0e:	18e4      	addlt	r4, r4, r3
 8002f10:	f000 f8e0 	bl	80030d4 <__malloc_lock>
 8002f14:	4a1d      	ldr	r2, [pc, #116]	@ (8002f8c <_free_r+0x90>)
 8002f16:	6813      	ldr	r3, [r2, #0]
 8002f18:	b933      	cbnz	r3, 8002f28 <_free_r+0x2c>
 8002f1a:	6063      	str	r3, [r4, #4]
 8002f1c:	6014      	str	r4, [r2, #0]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f24:	f000 b8dc 	b.w	80030e0 <__malloc_unlock>
 8002f28:	42a3      	cmp	r3, r4
 8002f2a:	d908      	bls.n	8002f3e <_free_r+0x42>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	1821      	adds	r1, r4, r0
 8002f30:	428b      	cmp	r3, r1
 8002f32:	bf01      	itttt	eq
 8002f34:	6819      	ldreq	r1, [r3, #0]
 8002f36:	685b      	ldreq	r3, [r3, #4]
 8002f38:	1809      	addeq	r1, r1, r0
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	e7ed      	b.n	8002f1a <_free_r+0x1e>
 8002f3e:	461a      	mov	r2, r3
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b10b      	cbz	r3, 8002f48 <_free_r+0x4c>
 8002f44:	42a3      	cmp	r3, r4
 8002f46:	d9fa      	bls.n	8002f3e <_free_r+0x42>
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	1850      	adds	r0, r2, r1
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d10b      	bne.n	8002f68 <_free_r+0x6c>
 8002f50:	6820      	ldr	r0, [r4, #0]
 8002f52:	4401      	add	r1, r0
 8002f54:	1850      	adds	r0, r2, r1
 8002f56:	4283      	cmp	r3, r0
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	d1e0      	bne.n	8002f1e <_free_r+0x22>
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	6053      	str	r3, [r2, #4]
 8002f62:	4408      	add	r0, r1
 8002f64:	6010      	str	r0, [r2, #0]
 8002f66:	e7da      	b.n	8002f1e <_free_r+0x22>
 8002f68:	d902      	bls.n	8002f70 <_free_r+0x74>
 8002f6a:	230c      	movs	r3, #12
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	e7d6      	b.n	8002f1e <_free_r+0x22>
 8002f70:	6820      	ldr	r0, [r4, #0]
 8002f72:	1821      	adds	r1, r4, r0
 8002f74:	428b      	cmp	r3, r1
 8002f76:	bf04      	itt	eq
 8002f78:	6819      	ldreq	r1, [r3, #0]
 8002f7a:	685b      	ldreq	r3, [r3, #4]
 8002f7c:	6063      	str	r3, [r4, #4]
 8002f7e:	bf04      	itt	eq
 8002f80:	1809      	addeq	r1, r1, r0
 8002f82:	6021      	streq	r1, [r4, #0]
 8002f84:	6054      	str	r4, [r2, #4]
 8002f86:	e7ca      	b.n	8002f1e <_free_r+0x22>
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000238 	.word	0x20000238

08002f90 <sbrk_aligned>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4e0f      	ldr	r6, [pc, #60]	@ (8002fd0 <sbrk_aligned+0x40>)
 8002f94:	460c      	mov	r4, r1
 8002f96:	6831      	ldr	r1, [r6, #0]
 8002f98:	4605      	mov	r5, r0
 8002f9a:	b911      	cbnz	r1, 8002fa2 <sbrk_aligned+0x12>
 8002f9c:	f000 fca6 	bl	80038ec <_sbrk_r>
 8002fa0:	6030      	str	r0, [r6, #0]
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 fca1 	bl	80038ec <_sbrk_r>
 8002faa:	1c43      	adds	r3, r0, #1
 8002fac:	d103      	bne.n	8002fb6 <sbrk_aligned+0x26>
 8002fae:	f04f 34ff 	mov.w	r4, #4294967295
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	1cc4      	adds	r4, r0, #3
 8002fb8:	f024 0403 	bic.w	r4, r4, #3
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d0f8      	beq.n	8002fb2 <sbrk_aligned+0x22>
 8002fc0:	1a21      	subs	r1, r4, r0
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f000 fc92 	bl	80038ec <_sbrk_r>
 8002fc8:	3001      	adds	r0, #1
 8002fca:	d1f2      	bne.n	8002fb2 <sbrk_aligned+0x22>
 8002fcc:	e7ef      	b.n	8002fae <sbrk_aligned+0x1e>
 8002fce:	bf00      	nop
 8002fd0:	20000234 	.word	0x20000234

08002fd4 <_malloc_r>:
 8002fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fd8:	1ccd      	adds	r5, r1, #3
 8002fda:	f025 0503 	bic.w	r5, r5, #3
 8002fde:	3508      	adds	r5, #8
 8002fe0:	2d0c      	cmp	r5, #12
 8002fe2:	bf38      	it	cc
 8002fe4:	250c      	movcc	r5, #12
 8002fe6:	2d00      	cmp	r5, #0
 8002fe8:	4606      	mov	r6, r0
 8002fea:	db01      	blt.n	8002ff0 <_malloc_r+0x1c>
 8002fec:	42a9      	cmp	r1, r5
 8002fee:	d904      	bls.n	8002ffa <_malloc_r+0x26>
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	6033      	str	r3, [r6, #0]
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ffa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030d0 <_malloc_r+0xfc>
 8002ffe:	f000 f869 	bl	80030d4 <__malloc_lock>
 8003002:	f8d8 3000 	ldr.w	r3, [r8]
 8003006:	461c      	mov	r4, r3
 8003008:	bb44      	cbnz	r4, 800305c <_malloc_r+0x88>
 800300a:	4629      	mov	r1, r5
 800300c:	4630      	mov	r0, r6
 800300e:	f7ff ffbf 	bl	8002f90 <sbrk_aligned>
 8003012:	1c43      	adds	r3, r0, #1
 8003014:	4604      	mov	r4, r0
 8003016:	d158      	bne.n	80030ca <_malloc_r+0xf6>
 8003018:	f8d8 4000 	ldr.w	r4, [r8]
 800301c:	4627      	mov	r7, r4
 800301e:	2f00      	cmp	r7, #0
 8003020:	d143      	bne.n	80030aa <_malloc_r+0xd6>
 8003022:	2c00      	cmp	r4, #0
 8003024:	d04b      	beq.n	80030be <_malloc_r+0xea>
 8003026:	6823      	ldr	r3, [r4, #0]
 8003028:	4639      	mov	r1, r7
 800302a:	4630      	mov	r0, r6
 800302c:	eb04 0903 	add.w	r9, r4, r3
 8003030:	f000 fc5c 	bl	80038ec <_sbrk_r>
 8003034:	4581      	cmp	r9, r0
 8003036:	d142      	bne.n	80030be <_malloc_r+0xea>
 8003038:	6821      	ldr	r1, [r4, #0]
 800303a:	1a6d      	subs	r5, r5, r1
 800303c:	4629      	mov	r1, r5
 800303e:	4630      	mov	r0, r6
 8003040:	f7ff ffa6 	bl	8002f90 <sbrk_aligned>
 8003044:	3001      	adds	r0, #1
 8003046:	d03a      	beq.n	80030be <_malloc_r+0xea>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	442b      	add	r3, r5
 800304c:	6023      	str	r3, [r4, #0]
 800304e:	f8d8 3000 	ldr.w	r3, [r8]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	bb62      	cbnz	r2, 80030b0 <_malloc_r+0xdc>
 8003056:	f8c8 7000 	str.w	r7, [r8]
 800305a:	e00f      	b.n	800307c <_malloc_r+0xa8>
 800305c:	6822      	ldr	r2, [r4, #0]
 800305e:	1b52      	subs	r2, r2, r5
 8003060:	d420      	bmi.n	80030a4 <_malloc_r+0xd0>
 8003062:	2a0b      	cmp	r2, #11
 8003064:	d917      	bls.n	8003096 <_malloc_r+0xc2>
 8003066:	1961      	adds	r1, r4, r5
 8003068:	42a3      	cmp	r3, r4
 800306a:	6025      	str	r5, [r4, #0]
 800306c:	bf18      	it	ne
 800306e:	6059      	strne	r1, [r3, #4]
 8003070:	6863      	ldr	r3, [r4, #4]
 8003072:	bf08      	it	eq
 8003074:	f8c8 1000 	streq.w	r1, [r8]
 8003078:	5162      	str	r2, [r4, r5]
 800307a:	604b      	str	r3, [r1, #4]
 800307c:	4630      	mov	r0, r6
 800307e:	f000 f82f 	bl	80030e0 <__malloc_unlock>
 8003082:	f104 000b 	add.w	r0, r4, #11
 8003086:	1d23      	adds	r3, r4, #4
 8003088:	f020 0007 	bic.w	r0, r0, #7
 800308c:	1ac2      	subs	r2, r0, r3
 800308e:	bf1c      	itt	ne
 8003090:	1a1b      	subne	r3, r3, r0
 8003092:	50a3      	strne	r3, [r4, r2]
 8003094:	e7af      	b.n	8002ff6 <_malloc_r+0x22>
 8003096:	6862      	ldr	r2, [r4, #4]
 8003098:	42a3      	cmp	r3, r4
 800309a:	bf0c      	ite	eq
 800309c:	f8c8 2000 	streq.w	r2, [r8]
 80030a0:	605a      	strne	r2, [r3, #4]
 80030a2:	e7eb      	b.n	800307c <_malloc_r+0xa8>
 80030a4:	4623      	mov	r3, r4
 80030a6:	6864      	ldr	r4, [r4, #4]
 80030a8:	e7ae      	b.n	8003008 <_malloc_r+0x34>
 80030aa:	463c      	mov	r4, r7
 80030ac:	687f      	ldr	r7, [r7, #4]
 80030ae:	e7b6      	b.n	800301e <_malloc_r+0x4a>
 80030b0:	461a      	mov	r2, r3
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	d1fb      	bne.n	80030b0 <_malloc_r+0xdc>
 80030b8:	2300      	movs	r3, #0
 80030ba:	6053      	str	r3, [r2, #4]
 80030bc:	e7de      	b.n	800307c <_malloc_r+0xa8>
 80030be:	230c      	movs	r3, #12
 80030c0:	6033      	str	r3, [r6, #0]
 80030c2:	4630      	mov	r0, r6
 80030c4:	f000 f80c 	bl	80030e0 <__malloc_unlock>
 80030c8:	e794      	b.n	8002ff4 <_malloc_r+0x20>
 80030ca:	6005      	str	r5, [r0, #0]
 80030cc:	e7d6      	b.n	800307c <_malloc_r+0xa8>
 80030ce:	bf00      	nop
 80030d0:	20000238 	.word	0x20000238

080030d4 <__malloc_lock>:
 80030d4:	4801      	ldr	r0, [pc, #4]	@ (80030dc <__malloc_lock+0x8>)
 80030d6:	f7ff bf0e 	b.w	8002ef6 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	20000230 	.word	0x20000230

080030e0 <__malloc_unlock>:
 80030e0:	4801      	ldr	r0, [pc, #4]	@ (80030e8 <__malloc_unlock+0x8>)
 80030e2:	f7ff bf09 	b.w	8002ef8 <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	20000230 	.word	0x20000230

080030ec <__sfputc_r>:
 80030ec:	6893      	ldr	r3, [r2, #8]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	b410      	push	{r4}
 80030f4:	6093      	str	r3, [r2, #8]
 80030f6:	da08      	bge.n	800310a <__sfputc_r+0x1e>
 80030f8:	6994      	ldr	r4, [r2, #24]
 80030fa:	42a3      	cmp	r3, r4
 80030fc:	db01      	blt.n	8003102 <__sfputc_r+0x16>
 80030fe:	290a      	cmp	r1, #10
 8003100:	d103      	bne.n	800310a <__sfputc_r+0x1e>
 8003102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003106:	f7ff bde8 	b.w	8002cda <__swbuf_r>
 800310a:	6813      	ldr	r3, [r2, #0]
 800310c:	1c58      	adds	r0, r3, #1
 800310e:	6010      	str	r0, [r2, #0]
 8003110:	7019      	strb	r1, [r3, #0]
 8003112:	4608      	mov	r0, r1
 8003114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003118:	4770      	bx	lr

0800311a <__sfputs_r>:
 800311a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311c:	4606      	mov	r6, r0
 800311e:	460f      	mov	r7, r1
 8003120:	4614      	mov	r4, r2
 8003122:	18d5      	adds	r5, r2, r3
 8003124:	42ac      	cmp	r4, r5
 8003126:	d101      	bne.n	800312c <__sfputs_r+0x12>
 8003128:	2000      	movs	r0, #0
 800312a:	e007      	b.n	800313c <__sfputs_r+0x22>
 800312c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003130:	463a      	mov	r2, r7
 8003132:	4630      	mov	r0, r6
 8003134:	f7ff ffda 	bl	80030ec <__sfputc_r>
 8003138:	1c43      	adds	r3, r0, #1
 800313a:	d1f3      	bne.n	8003124 <__sfputs_r+0xa>
 800313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003140 <_vfiprintf_r>:
 8003140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003144:	460d      	mov	r5, r1
 8003146:	b09d      	sub	sp, #116	@ 0x74
 8003148:	4614      	mov	r4, r2
 800314a:	4698      	mov	r8, r3
 800314c:	4606      	mov	r6, r0
 800314e:	b118      	cbz	r0, 8003158 <_vfiprintf_r+0x18>
 8003150:	6a03      	ldr	r3, [r0, #32]
 8003152:	b90b      	cbnz	r3, 8003158 <_vfiprintf_r+0x18>
 8003154:	f7ff fcd8 	bl	8002b08 <__sinit>
 8003158:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800315a:	07d9      	lsls	r1, r3, #31
 800315c:	d405      	bmi.n	800316a <_vfiprintf_r+0x2a>
 800315e:	89ab      	ldrh	r3, [r5, #12]
 8003160:	059a      	lsls	r2, r3, #22
 8003162:	d402      	bmi.n	800316a <_vfiprintf_r+0x2a>
 8003164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003166:	f7ff fec6 	bl	8002ef6 <__retarget_lock_acquire_recursive>
 800316a:	89ab      	ldrh	r3, [r5, #12]
 800316c:	071b      	lsls	r3, r3, #28
 800316e:	d501      	bpl.n	8003174 <_vfiprintf_r+0x34>
 8003170:	692b      	ldr	r3, [r5, #16]
 8003172:	b99b      	cbnz	r3, 800319c <_vfiprintf_r+0x5c>
 8003174:	4629      	mov	r1, r5
 8003176:	4630      	mov	r0, r6
 8003178:	f7ff fdee 	bl	8002d58 <__swsetup_r>
 800317c:	b170      	cbz	r0, 800319c <_vfiprintf_r+0x5c>
 800317e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003180:	07dc      	lsls	r4, r3, #31
 8003182:	d504      	bpl.n	800318e <_vfiprintf_r+0x4e>
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	b01d      	add	sp, #116	@ 0x74
 800318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318e:	89ab      	ldrh	r3, [r5, #12]
 8003190:	0598      	lsls	r0, r3, #22
 8003192:	d4f7      	bmi.n	8003184 <_vfiprintf_r+0x44>
 8003194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003196:	f7ff feaf 	bl	8002ef8 <__retarget_lock_release_recursive>
 800319a:	e7f3      	b.n	8003184 <_vfiprintf_r+0x44>
 800319c:	2300      	movs	r3, #0
 800319e:	9309      	str	r3, [sp, #36]	@ 0x24
 80031a0:	2320      	movs	r3, #32
 80031a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80031aa:	2330      	movs	r3, #48	@ 0x30
 80031ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800335c <_vfiprintf_r+0x21c>
 80031b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80031b4:	f04f 0901 	mov.w	r9, #1
 80031b8:	4623      	mov	r3, r4
 80031ba:	469a      	mov	sl, r3
 80031bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031c0:	b10a      	cbz	r2, 80031c6 <_vfiprintf_r+0x86>
 80031c2:	2a25      	cmp	r2, #37	@ 0x25
 80031c4:	d1f9      	bne.n	80031ba <_vfiprintf_r+0x7a>
 80031c6:	ebba 0b04 	subs.w	fp, sl, r4
 80031ca:	d00b      	beq.n	80031e4 <_vfiprintf_r+0xa4>
 80031cc:	465b      	mov	r3, fp
 80031ce:	4622      	mov	r2, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	4630      	mov	r0, r6
 80031d4:	f7ff ffa1 	bl	800311a <__sfputs_r>
 80031d8:	3001      	adds	r0, #1
 80031da:	f000 80a7 	beq.w	800332c <_vfiprintf_r+0x1ec>
 80031de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031e0:	445a      	add	r2, fp
 80031e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80031e4:	f89a 3000 	ldrb.w	r3, [sl]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 809f 	beq.w	800332c <_vfiprintf_r+0x1ec>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f04f 32ff 	mov.w	r2, #4294967295
 80031f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031f8:	f10a 0a01 	add.w	sl, sl, #1
 80031fc:	9304      	str	r3, [sp, #16]
 80031fe:	9307      	str	r3, [sp, #28]
 8003200:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003204:	931a      	str	r3, [sp, #104]	@ 0x68
 8003206:	4654      	mov	r4, sl
 8003208:	2205      	movs	r2, #5
 800320a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320e:	4853      	ldr	r0, [pc, #332]	@ (800335c <_vfiprintf_r+0x21c>)
 8003210:	f7fd f806 	bl	8000220 <memchr>
 8003214:	9a04      	ldr	r2, [sp, #16]
 8003216:	b9d8      	cbnz	r0, 8003250 <_vfiprintf_r+0x110>
 8003218:	06d1      	lsls	r1, r2, #27
 800321a:	bf44      	itt	mi
 800321c:	2320      	movmi	r3, #32
 800321e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003222:	0713      	lsls	r3, r2, #28
 8003224:	bf44      	itt	mi
 8003226:	232b      	movmi	r3, #43	@ 0x2b
 8003228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800322c:	f89a 3000 	ldrb.w	r3, [sl]
 8003230:	2b2a      	cmp	r3, #42	@ 0x2a
 8003232:	d015      	beq.n	8003260 <_vfiprintf_r+0x120>
 8003234:	9a07      	ldr	r2, [sp, #28]
 8003236:	4654      	mov	r4, sl
 8003238:	2000      	movs	r0, #0
 800323a:	f04f 0c0a 	mov.w	ip, #10
 800323e:	4621      	mov	r1, r4
 8003240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003244:	3b30      	subs	r3, #48	@ 0x30
 8003246:	2b09      	cmp	r3, #9
 8003248:	d94b      	bls.n	80032e2 <_vfiprintf_r+0x1a2>
 800324a:	b1b0      	cbz	r0, 800327a <_vfiprintf_r+0x13a>
 800324c:	9207      	str	r2, [sp, #28]
 800324e:	e014      	b.n	800327a <_vfiprintf_r+0x13a>
 8003250:	eba0 0308 	sub.w	r3, r0, r8
 8003254:	fa09 f303 	lsl.w	r3, r9, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	9304      	str	r3, [sp, #16]
 800325c:	46a2      	mov	sl, r4
 800325e:	e7d2      	b.n	8003206 <_vfiprintf_r+0xc6>
 8003260:	9b03      	ldr	r3, [sp, #12]
 8003262:	1d19      	adds	r1, r3, #4
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	9103      	str	r1, [sp, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	bfbb      	ittet	lt
 800326c:	425b      	neglt	r3, r3
 800326e:	f042 0202 	orrlt.w	r2, r2, #2
 8003272:	9307      	strge	r3, [sp, #28]
 8003274:	9307      	strlt	r3, [sp, #28]
 8003276:	bfb8      	it	lt
 8003278:	9204      	strlt	r2, [sp, #16]
 800327a:	7823      	ldrb	r3, [r4, #0]
 800327c:	2b2e      	cmp	r3, #46	@ 0x2e
 800327e:	d10a      	bne.n	8003296 <_vfiprintf_r+0x156>
 8003280:	7863      	ldrb	r3, [r4, #1]
 8003282:	2b2a      	cmp	r3, #42	@ 0x2a
 8003284:	d132      	bne.n	80032ec <_vfiprintf_r+0x1ac>
 8003286:	9b03      	ldr	r3, [sp, #12]
 8003288:	1d1a      	adds	r2, r3, #4
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	9203      	str	r2, [sp, #12]
 800328e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003292:	3402      	adds	r4, #2
 8003294:	9305      	str	r3, [sp, #20]
 8003296:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800336c <_vfiprintf_r+0x22c>
 800329a:	7821      	ldrb	r1, [r4, #0]
 800329c:	2203      	movs	r2, #3
 800329e:	4650      	mov	r0, sl
 80032a0:	f7fc ffbe 	bl	8000220 <memchr>
 80032a4:	b138      	cbz	r0, 80032b6 <_vfiprintf_r+0x176>
 80032a6:	9b04      	ldr	r3, [sp, #16]
 80032a8:	eba0 000a 	sub.w	r0, r0, sl
 80032ac:	2240      	movs	r2, #64	@ 0x40
 80032ae:	4082      	lsls	r2, r0
 80032b0:	4313      	orrs	r3, r2
 80032b2:	3401      	adds	r4, #1
 80032b4:	9304      	str	r3, [sp, #16]
 80032b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ba:	4829      	ldr	r0, [pc, #164]	@ (8003360 <_vfiprintf_r+0x220>)
 80032bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032c0:	2206      	movs	r2, #6
 80032c2:	f7fc ffad 	bl	8000220 <memchr>
 80032c6:	2800      	cmp	r0, #0
 80032c8:	d03f      	beq.n	800334a <_vfiprintf_r+0x20a>
 80032ca:	4b26      	ldr	r3, [pc, #152]	@ (8003364 <_vfiprintf_r+0x224>)
 80032cc:	bb1b      	cbnz	r3, 8003316 <_vfiprintf_r+0x1d6>
 80032ce:	9b03      	ldr	r3, [sp, #12]
 80032d0:	3307      	adds	r3, #7
 80032d2:	f023 0307 	bic.w	r3, r3, #7
 80032d6:	3308      	adds	r3, #8
 80032d8:	9303      	str	r3, [sp, #12]
 80032da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032dc:	443b      	add	r3, r7
 80032de:	9309      	str	r3, [sp, #36]	@ 0x24
 80032e0:	e76a      	b.n	80031b8 <_vfiprintf_r+0x78>
 80032e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80032e6:	460c      	mov	r4, r1
 80032e8:	2001      	movs	r0, #1
 80032ea:	e7a8      	b.n	800323e <_vfiprintf_r+0xfe>
 80032ec:	2300      	movs	r3, #0
 80032ee:	3401      	adds	r4, #1
 80032f0:	9305      	str	r3, [sp, #20]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 0c0a 	mov.w	ip, #10
 80032f8:	4620      	mov	r0, r4
 80032fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032fe:	3a30      	subs	r2, #48	@ 0x30
 8003300:	2a09      	cmp	r2, #9
 8003302:	d903      	bls.n	800330c <_vfiprintf_r+0x1cc>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0c6      	beq.n	8003296 <_vfiprintf_r+0x156>
 8003308:	9105      	str	r1, [sp, #20]
 800330a:	e7c4      	b.n	8003296 <_vfiprintf_r+0x156>
 800330c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003310:	4604      	mov	r4, r0
 8003312:	2301      	movs	r3, #1
 8003314:	e7f0      	b.n	80032f8 <_vfiprintf_r+0x1b8>
 8003316:	ab03      	add	r3, sp, #12
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	462a      	mov	r2, r5
 800331c:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <_vfiprintf_r+0x228>)
 800331e:	a904      	add	r1, sp, #16
 8003320:	4630      	mov	r0, r6
 8003322:	f3af 8000 	nop.w
 8003326:	4607      	mov	r7, r0
 8003328:	1c78      	adds	r0, r7, #1
 800332a:	d1d6      	bne.n	80032da <_vfiprintf_r+0x19a>
 800332c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800332e:	07d9      	lsls	r1, r3, #31
 8003330:	d405      	bmi.n	800333e <_vfiprintf_r+0x1fe>
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	059a      	lsls	r2, r3, #22
 8003336:	d402      	bmi.n	800333e <_vfiprintf_r+0x1fe>
 8003338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800333a:	f7ff fddd 	bl	8002ef8 <__retarget_lock_release_recursive>
 800333e:	89ab      	ldrh	r3, [r5, #12]
 8003340:	065b      	lsls	r3, r3, #25
 8003342:	f53f af1f 	bmi.w	8003184 <_vfiprintf_r+0x44>
 8003346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003348:	e71e      	b.n	8003188 <_vfiprintf_r+0x48>
 800334a:	ab03      	add	r3, sp, #12
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	462a      	mov	r2, r5
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <_vfiprintf_r+0x228>)
 8003352:	a904      	add	r1, sp, #16
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f879 	bl	800344c <_printf_i>
 800335a:	e7e4      	b.n	8003326 <_vfiprintf_r+0x1e6>
 800335c:	0800396c 	.word	0x0800396c
 8003360:	08003976 	.word	0x08003976
 8003364:	00000000 	.word	0x00000000
 8003368:	0800311b 	.word	0x0800311b
 800336c:	08003972 	.word	0x08003972

08003370 <_printf_common>:
 8003370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003374:	4616      	mov	r6, r2
 8003376:	4698      	mov	r8, r3
 8003378:	688a      	ldr	r2, [r1, #8]
 800337a:	690b      	ldr	r3, [r1, #16]
 800337c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003380:	4293      	cmp	r3, r2
 8003382:	bfb8      	it	lt
 8003384:	4613      	movlt	r3, r2
 8003386:	6033      	str	r3, [r6, #0]
 8003388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800338c:	4607      	mov	r7, r0
 800338e:	460c      	mov	r4, r1
 8003390:	b10a      	cbz	r2, 8003396 <_printf_common+0x26>
 8003392:	3301      	adds	r3, #1
 8003394:	6033      	str	r3, [r6, #0]
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	0699      	lsls	r1, r3, #26
 800339a:	bf42      	ittt	mi
 800339c:	6833      	ldrmi	r3, [r6, #0]
 800339e:	3302      	addmi	r3, #2
 80033a0:	6033      	strmi	r3, [r6, #0]
 80033a2:	6825      	ldr	r5, [r4, #0]
 80033a4:	f015 0506 	ands.w	r5, r5, #6
 80033a8:	d106      	bne.n	80033b8 <_printf_common+0x48>
 80033aa:	f104 0a19 	add.w	sl, r4, #25
 80033ae:	68e3      	ldr	r3, [r4, #12]
 80033b0:	6832      	ldr	r2, [r6, #0]
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	42ab      	cmp	r3, r5
 80033b6:	dc26      	bgt.n	8003406 <_printf_common+0x96>
 80033b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033bc:	6822      	ldr	r2, [r4, #0]
 80033be:	3b00      	subs	r3, #0
 80033c0:	bf18      	it	ne
 80033c2:	2301      	movne	r3, #1
 80033c4:	0692      	lsls	r2, r2, #26
 80033c6:	d42b      	bmi.n	8003420 <_printf_common+0xb0>
 80033c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033cc:	4641      	mov	r1, r8
 80033ce:	4638      	mov	r0, r7
 80033d0:	47c8      	blx	r9
 80033d2:	3001      	adds	r0, #1
 80033d4:	d01e      	beq.n	8003414 <_printf_common+0xa4>
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	6922      	ldr	r2, [r4, #16]
 80033da:	f003 0306 	and.w	r3, r3, #6
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf02      	ittt	eq
 80033e2:	68e5      	ldreq	r5, [r4, #12]
 80033e4:	6833      	ldreq	r3, [r6, #0]
 80033e6:	1aed      	subeq	r5, r5, r3
 80033e8:	68a3      	ldr	r3, [r4, #8]
 80033ea:	bf0c      	ite	eq
 80033ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033f0:	2500      	movne	r5, #0
 80033f2:	4293      	cmp	r3, r2
 80033f4:	bfc4      	itt	gt
 80033f6:	1a9b      	subgt	r3, r3, r2
 80033f8:	18ed      	addgt	r5, r5, r3
 80033fa:	2600      	movs	r6, #0
 80033fc:	341a      	adds	r4, #26
 80033fe:	42b5      	cmp	r5, r6
 8003400:	d11a      	bne.n	8003438 <_printf_common+0xc8>
 8003402:	2000      	movs	r0, #0
 8003404:	e008      	b.n	8003418 <_printf_common+0xa8>
 8003406:	2301      	movs	r3, #1
 8003408:	4652      	mov	r2, sl
 800340a:	4641      	mov	r1, r8
 800340c:	4638      	mov	r0, r7
 800340e:	47c8      	blx	r9
 8003410:	3001      	adds	r0, #1
 8003412:	d103      	bne.n	800341c <_printf_common+0xac>
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800341c:	3501      	adds	r5, #1
 800341e:	e7c6      	b.n	80033ae <_printf_common+0x3e>
 8003420:	18e1      	adds	r1, r4, r3
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	2030      	movs	r0, #48	@ 0x30
 8003426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800342a:	4422      	add	r2, r4
 800342c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003434:	3302      	adds	r3, #2
 8003436:	e7c7      	b.n	80033c8 <_printf_common+0x58>
 8003438:	2301      	movs	r3, #1
 800343a:	4622      	mov	r2, r4
 800343c:	4641      	mov	r1, r8
 800343e:	4638      	mov	r0, r7
 8003440:	47c8      	blx	r9
 8003442:	3001      	adds	r0, #1
 8003444:	d0e6      	beq.n	8003414 <_printf_common+0xa4>
 8003446:	3601      	adds	r6, #1
 8003448:	e7d9      	b.n	80033fe <_printf_common+0x8e>
	...

0800344c <_printf_i>:
 800344c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003450:	7e0f      	ldrb	r7, [r1, #24]
 8003452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003454:	2f78      	cmp	r7, #120	@ 0x78
 8003456:	4691      	mov	r9, r2
 8003458:	4680      	mov	r8, r0
 800345a:	460c      	mov	r4, r1
 800345c:	469a      	mov	sl, r3
 800345e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003462:	d807      	bhi.n	8003474 <_printf_i+0x28>
 8003464:	2f62      	cmp	r7, #98	@ 0x62
 8003466:	d80a      	bhi.n	800347e <_printf_i+0x32>
 8003468:	2f00      	cmp	r7, #0
 800346a:	f000 80d2 	beq.w	8003612 <_printf_i+0x1c6>
 800346e:	2f58      	cmp	r7, #88	@ 0x58
 8003470:	f000 80b9 	beq.w	80035e6 <_printf_i+0x19a>
 8003474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800347c:	e03a      	b.n	80034f4 <_printf_i+0xa8>
 800347e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003482:	2b15      	cmp	r3, #21
 8003484:	d8f6      	bhi.n	8003474 <_printf_i+0x28>
 8003486:	a101      	add	r1, pc, #4	@ (adr r1, 800348c <_printf_i+0x40>)
 8003488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800348c:	080034e5 	.word	0x080034e5
 8003490:	080034f9 	.word	0x080034f9
 8003494:	08003475 	.word	0x08003475
 8003498:	08003475 	.word	0x08003475
 800349c:	08003475 	.word	0x08003475
 80034a0:	08003475 	.word	0x08003475
 80034a4:	080034f9 	.word	0x080034f9
 80034a8:	08003475 	.word	0x08003475
 80034ac:	08003475 	.word	0x08003475
 80034b0:	08003475 	.word	0x08003475
 80034b4:	08003475 	.word	0x08003475
 80034b8:	080035f9 	.word	0x080035f9
 80034bc:	08003523 	.word	0x08003523
 80034c0:	080035b3 	.word	0x080035b3
 80034c4:	08003475 	.word	0x08003475
 80034c8:	08003475 	.word	0x08003475
 80034cc:	0800361b 	.word	0x0800361b
 80034d0:	08003475 	.word	0x08003475
 80034d4:	08003523 	.word	0x08003523
 80034d8:	08003475 	.word	0x08003475
 80034dc:	08003475 	.word	0x08003475
 80034e0:	080035bb 	.word	0x080035bb
 80034e4:	6833      	ldr	r3, [r6, #0]
 80034e6:	1d1a      	adds	r2, r3, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6032      	str	r2, [r6, #0]
 80034ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034f4:	2301      	movs	r3, #1
 80034f6:	e09d      	b.n	8003634 <_printf_i+0x1e8>
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1d19      	adds	r1, r3, #4
 80034fe:	6031      	str	r1, [r6, #0]
 8003500:	0606      	lsls	r6, r0, #24
 8003502:	d501      	bpl.n	8003508 <_printf_i+0xbc>
 8003504:	681d      	ldr	r5, [r3, #0]
 8003506:	e003      	b.n	8003510 <_printf_i+0xc4>
 8003508:	0645      	lsls	r5, r0, #25
 800350a:	d5fb      	bpl.n	8003504 <_printf_i+0xb8>
 800350c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003510:	2d00      	cmp	r5, #0
 8003512:	da03      	bge.n	800351c <_printf_i+0xd0>
 8003514:	232d      	movs	r3, #45	@ 0x2d
 8003516:	426d      	negs	r5, r5
 8003518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800351c:	4859      	ldr	r0, [pc, #356]	@ (8003684 <_printf_i+0x238>)
 800351e:	230a      	movs	r3, #10
 8003520:	e011      	b.n	8003546 <_printf_i+0xfa>
 8003522:	6821      	ldr	r1, [r4, #0]
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	0608      	lsls	r0, r1, #24
 8003528:	f853 5b04 	ldr.w	r5, [r3], #4
 800352c:	d402      	bmi.n	8003534 <_printf_i+0xe8>
 800352e:	0649      	lsls	r1, r1, #25
 8003530:	bf48      	it	mi
 8003532:	b2ad      	uxthmi	r5, r5
 8003534:	2f6f      	cmp	r7, #111	@ 0x6f
 8003536:	4853      	ldr	r0, [pc, #332]	@ (8003684 <_printf_i+0x238>)
 8003538:	6033      	str	r3, [r6, #0]
 800353a:	bf14      	ite	ne
 800353c:	230a      	movne	r3, #10
 800353e:	2308      	moveq	r3, #8
 8003540:	2100      	movs	r1, #0
 8003542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003546:	6866      	ldr	r6, [r4, #4]
 8003548:	60a6      	str	r6, [r4, #8]
 800354a:	2e00      	cmp	r6, #0
 800354c:	bfa2      	ittt	ge
 800354e:	6821      	ldrge	r1, [r4, #0]
 8003550:	f021 0104 	bicge.w	r1, r1, #4
 8003554:	6021      	strge	r1, [r4, #0]
 8003556:	b90d      	cbnz	r5, 800355c <_printf_i+0x110>
 8003558:	2e00      	cmp	r6, #0
 800355a:	d04b      	beq.n	80035f4 <_printf_i+0x1a8>
 800355c:	4616      	mov	r6, r2
 800355e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003562:	fb03 5711 	mls	r7, r3, r1, r5
 8003566:	5dc7      	ldrb	r7, [r0, r7]
 8003568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800356c:	462f      	mov	r7, r5
 800356e:	42bb      	cmp	r3, r7
 8003570:	460d      	mov	r5, r1
 8003572:	d9f4      	bls.n	800355e <_printf_i+0x112>
 8003574:	2b08      	cmp	r3, #8
 8003576:	d10b      	bne.n	8003590 <_printf_i+0x144>
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	07df      	lsls	r7, r3, #31
 800357c:	d508      	bpl.n	8003590 <_printf_i+0x144>
 800357e:	6923      	ldr	r3, [r4, #16]
 8003580:	6861      	ldr	r1, [r4, #4]
 8003582:	4299      	cmp	r1, r3
 8003584:	bfde      	ittt	le
 8003586:	2330      	movle	r3, #48	@ 0x30
 8003588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800358c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003590:	1b92      	subs	r2, r2, r6
 8003592:	6122      	str	r2, [r4, #16]
 8003594:	f8cd a000 	str.w	sl, [sp]
 8003598:	464b      	mov	r3, r9
 800359a:	aa03      	add	r2, sp, #12
 800359c:	4621      	mov	r1, r4
 800359e:	4640      	mov	r0, r8
 80035a0:	f7ff fee6 	bl	8003370 <_printf_common>
 80035a4:	3001      	adds	r0, #1
 80035a6:	d14a      	bne.n	800363e <_printf_i+0x1f2>
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	b004      	add	sp, #16
 80035ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f043 0320 	orr.w	r3, r3, #32
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	4833      	ldr	r0, [pc, #204]	@ (8003688 <_printf_i+0x23c>)
 80035bc:	2778      	movs	r7, #120	@ 0x78
 80035be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	6831      	ldr	r1, [r6, #0]
 80035c6:	061f      	lsls	r7, r3, #24
 80035c8:	f851 5b04 	ldr.w	r5, [r1], #4
 80035cc:	d402      	bmi.n	80035d4 <_printf_i+0x188>
 80035ce:	065f      	lsls	r7, r3, #25
 80035d0:	bf48      	it	mi
 80035d2:	b2ad      	uxthmi	r5, r5
 80035d4:	6031      	str	r1, [r6, #0]
 80035d6:	07d9      	lsls	r1, r3, #31
 80035d8:	bf44      	itt	mi
 80035da:	f043 0320 	orrmi.w	r3, r3, #32
 80035de:	6023      	strmi	r3, [r4, #0]
 80035e0:	b11d      	cbz	r5, 80035ea <_printf_i+0x19e>
 80035e2:	2310      	movs	r3, #16
 80035e4:	e7ac      	b.n	8003540 <_printf_i+0xf4>
 80035e6:	4827      	ldr	r0, [pc, #156]	@ (8003684 <_printf_i+0x238>)
 80035e8:	e7e9      	b.n	80035be <_printf_i+0x172>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	f023 0320 	bic.w	r3, r3, #32
 80035f0:	6023      	str	r3, [r4, #0]
 80035f2:	e7f6      	b.n	80035e2 <_printf_i+0x196>
 80035f4:	4616      	mov	r6, r2
 80035f6:	e7bd      	b.n	8003574 <_printf_i+0x128>
 80035f8:	6833      	ldr	r3, [r6, #0]
 80035fa:	6825      	ldr	r5, [r4, #0]
 80035fc:	6961      	ldr	r1, [r4, #20]
 80035fe:	1d18      	adds	r0, r3, #4
 8003600:	6030      	str	r0, [r6, #0]
 8003602:	062e      	lsls	r6, r5, #24
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	d501      	bpl.n	800360c <_printf_i+0x1c0>
 8003608:	6019      	str	r1, [r3, #0]
 800360a:	e002      	b.n	8003612 <_printf_i+0x1c6>
 800360c:	0668      	lsls	r0, r5, #25
 800360e:	d5fb      	bpl.n	8003608 <_printf_i+0x1bc>
 8003610:	8019      	strh	r1, [r3, #0]
 8003612:	2300      	movs	r3, #0
 8003614:	6123      	str	r3, [r4, #16]
 8003616:	4616      	mov	r6, r2
 8003618:	e7bc      	b.n	8003594 <_printf_i+0x148>
 800361a:	6833      	ldr	r3, [r6, #0]
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	6032      	str	r2, [r6, #0]
 8003620:	681e      	ldr	r6, [r3, #0]
 8003622:	6862      	ldr	r2, [r4, #4]
 8003624:	2100      	movs	r1, #0
 8003626:	4630      	mov	r0, r6
 8003628:	f7fc fdfa 	bl	8000220 <memchr>
 800362c:	b108      	cbz	r0, 8003632 <_printf_i+0x1e6>
 800362e:	1b80      	subs	r0, r0, r6
 8003630:	6060      	str	r0, [r4, #4]
 8003632:	6863      	ldr	r3, [r4, #4]
 8003634:	6123      	str	r3, [r4, #16]
 8003636:	2300      	movs	r3, #0
 8003638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800363c:	e7aa      	b.n	8003594 <_printf_i+0x148>
 800363e:	6923      	ldr	r3, [r4, #16]
 8003640:	4632      	mov	r2, r6
 8003642:	4649      	mov	r1, r9
 8003644:	4640      	mov	r0, r8
 8003646:	47d0      	blx	sl
 8003648:	3001      	adds	r0, #1
 800364a:	d0ad      	beq.n	80035a8 <_printf_i+0x15c>
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	079b      	lsls	r3, r3, #30
 8003650:	d413      	bmi.n	800367a <_printf_i+0x22e>
 8003652:	68e0      	ldr	r0, [r4, #12]
 8003654:	9b03      	ldr	r3, [sp, #12]
 8003656:	4298      	cmp	r0, r3
 8003658:	bfb8      	it	lt
 800365a:	4618      	movlt	r0, r3
 800365c:	e7a6      	b.n	80035ac <_printf_i+0x160>
 800365e:	2301      	movs	r3, #1
 8003660:	4632      	mov	r2, r6
 8003662:	4649      	mov	r1, r9
 8003664:	4640      	mov	r0, r8
 8003666:	47d0      	blx	sl
 8003668:	3001      	adds	r0, #1
 800366a:	d09d      	beq.n	80035a8 <_printf_i+0x15c>
 800366c:	3501      	adds	r5, #1
 800366e:	68e3      	ldr	r3, [r4, #12]
 8003670:	9903      	ldr	r1, [sp, #12]
 8003672:	1a5b      	subs	r3, r3, r1
 8003674:	42ab      	cmp	r3, r5
 8003676:	dcf2      	bgt.n	800365e <_printf_i+0x212>
 8003678:	e7eb      	b.n	8003652 <_printf_i+0x206>
 800367a:	2500      	movs	r5, #0
 800367c:	f104 0619 	add.w	r6, r4, #25
 8003680:	e7f5      	b.n	800366e <_printf_i+0x222>
 8003682:	bf00      	nop
 8003684:	0800397d 	.word	0x0800397d
 8003688:	0800398e 	.word	0x0800398e

0800368c <__sflush_r>:
 800368c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003694:	0716      	lsls	r6, r2, #28
 8003696:	4605      	mov	r5, r0
 8003698:	460c      	mov	r4, r1
 800369a:	d454      	bmi.n	8003746 <__sflush_r+0xba>
 800369c:	684b      	ldr	r3, [r1, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dc02      	bgt.n	80036a8 <__sflush_r+0x1c>
 80036a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dd48      	ble.n	800373a <__sflush_r+0xae>
 80036a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	d045      	beq.n	800373a <__sflush_r+0xae>
 80036ae:	2300      	movs	r3, #0
 80036b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80036b4:	682f      	ldr	r7, [r5, #0]
 80036b6:	6a21      	ldr	r1, [r4, #32]
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	d030      	beq.n	800371e <__sflush_r+0x92>
 80036bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	0759      	lsls	r1, r3, #29
 80036c2:	d505      	bpl.n	80036d0 <__sflush_r+0x44>
 80036c4:	6863      	ldr	r3, [r4, #4]
 80036c6:	1ad2      	subs	r2, r2, r3
 80036c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80036ca:	b10b      	cbz	r3, 80036d0 <__sflush_r+0x44>
 80036cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	2300      	movs	r3, #0
 80036d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80036d4:	6a21      	ldr	r1, [r4, #32]
 80036d6:	4628      	mov	r0, r5
 80036d8:	47b0      	blx	r6
 80036da:	1c43      	adds	r3, r0, #1
 80036dc:	89a3      	ldrh	r3, [r4, #12]
 80036de:	d106      	bne.n	80036ee <__sflush_r+0x62>
 80036e0:	6829      	ldr	r1, [r5, #0]
 80036e2:	291d      	cmp	r1, #29
 80036e4:	d82b      	bhi.n	800373e <__sflush_r+0xb2>
 80036e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003790 <__sflush_r+0x104>)
 80036e8:	410a      	asrs	r2, r1
 80036ea:	07d6      	lsls	r6, r2, #31
 80036ec:	d427      	bmi.n	800373e <__sflush_r+0xb2>
 80036ee:	2200      	movs	r2, #0
 80036f0:	6062      	str	r2, [r4, #4]
 80036f2:	04d9      	lsls	r1, r3, #19
 80036f4:	6922      	ldr	r2, [r4, #16]
 80036f6:	6022      	str	r2, [r4, #0]
 80036f8:	d504      	bpl.n	8003704 <__sflush_r+0x78>
 80036fa:	1c42      	adds	r2, r0, #1
 80036fc:	d101      	bne.n	8003702 <__sflush_r+0x76>
 80036fe:	682b      	ldr	r3, [r5, #0]
 8003700:	b903      	cbnz	r3, 8003704 <__sflush_r+0x78>
 8003702:	6560      	str	r0, [r4, #84]	@ 0x54
 8003704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003706:	602f      	str	r7, [r5, #0]
 8003708:	b1b9      	cbz	r1, 800373a <__sflush_r+0xae>
 800370a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800370e:	4299      	cmp	r1, r3
 8003710:	d002      	beq.n	8003718 <__sflush_r+0x8c>
 8003712:	4628      	mov	r0, r5
 8003714:	f7ff fbf2 	bl	8002efc <_free_r>
 8003718:	2300      	movs	r3, #0
 800371a:	6363      	str	r3, [r4, #52]	@ 0x34
 800371c:	e00d      	b.n	800373a <__sflush_r+0xae>
 800371e:	2301      	movs	r3, #1
 8003720:	4628      	mov	r0, r5
 8003722:	47b0      	blx	r6
 8003724:	4602      	mov	r2, r0
 8003726:	1c50      	adds	r0, r2, #1
 8003728:	d1c9      	bne.n	80036be <__sflush_r+0x32>
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0c6      	beq.n	80036be <__sflush_r+0x32>
 8003730:	2b1d      	cmp	r3, #29
 8003732:	d001      	beq.n	8003738 <__sflush_r+0xac>
 8003734:	2b16      	cmp	r3, #22
 8003736:	d11e      	bne.n	8003776 <__sflush_r+0xea>
 8003738:	602f      	str	r7, [r5, #0]
 800373a:	2000      	movs	r0, #0
 800373c:	e022      	b.n	8003784 <__sflush_r+0xf8>
 800373e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003742:	b21b      	sxth	r3, r3
 8003744:	e01b      	b.n	800377e <__sflush_r+0xf2>
 8003746:	690f      	ldr	r7, [r1, #16]
 8003748:	2f00      	cmp	r7, #0
 800374a:	d0f6      	beq.n	800373a <__sflush_r+0xae>
 800374c:	0793      	lsls	r3, r2, #30
 800374e:	680e      	ldr	r6, [r1, #0]
 8003750:	bf08      	it	eq
 8003752:	694b      	ldreq	r3, [r1, #20]
 8003754:	600f      	str	r7, [r1, #0]
 8003756:	bf18      	it	ne
 8003758:	2300      	movne	r3, #0
 800375a:	eba6 0807 	sub.w	r8, r6, r7
 800375e:	608b      	str	r3, [r1, #8]
 8003760:	f1b8 0f00 	cmp.w	r8, #0
 8003764:	dde9      	ble.n	800373a <__sflush_r+0xae>
 8003766:	6a21      	ldr	r1, [r4, #32]
 8003768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800376a:	4643      	mov	r3, r8
 800376c:	463a      	mov	r2, r7
 800376e:	4628      	mov	r0, r5
 8003770:	47b0      	blx	r6
 8003772:	2800      	cmp	r0, #0
 8003774:	dc08      	bgt.n	8003788 <__sflush_r+0xfc>
 8003776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800377a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800377e:	81a3      	strh	r3, [r4, #12]
 8003780:	f04f 30ff 	mov.w	r0, #4294967295
 8003784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003788:	4407      	add	r7, r0
 800378a:	eba8 0800 	sub.w	r8, r8, r0
 800378e:	e7e7      	b.n	8003760 <__sflush_r+0xd4>
 8003790:	dfbffffe 	.word	0xdfbffffe

08003794 <_fflush_r>:
 8003794:	b538      	push	{r3, r4, r5, lr}
 8003796:	690b      	ldr	r3, [r1, #16]
 8003798:	4605      	mov	r5, r0
 800379a:	460c      	mov	r4, r1
 800379c:	b913      	cbnz	r3, 80037a4 <_fflush_r+0x10>
 800379e:	2500      	movs	r5, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	b118      	cbz	r0, 80037ae <_fflush_r+0x1a>
 80037a6:	6a03      	ldr	r3, [r0, #32]
 80037a8:	b90b      	cbnz	r3, 80037ae <_fflush_r+0x1a>
 80037aa:	f7ff f9ad 	bl	8002b08 <__sinit>
 80037ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f3      	beq.n	800379e <_fflush_r+0xa>
 80037b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80037b8:	07d0      	lsls	r0, r2, #31
 80037ba:	d404      	bmi.n	80037c6 <_fflush_r+0x32>
 80037bc:	0599      	lsls	r1, r3, #22
 80037be:	d402      	bmi.n	80037c6 <_fflush_r+0x32>
 80037c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037c2:	f7ff fb98 	bl	8002ef6 <__retarget_lock_acquire_recursive>
 80037c6:	4628      	mov	r0, r5
 80037c8:	4621      	mov	r1, r4
 80037ca:	f7ff ff5f 	bl	800368c <__sflush_r>
 80037ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037d0:	07da      	lsls	r2, r3, #31
 80037d2:	4605      	mov	r5, r0
 80037d4:	d4e4      	bmi.n	80037a0 <_fflush_r+0xc>
 80037d6:	89a3      	ldrh	r3, [r4, #12]
 80037d8:	059b      	lsls	r3, r3, #22
 80037da:	d4e1      	bmi.n	80037a0 <_fflush_r+0xc>
 80037dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037de:	f7ff fb8b 	bl	8002ef8 <__retarget_lock_release_recursive>
 80037e2:	e7dd      	b.n	80037a0 <_fflush_r+0xc>

080037e4 <__swhatbuf_r>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	460c      	mov	r4, r1
 80037e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037ec:	2900      	cmp	r1, #0
 80037ee:	b096      	sub	sp, #88	@ 0x58
 80037f0:	4615      	mov	r5, r2
 80037f2:	461e      	mov	r6, r3
 80037f4:	da0d      	bge.n	8003812 <__swhatbuf_r+0x2e>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80037fc:	f04f 0100 	mov.w	r1, #0
 8003800:	bf14      	ite	ne
 8003802:	2340      	movne	r3, #64	@ 0x40
 8003804:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003808:	2000      	movs	r0, #0
 800380a:	6031      	str	r1, [r6, #0]
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	b016      	add	sp, #88	@ 0x58
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	466a      	mov	r2, sp
 8003814:	f000 f848 	bl	80038a8 <_fstat_r>
 8003818:	2800      	cmp	r0, #0
 800381a:	dbec      	blt.n	80037f6 <__swhatbuf_r+0x12>
 800381c:	9901      	ldr	r1, [sp, #4]
 800381e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003822:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003826:	4259      	negs	r1, r3
 8003828:	4159      	adcs	r1, r3
 800382a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800382e:	e7eb      	b.n	8003808 <__swhatbuf_r+0x24>

08003830 <__smakebuf_r>:
 8003830:	898b      	ldrh	r3, [r1, #12]
 8003832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003834:	079d      	lsls	r5, r3, #30
 8003836:	4606      	mov	r6, r0
 8003838:	460c      	mov	r4, r1
 800383a:	d507      	bpl.n	800384c <__smakebuf_r+0x1c>
 800383c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003840:	6023      	str	r3, [r4, #0]
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	2301      	movs	r3, #1
 8003846:	6163      	str	r3, [r4, #20]
 8003848:	b003      	add	sp, #12
 800384a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800384c:	ab01      	add	r3, sp, #4
 800384e:	466a      	mov	r2, sp
 8003850:	f7ff ffc8 	bl	80037e4 <__swhatbuf_r>
 8003854:	9f00      	ldr	r7, [sp, #0]
 8003856:	4605      	mov	r5, r0
 8003858:	4639      	mov	r1, r7
 800385a:	4630      	mov	r0, r6
 800385c:	f7ff fbba 	bl	8002fd4 <_malloc_r>
 8003860:	b948      	cbnz	r0, 8003876 <__smakebuf_r+0x46>
 8003862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003866:	059a      	lsls	r2, r3, #22
 8003868:	d4ee      	bmi.n	8003848 <__smakebuf_r+0x18>
 800386a:	f023 0303 	bic.w	r3, r3, #3
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	e7e2      	b.n	800383c <__smakebuf_r+0xc>
 8003876:	89a3      	ldrh	r3, [r4, #12]
 8003878:	6020      	str	r0, [r4, #0]
 800387a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800387e:	81a3      	strh	r3, [r4, #12]
 8003880:	9b01      	ldr	r3, [sp, #4]
 8003882:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003886:	b15b      	cbz	r3, 80038a0 <__smakebuf_r+0x70>
 8003888:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f81d 	bl	80038cc <_isatty_r>
 8003892:	b128      	cbz	r0, 80038a0 <__smakebuf_r+0x70>
 8003894:	89a3      	ldrh	r3, [r4, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	81a3      	strh	r3, [r4, #12]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	431d      	orrs	r5, r3
 80038a4:	81a5      	strh	r5, [r4, #12]
 80038a6:	e7cf      	b.n	8003848 <__smakebuf_r+0x18>

080038a8 <_fstat_r>:
 80038a8:	b538      	push	{r3, r4, r5, lr}
 80038aa:	4d07      	ldr	r5, [pc, #28]	@ (80038c8 <_fstat_r+0x20>)
 80038ac:	2300      	movs	r3, #0
 80038ae:	4604      	mov	r4, r0
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	f7fc ff32 	bl	800071e <_fstat>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d102      	bne.n	80038c4 <_fstat_r+0x1c>
 80038be:	682b      	ldr	r3, [r5, #0]
 80038c0:	b103      	cbz	r3, 80038c4 <_fstat_r+0x1c>
 80038c2:	6023      	str	r3, [r4, #0]
 80038c4:	bd38      	pop	{r3, r4, r5, pc}
 80038c6:	bf00      	nop
 80038c8:	2000022c 	.word	0x2000022c

080038cc <_isatty_r>:
 80038cc:	b538      	push	{r3, r4, r5, lr}
 80038ce:	4d06      	ldr	r5, [pc, #24]	@ (80038e8 <_isatty_r+0x1c>)
 80038d0:	2300      	movs	r3, #0
 80038d2:	4604      	mov	r4, r0
 80038d4:	4608      	mov	r0, r1
 80038d6:	602b      	str	r3, [r5, #0]
 80038d8:	f7fc ff31 	bl	800073e <_isatty>
 80038dc:	1c43      	adds	r3, r0, #1
 80038de:	d102      	bne.n	80038e6 <_isatty_r+0x1a>
 80038e0:	682b      	ldr	r3, [r5, #0]
 80038e2:	b103      	cbz	r3, 80038e6 <_isatty_r+0x1a>
 80038e4:	6023      	str	r3, [r4, #0]
 80038e6:	bd38      	pop	{r3, r4, r5, pc}
 80038e8:	2000022c 	.word	0x2000022c

080038ec <_sbrk_r>:
 80038ec:	b538      	push	{r3, r4, r5, lr}
 80038ee:	4d06      	ldr	r5, [pc, #24]	@ (8003908 <_sbrk_r+0x1c>)
 80038f0:	2300      	movs	r3, #0
 80038f2:	4604      	mov	r4, r0
 80038f4:	4608      	mov	r0, r1
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	f7fc ff3a 	bl	8000770 <_sbrk>
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d102      	bne.n	8003906 <_sbrk_r+0x1a>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	b103      	cbz	r3, 8003906 <_sbrk_r+0x1a>
 8003904:	6023      	str	r3, [r4, #0]
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	2000022c 	.word	0x2000022c

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
