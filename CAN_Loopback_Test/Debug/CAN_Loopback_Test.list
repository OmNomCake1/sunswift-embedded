
CAN_Loopback_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a54  08003a54  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a5c  08003a5c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a5c  08003a5c  00004a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a64  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  08003acc  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003acc  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dfb  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a15  00000000  00000000  0000de93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ea  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8e7  00000000  00000000  000108f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000991b  00000000  00000000  0002e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7573  00000000  00000000  00037af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  000ef0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f1d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003994 	.word	0x08003994

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003994 	.word	0x08003994

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	@ 0x28
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 faf0 	bl	80008aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f81d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f8a3 	bl	8000418 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002d2:	f000 f859 	bl	8000388 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // start FD CAN and enable interrupt
  HAL_FDCAN_Start(&hfdcan1);
 80002d6:	480b      	ldr	r0, [pc, #44]	@ (8000304 <main+0x44>)
 80002d8:	f000 fde4 	bl	8000ea4 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x44>)
 80002e2:	f000 ff53 	bl	800118c <HAL_FDCAN_ActivateNotification>

  FDCAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData = 0x08;
 80002e6:	2308      	movs	r3, #8
 80002e8:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  send_FDCAN(&TxData, &TxHeader);
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	1cfb      	adds	r3, r7, #3
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8a9 	bl	8000448 <send_FDCAN>
	  HAL_Delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fa:	f000 fb47 	bl	800098c <HAL_Delay>
	  send_FDCAN(&TxData, &TxHeader);
 80002fe:	bf00      	nop
 8000300:	e7f3      	b.n	80002ea <main+0x2a>
 8000302:	bf00      	nop
 8000304:	20000084 	.word	0x20000084

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2238      	movs	r2, #56	@ 0x38
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fe64 	bl	8002fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800032e:	f001 fbf5 	bl	8001b1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800033a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2340      	movs	r3, #64	@ 0x40
 800033e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0318 	add.w	r3, r7, #24
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fc9b 	bl	8001c84 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000354:	f000 f8dc 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	230f      	movs	r3, #15
 800035a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	2301      	movs	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f001 ff99 	bl	80022a8 <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800037c:	f000 f8c8 	bl	8000510 <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	@ 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800038c:	4b20      	ldr	r3, [pc, #128]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 800038e:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <MX_FDCAN1_Init+0x8c>)
 8000390:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000392:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000398:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 800039a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800039e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003a2:	2204      	movs	r2, #4
 80003a4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003c6:	221d      	movs	r2, #29
 80003c8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003cc:	2202      	movs	r2, #2
 80003ce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003d8:	2202      	movs	r2, #2
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003de:	2210      	movs	r2, #16
 80003e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003e4:	220f      	movs	r2, #15
 80003e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003fc:	f000 fbf8 	bl	8000bf0 <HAL_FDCAN_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000406:	f000 f883 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000084 	.word	0x20000084
 8000414:	40006400 	.word	0x40006400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_GPIO_Init+0x2c>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <send_FDCAN>:

/* USER CODE BEGIN 4 */
// send over FD CAN given message, fills out header
void send_FDCAN(uint8_t* data, FDCAN_TxHeaderTypeDef* TxHeader) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	TxHeader->Identifier = 0x001;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_1;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2201      	movs	r2, #1
 8000468:	60da      	str	r2, [r3, #12]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000476:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, TxHeader, data) != HAL_OK) {
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6839      	ldr	r1, [r7, #0]
 8000488:	4809      	ldr	r0, [pc, #36]	@ (80004b0 <send_FDCAN+0x68>)
 800048a:	f000 fd33 	bl	8000ef4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <send_FDCAN+0x5e>
		printf("CAN send error\n");
 8000494:	4807      	ldr	r0, [pc, #28]	@ (80004b4 <send_FDCAN+0x6c>)
 8000496:	f002 fcc5 	bl	8002e24 <puts>
		fflush(stdout);
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <send_FDCAN+0x70>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 fb81 	bl	8002ba8 <fflush>
	}

}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000084 	.word	0x20000084
 80004b4:	080039ac 	.word	0x080039ac
 80004b8:	20000018 	.word	0x20000018

080004bc <HAL_FDCAN_RxFifo0Callback>:

// FD CAN FIFO0 callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	@ 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData;
	// read message from fifo 0
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, &RxData) != HAL_OK) {
 80004c6:	f107 030f 	add.w	r3, r7, #15
 80004ca:	f107 0210 	add.w	r2, r7, #16
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 fd53 	bl	8000f7c <HAL_FDCAN_GetRxMessage>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <HAL_FDCAN_RxFifo0Callback+0x32>
		printf("Error receiving CAN message\n");
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80004de:	f002 fca1 	bl	8002e24 <puts>
		fflush(stdout);
 80004e2:	4b09      	ldr	r3, [pc, #36]	@ (8000508 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fb5d 	bl	8002ba8 <fflush>
	}

	// print values
	printf("Received from CAN ID: 0x%lX\n Data: %u\n", RxHeader.Identifier, RxData);
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	4619      	mov	r1, r3
 80004f4:	4805      	ldr	r0, [pc, #20]	@ (800050c <HAL_FDCAN_RxFifo0Callback+0x50>)
 80004f6:	f002 fc2d 	bl	8002d54 <iprintf>
}
 80004fa:	bf00      	nop
 80004fc:	3738      	adds	r7, #56	@ 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	080039bc 	.word	0x080039bc
 8000508:	20000018 	.word	0x20000018
 800050c:	080039d8 	.word	0x080039d8

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <Error_Handler+0x8>

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <HAL_MspInit+0x44>)
 8000524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <HAL_MspInit+0x44>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6613      	str	r3, [r2, #96]	@ 0x60
 800052e:	4b0c      	ldr	r3, [pc, #48]	@ (8000560 <HAL_MspInit+0x44>)
 8000530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	@ (8000560 <HAL_MspInit+0x44>)
 800053c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800053e:	4a08      	ldr	r2, [pc, #32]	@ (8000560 <HAL_MspInit+0x44>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000544:	6593      	str	r3, [r2, #88]	@ 0x58
 8000546:	4b06      	ldr	r3, [pc, #24]	@ (8000560 <HAL_MspInit+0x44>)
 8000548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800054a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000552:	f001 fb87 	bl	8001c64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b09a      	sub	sp, #104	@ 0x68
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2244      	movs	r2, #68	@ 0x44
 8000582:	2100      	movs	r1, #0
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fd2d 	bl	8002fe4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a24      	ldr	r2, [pc, #144]	@ (8000620 <HAL_FDCAN_MspInit+0xbc>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d141      	bne.n	8000618 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000594:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000598:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800059a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800059e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 f863 	bl	8002670 <HAL_RCCEx_PeriphCLKConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80005b0:	f7ff ffae 	bl	8000510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005be:	6593      	str	r3, [r2, #88]	@ 0x58
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005d2:	f043 0301 	orr.w	r3, r3, #1
 80005d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <HAL_FDCAN_MspInit+0xc0>)
 80005da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005dc:	f003 0301 	and.w	r3, r3, #1
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005e8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2300      	movs	r3, #0
 80005f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80005f6:	2309      	movs	r3, #9
 80005f8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80005fe:	4619      	mov	r1, r3
 8000600:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000604:	f001 f908 	bl	8001818 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	2015      	movs	r0, #21
 800060e:	f000 faba 	bl	8000b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000612:	2015      	movs	r0, #21
 8000614:	f000 fad1 	bl	8000bba <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000618:	bf00      	nop
 800061a:	3768      	adds	r7, #104	@ 0x68
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40006400 	.word	0x40006400
 8000624:	40021000 	.word	0x40021000

08000628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <NMI_Handler+0x4>

08000630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <HardFault_Handler+0x4>

08000638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800063c:	bf00      	nop
 800063e:	e7fd      	b.n	800063c <MemManage_Handler+0x4>

08000640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <BusFault_Handler+0x4>

08000648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <UsageFault_Handler+0x4>

08000650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr

0800065e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067e:	f000 f967 	bl	8000950 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <FDCAN1_IT0_IRQHandler+0x10>)
 800068e:	f000 fe63 	bl	8001358 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000084 	.word	0x20000084

0800069c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <ITM_SendChar+0x48>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <ITM_SendChar+0x48>)
 80006ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006b0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <ITM_SendChar+0x4c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <ITM_SendChar+0x4c>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006be:	bf00      	nop
 80006c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f8      	beq.n	80006c0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006ce:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	6013      	str	r3, [r2, #0]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000edfc 	.word	0xe000edfc
 80006e8:	e0000e00 	.word	0xe0000e00

080006ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e00a      	b.n	8000714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fe:	f3af 8000 	nop.w
 8000702:	4601      	mov	r1, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf0      	blt.n	80006fe <_read+0x12>
  }

  return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e009      	b.n	800074c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ffab 	bl	800069c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf1      	blt.n	8000738 <_write+0x12>
  }
  return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_close>:

int _close(int file)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000786:	605a      	str	r2, [r3, #4]
  return 0;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_isatty>:

int _isatty(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	@ (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 fc42 	bl	8003080 <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	@ (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20008000 	.word	0x20008000
 8000828:	00000400 	.word	0x00000400
 800082c:	200000e8 	.word	0x200000e8
 8000830:	20000240 	.word	0x20000240

08000834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000858:	480d      	ldr	r0, [pc, #52]	@ (8000890 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800085c:	f7ff ffea 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	@ (8000894 <LoopForever+0x6>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	@ (8000898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	@ (800089c <LoopForever+0xe>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	@ (80008a4 <LoopForever+0x16>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f002 fc01 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088a:	f7ff fd19 	bl	80002c0 <main>

0800088e <LoopForever>:

LoopForever:
    b LoopForever
 800088e:	e7fe      	b.n	800088e <LoopForever>
  ldr   r0, =_estack
 8000890:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800089c:	08003a64 	.word	0x08003a64
  ldr r2, =_sbss
 80008a0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a4:	2000023c 	.word	0x2000023c

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>

080008aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f95b 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f80e 	bl	80008dc <HAL_InitTick>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e001      	b.n	80008d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008cc:	f7ff fe26 	bl	800051c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d0:	79fb      	ldrb	r3, [r7, #7]

}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_InitTick+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d022      	beq.n	8000936 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <HAL_InitTick+0x6c>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <HAL_InitTick+0x68>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	4618      	mov	r0, r3
 8000906:	f000 f966 	bl	8000bd6 <HAL_SYSTICK_Config>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d10f      	bne.n	8000930 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b0f      	cmp	r3, #15
 8000914:	d809      	bhi.n	800092a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000916:	2200      	movs	r2, #0
 8000918:	6879      	ldr	r1, [r7, #4]
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f000 f932 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_InitTick+0x70>)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	e007      	b.n	800093a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	73fb      	strb	r3, [r7, #15]
 800092e:	e004      	b.n	800093a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000930:	2301      	movs	r3, #1
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e001      	b.n	800093a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093a:	7bfb      	ldrb	r3, [r7, #15]
}
 800093c:	4618      	mov	r0, r3
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000008 	.word	0x20000008
 8000948:	20000000 	.word	0x20000000
 800094c:	20000004 	.word	0x20000004

08000950 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000954:	4b05      	ldr	r3, [pc, #20]	@ (800096c <HAL_IncTick+0x1c>)
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a03      	ldr	r2, [pc, #12]	@ (800096c <HAL_IncTick+0x1c>)
 8000960:	6013      	str	r3, [r2, #0]
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	200000ec 	.word	0x200000ec
 8000970:	20000008 	.word	0x20000008

08000974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  return uwTick;
 8000978:	4b03      	ldr	r3, [pc, #12]	@ (8000988 <HAL_GetTick+0x14>)
 800097a:	681b      	ldr	r3, [r3, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	200000ec 	.word	0x200000ec

0800098c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000994:	f7ff ffee 	bl	8000974 <HAL_GetTick>
 8000998:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a4:	d004      	beq.n	80009b0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_Delay+0x40>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	4413      	add	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b0:	bf00      	nop
 80009b2:	f7ff ffdf 	bl	8000974 <HAL_GetTick>
 80009b6:	4602      	mov	r2, r0
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1ad3      	subs	r3, r2, r3
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d8f7      	bhi.n	80009b2 <HAL_Delay+0x26>
  {
  }
}
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000008 	.word	0x20000008

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	db0b      	blt.n	8000a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	f003 021f 	and.w	r2, r3, #31
 8000a4c:	4907      	ldr	r1, [pc, #28]	@ (8000a6c <__NVIC_EnableIRQ+0x38>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	095b      	lsrs	r3, r3, #5
 8000a54:	2001      	movs	r0, #1
 8000a56:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	@ (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	@ (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	@ 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	@ 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff29 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff40 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff90 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5f 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff33 	bl	8000a34 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa4 	bl	8000b2c <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e147      	b.n	8000e92 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d106      	bne.n	8000c1c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fca4 	bl	8000564 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	699a      	ldr	r2, [r3, #24]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0210 	bic.w	r2, r2, #16
 8000c2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c2c:	f7ff fea2 	bl	8000974 <HAL_GetTick>
 8000c30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c32:	e012      	b.n	8000c5a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c34:	f7ff fe9e 	bl	8000974 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b0a      	cmp	r3, #10
 8000c40:	d90b      	bls.n	8000c5a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c46:	f043 0201 	orr.w	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e11b      	b.n	8000e92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0308 	and.w	r3, r3, #8
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d0e5      	beq.n	8000c34 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	699a      	ldr	r2, [r3, #24]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f042 0201 	orr.w	r2, r2, #1
 8000c76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c78:	f7ff fe7c 	bl	8000974 <HAL_GetTick>
 8000c7c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c7e:	e012      	b.n	8000ca6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c80:	f7ff fe78 	bl	8000974 <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b0a      	cmp	r3, #10
 8000c8c:	d90b      	bls.n	8000ca6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c92:	f043 0201 	orr.w	r2, r3, #1
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e0f5      	b.n	8000e92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d0e5      	beq.n	8000c80 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f042 0202 	orr.w	r2, r2, #2
 8000cc2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a74      	ldr	r2, [pc, #464]	@ (8000e9c <HAL_FDCAN_Init+0x2ac>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d103      	bne.n	8000cd6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000cce:	4a74      	ldr	r2, [pc, #464]	@ (8000ea0 <HAL_FDCAN_Init+0x2b0>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7c1b      	ldrb	r3, [r3, #16]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d108      	bne.n	8000cf0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	699a      	ldr	r2, [r3, #24]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cec:	619a      	str	r2, [r3, #24]
 8000cee:	e007      	b.n	8000d00 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	699a      	ldr	r2, [r3, #24]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000cfe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	7c5b      	ldrb	r3, [r3, #17]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d108      	bne.n	8000d1a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	699a      	ldr	r2, [r3, #24]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d16:	619a      	str	r2, [r3, #24]
 8000d18:	e007      	b.n	8000d2a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699a      	ldr	r2, [r3, #24]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d28:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	7c9b      	ldrb	r3, [r3, #18]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d108      	bne.n	8000d44 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	699a      	ldr	r2, [r3, #24]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d40:	619a      	str	r2, [r3, #24]
 8000d42:	e007      	b.n	8000d54 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	699a      	ldr	r2, [r3, #24]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d52:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	430a      	orrs	r2, r1
 8000d68:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	699a      	ldr	r2, [r3, #24]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000d78:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	691a      	ldr	r2, [r3, #16]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0210 	bic.w	r2, r2, #16
 8000d88:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	699a      	ldr	r2, [r3, #24]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0204 	orr.w	r2, r2, #4
 8000da0:	619a      	str	r2, [r3, #24]
 8000da2:	e02c      	b.n	8000dfe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d028      	beq.n	8000dfe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d01c      	beq.n	8000dee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dc2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f042 0210 	orr.w	r2, r2, #16
 8000dd2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d110      	bne.n	8000dfe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	699a      	ldr	r2, [r3, #24]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0220 	orr.w	r2, r2, #32
 8000dea:	619a      	str	r2, [r3, #24]
 8000dec:	e007      	b.n	8000dfe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	699a      	ldr	r2, [r3, #24]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f042 0220 	orr.w	r2, r2, #32
 8000dfc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69db      	ldr	r3, [r3, #28]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e0e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6a1b      	ldr	r3, [r3, #32]
 8000e14:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e16:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e26:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e28:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e32:	d115      	bne.n	8000e60 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e38:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e42:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e4c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	3b01      	subs	r3, #1
 8000e56:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e5c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e5e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	430a      	orrs	r2, r1
 8000e72:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fbfc 	bl	8001674 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40006400 	.word	0x40006400
 8000ea0:	40006500 	.word	0x40006500

08000ea4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d110      	bne.n	8000eda <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2202      	movs	r2, #2
 8000ebc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699a      	ldr	r2, [r3, #24]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f022 0201 	bic.w	r2, r2, #1
 8000ece:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e006      	b.n	8000ee8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ede:	f043 0204 	orr.w	r2, r3, #4
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
  }
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d12c      	bne.n	8000f66 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d007      	beq.n	8000f2c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e023      	b.n	8000f74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f34:	0c1b      	lsrs	r3, r3, #16
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f000 fbec 	bl	8001720 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	fa01 f202 	lsl.w	r2, r1, r2
 8000f54:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	409a      	lsls	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e006      	b.n	8000f74 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	f043 0208 	orr.w	r2, r3, #8
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
  }
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b08b      	sub	sp, #44	@ 0x2c
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
 8000f88:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f94:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000f96:	7efb      	ldrb	r3, [r7, #27]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	f040 80e8 	bne.w	800116e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b40      	cmp	r3, #64	@ 0x40
 8000fa2:	d137      	bne.n	8001014 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d107      	bne.n	8000fc4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0db      	b.n	800117c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fcc:	0e1b      	lsrs	r3, r3, #24
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10a      	bne.n	8000fec <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fde:	0a5b      	lsrs	r3, r3, #9
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4413      	add	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	440b      	add	r3, r1
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
 8001012:	e036      	b.n	8001082 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001028:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e0a3      	b.n	800117c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800103c:	0e1b      	lsrs	r3, r3, #24
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10a      	bne.n	800105c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001058:	2301      	movs	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001064:	0a1b      	lsrs	r3, r3, #8
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4413      	add	r3, r2
 800106e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	440b      	add	r3, r1
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0c9b      	lsrs	r3, r3, #18
 800109c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e005      	b.n	80010b2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80010a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80010b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80010ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010cc:	3304      	adds	r3, #4
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	f003 020f 	and.w	r2, r3, #15
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80010e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80010f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0e1b      	lsrs	r3, r3, #24
 8001106:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	0fda      	lsrs	r2, r3, #31
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111a:	3304      	adds	r3, #4
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	e00a      	b.n	800113e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	441a      	add	r2, r3
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	440b      	add	r3, r1
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	3301      	adds	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001144:	5cd3      	ldrb	r3, [r2, r3]
 8001146:	461a      	mov	r2, r3
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	4293      	cmp	r3, r2
 800114c:	d3ec      	bcc.n	8001128 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2b40      	cmp	r3, #64	@ 0x40
 8001152:	d105      	bne.n	8001160 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800115e:	e004      	b.n	800116a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001172:	f043 0208 	orr.w	r2, r3, #8
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	372c      	adds	r7, #44	@ 0x2c
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	08003a10 	.word	0x08003a10

0800118c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800119e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80011a0:	7dfb      	ldrb	r3, [r7, #23]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d003      	beq.n	80011ae <HAL_FDCAN_ActivateNotification+0x22>
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	f040 80c8 	bne.w	800133e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d03b      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d031      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d004      	beq.n	80011f2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d027      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d01d      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800120c:	2b00      	cmp	r3, #0
 800120e:	d004      	beq.n	800121a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	2b00      	cmp	r3, #0
 8001218:	d013      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00c      	beq.n	8001252 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800123e:	2b00      	cmp	r3, #0
 8001240:	d107      	bne.n	8001252 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d13b      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800126c:	2b00      	cmp	r3, #0
 800126e:	d004      	beq.n	800127a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d131      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d127      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d113      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00c      	beq.n	80012ee <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d007      	beq.n	80012ee <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0202 	orr.w	r2, r2, #2
 80012ec:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	430a      	orrs	r2, r1
 8001308:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	430a      	orrs	r2, r1
 8001326:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	430a      	orrs	r2, r1
 8001338:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e006      	b.n	800134c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001342:	f043 0202 	orr.w	r2, r3, #2
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001366:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800136a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001374:	4013      	ands	r3, r2
 8001376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800138c:	4013      	ands	r3, r2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001396:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a4:	4013      	ands	r3, r2
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ae:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80013b2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ba:	6a3a      	ldr	r2, [r7, #32]
 80013bc:	4013      	ands	r3, r2
 80013be:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013ca:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d2:	69fa      	ldr	r2, [r7, #28]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013de:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013e6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2240      	movs	r2, #64	@ 0x40
 8001402:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f916 	bl	8001636 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d019      	beq.n	8001448 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001426:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800143e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001440:	6939      	ldr	r1, [r7, #16]
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 f8d8 	bl	80015f8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001454:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f8a2 	bl	80015a2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800145e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800146a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800146c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f824 	bl	80004bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001476:	2b00      	cmp	r3, #0
 8001478:	d007      	beq.n	800148a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001480:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001482:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f897 	bl	80015b8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00c      	beq.n	80014ae <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149a:	2b00      	cmp	r3, #0
 800149c:	d007      	beq.n	80014ae <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f890 	bl	80015ce <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d018      	beq.n	80014ea <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d013      	beq.n	80014ea <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014ca:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80014e2:	68f9      	ldr	r1, [r7, #12]
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f87c 	bl	80015e2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00c      	beq.n	800150e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001506:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f880 	bl	800160e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00c      	beq.n	8001532 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800152a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f878 	bl	8001622 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d00f      	beq.n	800155c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001554:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800156a:	69f9      	ldr	r1, [r7, #28]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f876 	bl	800165e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d009      	beq.n	800158c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6a3a      	ldr	r2, [r7, #32]
 800157e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f858 	bl	800164a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	@ 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800167e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800168e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001696:	041a      	lsls	r2, r3, #16
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016b4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016bc:	061a      	lsls	r2, r3, #24
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e005      	b.n	8001702 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	3304      	adds	r3, #4
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	429a      	cmp	r2, r3
 800170c:	d3f3      	bcc.n	80016f6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	4000a400 	.word	0x4000a400

08001720 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001720:	b480      	push	{r7}
 8001722:	b089      	sub	sp, #36	@ 0x24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
 800172c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10a      	bne.n	800174c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800173e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001746:	4313      	orrs	r3, r2
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e00a      	b.n	8001762 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001754:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800175a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800175c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001760:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800176c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001772:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001778:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	440b      	add	r3, r1
 8001794:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	3304      	adds	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	3304      	adds	r3, #4
 80017ac:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e020      	b.n	80017f6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	3303      	adds	r3, #3
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3302      	adds	r3, #2
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	440b      	add	r3, r1
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017cc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	6879      	ldr	r1, [r7, #4]
 80017d4:	440b      	add	r3, r1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017da:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	440a      	add	r2, r1
 80017e2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017e4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	3304      	adds	r3, #4
 80017ee:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	3304      	adds	r3, #4
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <FDCAN_CopyMessageToRAM+0xf4>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	461a      	mov	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	4293      	cmp	r3, r2
 8001804:	d3d6      	bcc.n	80017b4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001806:	bf00      	nop
 8001808:	bf00      	nop
 800180a:	3724      	adds	r7, #36	@ 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	08003a10 	.word	0x08003a10

08001818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001818:	b480      	push	{r7}
 800181a:	b087      	sub	sp, #28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001826:	e15a      	b.n	8001ade <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	fa01 f303 	lsl.w	r3, r1, r3
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 814c 	beq.w	8001ad8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b01      	cmp	r3, #1
 800184a:	d005      	beq.n	8001858 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001854:	2b02      	cmp	r3, #2
 8001856:	d130      	bne.n	80018ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188e:	2201      	movs	r2, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	091b      	lsrs	r3, r3, #4
 80018a4:	f003 0201 	and.w	r2, r3, #1
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	d017      	beq.n	80018f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d123      	bne.n	800194a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	08da      	lsrs	r2, r3, #3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	3208      	adds	r2, #8
 800190a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	6939      	ldr	r1, [r7, #16]
 8001946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2203      	movs	r2, #3
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0203 	and.w	r2, r3, #3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80a6 	beq.w	8001ad8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198c:	4b5b      	ldr	r3, [pc, #364]	@ (8001afc <HAL_GPIO_Init+0x2e4>)
 800198e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001990:	4a5a      	ldr	r2, [pc, #360]	@ (8001afc <HAL_GPIO_Init+0x2e4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6613      	str	r3, [r2, #96]	@ 0x60
 8001998:	4b58      	ldr	r3, [pc, #352]	@ (8001afc <HAL_GPIO_Init+0x2e4>)
 800199a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a4:	4a56      	ldr	r2, [pc, #344]	@ (8001b00 <HAL_GPIO_Init+0x2e8>)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019ce:	d01f      	beq.n	8001a10 <HAL_GPIO_Init+0x1f8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001b04 <HAL_GPIO_Init+0x2ec>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d019      	beq.n	8001a0c <HAL_GPIO_Init+0x1f4>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4b      	ldr	r2, [pc, #300]	@ (8001b08 <HAL_GPIO_Init+0x2f0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d013      	beq.n	8001a08 <HAL_GPIO_Init+0x1f0>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <HAL_GPIO_Init+0x2f4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00d      	beq.n	8001a04 <HAL_GPIO_Init+0x1ec>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a49      	ldr	r2, [pc, #292]	@ (8001b10 <HAL_GPIO_Init+0x2f8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d007      	beq.n	8001a00 <HAL_GPIO_Init+0x1e8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a48      	ldr	r2, [pc, #288]	@ (8001b14 <HAL_GPIO_Init+0x2fc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d101      	bne.n	80019fc <HAL_GPIO_Init+0x1e4>
 80019f8:	2305      	movs	r3, #5
 80019fa:	e00a      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 80019fc:	2306      	movs	r3, #6
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x1fa>
 8001a10:	2300      	movs	r3, #0
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a22:	4937      	ldr	r1, [pc, #220]	@ (8001b00 <HAL_GPIO_Init+0x2e8>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a30:	4b39      	ldr	r3, [pc, #228]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a54:	4a30      	ldr	r2, [pc, #192]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7e:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad2:	4a11      	ldr	r2, [pc, #68]	@ (8001b18 <HAL_GPIO_Init+0x300>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f ae9d 	bne.w	8001828 <HAL_GPIO_Init+0x10>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	48000c00 	.word	0x48000c00
 8001b10:	48001000 	.word	0x48001000
 8001b14:	48001400 	.word	0x48001400
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d141      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b36:	d131      	bne.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b47      	ldr	r3, [pc, #284]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3e:	4a46      	ldr	r2, [pc, #280]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	4b43      	ldr	r3, [pc, #268]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b50:	4a41      	ldr	r2, [pc, #260]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b58:	4b40      	ldr	r3, [pc, #256]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2232      	movs	r2, #50	@ 0x32
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	4a3f      	ldr	r2, [pc, #252]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b64:	fba2 2303 	umull	r2, r3, r2, r3
 8001b68:	0c9b      	lsrs	r3, r3, #18
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6e:	e002      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b76:	4b38      	ldr	r3, [pc, #224]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b82:	d102      	bne.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f2      	bne.n	8001b70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8a:	4b33      	ldr	r3, [pc, #204]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b96:	d158      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e057      	b.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b9c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bac:	e04d      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb4:	d141      	bne.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc2:	d131      	bne.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bca:	4a23      	ldr	r2, [pc, #140]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2232      	movs	r2, #50	@ 0x32
 8001bea:	fb02 f303 	mul.w	r3, r2, r3
 8001bee:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf4:	0c9b      	lsrs	r3, r3, #18
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfa:	e002      	b.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0e:	d102      	bne.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f2      	bne.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c22:	d112      	bne.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e011      	b.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c38:	e007      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	431bde83 	.word	0x431bde83

08001c64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a04      	ldr	r2, [pc, #16]	@ (8001c80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c72:	6093      	str	r3, [r2, #8]
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40007000 	.word	0x40007000

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e2fe      	b.n	8002294 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d075      	beq.n	8001d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca2:	4b97      	ldr	r3, [pc, #604]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cac:	4b94      	ldr	r3, [pc, #592]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b0c      	cmp	r3, #12
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3e>
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x44>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b8d      	ldr	r3, [pc, #564]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d05b      	beq.n	8001d8c <HAL_RCC_OscConfig+0x108>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d157      	bne.n	8001d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e2d9      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x74>
 8001cea:	4b85      	ldr	r3, [pc, #532]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a84      	ldr	r2, [pc, #528]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7f      	ldr	r3, [pc, #508]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7e      	ldr	r2, [pc, #504]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7b      	ldr	r2, [pc, #492]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0xb0>
 8001d1c:	4b78      	ldr	r3, [pc, #480]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a77      	ldr	r2, [pc, #476]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b75      	ldr	r3, [pc, #468]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a74      	ldr	r2, [pc, #464]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d013      	beq.n	8001d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7fe fe1a 	bl	8000974 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7fe fe16 	bl	8000974 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e29e      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xc0>
 8001d62:	e014      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe fe06 	bl	8000974 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7fe fe02 	bl	8000974 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	@ 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e28a      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7e:	4b60      	ldr	r3, [pc, #384]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0xe8>
 8001d8a:	e000      	b.n	8001d8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d075      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9a:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da4:	4b56      	ldr	r3, [pc, #344]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b0c      	cmp	r3, #12
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0x136>
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x13c>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d11f      	bne.n	8001e00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x154>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e25d      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b49      	ldr	r3, [pc, #292]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	061b      	lsls	r3, r3, #24
 8001de6:	4946      	ldr	r1, [pc, #280]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dec:	4b45      	ldr	r3, [pc, #276]	@ (8001f04 <HAL_RCC_OscConfig+0x280>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe fd73 	bl	80008dc <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d043      	beq.n	8001e84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e249      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d023      	beq.n	8001e50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe fdae 	bl	8000974 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fdaa 	bl	8000974 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e232      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e2e:	4b34      	ldr	r3, [pc, #208]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3a:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	061b      	lsls	r3, r3, #24
 8001e48:	492d      	ldr	r1, [pc, #180]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
 8001e4e:	e01a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e50:	4b2b      	ldr	r3, [pc, #172]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fd8a 	bl	8000974 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fd86 	bl	8000974 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e20e      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e76:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1e0>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d041      	beq.n	8001f16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d01c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7fe fd63 	bl	8000974 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7fe fd5f 	bl	8000974 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1e7      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0ef      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x22e>
 8001ed2:	e020      	b.n	8001f16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eda:	4a09      	ldr	r2, [pc, #36]	@ (8001f00 <HAL_RCC_OscConfig+0x27c>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7fe fd46 	bl	8000974 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eea:	e00d      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7fe fd42 	bl	8000974 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d906      	bls.n	8001f08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1ca      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f08:	4b8c      	ldr	r3, [pc, #560]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ea      	bne.n	8001eec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80a6 	beq.w	8002070 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f28:	4b84      	ldr	r3, [pc, #528]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_OscConfig+0x2b4>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x2b6>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	4a7e      	ldr	r2, [pc, #504]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4a:	4b7c      	ldr	r3, [pc, #496]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5a:	4b79      	ldr	r3, [pc, #484]	@ (8002140 <HAL_RCC_OscConfig+0x4bc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d118      	bne.n	8001f98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f66:	4b76      	ldr	r3, [pc, #472]	@ (8002140 <HAL_RCC_OscConfig+0x4bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a75      	ldr	r2, [pc, #468]	@ (8002140 <HAL_RCC_OscConfig+0x4bc>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe fcff 	bl	8000974 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7a:	f7fe fcfb 	bl	8000974 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e183      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8002140 <HAL_RCC_OscConfig+0x4bc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d108      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x32e>
 8001fa0:	4b66      	ldr	r3, [pc, #408]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	4a65      	ldr	r2, [pc, #404]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb0:	e024      	b.n	8001ffc <HAL_RCC_OscConfig+0x378>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d110      	bne.n	8001fdc <HAL_RCC_OscConfig+0x358>
 8001fba:	4b60      	ldr	r3, [pc, #384]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	4a5e      	ldr	r2, [pc, #376]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fca:	4b5c      	ldr	r3, [pc, #368]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd0:	4a5a      	ldr	r2, [pc, #360]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fda:	e00f      	b.n	8001ffc <HAL_RCC_OscConfig+0x378>
 8001fdc:	4b57      	ldr	r3, [pc, #348]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe2:	4a56      	ldr	r2, [pc, #344]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fec:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff2:	4a52      	ldr	r2, [pc, #328]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d016      	beq.n	8002032 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fcb6 	bl	8000974 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe fcb2 	bl	8000974 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e138      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002022:	4b46      	ldr	r3, [pc, #280]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ed      	beq.n	800200c <HAL_RCC_OscConfig+0x388>
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fc9f 	bl	8000974 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7fe fc9b 	bl	8000974 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e121      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002050:	4b3a      	ldr	r3, [pc, #232]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ed      	bne.n	800203a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205e:	7ffb      	ldrb	r3, [r7, #31]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b35      	ldr	r3, [pc, #212]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	4a34      	ldr	r2, [pc, #208]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03c      	beq.n	80020f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01c      	beq.n	80020be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002084:	4b2d      	ldr	r3, [pc, #180]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002086:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800208a:	4a2c      	ldr	r2, [pc, #176]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fc6e 	bl	8000974 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209c:	f7fe fc6a 	bl	8000974 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0f2      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ae:	4b23      	ldr	r3, [pc, #140]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ef      	beq.n	800209c <HAL_RCC_OscConfig+0x418>
 80020bc:	e01b      	b.n	80020f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020be:	4b1f      	ldr	r3, [pc, #124]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f023 0301 	bic.w	r3, r3, #1
 80020ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ce:	f7fe fc51 	bl	8000974 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020d6:	f7fe fc4d 	bl	8000974 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0d5      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 80020ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ef      	bne.n	80020d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80c9 	beq.w	8002292 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002100:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b0c      	cmp	r3, #12
 800210a:	f000 8083 	beq.w	8002214 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d15e      	bne.n	80021d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a08      	ldr	r2, [pc, #32]	@ (800213c <HAL_RCC_OscConfig+0x4b8>)
 800211c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7fe fc27 	bl	8000974 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002128:	e00c      	b.n	8002144 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212a:	f7fe fc23 	bl	8000974 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d905      	bls.n	8002144 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e0ab      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002144:	4b55      	ldr	r3, [pc, #340]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ec      	bne.n	800212a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002150:	4b52      	ldr	r3, [pc, #328]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4b52      	ldr	r3, [pc, #328]	@ (80022a0 <HAL_RCC_OscConfig+0x61c>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6a11      	ldr	r1, [r2, #32]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002160:	3a01      	subs	r2, #1
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	4311      	orrs	r1, r2
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800216a:	0212      	lsls	r2, r2, #8
 800216c:	4311      	orrs	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002172:	0852      	lsrs	r2, r2, #1
 8002174:	3a01      	subs	r2, #1
 8002176:	0552      	lsls	r2, r2, #21
 8002178:	4311      	orrs	r1, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800217e:	0852      	lsrs	r2, r2, #1
 8002180:	3a01      	subs	r2, #1
 8002182:	0652      	lsls	r2, r2, #25
 8002184:	4311      	orrs	r1, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800218a:	06d2      	lsls	r2, r2, #27
 800218c:	430a      	orrs	r2, r1
 800218e:	4943      	ldr	r1, [pc, #268]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002190:	4313      	orrs	r3, r2
 8002192:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b41      	ldr	r3, [pc, #260]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a40      	ldr	r2, [pc, #256]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a0:	4b3e      	ldr	r3, [pc, #248]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a3d      	ldr	r2, [pc, #244]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fbe2 	bl	8000974 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7fe fbde 	bl	8000974 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e066      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b35      	ldr	r3, [pc, #212]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x530>
 80021d2:	e05e      	b.n	8002292 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b31      	ldr	r3, [pc, #196]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a30      	ldr	r2, [pc, #192]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe fbc8 	bl	8000974 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fbc4 	bl	8000974 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e04c      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fa:	4b28      	ldr	r3, [pc, #160]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002206:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4924      	ldr	r1, [pc, #144]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 800220c:	4b25      	ldr	r3, [pc, #148]	@ (80022a4 <HAL_RCC_OscConfig+0x620>)
 800220e:	4013      	ands	r3, r2
 8002210:	60cb      	str	r3, [r1, #12]
 8002212:	e03e      	b.n	8002292 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e039      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002220:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <HAL_RCC_OscConfig+0x618>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	429a      	cmp	r2, r3
 8002232:	d12c      	bne.n	800228e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	3b01      	subs	r3, #1
 8002240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d123      	bne.n	800228e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d11b      	bne.n	800228e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002260:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d113      	bne.n	800228e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	085b      	lsrs	r3, r3, #1
 8002272:	3b01      	subs	r3, #1
 8002274:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d109      	bne.n	800228e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002284:	085b      	lsrs	r3, r3, #1
 8002286:	3b01      	subs	r3, #1
 8002288:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3720      	adds	r7, #32
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	019f800c 	.word	0x019f800c
 80022a4:	feeefffc 	.word	0xfeeefffc

080022a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e11e      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b91      	ldr	r3, [pc, #580]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b8e      	ldr	r3, [pc, #568]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 020f 	bic.w	r2, r3, #15
 80022d6:	498c      	ldr	r1, [pc, #560]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b8a      	ldr	r3, [pc, #552]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e106      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d073      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d129      	bne.n	8002358 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002304:	4b81      	ldr	r3, [pc, #516]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0f4      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002314:	f000 f966 	bl	80025e4 <RCC_GetSysClockFreqFromPLLSource>
 8002318:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4a7c      	ldr	r2, [pc, #496]	@ (8002510 <HAL_RCC_ClockConfig+0x268>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d93f      	bls.n	80023a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002322:	4b7a      	ldr	r3, [pc, #488]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002336:	2b00      	cmp	r3, #0
 8002338:	d033      	beq.n	80023a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d12f      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002342:	4b72      	ldr	r3, [pc, #456]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800234a:	4a70      	ldr	r2, [pc, #448]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 800234c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002350:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e024      	b.n	80023a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002360:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d109      	bne.n	8002380 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0c6      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0be      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002380:	f000 f8ce 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8002384:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	4a61      	ldr	r2, [pc, #388]	@ (8002510 <HAL_RCC_ClockConfig+0x268>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d909      	bls.n	80023a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238e:	4b5f      	ldr	r3, [pc, #380]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002396:	4a5d      	ldr	r2, [pc, #372]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002398:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800239c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800239e:	2380      	movs	r3, #128	@ 0x80
 80023a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a2:	4b5a      	ldr	r3, [pc, #360]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f023 0203 	bic.w	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4957      	ldr	r1, [pc, #348]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b4:	f7fe fade 	bl	8000974 <HAL_GetTick>
 80023b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	e00a      	b.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023bc:	f7fe fada 	bl	8000974 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e095      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	4b4e      	ldr	r3, [pc, #312]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 020c 	and.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d1eb      	bne.n	80023bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023fc:	4b43      	ldr	r3, [pc, #268]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	4a42      	ldr	r2, [pc, #264]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002402:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002406:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d007      	beq.n	8002424 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002414:	4b3d      	ldr	r3, [pc, #244]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800241c:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 800241e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002422:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002424:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4936      	ldr	r1, [pc, #216]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002432:	4313      	orrs	r3, r2
 8002434:	608b      	str	r3, [r1, #8]
 8002436:	e008      	b.n	800244a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b80      	cmp	r3, #128	@ 0x80
 800243c:	d105      	bne.n	800244a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800243e:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a32      	ldr	r2, [pc, #200]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 8002444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002448:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244a:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d21d      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 020f 	bic.w	r2, r3, #15
 8002460:	4929      	ldr	r1, [pc, #164]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	4313      	orrs	r3, r2
 8002466:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002468:	f7fe fa84 	bl	8000974 <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fa80 	bl	8000974 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e03b      	b.n	80024fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b20      	ldr	r3, [pc, #128]	@ (8002508 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d1ed      	bne.n	8002470 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4917      	ldr	r1, [pc, #92]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490f      	ldr	r1, [pc, #60]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d2:	f000 f825 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_RCC_ClockConfig+0x264>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490c      	ldr	r1, [pc, #48]	@ (8002514 <HAL_RCC_ClockConfig+0x26c>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002518 <HAL_RCC_ClockConfig+0x270>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HAL_RCC_ClockConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f9f0 	bl	80008dc <HAL_InitTick>
 80024fc:	4603      	mov	r3, r0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
 8002510:	04c4b400 	.word	0x04c4b400
 8002514:	08003a00 	.word	0x08003a00
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002526:	4b2c      	ldr	r3, [pc, #176]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d102      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002532:	4b2a      	ldr	r3, [pc, #168]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e047      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d102      	bne.n	800254a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	e03e      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800254a:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d136      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10c      	bne.n	800258e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002574:	4a1a      	ldr	r2, [pc, #104]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	4a16      	ldr	r2, [pc, #88]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800257e:	68d2      	ldr	r2, [r2, #12]
 8002580:	0a12      	lsrs	r2, r2, #8
 8002582:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
      break;
 800258c:	e00c      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800258e:	4a13      	ldr	r2, [pc, #76]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	fbb2 f3f3 	udiv	r3, r2, r3
 8002596:	4a10      	ldr	r2, [pc, #64]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002598:	68d2      	ldr	r2, [r2, #12]
 800259a:	0a12      	lsrs	r2, r2, #8
 800259c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
      break;
 80025a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	0e5b      	lsrs	r3, r3, #25
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	3301      	adds	r3, #1
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	e001      	b.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025c8:	693b      	ldr	r3, [r7, #16]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	00f42400 	.word	0x00f42400
 80025e0:	007a1200 	.word	0x007a1200

080025e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3301      	adds	r3, #1
 8002600:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b03      	cmp	r3, #3
 8002606:	d10c      	bne.n	8002622 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002608:	4a17      	ldr	r2, [pc, #92]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002610:	4a14      	ldr	r2, [pc, #80]	@ (8002664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002612:	68d2      	ldr	r2, [r2, #12]
 8002614:	0a12      	lsrs	r2, r2, #8
 8002616:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800261a:	fb02 f303 	mul.w	r3, r2, r3
 800261e:	617b      	str	r3, [r7, #20]
    break;
 8002620:	e00c      	b.n	800263c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002622:	4a12      	ldr	r2, [pc, #72]	@ (800266c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	4a0e      	ldr	r2, [pc, #56]	@ (8002664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800262c:	68d2      	ldr	r2, [r2, #12]
 800262e:	0a12      	lsrs	r2, r2, #8
 8002630:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	617b      	str	r3, [r7, #20]
    break;
 800263a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0e5b      	lsrs	r3, r3, #25
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	3301      	adds	r3, #1
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	fbb2 f3f3 	udiv	r3, r2, r3
 8002654:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002656:	687b      	ldr	r3, [r7, #4]
}
 8002658:	4618      	mov	r0, r3
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000
 8002668:	007a1200 	.word	0x007a1200
 800266c:	00f42400 	.word	0x00f42400

08002670 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002678:	2300      	movs	r3, #0
 800267a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800267c:	2300      	movs	r3, #0
 800267e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8098 	beq.w	80027be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b43      	ldr	r3, [pc, #268]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b40      	ldr	r3, [pc, #256]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a2:	4a3f      	ldr	r2, [pc, #252]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026aa:	4b3d      	ldr	r3, [pc, #244]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ba:	4b3a      	ldr	r3, [pc, #232]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a39      	ldr	r2, [pc, #228]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026c6:	f7fe f955 	bl	8000974 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026cc:	e009      	b.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe f951 	bl	8000974 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d902      	bls.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	74fb      	strb	r3, [r7, #19]
        break;
 80026e0:	e005      	b.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e2:	4b30      	ldr	r3, [pc, #192]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0ef      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d159      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f4:	4b2a      	ldr	r3, [pc, #168]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01e      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	429a      	cmp	r2, r3
 800270e:	d019      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002710:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800271c:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002722:	4a1f      	ldr	r2, [pc, #124]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800272c:	4b1c      	ldr	r3, [pc, #112]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800273c:	4a18      	ldr	r2, [pc, #96]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe f911 	bl	8000974 <HAL_GetTick>
 8002752:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	e00b      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe f90d 	bl	8000974 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002764:	4293      	cmp	r3, r2
 8002766:	d902      	bls.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	74fb      	strb	r3, [r7, #19]
            break;
 800276c:	e006      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ec      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002782:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002788:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	4903      	ldr	r1, [pc, #12]	@ (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002792:	4313      	orrs	r3, r2
 8002794:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002798:	e008      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	74bb      	strb	r3, [r7, #18]
 800279e:	e005      	b.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027a0:	40021000 	.word	0x40021000
 80027a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a8:	7cfb      	ldrb	r3, [r7, #19]
 80027aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ac:	7c7b      	ldrb	r3, [r7, #17]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4ba6      	ldr	r3, [pc, #664]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b6:	4aa5      	ldr	r2, [pc, #660]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ca:	4ba0      	ldr	r3, [pc, #640]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f023 0203 	bic.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	499c      	ldr	r1, [pc, #624]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ec:	4b97      	ldr	r3, [pc, #604]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f023 020c 	bic.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4994      	ldr	r1, [pc, #592]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800280e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002814:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	498b      	ldr	r1, [pc, #556]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002830:	4b86      	ldr	r3, [pc, #536]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002836:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	4983      	ldr	r1, [pc, #524]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002852:	4b7e      	ldr	r3, [pc, #504]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002858:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	497a      	ldr	r1, [pc, #488]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4972      	ldr	r1, [pc, #456]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002896:	4b6d      	ldr	r3, [pc, #436]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4969      	ldr	r1, [pc, #420]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b8:	4b64      	ldr	r3, [pc, #400]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4961      	ldr	r1, [pc, #388]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028da:	4b5c      	ldr	r3, [pc, #368]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	4958      	ldr	r1, [pc, #352]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028fc:	4b53      	ldr	r3, [pc, #332]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290a:	4950      	ldr	r1, [pc, #320]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002926:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002934:	4b45      	ldr	r3, [pc, #276]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002942:	4942      	ldr	r1, [pc, #264]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002954:	4b3d      	ldr	r3, [pc, #244]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a3c      	ldr	r2, [pc, #240]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800295e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800296c:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002972:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	4934      	ldr	r1, [pc, #208]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298a:	d105      	bne.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800298c:	4b2f      	ldr	r3, [pc, #188]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a2e      	ldr	r2, [pc, #184]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002996:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a4:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b2:	4926      	ldr	r1, [pc, #152]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b21      	ldr	r3, [pc, #132]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a20      	ldr	r2, [pc, #128]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029dc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ea:	4918      	ldr	r1, [pc, #96]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b13      	ldr	r3, [pc, #76]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a14:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a22:	490a      	ldr	r1, [pc, #40]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a32:	d105      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a34:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a40:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000

08002a50 <__sflush_r>:
 8002a50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a58:	0716      	lsls	r6, r2, #28
 8002a5a:	4605      	mov	r5, r0
 8002a5c:	460c      	mov	r4, r1
 8002a5e:	d454      	bmi.n	8002b0a <__sflush_r+0xba>
 8002a60:	684b      	ldr	r3, [r1, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	dc02      	bgt.n	8002a6c <__sflush_r+0x1c>
 8002a66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	dd48      	ble.n	8002afe <__sflush_r+0xae>
 8002a6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a6e:	2e00      	cmp	r6, #0
 8002a70:	d045      	beq.n	8002afe <__sflush_r+0xae>
 8002a72:	2300      	movs	r3, #0
 8002a74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a78:	682f      	ldr	r7, [r5, #0]
 8002a7a:	6a21      	ldr	r1, [r4, #32]
 8002a7c:	602b      	str	r3, [r5, #0]
 8002a7e:	d030      	beq.n	8002ae2 <__sflush_r+0x92>
 8002a80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a82:	89a3      	ldrh	r3, [r4, #12]
 8002a84:	0759      	lsls	r1, r3, #29
 8002a86:	d505      	bpl.n	8002a94 <__sflush_r+0x44>
 8002a88:	6863      	ldr	r3, [r4, #4]
 8002a8a:	1ad2      	subs	r2, r2, r3
 8002a8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a8e:	b10b      	cbz	r3, 8002a94 <__sflush_r+0x44>
 8002a90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a92:	1ad2      	subs	r2, r2, r3
 8002a94:	2300      	movs	r3, #0
 8002a96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a98:	6a21      	ldr	r1, [r4, #32]
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	47b0      	blx	r6
 8002a9e:	1c43      	adds	r3, r0, #1
 8002aa0:	89a3      	ldrh	r3, [r4, #12]
 8002aa2:	d106      	bne.n	8002ab2 <__sflush_r+0x62>
 8002aa4:	6829      	ldr	r1, [r5, #0]
 8002aa6:	291d      	cmp	r1, #29
 8002aa8:	d82b      	bhi.n	8002b02 <__sflush_r+0xb2>
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <__sflush_r+0x104>)
 8002aac:	410a      	asrs	r2, r1
 8002aae:	07d6      	lsls	r6, r2, #31
 8002ab0:	d427      	bmi.n	8002b02 <__sflush_r+0xb2>
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	6062      	str	r2, [r4, #4]
 8002ab6:	04d9      	lsls	r1, r3, #19
 8002ab8:	6922      	ldr	r2, [r4, #16]
 8002aba:	6022      	str	r2, [r4, #0]
 8002abc:	d504      	bpl.n	8002ac8 <__sflush_r+0x78>
 8002abe:	1c42      	adds	r2, r0, #1
 8002ac0:	d101      	bne.n	8002ac6 <__sflush_r+0x76>
 8002ac2:	682b      	ldr	r3, [r5, #0]
 8002ac4:	b903      	cbnz	r3, 8002ac8 <__sflush_r+0x78>
 8002ac6:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002aca:	602f      	str	r7, [r5, #0]
 8002acc:	b1b9      	cbz	r1, 8002afe <__sflush_r+0xae>
 8002ace:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ad2:	4299      	cmp	r1, r3
 8002ad4:	d002      	beq.n	8002adc <__sflush_r+0x8c>
 8002ad6:	4628      	mov	r0, r5
 8002ad8:	f000 fb00 	bl	80030dc <_free_r>
 8002adc:	2300      	movs	r3, #0
 8002ade:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ae0:	e00d      	b.n	8002afe <__sflush_r+0xae>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	4628      	mov	r0, r5
 8002ae6:	47b0      	blx	r6
 8002ae8:	4602      	mov	r2, r0
 8002aea:	1c50      	adds	r0, r2, #1
 8002aec:	d1c9      	bne.n	8002a82 <__sflush_r+0x32>
 8002aee:	682b      	ldr	r3, [r5, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0c6      	beq.n	8002a82 <__sflush_r+0x32>
 8002af4:	2b1d      	cmp	r3, #29
 8002af6:	d001      	beq.n	8002afc <__sflush_r+0xac>
 8002af8:	2b16      	cmp	r3, #22
 8002afa:	d11e      	bne.n	8002b3a <__sflush_r+0xea>
 8002afc:	602f      	str	r7, [r5, #0]
 8002afe:	2000      	movs	r0, #0
 8002b00:	e022      	b.n	8002b48 <__sflush_r+0xf8>
 8002b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	e01b      	b.n	8002b42 <__sflush_r+0xf2>
 8002b0a:	690f      	ldr	r7, [r1, #16]
 8002b0c:	2f00      	cmp	r7, #0
 8002b0e:	d0f6      	beq.n	8002afe <__sflush_r+0xae>
 8002b10:	0793      	lsls	r3, r2, #30
 8002b12:	680e      	ldr	r6, [r1, #0]
 8002b14:	bf08      	it	eq
 8002b16:	694b      	ldreq	r3, [r1, #20]
 8002b18:	600f      	str	r7, [r1, #0]
 8002b1a:	bf18      	it	ne
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	eba6 0807 	sub.w	r8, r6, r7
 8002b22:	608b      	str	r3, [r1, #8]
 8002b24:	f1b8 0f00 	cmp.w	r8, #0
 8002b28:	dde9      	ble.n	8002afe <__sflush_r+0xae>
 8002b2a:	6a21      	ldr	r1, [r4, #32]
 8002b2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b2e:	4643      	mov	r3, r8
 8002b30:	463a      	mov	r2, r7
 8002b32:	4628      	mov	r0, r5
 8002b34:	47b0      	blx	r6
 8002b36:	2800      	cmp	r0, #0
 8002b38:	dc08      	bgt.n	8002b4c <__sflush_r+0xfc>
 8002b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b42:	81a3      	strh	r3, [r4, #12]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4c:	4407      	add	r7, r0
 8002b4e:	eba8 0800 	sub.w	r8, r8, r0
 8002b52:	e7e7      	b.n	8002b24 <__sflush_r+0xd4>
 8002b54:	dfbffffe 	.word	0xdfbffffe

08002b58 <_fflush_r>:
 8002b58:	b538      	push	{r3, r4, r5, lr}
 8002b5a:	690b      	ldr	r3, [r1, #16]
 8002b5c:	4605      	mov	r5, r0
 8002b5e:	460c      	mov	r4, r1
 8002b60:	b913      	cbnz	r3, 8002b68 <_fflush_r+0x10>
 8002b62:	2500      	movs	r5, #0
 8002b64:	4628      	mov	r0, r5
 8002b66:	bd38      	pop	{r3, r4, r5, pc}
 8002b68:	b118      	cbz	r0, 8002b72 <_fflush_r+0x1a>
 8002b6a:	6a03      	ldr	r3, [r0, #32]
 8002b6c:	b90b      	cbnz	r3, 8002b72 <_fflush_r+0x1a>
 8002b6e:	f000 f8bb 	bl	8002ce8 <__sinit>
 8002b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f3      	beq.n	8002b62 <_fflush_r+0xa>
 8002b7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b7c:	07d0      	lsls	r0, r2, #31
 8002b7e:	d404      	bmi.n	8002b8a <_fflush_r+0x32>
 8002b80:	0599      	lsls	r1, r3, #22
 8002b82:	d402      	bmi.n	8002b8a <_fflush_r+0x32>
 8002b84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b86:	f000 faa6 	bl	80030d6 <__retarget_lock_acquire_recursive>
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f7ff ff5f 	bl	8002a50 <__sflush_r>
 8002b92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b94:	07da      	lsls	r2, r3, #31
 8002b96:	4605      	mov	r5, r0
 8002b98:	d4e4      	bmi.n	8002b64 <_fflush_r+0xc>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	059b      	lsls	r3, r3, #22
 8002b9e:	d4e1      	bmi.n	8002b64 <_fflush_r+0xc>
 8002ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ba2:	f000 fa99 	bl	80030d8 <__retarget_lock_release_recursive>
 8002ba6:	e7dd      	b.n	8002b64 <_fflush_r+0xc>

08002ba8 <fflush>:
 8002ba8:	4601      	mov	r1, r0
 8002baa:	b920      	cbnz	r0, 8002bb6 <fflush+0xe>
 8002bac:	4a04      	ldr	r2, [pc, #16]	@ (8002bc0 <fflush+0x18>)
 8002bae:	4905      	ldr	r1, [pc, #20]	@ (8002bc4 <fflush+0x1c>)
 8002bb0:	4805      	ldr	r0, [pc, #20]	@ (8002bc8 <fflush+0x20>)
 8002bb2:	f000 b8b1 	b.w	8002d18 <_fwalk_sglue>
 8002bb6:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <fflush+0x24>)
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	f7ff bfcd 	b.w	8002b58 <_fflush_r>
 8002bbe:	bf00      	nop
 8002bc0:	2000000c 	.word	0x2000000c
 8002bc4:	08002b59 	.word	0x08002b59
 8002bc8:	2000001c 	.word	0x2000001c
 8002bcc:	20000018 	.word	0x20000018

08002bd0 <std>:
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	b510      	push	{r4, lr}
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002bde:	6083      	str	r3, [r0, #8]
 8002be0:	8181      	strh	r1, [r0, #12]
 8002be2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002be4:	81c2      	strh	r2, [r0, #14]
 8002be6:	6183      	str	r3, [r0, #24]
 8002be8:	4619      	mov	r1, r3
 8002bea:	2208      	movs	r2, #8
 8002bec:	305c      	adds	r0, #92	@ 0x5c
 8002bee:	f000 f9f9 	bl	8002fe4 <memset>
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <std+0x58>)
 8002bf4:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <std+0x5c>)
 8002bf8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <std+0x60>)
 8002bfc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <std+0x64>)
 8002c00:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <std+0x68>)
 8002c04:	6224      	str	r4, [r4, #32]
 8002c06:	429c      	cmp	r4, r3
 8002c08:	d006      	beq.n	8002c18 <std+0x48>
 8002c0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c0e:	4294      	cmp	r4, r2
 8002c10:	d002      	beq.n	8002c18 <std+0x48>
 8002c12:	33d0      	adds	r3, #208	@ 0xd0
 8002c14:	429c      	cmp	r4, r3
 8002c16:	d105      	bne.n	8002c24 <std+0x54>
 8002c18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c20:	f000 ba58 	b.w	80030d4 <__retarget_lock_init_recursive>
 8002c24:	bd10      	pop	{r4, pc}
 8002c26:	bf00      	nop
 8002c28:	08002e35 	.word	0x08002e35
 8002c2c:	08002e57 	.word	0x08002e57
 8002c30:	08002e8f 	.word	0x08002e8f
 8002c34:	08002eb3 	.word	0x08002eb3
 8002c38:	200000f0 	.word	0x200000f0

08002c3c <stdio_exit_handler>:
 8002c3c:	4a02      	ldr	r2, [pc, #8]	@ (8002c48 <stdio_exit_handler+0xc>)
 8002c3e:	4903      	ldr	r1, [pc, #12]	@ (8002c4c <stdio_exit_handler+0x10>)
 8002c40:	4803      	ldr	r0, [pc, #12]	@ (8002c50 <stdio_exit_handler+0x14>)
 8002c42:	f000 b869 	b.w	8002d18 <_fwalk_sglue>
 8002c46:	bf00      	nop
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	08002b59 	.word	0x08002b59
 8002c50:	2000001c 	.word	0x2000001c

08002c54 <cleanup_stdio>:
 8002c54:	6841      	ldr	r1, [r0, #4]
 8002c56:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <cleanup_stdio+0x34>)
 8002c58:	4299      	cmp	r1, r3
 8002c5a:	b510      	push	{r4, lr}
 8002c5c:	4604      	mov	r4, r0
 8002c5e:	d001      	beq.n	8002c64 <cleanup_stdio+0x10>
 8002c60:	f7ff ff7a 	bl	8002b58 <_fflush_r>
 8002c64:	68a1      	ldr	r1, [r4, #8]
 8002c66:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <cleanup_stdio+0x38>)
 8002c68:	4299      	cmp	r1, r3
 8002c6a:	d002      	beq.n	8002c72 <cleanup_stdio+0x1e>
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7ff ff73 	bl	8002b58 <_fflush_r>
 8002c72:	68e1      	ldr	r1, [r4, #12]
 8002c74:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <cleanup_stdio+0x3c>)
 8002c76:	4299      	cmp	r1, r3
 8002c78:	d004      	beq.n	8002c84 <cleanup_stdio+0x30>
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c80:	f7ff bf6a 	b.w	8002b58 <_fflush_r>
 8002c84:	bd10      	pop	{r4, pc}
 8002c86:	bf00      	nop
 8002c88:	200000f0 	.word	0x200000f0
 8002c8c:	20000158 	.word	0x20000158
 8002c90:	200001c0 	.word	0x200001c0

08002c94 <global_stdio_init.part.0>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc4 <global_stdio_init.part.0+0x30>)
 8002c98:	4c0b      	ldr	r4, [pc, #44]	@ (8002cc8 <global_stdio_init.part.0+0x34>)
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <global_stdio_init.part.0+0x38>)
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	f7ff ff94 	bl	8002bd0 <std>
 8002ca8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cac:	2201      	movs	r2, #1
 8002cae:	2109      	movs	r1, #9
 8002cb0:	f7ff ff8e 	bl	8002bd0 <std>
 8002cb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cb8:	2202      	movs	r2, #2
 8002cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cbe:	2112      	movs	r1, #18
 8002cc0:	f7ff bf86 	b.w	8002bd0 <std>
 8002cc4:	20000228 	.word	0x20000228
 8002cc8:	200000f0 	.word	0x200000f0
 8002ccc:	08002c3d 	.word	0x08002c3d

08002cd0 <__sfp_lock_acquire>:
 8002cd0:	4801      	ldr	r0, [pc, #4]	@ (8002cd8 <__sfp_lock_acquire+0x8>)
 8002cd2:	f000 ba00 	b.w	80030d6 <__retarget_lock_acquire_recursive>
 8002cd6:	bf00      	nop
 8002cd8:	20000231 	.word	0x20000231

08002cdc <__sfp_lock_release>:
 8002cdc:	4801      	ldr	r0, [pc, #4]	@ (8002ce4 <__sfp_lock_release+0x8>)
 8002cde:	f000 b9fb 	b.w	80030d8 <__retarget_lock_release_recursive>
 8002ce2:	bf00      	nop
 8002ce4:	20000231 	.word	0x20000231

08002ce8 <__sinit>:
 8002ce8:	b510      	push	{r4, lr}
 8002cea:	4604      	mov	r4, r0
 8002cec:	f7ff fff0 	bl	8002cd0 <__sfp_lock_acquire>
 8002cf0:	6a23      	ldr	r3, [r4, #32]
 8002cf2:	b11b      	cbz	r3, 8002cfc <__sinit+0x14>
 8002cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf8:	f7ff bff0 	b.w	8002cdc <__sfp_lock_release>
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <__sinit+0x28>)
 8002cfe:	6223      	str	r3, [r4, #32]
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__sinit+0x2c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f5      	bne.n	8002cf4 <__sinit+0xc>
 8002d08:	f7ff ffc4 	bl	8002c94 <global_stdio_init.part.0>
 8002d0c:	e7f2      	b.n	8002cf4 <__sinit+0xc>
 8002d0e:	bf00      	nop
 8002d10:	08002c55 	.word	0x08002c55
 8002d14:	20000228 	.word	0x20000228

08002d18 <_fwalk_sglue>:
 8002d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d1c:	4607      	mov	r7, r0
 8002d1e:	4688      	mov	r8, r1
 8002d20:	4614      	mov	r4, r2
 8002d22:	2600      	movs	r6, #0
 8002d24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d28:	f1b9 0901 	subs.w	r9, r9, #1
 8002d2c:	d505      	bpl.n	8002d3a <_fwalk_sglue+0x22>
 8002d2e:	6824      	ldr	r4, [r4, #0]
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	d1f7      	bne.n	8002d24 <_fwalk_sglue+0xc>
 8002d34:	4630      	mov	r0, r6
 8002d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d3a:	89ab      	ldrh	r3, [r5, #12]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d907      	bls.n	8002d50 <_fwalk_sglue+0x38>
 8002d40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d44:	3301      	adds	r3, #1
 8002d46:	d003      	beq.n	8002d50 <_fwalk_sglue+0x38>
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	47c0      	blx	r8
 8002d4e:	4306      	orrs	r6, r0
 8002d50:	3568      	adds	r5, #104	@ 0x68
 8002d52:	e7e9      	b.n	8002d28 <_fwalk_sglue+0x10>

08002d54 <iprintf>:
 8002d54:	b40f      	push	{r0, r1, r2, r3}
 8002d56:	b507      	push	{r0, r1, r2, lr}
 8002d58:	4906      	ldr	r1, [pc, #24]	@ (8002d74 <iprintf+0x20>)
 8002d5a:	ab04      	add	r3, sp, #16
 8002d5c:	6808      	ldr	r0, [r1, #0]
 8002d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d62:	6881      	ldr	r1, [r0, #8]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	f000 fadb 	bl	8003320 <_vfiprintf_r>
 8002d6a:	b003      	add	sp, #12
 8002d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d70:	b004      	add	sp, #16
 8002d72:	4770      	bx	lr
 8002d74:	20000018 	.word	0x20000018

08002d78 <_puts_r>:
 8002d78:	6a03      	ldr	r3, [r0, #32]
 8002d7a:	b570      	push	{r4, r5, r6, lr}
 8002d7c:	6884      	ldr	r4, [r0, #8]
 8002d7e:	4605      	mov	r5, r0
 8002d80:	460e      	mov	r6, r1
 8002d82:	b90b      	cbnz	r3, 8002d88 <_puts_r+0x10>
 8002d84:	f7ff ffb0 	bl	8002ce8 <__sinit>
 8002d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d8a:	07db      	lsls	r3, r3, #31
 8002d8c:	d405      	bmi.n	8002d9a <_puts_r+0x22>
 8002d8e:	89a3      	ldrh	r3, [r4, #12]
 8002d90:	0598      	lsls	r0, r3, #22
 8002d92:	d402      	bmi.n	8002d9a <_puts_r+0x22>
 8002d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d96:	f000 f99e 	bl	80030d6 <__retarget_lock_acquire_recursive>
 8002d9a:	89a3      	ldrh	r3, [r4, #12]
 8002d9c:	0719      	lsls	r1, r3, #28
 8002d9e:	d502      	bpl.n	8002da6 <_puts_r+0x2e>
 8002da0:	6923      	ldr	r3, [r4, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d135      	bne.n	8002e12 <_puts_r+0x9a>
 8002da6:	4621      	mov	r1, r4
 8002da8:	4628      	mov	r0, r5
 8002daa:	f000 f8c5 	bl	8002f38 <__swsetup_r>
 8002dae:	b380      	cbz	r0, 8002e12 <_puts_r+0x9a>
 8002db0:	f04f 35ff 	mov.w	r5, #4294967295
 8002db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002db6:	07da      	lsls	r2, r3, #31
 8002db8:	d405      	bmi.n	8002dc6 <_puts_r+0x4e>
 8002dba:	89a3      	ldrh	r3, [r4, #12]
 8002dbc:	059b      	lsls	r3, r3, #22
 8002dbe:	d402      	bmi.n	8002dc6 <_puts_r+0x4e>
 8002dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dc2:	f000 f989 	bl	80030d8 <__retarget_lock_release_recursive>
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	da04      	bge.n	8002dd8 <_puts_r+0x60>
 8002dce:	69a2      	ldr	r2, [r4, #24]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	dc17      	bgt.n	8002e04 <_puts_r+0x8c>
 8002dd4:	290a      	cmp	r1, #10
 8002dd6:	d015      	beq.n	8002e04 <_puts_r+0x8c>
 8002dd8:	6823      	ldr	r3, [r4, #0]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	6022      	str	r2, [r4, #0]
 8002dde:	7019      	strb	r1, [r3, #0]
 8002de0:	68a3      	ldr	r3, [r4, #8]
 8002de2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002de6:	3b01      	subs	r3, #1
 8002de8:	60a3      	str	r3, [r4, #8]
 8002dea:	2900      	cmp	r1, #0
 8002dec:	d1ed      	bne.n	8002dca <_puts_r+0x52>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	da11      	bge.n	8002e16 <_puts_r+0x9e>
 8002df2:	4622      	mov	r2, r4
 8002df4:	210a      	movs	r1, #10
 8002df6:	4628      	mov	r0, r5
 8002df8:	f000 f85f 	bl	8002eba <__swbuf_r>
 8002dfc:	3001      	adds	r0, #1
 8002dfe:	d0d7      	beq.n	8002db0 <_puts_r+0x38>
 8002e00:	250a      	movs	r5, #10
 8002e02:	e7d7      	b.n	8002db4 <_puts_r+0x3c>
 8002e04:	4622      	mov	r2, r4
 8002e06:	4628      	mov	r0, r5
 8002e08:	f000 f857 	bl	8002eba <__swbuf_r>
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	d1e7      	bne.n	8002de0 <_puts_r+0x68>
 8002e10:	e7ce      	b.n	8002db0 <_puts_r+0x38>
 8002e12:	3e01      	subs	r6, #1
 8002e14:	e7e4      	b.n	8002de0 <_puts_r+0x68>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	6022      	str	r2, [r4, #0]
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e7ee      	b.n	8002e00 <_puts_r+0x88>
	...

08002e24 <puts>:
 8002e24:	4b02      	ldr	r3, [pc, #8]	@ (8002e30 <puts+0xc>)
 8002e26:	4601      	mov	r1, r0
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	f7ff bfa5 	b.w	8002d78 <_puts_r>
 8002e2e:	bf00      	nop
 8002e30:	20000018 	.word	0x20000018

08002e34 <__sread>:
 8002e34:	b510      	push	{r4, lr}
 8002e36:	460c      	mov	r4, r1
 8002e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3c:	f000 f8fc 	bl	8003038 <_read_r>
 8002e40:	2800      	cmp	r0, #0
 8002e42:	bfab      	itete	ge
 8002e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e46:	89a3      	ldrhlt	r3, [r4, #12]
 8002e48:	181b      	addge	r3, r3, r0
 8002e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e4e:	bfac      	ite	ge
 8002e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e52:	81a3      	strhlt	r3, [r4, #12]
 8002e54:	bd10      	pop	{r4, pc}

08002e56 <__swrite>:
 8002e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e5a:	461f      	mov	r7, r3
 8002e5c:	898b      	ldrh	r3, [r1, #12]
 8002e5e:	05db      	lsls	r3, r3, #23
 8002e60:	4605      	mov	r5, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	4616      	mov	r6, r2
 8002e66:	d505      	bpl.n	8002e74 <__swrite+0x1e>
 8002e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f000 f8d0 	bl	8003014 <_lseek_r>
 8002e74:	89a3      	ldrh	r3, [r4, #12]
 8002e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e7e:	81a3      	strh	r3, [r4, #12]
 8002e80:	4632      	mov	r2, r6
 8002e82:	463b      	mov	r3, r7
 8002e84:	4628      	mov	r0, r5
 8002e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8a:	f000 b8e7 	b.w	800305c <_write_r>

08002e8e <__sseek>:
 8002e8e:	b510      	push	{r4, lr}
 8002e90:	460c      	mov	r4, r1
 8002e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e96:	f000 f8bd 	bl	8003014 <_lseek_r>
 8002e9a:	1c43      	adds	r3, r0, #1
 8002e9c:	89a3      	ldrh	r3, [r4, #12]
 8002e9e:	bf15      	itete	ne
 8002ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eaa:	81a3      	strheq	r3, [r4, #12]
 8002eac:	bf18      	it	ne
 8002eae:	81a3      	strhne	r3, [r4, #12]
 8002eb0:	bd10      	pop	{r4, pc}

08002eb2 <__sclose>:
 8002eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb6:	f000 b89d 	b.w	8002ff4 <_close_r>

08002eba <__swbuf_r>:
 8002eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebc:	460e      	mov	r6, r1
 8002ebe:	4614      	mov	r4, r2
 8002ec0:	4605      	mov	r5, r0
 8002ec2:	b118      	cbz	r0, 8002ecc <__swbuf_r+0x12>
 8002ec4:	6a03      	ldr	r3, [r0, #32]
 8002ec6:	b90b      	cbnz	r3, 8002ecc <__swbuf_r+0x12>
 8002ec8:	f7ff ff0e 	bl	8002ce8 <__sinit>
 8002ecc:	69a3      	ldr	r3, [r4, #24]
 8002ece:	60a3      	str	r3, [r4, #8]
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	071a      	lsls	r2, r3, #28
 8002ed4:	d501      	bpl.n	8002eda <__swbuf_r+0x20>
 8002ed6:	6923      	ldr	r3, [r4, #16]
 8002ed8:	b943      	cbnz	r3, 8002eec <__swbuf_r+0x32>
 8002eda:	4621      	mov	r1, r4
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 f82b 	bl	8002f38 <__swsetup_r>
 8002ee2:	b118      	cbz	r0, 8002eec <__swbuf_r+0x32>
 8002ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8002ee8:	4638      	mov	r0, r7
 8002eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eec:	6823      	ldr	r3, [r4, #0]
 8002eee:	6922      	ldr	r2, [r4, #16]
 8002ef0:	1a98      	subs	r0, r3, r2
 8002ef2:	6963      	ldr	r3, [r4, #20]
 8002ef4:	b2f6      	uxtb	r6, r6
 8002ef6:	4283      	cmp	r3, r0
 8002ef8:	4637      	mov	r7, r6
 8002efa:	dc05      	bgt.n	8002f08 <__swbuf_r+0x4e>
 8002efc:	4621      	mov	r1, r4
 8002efe:	4628      	mov	r0, r5
 8002f00:	f7ff fe2a 	bl	8002b58 <_fflush_r>
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d1ed      	bne.n	8002ee4 <__swbuf_r+0x2a>
 8002f08:	68a3      	ldr	r3, [r4, #8]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60a3      	str	r3, [r4, #8]
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	6022      	str	r2, [r4, #0]
 8002f14:	701e      	strb	r6, [r3, #0]
 8002f16:	6962      	ldr	r2, [r4, #20]
 8002f18:	1c43      	adds	r3, r0, #1
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d004      	beq.n	8002f28 <__swbuf_r+0x6e>
 8002f1e:	89a3      	ldrh	r3, [r4, #12]
 8002f20:	07db      	lsls	r3, r3, #31
 8002f22:	d5e1      	bpl.n	8002ee8 <__swbuf_r+0x2e>
 8002f24:	2e0a      	cmp	r6, #10
 8002f26:	d1df      	bne.n	8002ee8 <__swbuf_r+0x2e>
 8002f28:	4621      	mov	r1, r4
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	f7ff fe14 	bl	8002b58 <_fflush_r>
 8002f30:	2800      	cmp	r0, #0
 8002f32:	d0d9      	beq.n	8002ee8 <__swbuf_r+0x2e>
 8002f34:	e7d6      	b.n	8002ee4 <__swbuf_r+0x2a>
	...

08002f38 <__swsetup_r>:
 8002f38:	b538      	push	{r3, r4, r5, lr}
 8002f3a:	4b29      	ldr	r3, [pc, #164]	@ (8002fe0 <__swsetup_r+0xa8>)
 8002f3c:	4605      	mov	r5, r0
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	460c      	mov	r4, r1
 8002f42:	b118      	cbz	r0, 8002f4c <__swsetup_r+0x14>
 8002f44:	6a03      	ldr	r3, [r0, #32]
 8002f46:	b90b      	cbnz	r3, 8002f4c <__swsetup_r+0x14>
 8002f48:	f7ff fece 	bl	8002ce8 <__sinit>
 8002f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f50:	0719      	lsls	r1, r3, #28
 8002f52:	d422      	bmi.n	8002f9a <__swsetup_r+0x62>
 8002f54:	06da      	lsls	r2, r3, #27
 8002f56:	d407      	bmi.n	8002f68 <__swsetup_r+0x30>
 8002f58:	2209      	movs	r2, #9
 8002f5a:	602a      	str	r2, [r5, #0]
 8002f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f60:	81a3      	strh	r3, [r4, #12]
 8002f62:	f04f 30ff 	mov.w	r0, #4294967295
 8002f66:	e033      	b.n	8002fd0 <__swsetup_r+0x98>
 8002f68:	0758      	lsls	r0, r3, #29
 8002f6a:	d512      	bpl.n	8002f92 <__swsetup_r+0x5a>
 8002f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f6e:	b141      	cbz	r1, 8002f82 <__swsetup_r+0x4a>
 8002f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f74:	4299      	cmp	r1, r3
 8002f76:	d002      	beq.n	8002f7e <__swsetup_r+0x46>
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f8af 	bl	80030dc <_free_r>
 8002f7e:	2300      	movs	r3, #0
 8002f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f82:	89a3      	ldrh	r3, [r4, #12]
 8002f84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	6063      	str	r3, [r4, #4]
 8002f8e:	6923      	ldr	r3, [r4, #16]
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	81a3      	strh	r3, [r4, #12]
 8002f9a:	6923      	ldr	r3, [r4, #16]
 8002f9c:	b94b      	cbnz	r3, 8002fb2 <__swsetup_r+0x7a>
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa8:	d003      	beq.n	8002fb2 <__swsetup_r+0x7a>
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 fc83 	bl	80038b8 <__smakebuf_r>
 8002fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fb6:	f013 0201 	ands.w	r2, r3, #1
 8002fba:	d00a      	beq.n	8002fd2 <__swsetup_r+0x9a>
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	60a2      	str	r2, [r4, #8]
 8002fc0:	6962      	ldr	r2, [r4, #20]
 8002fc2:	4252      	negs	r2, r2
 8002fc4:	61a2      	str	r2, [r4, #24]
 8002fc6:	6922      	ldr	r2, [r4, #16]
 8002fc8:	b942      	cbnz	r2, 8002fdc <__swsetup_r+0xa4>
 8002fca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fce:	d1c5      	bne.n	8002f5c <__swsetup_r+0x24>
 8002fd0:	bd38      	pop	{r3, r4, r5, pc}
 8002fd2:	0799      	lsls	r1, r3, #30
 8002fd4:	bf58      	it	pl
 8002fd6:	6962      	ldrpl	r2, [r4, #20]
 8002fd8:	60a2      	str	r2, [r4, #8]
 8002fda:	e7f4      	b.n	8002fc6 <__swsetup_r+0x8e>
 8002fdc:	2000      	movs	r0, #0
 8002fde:	e7f7      	b.n	8002fd0 <__swsetup_r+0x98>
 8002fe0:	20000018 	.word	0x20000018

08002fe4 <memset>:
 8002fe4:	4402      	add	r2, r0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d100      	bne.n	8002fee <memset+0xa>
 8002fec:	4770      	bx	lr
 8002fee:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff2:	e7f9      	b.n	8002fe8 <memset+0x4>

08002ff4 <_close_r>:
 8002ff4:	b538      	push	{r3, r4, r5, lr}
 8002ff6:	4d06      	ldr	r5, [pc, #24]	@ (8003010 <_close_r+0x1c>)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	602b      	str	r3, [r5, #0]
 8003000:	f7fd fbad 	bl	800075e <_close>
 8003004:	1c43      	adds	r3, r0, #1
 8003006:	d102      	bne.n	800300e <_close_r+0x1a>
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	b103      	cbz	r3, 800300e <_close_r+0x1a>
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	bd38      	pop	{r3, r4, r5, pc}
 8003010:	2000022c 	.word	0x2000022c

08003014 <_lseek_r>:
 8003014:	b538      	push	{r3, r4, r5, lr}
 8003016:	4d07      	ldr	r5, [pc, #28]	@ (8003034 <_lseek_r+0x20>)
 8003018:	4604      	mov	r4, r0
 800301a:	4608      	mov	r0, r1
 800301c:	4611      	mov	r1, r2
 800301e:	2200      	movs	r2, #0
 8003020:	602a      	str	r2, [r5, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	f7fd fbc2 	bl	80007ac <_lseek>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d102      	bne.n	8003032 <_lseek_r+0x1e>
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	b103      	cbz	r3, 8003032 <_lseek_r+0x1e>
 8003030:	6023      	str	r3, [r4, #0]
 8003032:	bd38      	pop	{r3, r4, r5, pc}
 8003034:	2000022c 	.word	0x2000022c

08003038 <_read_r>:
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4d07      	ldr	r5, [pc, #28]	@ (8003058 <_read_r+0x20>)
 800303c:	4604      	mov	r4, r0
 800303e:	4608      	mov	r0, r1
 8003040:	4611      	mov	r1, r2
 8003042:	2200      	movs	r2, #0
 8003044:	602a      	str	r2, [r5, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	f7fd fb50 	bl	80006ec <_read>
 800304c:	1c43      	adds	r3, r0, #1
 800304e:	d102      	bne.n	8003056 <_read_r+0x1e>
 8003050:	682b      	ldr	r3, [r5, #0]
 8003052:	b103      	cbz	r3, 8003056 <_read_r+0x1e>
 8003054:	6023      	str	r3, [r4, #0]
 8003056:	bd38      	pop	{r3, r4, r5, pc}
 8003058:	2000022c 	.word	0x2000022c

0800305c <_write_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4d07      	ldr	r5, [pc, #28]	@ (800307c <_write_r+0x20>)
 8003060:	4604      	mov	r4, r0
 8003062:	4608      	mov	r0, r1
 8003064:	4611      	mov	r1, r2
 8003066:	2200      	movs	r2, #0
 8003068:	602a      	str	r2, [r5, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f7fd fb5b 	bl	8000726 <_write>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_write_r+0x1e>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	b103      	cbz	r3, 800307a <_write_r+0x1e>
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	2000022c 	.word	0x2000022c

08003080 <__errno>:
 8003080:	4b01      	ldr	r3, [pc, #4]	@ (8003088 <__errno+0x8>)
 8003082:	6818      	ldr	r0, [r3, #0]
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000018 	.word	0x20000018

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	4d0d      	ldr	r5, [pc, #52]	@ (80030c4 <__libc_init_array+0x38>)
 8003090:	4c0d      	ldr	r4, [pc, #52]	@ (80030c8 <__libc_init_array+0x3c>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	2600      	movs	r6, #0
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	4d0b      	ldr	r5, [pc, #44]	@ (80030cc <__libc_init_array+0x40>)
 800309e:	4c0c      	ldr	r4, [pc, #48]	@ (80030d0 <__libc_init_array+0x44>)
 80030a0:	f000 fc78 	bl	8003994 <_init>
 80030a4:	1b64      	subs	r4, r4, r5
 80030a6:	10a4      	asrs	r4, r4, #2
 80030a8:	2600      	movs	r6, #0
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003a5c 	.word	0x08003a5c
 80030c8:	08003a5c 	.word	0x08003a5c
 80030cc:	08003a5c 	.word	0x08003a5c
 80030d0:	08003a60 	.word	0x08003a60

080030d4 <__retarget_lock_init_recursive>:
 80030d4:	4770      	bx	lr

080030d6 <__retarget_lock_acquire_recursive>:
 80030d6:	4770      	bx	lr

080030d8 <__retarget_lock_release_recursive>:
 80030d8:	4770      	bx	lr
	...

080030dc <_free_r>:
 80030dc:	b538      	push	{r3, r4, r5, lr}
 80030de:	4605      	mov	r5, r0
 80030e0:	2900      	cmp	r1, #0
 80030e2:	d041      	beq.n	8003168 <_free_r+0x8c>
 80030e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030e8:	1f0c      	subs	r4, r1, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	bfb8      	it	lt
 80030ee:	18e4      	addlt	r4, r4, r3
 80030f0:	f000 f8e0 	bl	80032b4 <__malloc_lock>
 80030f4:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <_free_r+0x90>)
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	b933      	cbnz	r3, 8003108 <_free_r+0x2c>
 80030fa:	6063      	str	r3, [r4, #4]
 80030fc:	6014      	str	r4, [r2, #0]
 80030fe:	4628      	mov	r0, r5
 8003100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003104:	f000 b8dc 	b.w	80032c0 <__malloc_unlock>
 8003108:	42a3      	cmp	r3, r4
 800310a:	d908      	bls.n	800311e <_free_r+0x42>
 800310c:	6820      	ldr	r0, [r4, #0]
 800310e:	1821      	adds	r1, r4, r0
 8003110:	428b      	cmp	r3, r1
 8003112:	bf01      	itttt	eq
 8003114:	6819      	ldreq	r1, [r3, #0]
 8003116:	685b      	ldreq	r3, [r3, #4]
 8003118:	1809      	addeq	r1, r1, r0
 800311a:	6021      	streq	r1, [r4, #0]
 800311c:	e7ed      	b.n	80030fa <_free_r+0x1e>
 800311e:	461a      	mov	r2, r3
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	b10b      	cbz	r3, 8003128 <_free_r+0x4c>
 8003124:	42a3      	cmp	r3, r4
 8003126:	d9fa      	bls.n	800311e <_free_r+0x42>
 8003128:	6811      	ldr	r1, [r2, #0]
 800312a:	1850      	adds	r0, r2, r1
 800312c:	42a0      	cmp	r0, r4
 800312e:	d10b      	bne.n	8003148 <_free_r+0x6c>
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	4401      	add	r1, r0
 8003134:	1850      	adds	r0, r2, r1
 8003136:	4283      	cmp	r3, r0
 8003138:	6011      	str	r1, [r2, #0]
 800313a:	d1e0      	bne.n	80030fe <_free_r+0x22>
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	6053      	str	r3, [r2, #4]
 8003142:	4408      	add	r0, r1
 8003144:	6010      	str	r0, [r2, #0]
 8003146:	e7da      	b.n	80030fe <_free_r+0x22>
 8003148:	d902      	bls.n	8003150 <_free_r+0x74>
 800314a:	230c      	movs	r3, #12
 800314c:	602b      	str	r3, [r5, #0]
 800314e:	e7d6      	b.n	80030fe <_free_r+0x22>
 8003150:	6820      	ldr	r0, [r4, #0]
 8003152:	1821      	adds	r1, r4, r0
 8003154:	428b      	cmp	r3, r1
 8003156:	bf04      	itt	eq
 8003158:	6819      	ldreq	r1, [r3, #0]
 800315a:	685b      	ldreq	r3, [r3, #4]
 800315c:	6063      	str	r3, [r4, #4]
 800315e:	bf04      	itt	eq
 8003160:	1809      	addeq	r1, r1, r0
 8003162:	6021      	streq	r1, [r4, #0]
 8003164:	6054      	str	r4, [r2, #4]
 8003166:	e7ca      	b.n	80030fe <_free_r+0x22>
 8003168:	bd38      	pop	{r3, r4, r5, pc}
 800316a:	bf00      	nop
 800316c:	20000238 	.word	0x20000238

08003170 <sbrk_aligned>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	4e0f      	ldr	r6, [pc, #60]	@ (80031b0 <sbrk_aligned+0x40>)
 8003174:	460c      	mov	r4, r1
 8003176:	6831      	ldr	r1, [r6, #0]
 8003178:	4605      	mov	r5, r0
 800317a:	b911      	cbnz	r1, 8003182 <sbrk_aligned+0x12>
 800317c:	f000 fbfa 	bl	8003974 <_sbrk_r>
 8003180:	6030      	str	r0, [r6, #0]
 8003182:	4621      	mov	r1, r4
 8003184:	4628      	mov	r0, r5
 8003186:	f000 fbf5 	bl	8003974 <_sbrk_r>
 800318a:	1c43      	adds	r3, r0, #1
 800318c:	d103      	bne.n	8003196 <sbrk_aligned+0x26>
 800318e:	f04f 34ff 	mov.w	r4, #4294967295
 8003192:	4620      	mov	r0, r4
 8003194:	bd70      	pop	{r4, r5, r6, pc}
 8003196:	1cc4      	adds	r4, r0, #3
 8003198:	f024 0403 	bic.w	r4, r4, #3
 800319c:	42a0      	cmp	r0, r4
 800319e:	d0f8      	beq.n	8003192 <sbrk_aligned+0x22>
 80031a0:	1a21      	subs	r1, r4, r0
 80031a2:	4628      	mov	r0, r5
 80031a4:	f000 fbe6 	bl	8003974 <_sbrk_r>
 80031a8:	3001      	adds	r0, #1
 80031aa:	d1f2      	bne.n	8003192 <sbrk_aligned+0x22>
 80031ac:	e7ef      	b.n	800318e <sbrk_aligned+0x1e>
 80031ae:	bf00      	nop
 80031b0:	20000234 	.word	0x20000234

080031b4 <_malloc_r>:
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	1ccd      	adds	r5, r1, #3
 80031ba:	f025 0503 	bic.w	r5, r5, #3
 80031be:	3508      	adds	r5, #8
 80031c0:	2d0c      	cmp	r5, #12
 80031c2:	bf38      	it	cc
 80031c4:	250c      	movcc	r5, #12
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	4606      	mov	r6, r0
 80031ca:	db01      	blt.n	80031d0 <_malloc_r+0x1c>
 80031cc:	42a9      	cmp	r1, r5
 80031ce:	d904      	bls.n	80031da <_malloc_r+0x26>
 80031d0:	230c      	movs	r3, #12
 80031d2:	6033      	str	r3, [r6, #0]
 80031d4:	2000      	movs	r0, #0
 80031d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032b0 <_malloc_r+0xfc>
 80031de:	f000 f869 	bl	80032b4 <__malloc_lock>
 80031e2:	f8d8 3000 	ldr.w	r3, [r8]
 80031e6:	461c      	mov	r4, r3
 80031e8:	bb44      	cbnz	r4, 800323c <_malloc_r+0x88>
 80031ea:	4629      	mov	r1, r5
 80031ec:	4630      	mov	r0, r6
 80031ee:	f7ff ffbf 	bl	8003170 <sbrk_aligned>
 80031f2:	1c43      	adds	r3, r0, #1
 80031f4:	4604      	mov	r4, r0
 80031f6:	d158      	bne.n	80032aa <_malloc_r+0xf6>
 80031f8:	f8d8 4000 	ldr.w	r4, [r8]
 80031fc:	4627      	mov	r7, r4
 80031fe:	2f00      	cmp	r7, #0
 8003200:	d143      	bne.n	800328a <_malloc_r+0xd6>
 8003202:	2c00      	cmp	r4, #0
 8003204:	d04b      	beq.n	800329e <_malloc_r+0xea>
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	4639      	mov	r1, r7
 800320a:	4630      	mov	r0, r6
 800320c:	eb04 0903 	add.w	r9, r4, r3
 8003210:	f000 fbb0 	bl	8003974 <_sbrk_r>
 8003214:	4581      	cmp	r9, r0
 8003216:	d142      	bne.n	800329e <_malloc_r+0xea>
 8003218:	6821      	ldr	r1, [r4, #0]
 800321a:	1a6d      	subs	r5, r5, r1
 800321c:	4629      	mov	r1, r5
 800321e:	4630      	mov	r0, r6
 8003220:	f7ff ffa6 	bl	8003170 <sbrk_aligned>
 8003224:	3001      	adds	r0, #1
 8003226:	d03a      	beq.n	800329e <_malloc_r+0xea>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	442b      	add	r3, r5
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	f8d8 3000 	ldr.w	r3, [r8]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	bb62      	cbnz	r2, 8003290 <_malloc_r+0xdc>
 8003236:	f8c8 7000 	str.w	r7, [r8]
 800323a:	e00f      	b.n	800325c <_malloc_r+0xa8>
 800323c:	6822      	ldr	r2, [r4, #0]
 800323e:	1b52      	subs	r2, r2, r5
 8003240:	d420      	bmi.n	8003284 <_malloc_r+0xd0>
 8003242:	2a0b      	cmp	r2, #11
 8003244:	d917      	bls.n	8003276 <_malloc_r+0xc2>
 8003246:	1961      	adds	r1, r4, r5
 8003248:	42a3      	cmp	r3, r4
 800324a:	6025      	str	r5, [r4, #0]
 800324c:	bf18      	it	ne
 800324e:	6059      	strne	r1, [r3, #4]
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	bf08      	it	eq
 8003254:	f8c8 1000 	streq.w	r1, [r8]
 8003258:	5162      	str	r2, [r4, r5]
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	4630      	mov	r0, r6
 800325e:	f000 f82f 	bl	80032c0 <__malloc_unlock>
 8003262:	f104 000b 	add.w	r0, r4, #11
 8003266:	1d23      	adds	r3, r4, #4
 8003268:	f020 0007 	bic.w	r0, r0, #7
 800326c:	1ac2      	subs	r2, r0, r3
 800326e:	bf1c      	itt	ne
 8003270:	1a1b      	subne	r3, r3, r0
 8003272:	50a3      	strne	r3, [r4, r2]
 8003274:	e7af      	b.n	80031d6 <_malloc_r+0x22>
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	42a3      	cmp	r3, r4
 800327a:	bf0c      	ite	eq
 800327c:	f8c8 2000 	streq.w	r2, [r8]
 8003280:	605a      	strne	r2, [r3, #4]
 8003282:	e7eb      	b.n	800325c <_malloc_r+0xa8>
 8003284:	4623      	mov	r3, r4
 8003286:	6864      	ldr	r4, [r4, #4]
 8003288:	e7ae      	b.n	80031e8 <_malloc_r+0x34>
 800328a:	463c      	mov	r4, r7
 800328c:	687f      	ldr	r7, [r7, #4]
 800328e:	e7b6      	b.n	80031fe <_malloc_r+0x4a>
 8003290:	461a      	mov	r2, r3
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	42a3      	cmp	r3, r4
 8003296:	d1fb      	bne.n	8003290 <_malloc_r+0xdc>
 8003298:	2300      	movs	r3, #0
 800329a:	6053      	str	r3, [r2, #4]
 800329c:	e7de      	b.n	800325c <_malloc_r+0xa8>
 800329e:	230c      	movs	r3, #12
 80032a0:	6033      	str	r3, [r6, #0]
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f80c 	bl	80032c0 <__malloc_unlock>
 80032a8:	e794      	b.n	80031d4 <_malloc_r+0x20>
 80032aa:	6005      	str	r5, [r0, #0]
 80032ac:	e7d6      	b.n	800325c <_malloc_r+0xa8>
 80032ae:	bf00      	nop
 80032b0:	20000238 	.word	0x20000238

080032b4 <__malloc_lock>:
 80032b4:	4801      	ldr	r0, [pc, #4]	@ (80032bc <__malloc_lock+0x8>)
 80032b6:	f7ff bf0e 	b.w	80030d6 <__retarget_lock_acquire_recursive>
 80032ba:	bf00      	nop
 80032bc:	20000230 	.word	0x20000230

080032c0 <__malloc_unlock>:
 80032c0:	4801      	ldr	r0, [pc, #4]	@ (80032c8 <__malloc_unlock+0x8>)
 80032c2:	f7ff bf09 	b.w	80030d8 <__retarget_lock_release_recursive>
 80032c6:	bf00      	nop
 80032c8:	20000230 	.word	0x20000230

080032cc <__sfputc_r>:
 80032cc:	6893      	ldr	r3, [r2, #8]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	b410      	push	{r4}
 80032d4:	6093      	str	r3, [r2, #8]
 80032d6:	da08      	bge.n	80032ea <__sfputc_r+0x1e>
 80032d8:	6994      	ldr	r4, [r2, #24]
 80032da:	42a3      	cmp	r3, r4
 80032dc:	db01      	blt.n	80032e2 <__sfputc_r+0x16>
 80032de:	290a      	cmp	r1, #10
 80032e0:	d103      	bne.n	80032ea <__sfputc_r+0x1e>
 80032e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e6:	f7ff bde8 	b.w	8002eba <__swbuf_r>
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	1c58      	adds	r0, r3, #1
 80032ee:	6010      	str	r0, [r2, #0]
 80032f0:	7019      	strb	r1, [r3, #0]
 80032f2:	4608      	mov	r0, r1
 80032f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <__sfputs_r>:
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	4606      	mov	r6, r0
 80032fe:	460f      	mov	r7, r1
 8003300:	4614      	mov	r4, r2
 8003302:	18d5      	adds	r5, r2, r3
 8003304:	42ac      	cmp	r4, r5
 8003306:	d101      	bne.n	800330c <__sfputs_r+0x12>
 8003308:	2000      	movs	r0, #0
 800330a:	e007      	b.n	800331c <__sfputs_r+0x22>
 800330c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003310:	463a      	mov	r2, r7
 8003312:	4630      	mov	r0, r6
 8003314:	f7ff ffda 	bl	80032cc <__sfputc_r>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d1f3      	bne.n	8003304 <__sfputs_r+0xa>
 800331c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003320 <_vfiprintf_r>:
 8003320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003324:	460d      	mov	r5, r1
 8003326:	b09d      	sub	sp, #116	@ 0x74
 8003328:	4614      	mov	r4, r2
 800332a:	4698      	mov	r8, r3
 800332c:	4606      	mov	r6, r0
 800332e:	b118      	cbz	r0, 8003338 <_vfiprintf_r+0x18>
 8003330:	6a03      	ldr	r3, [r0, #32]
 8003332:	b90b      	cbnz	r3, 8003338 <_vfiprintf_r+0x18>
 8003334:	f7ff fcd8 	bl	8002ce8 <__sinit>
 8003338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800333a:	07d9      	lsls	r1, r3, #31
 800333c:	d405      	bmi.n	800334a <_vfiprintf_r+0x2a>
 800333e:	89ab      	ldrh	r3, [r5, #12]
 8003340:	059a      	lsls	r2, r3, #22
 8003342:	d402      	bmi.n	800334a <_vfiprintf_r+0x2a>
 8003344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003346:	f7ff fec6 	bl	80030d6 <__retarget_lock_acquire_recursive>
 800334a:	89ab      	ldrh	r3, [r5, #12]
 800334c:	071b      	lsls	r3, r3, #28
 800334e:	d501      	bpl.n	8003354 <_vfiprintf_r+0x34>
 8003350:	692b      	ldr	r3, [r5, #16]
 8003352:	b99b      	cbnz	r3, 800337c <_vfiprintf_r+0x5c>
 8003354:	4629      	mov	r1, r5
 8003356:	4630      	mov	r0, r6
 8003358:	f7ff fdee 	bl	8002f38 <__swsetup_r>
 800335c:	b170      	cbz	r0, 800337c <_vfiprintf_r+0x5c>
 800335e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003360:	07dc      	lsls	r4, r3, #31
 8003362:	d504      	bpl.n	800336e <_vfiprintf_r+0x4e>
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	b01d      	add	sp, #116	@ 0x74
 800336a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800336e:	89ab      	ldrh	r3, [r5, #12]
 8003370:	0598      	lsls	r0, r3, #22
 8003372:	d4f7      	bmi.n	8003364 <_vfiprintf_r+0x44>
 8003374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003376:	f7ff feaf 	bl	80030d8 <__retarget_lock_release_recursive>
 800337a:	e7f3      	b.n	8003364 <_vfiprintf_r+0x44>
 800337c:	2300      	movs	r3, #0
 800337e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003380:	2320      	movs	r3, #32
 8003382:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003386:	f8cd 800c 	str.w	r8, [sp, #12]
 800338a:	2330      	movs	r3, #48	@ 0x30
 800338c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800353c <_vfiprintf_r+0x21c>
 8003390:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003394:	f04f 0901 	mov.w	r9, #1
 8003398:	4623      	mov	r3, r4
 800339a:	469a      	mov	sl, r3
 800339c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a0:	b10a      	cbz	r2, 80033a6 <_vfiprintf_r+0x86>
 80033a2:	2a25      	cmp	r2, #37	@ 0x25
 80033a4:	d1f9      	bne.n	800339a <_vfiprintf_r+0x7a>
 80033a6:	ebba 0b04 	subs.w	fp, sl, r4
 80033aa:	d00b      	beq.n	80033c4 <_vfiprintf_r+0xa4>
 80033ac:	465b      	mov	r3, fp
 80033ae:	4622      	mov	r2, r4
 80033b0:	4629      	mov	r1, r5
 80033b2:	4630      	mov	r0, r6
 80033b4:	f7ff ffa1 	bl	80032fa <__sfputs_r>
 80033b8:	3001      	adds	r0, #1
 80033ba:	f000 80a7 	beq.w	800350c <_vfiprintf_r+0x1ec>
 80033be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033c0:	445a      	add	r2, fp
 80033c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80033c4:	f89a 3000 	ldrb.w	r3, [sl]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 809f 	beq.w	800350c <_vfiprintf_r+0x1ec>
 80033ce:	2300      	movs	r3, #0
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033d8:	f10a 0a01 	add.w	sl, sl, #1
 80033dc:	9304      	str	r3, [sp, #16]
 80033de:	9307      	str	r3, [sp, #28]
 80033e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80033e6:	4654      	mov	r4, sl
 80033e8:	2205      	movs	r2, #5
 80033ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ee:	4853      	ldr	r0, [pc, #332]	@ (800353c <_vfiprintf_r+0x21c>)
 80033f0:	f7fc ff16 	bl	8000220 <memchr>
 80033f4:	9a04      	ldr	r2, [sp, #16]
 80033f6:	b9d8      	cbnz	r0, 8003430 <_vfiprintf_r+0x110>
 80033f8:	06d1      	lsls	r1, r2, #27
 80033fa:	bf44      	itt	mi
 80033fc:	2320      	movmi	r3, #32
 80033fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003402:	0713      	lsls	r3, r2, #28
 8003404:	bf44      	itt	mi
 8003406:	232b      	movmi	r3, #43	@ 0x2b
 8003408:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800340c:	f89a 3000 	ldrb.w	r3, [sl]
 8003410:	2b2a      	cmp	r3, #42	@ 0x2a
 8003412:	d015      	beq.n	8003440 <_vfiprintf_r+0x120>
 8003414:	9a07      	ldr	r2, [sp, #28]
 8003416:	4654      	mov	r4, sl
 8003418:	2000      	movs	r0, #0
 800341a:	f04f 0c0a 	mov.w	ip, #10
 800341e:	4621      	mov	r1, r4
 8003420:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003424:	3b30      	subs	r3, #48	@ 0x30
 8003426:	2b09      	cmp	r3, #9
 8003428:	d94b      	bls.n	80034c2 <_vfiprintf_r+0x1a2>
 800342a:	b1b0      	cbz	r0, 800345a <_vfiprintf_r+0x13a>
 800342c:	9207      	str	r2, [sp, #28]
 800342e:	e014      	b.n	800345a <_vfiprintf_r+0x13a>
 8003430:	eba0 0308 	sub.w	r3, r0, r8
 8003434:	fa09 f303 	lsl.w	r3, r9, r3
 8003438:	4313      	orrs	r3, r2
 800343a:	9304      	str	r3, [sp, #16]
 800343c:	46a2      	mov	sl, r4
 800343e:	e7d2      	b.n	80033e6 <_vfiprintf_r+0xc6>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	1d19      	adds	r1, r3, #4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	9103      	str	r1, [sp, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	bfbb      	ittet	lt
 800344c:	425b      	neglt	r3, r3
 800344e:	f042 0202 	orrlt.w	r2, r2, #2
 8003452:	9307      	strge	r3, [sp, #28]
 8003454:	9307      	strlt	r3, [sp, #28]
 8003456:	bfb8      	it	lt
 8003458:	9204      	strlt	r2, [sp, #16]
 800345a:	7823      	ldrb	r3, [r4, #0]
 800345c:	2b2e      	cmp	r3, #46	@ 0x2e
 800345e:	d10a      	bne.n	8003476 <_vfiprintf_r+0x156>
 8003460:	7863      	ldrb	r3, [r4, #1]
 8003462:	2b2a      	cmp	r3, #42	@ 0x2a
 8003464:	d132      	bne.n	80034cc <_vfiprintf_r+0x1ac>
 8003466:	9b03      	ldr	r3, [sp, #12]
 8003468:	1d1a      	adds	r2, r3, #4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	9203      	str	r2, [sp, #12]
 800346e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003472:	3402      	adds	r4, #2
 8003474:	9305      	str	r3, [sp, #20]
 8003476:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800354c <_vfiprintf_r+0x22c>
 800347a:	7821      	ldrb	r1, [r4, #0]
 800347c:	2203      	movs	r2, #3
 800347e:	4650      	mov	r0, sl
 8003480:	f7fc fece 	bl	8000220 <memchr>
 8003484:	b138      	cbz	r0, 8003496 <_vfiprintf_r+0x176>
 8003486:	9b04      	ldr	r3, [sp, #16]
 8003488:	eba0 000a 	sub.w	r0, r0, sl
 800348c:	2240      	movs	r2, #64	@ 0x40
 800348e:	4082      	lsls	r2, r0
 8003490:	4313      	orrs	r3, r2
 8003492:	3401      	adds	r4, #1
 8003494:	9304      	str	r3, [sp, #16]
 8003496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349a:	4829      	ldr	r0, [pc, #164]	@ (8003540 <_vfiprintf_r+0x220>)
 800349c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034a0:	2206      	movs	r2, #6
 80034a2:	f7fc febd 	bl	8000220 <memchr>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d03f      	beq.n	800352a <_vfiprintf_r+0x20a>
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <_vfiprintf_r+0x224>)
 80034ac:	bb1b      	cbnz	r3, 80034f6 <_vfiprintf_r+0x1d6>
 80034ae:	9b03      	ldr	r3, [sp, #12]
 80034b0:	3307      	adds	r3, #7
 80034b2:	f023 0307 	bic.w	r3, r3, #7
 80034b6:	3308      	adds	r3, #8
 80034b8:	9303      	str	r3, [sp, #12]
 80034ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034bc:	443b      	add	r3, r7
 80034be:	9309      	str	r3, [sp, #36]	@ 0x24
 80034c0:	e76a      	b.n	8003398 <_vfiprintf_r+0x78>
 80034c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80034c6:	460c      	mov	r4, r1
 80034c8:	2001      	movs	r0, #1
 80034ca:	e7a8      	b.n	800341e <_vfiprintf_r+0xfe>
 80034cc:	2300      	movs	r3, #0
 80034ce:	3401      	adds	r4, #1
 80034d0:	9305      	str	r3, [sp, #20]
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 0c0a 	mov.w	ip, #10
 80034d8:	4620      	mov	r0, r4
 80034da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034de:	3a30      	subs	r2, #48	@ 0x30
 80034e0:	2a09      	cmp	r2, #9
 80034e2:	d903      	bls.n	80034ec <_vfiprintf_r+0x1cc>
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0c6      	beq.n	8003476 <_vfiprintf_r+0x156>
 80034e8:	9105      	str	r1, [sp, #20]
 80034ea:	e7c4      	b.n	8003476 <_vfiprintf_r+0x156>
 80034ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f0:	4604      	mov	r4, r0
 80034f2:	2301      	movs	r3, #1
 80034f4:	e7f0      	b.n	80034d8 <_vfiprintf_r+0x1b8>
 80034f6:	ab03      	add	r3, sp, #12
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	462a      	mov	r2, r5
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <_vfiprintf_r+0x228>)
 80034fe:	a904      	add	r1, sp, #16
 8003500:	4630      	mov	r0, r6
 8003502:	f3af 8000 	nop.w
 8003506:	4607      	mov	r7, r0
 8003508:	1c78      	adds	r0, r7, #1
 800350a:	d1d6      	bne.n	80034ba <_vfiprintf_r+0x19a>
 800350c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d405      	bmi.n	800351e <_vfiprintf_r+0x1fe>
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	059a      	lsls	r2, r3, #22
 8003516:	d402      	bmi.n	800351e <_vfiprintf_r+0x1fe>
 8003518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800351a:	f7ff fddd 	bl	80030d8 <__retarget_lock_release_recursive>
 800351e:	89ab      	ldrh	r3, [r5, #12]
 8003520:	065b      	lsls	r3, r3, #25
 8003522:	f53f af1f 	bmi.w	8003364 <_vfiprintf_r+0x44>
 8003526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003528:	e71e      	b.n	8003368 <_vfiprintf_r+0x48>
 800352a:	ab03      	add	r3, sp, #12
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	462a      	mov	r2, r5
 8003530:	4b05      	ldr	r3, [pc, #20]	@ (8003548 <_vfiprintf_r+0x228>)
 8003532:	a904      	add	r1, sp, #16
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f879 	bl	800362c <_printf_i>
 800353a:	e7e4      	b.n	8003506 <_vfiprintf_r+0x1e6>
 800353c:	08003a20 	.word	0x08003a20
 8003540:	08003a2a 	.word	0x08003a2a
 8003544:	00000000 	.word	0x00000000
 8003548:	080032fb 	.word	0x080032fb
 800354c:	08003a26 	.word	0x08003a26

08003550 <_printf_common>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	4616      	mov	r6, r2
 8003556:	4698      	mov	r8, r3
 8003558:	688a      	ldr	r2, [r1, #8]
 800355a:	690b      	ldr	r3, [r1, #16]
 800355c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003560:	4293      	cmp	r3, r2
 8003562:	bfb8      	it	lt
 8003564:	4613      	movlt	r3, r2
 8003566:	6033      	str	r3, [r6, #0]
 8003568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800356c:	4607      	mov	r7, r0
 800356e:	460c      	mov	r4, r1
 8003570:	b10a      	cbz	r2, 8003576 <_printf_common+0x26>
 8003572:	3301      	adds	r3, #1
 8003574:	6033      	str	r3, [r6, #0]
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	0699      	lsls	r1, r3, #26
 800357a:	bf42      	ittt	mi
 800357c:	6833      	ldrmi	r3, [r6, #0]
 800357e:	3302      	addmi	r3, #2
 8003580:	6033      	strmi	r3, [r6, #0]
 8003582:	6825      	ldr	r5, [r4, #0]
 8003584:	f015 0506 	ands.w	r5, r5, #6
 8003588:	d106      	bne.n	8003598 <_printf_common+0x48>
 800358a:	f104 0a19 	add.w	sl, r4, #25
 800358e:	68e3      	ldr	r3, [r4, #12]
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	42ab      	cmp	r3, r5
 8003596:	dc26      	bgt.n	80035e6 <_printf_common+0x96>
 8003598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800359c:	6822      	ldr	r2, [r4, #0]
 800359e:	3b00      	subs	r3, #0
 80035a0:	bf18      	it	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	0692      	lsls	r2, r2, #26
 80035a6:	d42b      	bmi.n	8003600 <_printf_common+0xb0>
 80035a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035ac:	4641      	mov	r1, r8
 80035ae:	4638      	mov	r0, r7
 80035b0:	47c8      	blx	r9
 80035b2:	3001      	adds	r0, #1
 80035b4:	d01e      	beq.n	80035f4 <_printf_common+0xa4>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	6922      	ldr	r2, [r4, #16]
 80035ba:	f003 0306 	and.w	r3, r3, #6
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf02      	ittt	eq
 80035c2:	68e5      	ldreq	r5, [r4, #12]
 80035c4:	6833      	ldreq	r3, [r6, #0]
 80035c6:	1aed      	subeq	r5, r5, r3
 80035c8:	68a3      	ldr	r3, [r4, #8]
 80035ca:	bf0c      	ite	eq
 80035cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d0:	2500      	movne	r5, #0
 80035d2:	4293      	cmp	r3, r2
 80035d4:	bfc4      	itt	gt
 80035d6:	1a9b      	subgt	r3, r3, r2
 80035d8:	18ed      	addgt	r5, r5, r3
 80035da:	2600      	movs	r6, #0
 80035dc:	341a      	adds	r4, #26
 80035de:	42b5      	cmp	r5, r6
 80035e0:	d11a      	bne.n	8003618 <_printf_common+0xc8>
 80035e2:	2000      	movs	r0, #0
 80035e4:	e008      	b.n	80035f8 <_printf_common+0xa8>
 80035e6:	2301      	movs	r3, #1
 80035e8:	4652      	mov	r2, sl
 80035ea:	4641      	mov	r1, r8
 80035ec:	4638      	mov	r0, r7
 80035ee:	47c8      	blx	r9
 80035f0:	3001      	adds	r0, #1
 80035f2:	d103      	bne.n	80035fc <_printf_common+0xac>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	3501      	adds	r5, #1
 80035fe:	e7c6      	b.n	800358e <_printf_common+0x3e>
 8003600:	18e1      	adds	r1, r4, r3
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	2030      	movs	r0, #48	@ 0x30
 8003606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800360a:	4422      	add	r2, r4
 800360c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003614:	3302      	adds	r3, #2
 8003616:	e7c7      	b.n	80035a8 <_printf_common+0x58>
 8003618:	2301      	movs	r3, #1
 800361a:	4622      	mov	r2, r4
 800361c:	4641      	mov	r1, r8
 800361e:	4638      	mov	r0, r7
 8003620:	47c8      	blx	r9
 8003622:	3001      	adds	r0, #1
 8003624:	d0e6      	beq.n	80035f4 <_printf_common+0xa4>
 8003626:	3601      	adds	r6, #1
 8003628:	e7d9      	b.n	80035de <_printf_common+0x8e>
	...

0800362c <_printf_i>:
 800362c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003630:	7e0f      	ldrb	r7, [r1, #24]
 8003632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003634:	2f78      	cmp	r7, #120	@ 0x78
 8003636:	4691      	mov	r9, r2
 8003638:	4680      	mov	r8, r0
 800363a:	460c      	mov	r4, r1
 800363c:	469a      	mov	sl, r3
 800363e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003642:	d807      	bhi.n	8003654 <_printf_i+0x28>
 8003644:	2f62      	cmp	r7, #98	@ 0x62
 8003646:	d80a      	bhi.n	800365e <_printf_i+0x32>
 8003648:	2f00      	cmp	r7, #0
 800364a:	f000 80d2 	beq.w	80037f2 <_printf_i+0x1c6>
 800364e:	2f58      	cmp	r7, #88	@ 0x58
 8003650:	f000 80b9 	beq.w	80037c6 <_printf_i+0x19a>
 8003654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800365c:	e03a      	b.n	80036d4 <_printf_i+0xa8>
 800365e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003662:	2b15      	cmp	r3, #21
 8003664:	d8f6      	bhi.n	8003654 <_printf_i+0x28>
 8003666:	a101      	add	r1, pc, #4	@ (adr r1, 800366c <_printf_i+0x40>)
 8003668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036d9 	.word	0x080036d9
 8003674:	08003655 	.word	0x08003655
 8003678:	08003655 	.word	0x08003655
 800367c:	08003655 	.word	0x08003655
 8003680:	08003655 	.word	0x08003655
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003655 	.word	0x08003655
 800368c:	08003655 	.word	0x08003655
 8003690:	08003655 	.word	0x08003655
 8003694:	08003655 	.word	0x08003655
 8003698:	080037d9 	.word	0x080037d9
 800369c:	08003703 	.word	0x08003703
 80036a0:	08003793 	.word	0x08003793
 80036a4:	08003655 	.word	0x08003655
 80036a8:	08003655 	.word	0x08003655
 80036ac:	080037fb 	.word	0x080037fb
 80036b0:	08003655 	.word	0x08003655
 80036b4:	08003703 	.word	0x08003703
 80036b8:	08003655 	.word	0x08003655
 80036bc:	08003655 	.word	0x08003655
 80036c0:	0800379b 	.word	0x0800379b
 80036c4:	6833      	ldr	r3, [r6, #0]
 80036c6:	1d1a      	adds	r2, r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6032      	str	r2, [r6, #0]
 80036cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036d4:	2301      	movs	r3, #1
 80036d6:	e09d      	b.n	8003814 <_printf_i+0x1e8>
 80036d8:	6833      	ldr	r3, [r6, #0]
 80036da:	6820      	ldr	r0, [r4, #0]
 80036dc:	1d19      	adds	r1, r3, #4
 80036de:	6031      	str	r1, [r6, #0]
 80036e0:	0606      	lsls	r6, r0, #24
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0xbc>
 80036e4:	681d      	ldr	r5, [r3, #0]
 80036e6:	e003      	b.n	80036f0 <_printf_i+0xc4>
 80036e8:	0645      	lsls	r5, r0, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0xb8>
 80036ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	da03      	bge.n	80036fc <_printf_i+0xd0>
 80036f4:	232d      	movs	r3, #45	@ 0x2d
 80036f6:	426d      	negs	r5, r5
 80036f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036fc:	4859      	ldr	r0, [pc, #356]	@ (8003864 <_printf_i+0x238>)
 80036fe:	230a      	movs	r3, #10
 8003700:	e011      	b.n	8003726 <_printf_i+0xfa>
 8003702:	6821      	ldr	r1, [r4, #0]
 8003704:	6833      	ldr	r3, [r6, #0]
 8003706:	0608      	lsls	r0, r1, #24
 8003708:	f853 5b04 	ldr.w	r5, [r3], #4
 800370c:	d402      	bmi.n	8003714 <_printf_i+0xe8>
 800370e:	0649      	lsls	r1, r1, #25
 8003710:	bf48      	it	mi
 8003712:	b2ad      	uxthmi	r5, r5
 8003714:	2f6f      	cmp	r7, #111	@ 0x6f
 8003716:	4853      	ldr	r0, [pc, #332]	@ (8003864 <_printf_i+0x238>)
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	bf14      	ite	ne
 800371c:	230a      	movne	r3, #10
 800371e:	2308      	moveq	r3, #8
 8003720:	2100      	movs	r1, #0
 8003722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003726:	6866      	ldr	r6, [r4, #4]
 8003728:	60a6      	str	r6, [r4, #8]
 800372a:	2e00      	cmp	r6, #0
 800372c:	bfa2      	ittt	ge
 800372e:	6821      	ldrge	r1, [r4, #0]
 8003730:	f021 0104 	bicge.w	r1, r1, #4
 8003734:	6021      	strge	r1, [r4, #0]
 8003736:	b90d      	cbnz	r5, 800373c <_printf_i+0x110>
 8003738:	2e00      	cmp	r6, #0
 800373a:	d04b      	beq.n	80037d4 <_printf_i+0x1a8>
 800373c:	4616      	mov	r6, r2
 800373e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003742:	fb03 5711 	mls	r7, r3, r1, r5
 8003746:	5dc7      	ldrb	r7, [r0, r7]
 8003748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800374c:	462f      	mov	r7, r5
 800374e:	42bb      	cmp	r3, r7
 8003750:	460d      	mov	r5, r1
 8003752:	d9f4      	bls.n	800373e <_printf_i+0x112>
 8003754:	2b08      	cmp	r3, #8
 8003756:	d10b      	bne.n	8003770 <_printf_i+0x144>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	07df      	lsls	r7, r3, #31
 800375c:	d508      	bpl.n	8003770 <_printf_i+0x144>
 800375e:	6923      	ldr	r3, [r4, #16]
 8003760:	6861      	ldr	r1, [r4, #4]
 8003762:	4299      	cmp	r1, r3
 8003764:	bfde      	ittt	le
 8003766:	2330      	movle	r3, #48	@ 0x30
 8003768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800376c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003770:	1b92      	subs	r2, r2, r6
 8003772:	6122      	str	r2, [r4, #16]
 8003774:	f8cd a000 	str.w	sl, [sp]
 8003778:	464b      	mov	r3, r9
 800377a:	aa03      	add	r2, sp, #12
 800377c:	4621      	mov	r1, r4
 800377e:	4640      	mov	r0, r8
 8003780:	f7ff fee6 	bl	8003550 <_printf_common>
 8003784:	3001      	adds	r0, #1
 8003786:	d14a      	bne.n	800381e <_printf_i+0x1f2>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	b004      	add	sp, #16
 800378e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003792:	6823      	ldr	r3, [r4, #0]
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	4833      	ldr	r0, [pc, #204]	@ (8003868 <_printf_i+0x23c>)
 800379c:	2778      	movs	r7, #120	@ 0x78
 800379e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	6831      	ldr	r1, [r6, #0]
 80037a6:	061f      	lsls	r7, r3, #24
 80037a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80037ac:	d402      	bmi.n	80037b4 <_printf_i+0x188>
 80037ae:	065f      	lsls	r7, r3, #25
 80037b0:	bf48      	it	mi
 80037b2:	b2ad      	uxthmi	r5, r5
 80037b4:	6031      	str	r1, [r6, #0]
 80037b6:	07d9      	lsls	r1, r3, #31
 80037b8:	bf44      	itt	mi
 80037ba:	f043 0320 	orrmi.w	r3, r3, #32
 80037be:	6023      	strmi	r3, [r4, #0]
 80037c0:	b11d      	cbz	r5, 80037ca <_printf_i+0x19e>
 80037c2:	2310      	movs	r3, #16
 80037c4:	e7ac      	b.n	8003720 <_printf_i+0xf4>
 80037c6:	4827      	ldr	r0, [pc, #156]	@ (8003864 <_printf_i+0x238>)
 80037c8:	e7e9      	b.n	800379e <_printf_i+0x172>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	f023 0320 	bic.w	r3, r3, #32
 80037d0:	6023      	str	r3, [r4, #0]
 80037d2:	e7f6      	b.n	80037c2 <_printf_i+0x196>
 80037d4:	4616      	mov	r6, r2
 80037d6:	e7bd      	b.n	8003754 <_printf_i+0x128>
 80037d8:	6833      	ldr	r3, [r6, #0]
 80037da:	6825      	ldr	r5, [r4, #0]
 80037dc:	6961      	ldr	r1, [r4, #20]
 80037de:	1d18      	adds	r0, r3, #4
 80037e0:	6030      	str	r0, [r6, #0]
 80037e2:	062e      	lsls	r6, r5, #24
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	d501      	bpl.n	80037ec <_printf_i+0x1c0>
 80037e8:	6019      	str	r1, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <_printf_i+0x1c6>
 80037ec:	0668      	lsls	r0, r5, #25
 80037ee:	d5fb      	bpl.n	80037e8 <_printf_i+0x1bc>
 80037f0:	8019      	strh	r1, [r3, #0]
 80037f2:	2300      	movs	r3, #0
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	4616      	mov	r6, r2
 80037f8:	e7bc      	b.n	8003774 <_printf_i+0x148>
 80037fa:	6833      	ldr	r3, [r6, #0]
 80037fc:	1d1a      	adds	r2, r3, #4
 80037fe:	6032      	str	r2, [r6, #0]
 8003800:	681e      	ldr	r6, [r3, #0]
 8003802:	6862      	ldr	r2, [r4, #4]
 8003804:	2100      	movs	r1, #0
 8003806:	4630      	mov	r0, r6
 8003808:	f7fc fd0a 	bl	8000220 <memchr>
 800380c:	b108      	cbz	r0, 8003812 <_printf_i+0x1e6>
 800380e:	1b80      	subs	r0, r0, r6
 8003810:	6060      	str	r0, [r4, #4]
 8003812:	6863      	ldr	r3, [r4, #4]
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	2300      	movs	r3, #0
 8003818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800381c:	e7aa      	b.n	8003774 <_printf_i+0x148>
 800381e:	6923      	ldr	r3, [r4, #16]
 8003820:	4632      	mov	r2, r6
 8003822:	4649      	mov	r1, r9
 8003824:	4640      	mov	r0, r8
 8003826:	47d0      	blx	sl
 8003828:	3001      	adds	r0, #1
 800382a:	d0ad      	beq.n	8003788 <_printf_i+0x15c>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	079b      	lsls	r3, r3, #30
 8003830:	d413      	bmi.n	800385a <_printf_i+0x22e>
 8003832:	68e0      	ldr	r0, [r4, #12]
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	4298      	cmp	r0, r3
 8003838:	bfb8      	it	lt
 800383a:	4618      	movlt	r0, r3
 800383c:	e7a6      	b.n	800378c <_printf_i+0x160>
 800383e:	2301      	movs	r3, #1
 8003840:	4632      	mov	r2, r6
 8003842:	4649      	mov	r1, r9
 8003844:	4640      	mov	r0, r8
 8003846:	47d0      	blx	sl
 8003848:	3001      	adds	r0, #1
 800384a:	d09d      	beq.n	8003788 <_printf_i+0x15c>
 800384c:	3501      	adds	r5, #1
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	9903      	ldr	r1, [sp, #12]
 8003852:	1a5b      	subs	r3, r3, r1
 8003854:	42ab      	cmp	r3, r5
 8003856:	dcf2      	bgt.n	800383e <_printf_i+0x212>
 8003858:	e7eb      	b.n	8003832 <_printf_i+0x206>
 800385a:	2500      	movs	r5, #0
 800385c:	f104 0619 	add.w	r6, r4, #25
 8003860:	e7f5      	b.n	800384e <_printf_i+0x222>
 8003862:	bf00      	nop
 8003864:	08003a31 	.word	0x08003a31
 8003868:	08003a42 	.word	0x08003a42

0800386c <__swhatbuf_r>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	460c      	mov	r4, r1
 8003870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003874:	2900      	cmp	r1, #0
 8003876:	b096      	sub	sp, #88	@ 0x58
 8003878:	4615      	mov	r5, r2
 800387a:	461e      	mov	r6, r3
 800387c:	da0d      	bge.n	800389a <__swhatbuf_r+0x2e>
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	bf14      	ite	ne
 800388a:	2340      	movne	r3, #64	@ 0x40
 800388c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003890:	2000      	movs	r0, #0
 8003892:	6031      	str	r1, [r6, #0]
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	b016      	add	sp, #88	@ 0x58
 8003898:	bd70      	pop	{r4, r5, r6, pc}
 800389a:	466a      	mov	r2, sp
 800389c:	f000 f848 	bl	8003930 <_fstat_r>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	dbec      	blt.n	800387e <__swhatbuf_r+0x12>
 80038a4:	9901      	ldr	r1, [sp, #4]
 80038a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038ae:	4259      	negs	r1, r3
 80038b0:	4159      	adcs	r1, r3
 80038b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038b6:	e7eb      	b.n	8003890 <__swhatbuf_r+0x24>

080038b8 <__smakebuf_r>:
 80038b8:	898b      	ldrh	r3, [r1, #12]
 80038ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038bc:	079d      	lsls	r5, r3, #30
 80038be:	4606      	mov	r6, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	d507      	bpl.n	80038d4 <__smakebuf_r+0x1c>
 80038c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038c8:	6023      	str	r3, [r4, #0]
 80038ca:	6123      	str	r3, [r4, #16]
 80038cc:	2301      	movs	r3, #1
 80038ce:	6163      	str	r3, [r4, #20]
 80038d0:	b003      	add	sp, #12
 80038d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d4:	ab01      	add	r3, sp, #4
 80038d6:	466a      	mov	r2, sp
 80038d8:	f7ff ffc8 	bl	800386c <__swhatbuf_r>
 80038dc:	9f00      	ldr	r7, [sp, #0]
 80038de:	4605      	mov	r5, r0
 80038e0:	4639      	mov	r1, r7
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff fc66 	bl	80031b4 <_malloc_r>
 80038e8:	b948      	cbnz	r0, 80038fe <__smakebuf_r+0x46>
 80038ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ee:	059a      	lsls	r2, r3, #22
 80038f0:	d4ee      	bmi.n	80038d0 <__smakebuf_r+0x18>
 80038f2:	f023 0303 	bic.w	r3, r3, #3
 80038f6:	f043 0302 	orr.w	r3, r3, #2
 80038fa:	81a3      	strh	r3, [r4, #12]
 80038fc:	e7e2      	b.n	80038c4 <__smakebuf_r+0xc>
 80038fe:	89a3      	ldrh	r3, [r4, #12]
 8003900:	6020      	str	r0, [r4, #0]
 8003902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	9b01      	ldr	r3, [sp, #4]
 800390a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800390e:	b15b      	cbz	r3, 8003928 <__smakebuf_r+0x70>
 8003910:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f81d 	bl	8003954 <_isatty_r>
 800391a:	b128      	cbz	r0, 8003928 <__smakebuf_r+0x70>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	431d      	orrs	r5, r3
 800392c:	81a5      	strh	r5, [r4, #12]
 800392e:	e7cf      	b.n	80038d0 <__smakebuf_r+0x18>

08003930 <_fstat_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	4d07      	ldr	r5, [pc, #28]	@ (8003950 <_fstat_r+0x20>)
 8003934:	2300      	movs	r3, #0
 8003936:	4604      	mov	r4, r0
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	f7fc ff1a 	bl	8000776 <_fstat>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d102      	bne.n	800394c <_fstat_r+0x1c>
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	b103      	cbz	r3, 800394c <_fstat_r+0x1c>
 800394a:	6023      	str	r3, [r4, #0]
 800394c:	bd38      	pop	{r3, r4, r5, pc}
 800394e:	bf00      	nop
 8003950:	2000022c 	.word	0x2000022c

08003954 <_isatty_r>:
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	4d06      	ldr	r5, [pc, #24]	@ (8003970 <_isatty_r+0x1c>)
 8003958:	2300      	movs	r3, #0
 800395a:	4604      	mov	r4, r0
 800395c:	4608      	mov	r0, r1
 800395e:	602b      	str	r3, [r5, #0]
 8003960:	f7fc ff19 	bl	8000796 <_isatty>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d102      	bne.n	800396e <_isatty_r+0x1a>
 8003968:	682b      	ldr	r3, [r5, #0]
 800396a:	b103      	cbz	r3, 800396e <_isatty_r+0x1a>
 800396c:	6023      	str	r3, [r4, #0]
 800396e:	bd38      	pop	{r3, r4, r5, pc}
 8003970:	2000022c 	.word	0x2000022c

08003974 <_sbrk_r>:
 8003974:	b538      	push	{r3, r4, r5, lr}
 8003976:	4d06      	ldr	r5, [pc, #24]	@ (8003990 <_sbrk_r+0x1c>)
 8003978:	2300      	movs	r3, #0
 800397a:	4604      	mov	r4, r0
 800397c:	4608      	mov	r0, r1
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	f7fc ff22 	bl	80007c8 <_sbrk>
 8003984:	1c43      	adds	r3, r0, #1
 8003986:	d102      	bne.n	800398e <_sbrk_r+0x1a>
 8003988:	682b      	ldr	r3, [r5, #0]
 800398a:	b103      	cbz	r3, 800398e <_sbrk_r+0x1a>
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	bd38      	pop	{r3, r4, r5, pc}
 8003990:	2000022c 	.word	0x2000022c

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
