
CAN_Loopback_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a60  08003a60  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00004a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a64  08003a64  00004a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a68  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000068  08003ad0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08003ad0  0000523c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dfb  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a15  00000000  00000000  0000de93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ea  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8e7  00000000  00000000  000108f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000991b  00000000  00000000  0002e1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b7573  00000000  00000000  00037af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ccc  00000000  00000000  000ef0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f1d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003998 	.word	0x08003998

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08003998 	.word	0x08003998

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08a      	sub	sp, #40	@ 0x28
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 faf2 	bl	80008ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f81d 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f8a3 	bl	8000418 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80002d2:	f000 f859 	bl	8000388 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  // start FD CAN and enable interrupt
  HAL_FDCAN_Start(&hfdcan1);
 80002d6:	480b      	ldr	r0, [pc, #44]	@ (8000304 <main+0x44>)
 80002d8:	f000 fde6 	bl	8000ea8 <HAL_FDCAN_Start>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x44>)
 80002e2:	f000 ff55 	bl	8001190 <HAL_FDCAN_ActivateNotification>

  FDCAN_TxHeaderTypeDef TxHeader;
  uint8_t TxData = 0x08;
 80002e6:	2308      	movs	r3, #8
 80002e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  send_FDCAN(&TxData, &TxHeader);
 80002ea:	1d3a      	adds	r2, r7, #4
 80002ec:	1cfb      	adds	r3, r7, #3
 80002ee:	4611      	mov	r1, r2
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f8a9 	bl	8000448 <send_FDCAN>
	  HAL_Delay(1000);
 80002f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002fa:	f000 fb49 	bl	8000990 <HAL_Delay>
	  send_FDCAN(&TxData, &TxHeader);
 80002fe:	bf00      	nop
 8000300:	e7f3      	b.n	80002ea <main+0x2a>
 8000302:	bf00      	nop
 8000304:	20000084 	.word	0x20000084

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2238      	movs	r2, #56	@ 0x38
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fe66 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800032e:	f001 fbf7 	bl	8001b20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800033a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2340      	movs	r3, #64	@ 0x40
 800033e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000344:	f107 0318 	add.w	r3, r7, #24
 8000348:	4618      	mov	r0, r3
 800034a:	f001 fc9d 	bl	8001c88 <HAL_RCC_OscConfig>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000354:	f000 f8de 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000358:	230f      	movs	r3, #15
 800035a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800035c:	2301      	movs	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2100      	movs	r1, #0
 8000370:	4618      	mov	r0, r3
 8000372:	f001 ff9b 	bl	80022ac <HAL_RCC_ClockConfig>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800037c:	f000 f8ca 	bl	8000514 <Error_Handler>
  }
}
 8000380:	bf00      	nop
 8000382:	3750      	adds	r7, #80	@ 0x50
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}

08000388 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800038c:	4b20      	ldr	r3, [pc, #128]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 800038e:	4a21      	ldr	r2, [pc, #132]	@ (8000414 <MX_FDCAN1_Init+0x8c>)
 8000390:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000392:	4b1f      	ldr	r3, [pc, #124]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000398:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 800039a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800039e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 80003a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003a2:	2203      	movs	r2, #3
 80003a4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80003a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80003ac:	4b18      	ldr	r3, [pc, #96]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80003b2:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ba:	2201      	movs	r2, #1
 80003bc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 80003be:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003c0:	2202      	movs	r2, #2
 80003c2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 29;
 80003c4:	4b12      	ldr	r3, [pc, #72]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003c6:	221d      	movs	r2, #29
 80003c8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80003ca:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003cc:	2202      	movs	r2, #2
 80003ce:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 2;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003d8:	2202      	movs	r2, #2
 80003da:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 16;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003de:	2210      	movs	r2, #16
 80003e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003e4:	220f      	movs	r2, #15
 80003e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_FDCAN1_Init+0x88>)
 80003fc:	f000 fbfa 	bl	8000bf4 <HAL_FDCAN_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000406:	f000 f885 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000084 	.word	0x20000084
 8000414:	40006400 	.word	0x40006400

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000422:	4a08      	ldr	r2, [pc, #32]	@ (8000444 <MX_GPIO_Init+0x2c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <MX_GPIO_Init+0x2c>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	607b      	str	r3, [r7, #4]
 8000434:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <send_FDCAN>:

/* USER CODE BEGIN 4 */
// send over FD CAN given message, fills out header
void send_FDCAN(uint8_t* data, FDCAN_TxHeaderTypeDef* TxHeader) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
	TxHeader->Identifier = 0x001;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
	TxHeader->IdType = FDCAN_STANDARD_ID;
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
	TxHeader->TxFrameType = FDCAN_DATA_FRAME;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
	TxHeader->DataLength = FDCAN_DLC_BYTES_1;
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2201      	movs	r2, #1
 8000468:	60da      	str	r2, [r3, #12]
	TxHeader->BitRateSwitch = FDCAN_BRS_OFF;
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
	TxHeader->FDFormat = FDCAN_FD_CAN;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000476:	619a      	str	r2, [r3, #24]
	TxHeader->TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	2200      	movs	r2, #0
 800047c:	61da      	str	r2, [r3, #28]
	TxHeader->MessageMarker = 0;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, TxHeader, data) != HAL_OK) {
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	6839      	ldr	r1, [r7, #0]
 8000488:	4809      	ldr	r0, [pc, #36]	@ (80004b0 <send_FDCAN+0x68>)
 800048a:	f000 fd35 	bl	8000ef8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <send_FDCAN+0x5e>
		printf("CAN send error\n");
 8000494:	4807      	ldr	r0, [pc, #28]	@ (80004b4 <send_FDCAN+0x6c>)
 8000496:	f002 fcc7 	bl	8002e28 <puts>
		fflush(stdout);
 800049a:	4b07      	ldr	r3, [pc, #28]	@ (80004b8 <send_FDCAN+0x70>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4618      	mov	r0, r3
 80004a2:	f002 fb83 	bl	8002bac <fflush>
	}

}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000084 	.word	0x20000084
 80004b4:	080039b0 	.word	0x080039b0
 80004b8:	20000018 	.word	0x20000018

080004bc <HAL_FDCAN_RxFifo0Callback>:

// FD CAN FIFO0 callback
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b08e      	sub	sp, #56	@ 0x38
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData;

	// read message from fifo 0
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, &RxData) != HAL_OK) {
 80004c6:	f107 030f 	add.w	r3, r7, #15
 80004ca:	f107 0210 	add.w	r2, r7, #16
 80004ce:	2140      	movs	r1, #64	@ 0x40
 80004d0:	480c      	ldr	r0, [pc, #48]	@ (8000504 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80004d2:	f000 fd55 	bl	8000f80 <HAL_FDCAN_GetRxMessage>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d008      	beq.n	80004ee <HAL_FDCAN_RxFifo0Callback+0x32>
		printf("Error receiving CAN message\n");
 80004dc:	480a      	ldr	r0, [pc, #40]	@ (8000508 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80004de:	f002 fca3 	bl	8002e28 <puts>
		fflush(stdout);
 80004e2:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <HAL_FDCAN_RxFifo0Callback+0x50>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	4618      	mov	r0, r3
 80004ea:	f002 fb5f 	bl	8002bac <fflush>
	}

	// print values
	printf("Received from CAN ID: 0x%lX\n Data: %u\n", RxHeader.Identifier, RxData);
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	7bfa      	ldrb	r2, [r7, #15]
 80004f2:	4619      	mov	r1, r3
 80004f4:	4806      	ldr	r0, [pc, #24]	@ (8000510 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80004f6:	f002 fc2f 	bl	8002d58 <iprintf>
}
 80004fa:	bf00      	nop
 80004fc:	3738      	adds	r7, #56	@ 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000084 	.word	0x20000084
 8000508:	080039c0 	.word	0x080039c0
 800050c:	20000018 	.word	0x20000018
 8000510:	080039dc 	.word	0x080039dc

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <Error_Handler+0x8>

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	@ (8000564 <HAL_MspInit+0x44>)
 8000528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800052a:	4a0e      	ldr	r2, [pc, #56]	@ (8000564 <HAL_MspInit+0x44>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6613      	str	r3, [r2, #96]	@ 0x60
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <HAL_MspInit+0x44>)
 8000534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <HAL_MspInit+0x44>)
 8000540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <HAL_MspInit+0x44>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000548:	6593      	str	r3, [r2, #88]	@ 0x58
 800054a:	4b06      	ldr	r3, [pc, #24]	@ (8000564 <HAL_MspInit+0x44>)
 800054c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800054e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000556:	f001 fb87 	bl	8001c68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09a      	sub	sp, #104	@ 0x68
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	2244      	movs	r2, #68	@ 0x44
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fd2d 	bl	8002fe8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a24      	ldr	r2, [pc, #144]	@ (8000624 <HAL_FDCAN_MspInit+0xbc>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d141      	bne.n	800061c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000598:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800059c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800059e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f863 	bl	8002674 <HAL_RCCEx_PeriphCLKConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80005b4:	f7ff ffae 	bl	8000514 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80005b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d4:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <HAL_FDCAN_MspInit+0xc0>)
 80005de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005e8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80005fa:	2309      	movs	r3, #9
 80005fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000602:	4619      	mov	r1, r3
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f001 f908 	bl	800181c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	2100      	movs	r1, #0
 8000610:	2015      	movs	r0, #21
 8000612:	f000 faba 	bl	8000b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000616:	2015      	movs	r0, #21
 8000618:	f000 fad1 	bl	8000bbe <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800061c:	bf00      	nop
 800061e:	3768      	adds	r7, #104	@ 0x68
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40006400 	.word	0x40006400
 8000628:	40021000 	.word	0x40021000

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000682:	f000 f967 	bl	8000954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000690:	4802      	ldr	r0, [pc, #8]	@ (800069c <FDCAN1_IT0_IRQHandler+0x10>)
 8000692:	f000 fe63 	bl	800135c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084

080006a0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006aa:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <ITM_SendChar+0x48>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <ITM_SendChar+0x48>)
 80006b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006b4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006b6:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <ITM_SendChar+0x4c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a0c      	ldr	r2, [pc, #48]	@ (80006ec <ITM_SendChar+0x4c>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006c2:	bf00      	nop
 80006c4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f8      	beq.n	80006c4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006d2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000edfc 	.word	0xe000edfc
 80006ec:	e0000e00 	.word	0xe0000e00

080006f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e00a      	b.n	8000718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000702:	f3af 8000 	nop.w
 8000706:	4601      	mov	r1, r0
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	60ba      	str	r2, [r7, #8]
 800070e:	b2ca      	uxtb	r2, r1
 8000710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	3301      	adds	r3, #1
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	429a      	cmp	r2, r3
 800071e:	dbf0      	blt.n	8000702 <_read+0x12>
  }

  return len;
 8000720:	687b      	ldr	r3, [r7, #4]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	e009      	b.n	8000750 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	1c5a      	adds	r2, r3, #1
 8000740:	60ba      	str	r2, [r7, #8]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffab 	bl	80006a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	429a      	cmp	r2, r3
 8000756:	dbf1      	blt.n	800073c <_write+0x12>
  }
  return len;
 8000758:	687b      	ldr	r3, [r7, #4]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <_close>:

int _close(int file)
{
 8000762:	b480      	push	{r7}
 8000764:	b083      	sub	sp, #12
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800078a:	605a      	str	r2, [r3, #4]
  return 0;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <_isatty>:

int _isatty(int file)
{
 800079a:	b480      	push	{r7}
 800079c:	b083      	sub	sp, #12
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f002 fc42 	bl	8003084 <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <_sbrk+0x64>)
 800081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20008000 	.word	0x20008000
 800082c:	00000400 	.word	0x00000400
 8000830:	200000e8 	.word	0x200000e8
 8000834:	20000240 	.word	0x20000240

08000838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <SystemInit+0x20>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000842:	4a05      	ldr	r2, [pc, #20]	@ (8000858 <SystemInit+0x20>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000860:	f7ff ffea 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f002 fc01 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800088e:	f7ff fd17 	bl	80002c0 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80008a0:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 80008a4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80008a8:	2000023c 	.word	0x2000023c

080008ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_2_IRQHandler>

080008ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 f95b 	bl	8000b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f80e 	bl	80008e0 <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d002      	beq.n	80008d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	71fb      	strb	r3, [r7, #7]
 80008ce:	e001      	b.n	80008d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d0:	f7ff fe26 	bl	8000520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d4:	79fb      	ldrb	r3, [r7, #7]

}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <HAL_InitTick+0x68>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d022      	beq.n	800093a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008f4:	4b15      	ldr	r3, [pc, #84]	@ (800094c <HAL_InitTick+0x6c>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b13      	ldr	r3, [pc, #76]	@ (8000948 <HAL_InitTick+0x68>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000900:	fbb1 f3f3 	udiv	r3, r1, r3
 8000904:	fbb2 f3f3 	udiv	r3, r2, r3
 8000908:	4618      	mov	r0, r3
 800090a:	f000 f966 	bl	8000bda <HAL_SYSTICK_Config>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d10f      	bne.n	8000934 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b0f      	cmp	r3, #15
 8000918:	d809      	bhi.n	800092e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091a:	2200      	movs	r2, #0
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	f04f 30ff 	mov.w	r0, #4294967295
 8000922:	f000 f932 	bl	8000b8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <HAL_InitTick+0x70>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	e007      	b.n	800093e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800092e:	2301      	movs	r3, #1
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	e004      	b.n	800093e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e001      	b.n	800093e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008
 800094c:	20000000 	.word	0x20000000
 8000950:	20000004 	.word	0x20000004

08000954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <HAL_IncTick+0x1c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b05      	ldr	r3, [pc, #20]	@ (8000974 <HAL_IncTick+0x20>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4413      	add	r3, r2
 8000962:	4a03      	ldr	r2, [pc, #12]	@ (8000970 <HAL_IncTick+0x1c>)
 8000964:	6013      	str	r3, [r2, #0]
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	200000ec 	.word	0x200000ec
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  return uwTick;
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <HAL_GetTick+0x14>)
 800097e:	681b      	ldr	r3, [r3, #0]
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	200000ec 	.word	0x200000ec

08000990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000998:	f7ff ffee 	bl	8000978 <HAL_GetTick>
 800099c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a8:	d004      	beq.n	80009b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_Delay+0x40>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009b4:	bf00      	nop
 80009b6:	f7ff ffdf 	bl	8000978 <HAL_GetTick>
 80009ba:	4602      	mov	r2, r0
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	1ad3      	subs	r3, r2, r3
 80009c0:	68fa      	ldr	r2, [r7, #12]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d8f7      	bhi.n	80009b6 <HAL_Delay+0x26>
  {
  }
}
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000008 	.word	0x20000008

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	@ (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4907      	ldr	r1, [pc, #28]	@ (8000a70 <__NVIC_EnableIRQ+0x38>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	@ (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	@ (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	@ 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	@ 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b40:	d301      	bcc.n	8000b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00f      	b.n	8000b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <SysTick_Config+0x40>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4e:	210f      	movs	r1, #15
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f7ff ff8e 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <SysTick_Config+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5e:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <SysTick_Config+0x40>)
 8000b60:	2207      	movs	r2, #7
 8000b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	e000e010 	.word	0xe000e010

08000b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ff29 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
 8000b96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff40 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff90 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5f 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff33 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffa4 	bl	8000b30 <SysTick_Config>
 8000be8:	4603      	mov	r3, r0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e147      	b.n	8000e96 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d106      	bne.n	8000c20 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fca4 	bl	8000568 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 0210 	bic.w	r2, r2, #16
 8000c2e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c30:	f7ff fea2 	bl	8000978 <HAL_GetTick>
 8000c34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c36:	e012      	b.n	8000c5e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c38:	f7ff fe9e 	bl	8000978 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b0a      	cmp	r3, #10
 8000c44:	d90b      	bls.n	8000c5e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2203      	movs	r2, #3
 8000c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e11b      	b.n	8000e96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d0e5      	beq.n	8000c38 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0201 	orr.w	r2, r2, #1
 8000c7a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c7c:	f7ff fe7c 	bl	8000978 <HAL_GetTick>
 8000c80:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000c82:	e012      	b.n	8000caa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000c84:	f7ff fe78 	bl	8000978 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b0a      	cmp	r3, #10
 8000c90:	d90b      	bls.n	8000caa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e0f5      	b.n	8000e96 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f003 0301 	and.w	r3, r3, #1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0e5      	beq.n	8000c84 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	699a      	ldr	r2, [r3, #24]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0202 	orr.w	r2, r2, #2
 8000cc6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a74      	ldr	r2, [pc, #464]	@ (8000ea0 <HAL_FDCAN_Init+0x2ac>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d103      	bne.n	8000cda <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000cd2:	4a74      	ldr	r2, [pc, #464]	@ (8000ea4 <HAL_FDCAN_Init+0x2b0>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7c1b      	ldrb	r3, [r3, #16]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d108      	bne.n	8000cf4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000cf0:	619a      	str	r2, [r3, #24]
 8000cf2:	e007      	b.n	8000d04 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	699a      	ldr	r2, [r3, #24]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d02:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7c5b      	ldrb	r3, [r3, #17]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d108      	bne.n	8000d1e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	699a      	ldr	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000d1a:	619a      	str	r2, [r3, #24]
 8000d1c:	e007      	b.n	8000d2e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000d2c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7c9b      	ldrb	r3, [r3, #18]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d108      	bne.n	8000d48 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	699a      	ldr	r2, [r3, #24]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000d44:	619a      	str	r2, [r3, #24]
 8000d46:	e007      	b.n	8000d58 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	699a      	ldr	r2, [r3, #24]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d56:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	699a      	ldr	r2, [r3, #24]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000d7c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	691a      	ldr	r2, [r3, #16]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 0210 	bic.w	r2, r2, #16
 8000d8c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d108      	bne.n	8000da8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	699a      	ldr	r2, [r3, #24]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 0204 	orr.w	r2, r2, #4
 8000da4:	619a      	str	r2, [r3, #24]
 8000da6:	e02c      	b.n	8000e02 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d028      	beq.n	8000e02 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d01c      	beq.n	8000df2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	699a      	ldr	r2, [r3, #24]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dc6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	691a      	ldr	r2, [r3, #16]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0210 	orr.w	r2, r2, #16
 8000dd6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d110      	bne.n	8000e02 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	699a      	ldr	r2, [r3, #24]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	619a      	str	r2, [r3, #24]
 8000df0:	e007      	b.n	8000e02 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699a      	ldr	r2, [r3, #24]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0220 	orr.w	r2, r2, #32
 8000e00:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e12:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a1b      	ldr	r3, [r3, #32]
 8000e18:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000e1a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000e2a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000e2c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000e36:	d115      	bne.n	8000e64 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e42:	3b01      	subs	r3, #1
 8000e44:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e46:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000e50:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000e60:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000e62:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f000 fbfc 	bl	8001678 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40006400 	.word	0x40006400
 8000ea4:	40006500 	.word	0x40006500

08000ea8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d110      	bne.n	8000ede <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e006      	b.n	8000eec <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	f043 0204 	orr.w	r2, r3, #4
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
  }
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d12c      	bne.n	8000f6a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f24:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e023      	b.n	8000f78 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000f38:	0c1b      	lsrs	r3, r3, #16
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f000 fbec 	bl	8001724 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	fa01 f202 	lsl.w	r2, r1, r2
 8000f58:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	409a      	lsls	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e006      	b.n	8000f78 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6e:	f043 0208 	orr.w	r2, r3, #8
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
  }
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b08b      	sub	sp, #44	@ 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f98:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000f9a:	7efb      	ldrb	r3, [r7, #27]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	f040 80e8 	bne.w	8001172 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b40      	cmp	r3, #64	@ 0x40
 8000fa6:	d137      	bne.n	8001018 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d107      	bne.n	8000fc8 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0db      	b.n	8001180 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fd0:	0e1b      	lsrs	r3, r3, #24
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d10a      	bne.n	8000ff0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000fe2:	0a5b      	lsrs	r3, r3, #9
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d101      	bne.n	8000ff0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	4413      	add	r3, r2
 8001002:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
 8001016:	e036      	b.n	8001086 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	2b00      	cmp	r3, #0
 8001026:	d107      	bne.n	8001038 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0a3      	b.n	8001180 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001040:	0e1b      	lsrs	r3, r3, #24
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10a      	bne.n	8001060 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001052:	0a1b      	lsrs	r3, r3, #8
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	4413      	add	r3, r2
 8001072:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	440b      	add	r3, r1
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d107      	bne.n	80010aa <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	0c9b      	lsrs	r3, r3, #18
 80010a0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e005      	b.n	80010b6 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	3304      	adds	r3, #4
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	f003 020f 	and.w	r2, r3, #15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80010f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0e1b      	lsrs	r3, r3, #24
 800110a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	0fda      	lsrs	r2, r3, #31
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800111c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111e:	3304      	adds	r3, #4
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001124:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
 800112a:	e00a      	b.n	8001142 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	6a3b      	ldr	r3, [r7, #32]
 8001130:	441a      	add	r2, r3
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	440b      	add	r3, r1
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	3301      	adds	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	4a11      	ldr	r2, [pc, #68]	@ (800118c <HAL_FDCAN_GetRxMessage+0x20c>)
 8001148:	5cd3      	ldrb	r3, [r2, r3]
 800114a:	461a      	mov	r2, r3
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	4293      	cmp	r3, r2
 8001150:	d3ec      	bcc.n	800112c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	2b40      	cmp	r3, #64	@ 0x40
 8001156:	d105      	bne.n	8001164 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69fa      	ldr	r2, [r7, #28]
 800115e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8001162:	e004      	b.n	800116e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e006      	b.n	8001180 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001176:	f043 0208 	orr.w	r2, r3, #8
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	372c      	adds	r7, #44	@ 0x2c
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	08003a14 	.word	0x08003a14

08001190 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001190:	b480      	push	{r7}
 8001192:	b087      	sub	sp, #28
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80011a2:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d003      	beq.n	80011b2 <HAL_FDCAN_ActivateNotification+0x22>
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	f040 80c8 	bne.w	8001342 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b8:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d004      	beq.n	80011ce <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d03b      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d031      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d027      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d004      	beq.n	800120a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d01d      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001210:	2b00      	cmp	r3, #0
 8001212:	d004      	beq.n	800121e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d013      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00c      	beq.n	8001256 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d107      	bne.n	8001256 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f003 0307 	and.w	r3, r3, #7
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d13b      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001270:	2b00      	cmp	r3, #0
 8001272:	d004      	beq.n	800127e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d131      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001284:	2b00      	cmp	r3, #0
 8001286:	d004      	beq.n	8001292 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	2b00      	cmp	r3, #0
 8001290:	d127      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8001298:	2b00      	cmp	r3, #0
 800129a:	d004      	beq.n	80012a6 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d11d      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d004      	beq.n	80012ba <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d113      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	f003 0320 	and.w	r3, r3, #32
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00c      	beq.n	80012f2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0202 	orr.w	r2, r2, #2
 80012f0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d009      	beq.n	8001310 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	430a      	orrs	r2, r1
 800130c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	430a      	orrs	r2, r1
 800132a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	430a      	orrs	r2, r1
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e006      	b.n	8001350 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
  }
}
 8001350:	4618      	mov	r0, r3
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	@ 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800136a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001378:	4013      	ands	r3, r2
 800137a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001390:	4013      	ands	r3, r2
 8001392:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800139a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a8:	4013      	ands	r3, r2
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013b2:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80013b6:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013be:	6a3a      	ldr	r2, [r7, #32]
 80013c0:	4013      	ands	r3, r2
 80013c2:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013ce:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	4013      	ands	r3, r2
 80013da:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013e2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ea:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d006      	beq.n	800140e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2240      	movs	r2, #64	@ 0x40
 8001406:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f000 f916 	bl	800163a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001414:	2b00      	cmp	r3, #0
 8001416:	d019      	beq.n	800144c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800141e:	2b00      	cmp	r3, #0
 8001420:	d014      	beq.n	800144c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800142a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001442:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001444:	6939      	ldr	r1, [r7, #16]
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f8d8 	bl	80015fc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001458:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800145a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f8a2 	bl	80015a6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800146e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001470:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff f822 	bl	80004bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147a:	2b00      	cmp	r3, #0
 800147c:	d007      	beq.n	800148e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001484:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001486:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f897 	bl	80015bc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014aa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f890 	bl	80015d2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d013      	beq.n	80014ee <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80014ce:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2280      	movs	r2, #128	@ 0x80
 80014e4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f87c 	bl	80015e6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00c      	beq.n	8001512 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d007      	beq.n	8001512 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800150a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f880 	bl	8001612 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00c      	beq.n	8001536 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800152e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f878 	bl	8001626 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d00f      	beq.n	8001560 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00a      	beq.n	8001560 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001552:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	69fa      	ldr	r2, [r7, #28]
 800156c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800156e:	69f9      	ldr	r1, [r7, #28]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f876 	bl	8001662 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d009      	beq.n	8001590 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001588:	6a3b      	ldr	r3, [r7, #32]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f858 	bl	800164e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800159e:	bf00      	nop
 80015a0:	3730      	adds	r7, #48	@ 0x30
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001680:	4b27      	ldr	r3, [pc, #156]	@ (8001720 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001682:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001692:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800169a:	041a      	lsls	r2, r3, #16
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80016b8:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016c0:	061a      	lsls	r2, r3, #24
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	e005      	b.n	8001706 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3304      	adds	r3, #4
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3f3      	bcc.n	80016fa <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	4000a400 	.word	0x4000a400

08001724 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10a      	bne.n	8001750 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001742:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800174a:	4313      	orrs	r3, r2
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	e00a      	b.n	8001766 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001758:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800175e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001760:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001764:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001770:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001776:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800177c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	3304      	adds	r3, #4
 80017a4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	3304      	adds	r3, #4
 80017b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	e020      	b.n	80017fa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3303      	adds	r3, #3
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	4413      	add	r3, r2
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3302      	adds	r3, #2
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	440b      	add	r3, r1
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017d0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	440b      	add	r3, r1
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80017de:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	440a      	add	r2, r1
 80017e6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80017e8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	3304      	adds	r3, #4
 80017f2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3304      	adds	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	4a06      	ldr	r2, [pc, #24]	@ (8001818 <FDCAN_CopyMessageToRAM+0xf4>)
 8001800:	5cd3      	ldrb	r3, [r2, r3]
 8001802:	461a      	mov	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4293      	cmp	r3, r2
 8001808:	d3d6      	bcc.n	80017b8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3724      	adds	r7, #36	@ 0x24
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	08003a14 	.word	0x08003a14

0800181c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800182a:	e15a      	b.n	8001ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2101      	movs	r1, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	4013      	ands	r3, r2
 800183a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 814c 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d005      	beq.n	800185c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001858:	2b02      	cmp	r3, #2
 800185a:	d130      	bne.n	80018be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001892:	2201      	movs	r2, #1
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	091b      	lsrs	r3, r3, #4
 80018a8:	f003 0201 	and.w	r2, r3, #1
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d017      	beq.n	80018fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689a      	ldr	r2, [r3, #8]
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d123      	bne.n	800194e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	08da      	lsrs	r2, r3, #3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	3208      	adds	r2, #8
 800190e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	08da      	lsrs	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	3208      	adds	r2, #8
 8001948:	6939      	ldr	r1, [r7, #16]
 800194a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	2203      	movs	r2, #3
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f003 0203 	and.w	r2, r3, #3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800198a:	2b00      	cmp	r3, #0
 800198c:	f000 80a6 	beq.w	8001adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	4b5b      	ldr	r3, [pc, #364]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	4a5a      	ldr	r2, [pc, #360]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6613      	str	r3, [r2, #96]	@ 0x60
 800199c:	4b58      	ldr	r3, [pc, #352]	@ (8001b00 <HAL_GPIO_Init+0x2e4>)
 800199e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_GPIO_Init+0x2e8>)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	089b      	lsrs	r3, r3, #2
 80019ae:	3302      	adds	r3, #2
 80019b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	220f      	movs	r2, #15
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80019d2:	d01f      	beq.n	8001a14 <HAL_GPIO_Init+0x1f8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b08 <HAL_GPIO_Init+0x2ec>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d019      	beq.n	8001a10 <HAL_GPIO_Init+0x1f4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a4b      	ldr	r2, [pc, #300]	@ (8001b0c <HAL_GPIO_Init+0x2f0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_GPIO_Init+0x1f0>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001b10 <HAL_GPIO_Init+0x2f4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d00d      	beq.n	8001a08 <HAL_GPIO_Init+0x1ec>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a49      	ldr	r2, [pc, #292]	@ (8001b14 <HAL_GPIO_Init+0x2f8>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d007      	beq.n	8001a04 <HAL_GPIO_Init+0x1e8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a48      	ldr	r2, [pc, #288]	@ (8001b18 <HAL_GPIO_Init+0x2fc>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_GPIO_Init+0x1e4>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e00a      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a00:	2306      	movs	r3, #6
 8001a02:	e008      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a04:	2304      	movs	r3, #4
 8001a06:	e006      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e004      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e002      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_GPIO_Init+0x1fa>
 8001a14:	2300      	movs	r3, #0
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	f002 0203 	and.w	r2, r2, #3
 8001a1c:	0092      	lsls	r2, r2, #2
 8001a1e:	4093      	lsls	r3, r2
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a26:	4937      	ldr	r1, [pc, #220]	@ (8001b04 <HAL_GPIO_Init+0x2e8>)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	089b      	lsrs	r3, r3, #2
 8001a2c:	3302      	adds	r3, #2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a34:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a58:	4a30      	ldr	r2, [pc, #192]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a88:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4013      	ands	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aac:	4a1b      	ldr	r2, [pc, #108]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad6:	4a11      	ldr	r2, [pc, #68]	@ (8001b1c <HAL_GPIO_Init+0x300>)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f47f ae9d 	bne.w	800182c <HAL_GPIO_Init+0x10>
  }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010000 	.word	0x40010000
 8001b08:	48000400 	.word	0x48000400
 8001b0c:	48000800 	.word	0x48000800
 8001b10:	48000c00 	.word	0x48000c00
 8001b14:	48001000 	.word	0x48001000
 8001b18:	48001400 	.word	0x48001400
 8001b1c:	40010400 	.word	0x40010400

08001b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d141      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b3a:	d131      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b3c:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b42:	4a46      	ldr	r2, [pc, #280]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	4b43      	ldr	r3, [pc, #268]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b54:	4a41      	ldr	r2, [pc, #260]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b5c:	4b40      	ldr	r3, [pc, #256]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2232      	movs	r2, #50	@ 0x32
 8001b62:	fb02 f303 	mul.w	r3, r2, r3
 8001b66:	4a3f      	ldr	r2, [pc, #252]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b68:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6c:	0c9b      	lsrs	r3, r3, #18
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b72:	e002      	b.n	8001b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b7a:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b86:	d102      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f2      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d158      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e057      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bb0:	e04d      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb8:	d141      	bne.n	8001c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bba:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bc6:	d131      	bne.n	8001c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bce:	4a23      	ldr	r2, [pc, #140]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001be0:	4a1e      	ldr	r2, [pc, #120]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001be8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2232      	movs	r2, #50	@ 0x32
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	0c9b      	lsrs	r3, r3, #18
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bfe:	e002      	b.n	8001c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d102      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f2      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c26:	d112      	bne.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e011      	b.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c3c:	e007      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c76:	6093      	str	r3, [r2, #8]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40007000 	.word	0x40007000

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b088      	sub	sp, #32
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e2fe      	b.n	8002298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d075      	beq.n	8001d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca6:	4b97      	ldr	r3, [pc, #604]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb0:	4b94      	ldr	r3, [pc, #592]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3e>
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_OscConfig+0x44>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b8d      	ldr	r3, [pc, #564]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e2d9      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x74>
 8001cee:	4b85      	ldr	r3, [pc, #532]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a84      	ldr	r2, [pc, #528]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b7f      	ldr	r3, [pc, #508]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7b      	ldr	r2, [pc, #492]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001d20:	4b78      	ldr	r3, [pc, #480]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a77      	ldr	r2, [pc, #476]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b75      	ldr	r3, [pc, #468]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a74      	ldr	r2, [pc, #464]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe fe1a 	bl	8000978 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d48:	f7fe fe16 	bl	8000978 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	@ 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e29e      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d68:	f7fe fe06 	bl	8000978 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d70:	f7fe fe02 	bl	8000978 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	@ 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e28a      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	4b60      	ldr	r3, [pc, #384]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d075      	beq.n	8001e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9e:	4b59      	ldr	r3, [pc, #356]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da8:	4b56      	ldr	r3, [pc, #344]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b0c      	cmp	r3, #12
 8001db6:	d102      	bne.n	8001dbe <HAL_RCC_OscConfig+0x136>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d002      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x13c>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d11f      	bne.n	8001e04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x154>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e25d      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ddc:	4b49      	ldr	r3, [pc, #292]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4946      	ldr	r1, [pc, #280]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001df0:	4b45      	ldr	r3, [pc, #276]	@ (8001f08 <HAL_RCC_OscConfig+0x280>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fd73 	bl	80008e0 <HAL_InitTick>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d043      	beq.n	8001e88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e249      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a3c      	ldr	r2, [pc, #240]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fdae 	bl	8000978 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e20:	f7fe fdaa 	bl	8000978 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e232      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e32:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	061b      	lsls	r3, r3, #24
 8001e4c:	492d      	ldr	r1, [pc, #180]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
 8001e52:	e01a      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2a      	ldr	r2, [pc, #168]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe fd8a 	bl	8000978 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7fe fd86 	bl	8000978 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e20e      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e0>
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d041      	beq.n	8001f1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01c      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea4:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7fe fd63 	bl	8000978 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7fe fd5f 	bl	8000978 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1e7      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ef      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x22e>
 8001ed6:	e020      	b.n	8001f1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ede:	4a09      	ldr	r2, [pc, #36]	@ (8001f04 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7fe fd46 	bl	8000978 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eee:	e00d      	b.n	8001f0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe fd42 	bl	8000978 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d906      	bls.n	8001f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1ca      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ea      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80a6 	beq.w	8002074 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f2c:	4b84      	ldr	r3, [pc, #528]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2b4>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x2b6>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b7f      	ldr	r3, [pc, #508]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f46:	4a7e      	ldr	r2, [pc, #504]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <HAL_RCC_OscConfig+0x4bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f6a:	4b76      	ldr	r3, [pc, #472]	@ (8002144 <HAL_RCC_OscConfig+0x4bc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a75      	ldr	r2, [pc, #468]	@ (8002144 <HAL_RCC_OscConfig+0x4bc>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7fe fcff 	bl	8000978 <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7fe fcfb 	bl	8000978 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e183      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f90:	4b6c      	ldr	r3, [pc, #432]	@ (8002144 <HAL_RCC_OscConfig+0x4bc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d108      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x32e>
 8001fa4:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	4a65      	ldr	r2, [pc, #404]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb4:	e024      	b.n	8002000 <HAL_RCC_OscConfig+0x378>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d110      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x358>
 8001fbe:	4b60      	ldr	r3, [pc, #384]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc4:	4a5e      	ldr	r2, [pc, #376]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fce:	4b5c      	ldr	r3, [pc, #368]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd4:	4a5a      	ldr	r2, [pc, #360]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fde:	e00f      	b.n	8002000 <HAL_RCC_OscConfig+0x378>
 8001fe0:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fe6:	4a56      	ldr	r2, [pc, #344]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff6:	4a52      	ldr	r2, [pc, #328]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d016      	beq.n	8002036 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7fe fcb6 	bl	8000978 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7fe fcb2 	bl	8000978 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e138      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002026:	4b46      	ldr	r3, [pc, #280]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ed      	beq.n	8002010 <HAL_RCC_OscConfig+0x388>
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002036:	f7fe fc9f 	bl	8000978 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	e00a      	b.n	8002054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203e:	f7fe fc9b 	bl	8000978 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	f241 3288 	movw	r2, #5000	@ 0x1388
 800204c:	4293      	cmp	r3, r2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e121      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002054:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ed      	bne.n	800203e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002062:	7ffb      	ldrb	r3, [r7, #31]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d105      	bne.n	8002074 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002068:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206c:	4a34      	ldr	r2, [pc, #208]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b00      	cmp	r3, #0
 800207e:	d03c      	beq.n	80020fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002088:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 800208a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800208e:	4a2c      	ldr	r2, [pc, #176]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002098:	f7fe fc6e 	bl	8000978 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a0:	f7fe fc6a 	bl	8000978 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0f2      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020b2:	4b23      	ldr	r3, [pc, #140]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ef      	beq.n	80020a0 <HAL_RCC_OscConfig+0x418>
 80020c0:	e01b      	b.n	80020fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f023 0301 	bic.w	r3, r3, #1
 80020ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fc51 	bl	8000978 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020da:	f7fe fc4d 	bl	8000978 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0d5      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 80020ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1ef      	bne.n	80020da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 80c9 	beq.w	8002296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b0c      	cmp	r3, #12
 800210e:	f000 8083 	beq.w	8002218 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d15e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a08      	ldr	r2, [pc, #32]	@ (8002140 <HAL_RCC_OscConfig+0x4b8>)
 8002120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fc27 	bl	8000978 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212c:	e00c      	b.n	8002148 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800212e:	f7fe fc23 	bl	8000978 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d905      	bls.n	8002148 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0ab      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
 8002140:	40021000 	.word	0x40021000
 8002144:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002148:	4b55      	ldr	r3, [pc, #340]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1ec      	bne.n	800212e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b52      	ldr	r3, [pc, #328]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b52      	ldr	r3, [pc, #328]	@ (80022a4 <HAL_RCC_OscConfig+0x61c>)
 800215a:	4013      	ands	r3, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6a11      	ldr	r1, [r2, #32]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002164:	3a01      	subs	r2, #1
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800216e:	0212      	lsls	r2, r2, #8
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002176:	0852      	lsrs	r2, r2, #1
 8002178:	3a01      	subs	r2, #1
 800217a:	0552      	lsls	r2, r2, #21
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	0652      	lsls	r2, r2, #25
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800218e:	06d2      	lsls	r2, r2, #27
 8002190:	430a      	orrs	r2, r1
 8002192:	4943      	ldr	r1, [pc, #268]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 8002194:	4313      	orrs	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b41      	ldr	r3, [pc, #260]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a40      	ldr	r2, [pc, #256]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 800219e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a4:	4b3e      	ldr	r3, [pc, #248]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a3d      	ldr	r2, [pc, #244]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fbe2 	bl	8000978 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7fe fbde 	bl	8000978 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e066      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ca:	4b35      	ldr	r3, [pc, #212]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x530>
 80021d6:	e05e      	b.n	8002296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b31      	ldr	r3, [pc, #196]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a30      	ldr	r2, [pc, #192]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fbc8 	bl	8000978 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fbc4 	bl	8000978 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e04c      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fe:	4b28      	ldr	r3, [pc, #160]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800220a:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	4924      	ldr	r1, [pc, #144]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 8002210:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_RCC_OscConfig+0x620>)
 8002212:	4013      	ands	r3, r2
 8002214:	60cb      	str	r3, [r1, #12]
 8002216:	e03e      	b.n	8002296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e039      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002224:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <HAL_RCC_OscConfig+0x618>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1b      	ldr	r3, [r3, #32]
 8002234:	429a      	cmp	r2, r3
 8002236:	d12c      	bne.n	8002292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	3b01      	subs	r3, #1
 8002244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	429a      	cmp	r2, r3
 8002248:	d123      	bne.n	8002292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d11b      	bne.n	8002292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d113      	bne.n	8002292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d109      	bne.n	8002292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002288:	085b      	lsrs	r3, r3, #1
 800228a:	3b01      	subs	r3, #1
 800228c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	019f800c 	.word	0x019f800c
 80022a8:	feeefffc 	.word	0xfeeefffc

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e11e      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b91      	ldr	r3, [pc, #580]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 030f 	and.w	r3, r3, #15
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b8e      	ldr	r3, [pc, #568]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 020f 	bic.w	r2, r3, #15
 80022da:	498c      	ldr	r1, [pc, #560]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b8a      	ldr	r3, [pc, #552]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e106      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d073      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d129      	bne.n	800235c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002308:	4b81      	ldr	r3, [pc, #516]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0f4      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002318:	f000 f966 	bl	80025e8 <RCC_GetSysClockFreqFromPLLSource>
 800231c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4a7c      	ldr	r2, [pc, #496]	@ (8002514 <HAL_RCC_ClockConfig+0x268>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d93f      	bls.n	80023a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002326:	4b7a      	ldr	r3, [pc, #488]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d009      	beq.n	8002346 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800233a:	2b00      	cmp	r3, #0
 800233c:	d033      	beq.n	80023a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002342:	2b00      	cmp	r3, #0
 8002344:	d12f      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002346:	4b72      	ldr	r3, [pc, #456]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800234e:	4a70      	ldr	r2, [pc, #448]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002354:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e024      	b.n	80023a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d107      	bne.n	8002374 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002364:	4b6a      	ldr	r3, [pc, #424]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0c6      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002374:	4b66      	ldr	r3, [pc, #408]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0be      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002384:	f000 f8ce 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 8002388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4a61      	ldr	r2, [pc, #388]	@ (8002514 <HAL_RCC_ClockConfig+0x268>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d909      	bls.n	80023a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002392:	4b5f      	ldr	r3, [pc, #380]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800239a:	4a5d      	ldr	r2, [pc, #372]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 800239c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023a2:	2380      	movs	r3, #128	@ 0x80
 80023a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4957      	ldr	r1, [pc, #348]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b8:	f7fe fade 	bl	8000978 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7fe fada 	bl	8000978 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e095      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d023      	beq.n	800243c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002400:	4b43      	ldr	r3, [pc, #268]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	4a42      	ldr	r2, [pc, #264]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002406:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800240a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002418:	4b3d      	ldr	r3, [pc, #244]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002420:	4a3b      	ldr	r2, [pc, #236]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002422:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b39      	ldr	r3, [pc, #228]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	4936      	ldr	r1, [pc, #216]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
 800243a:	e008      	b.n	800244e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b80      	cmp	r3, #128	@ 0x80
 8002440:	d105      	bne.n	800244e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002442:	4b33      	ldr	r3, [pc, #204]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4a32      	ldr	r2, [pc, #200]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 8002448:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800244c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d21d      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 020f 	bic.w	r2, r3, #15
 8002464:	4929      	ldr	r1, [pc, #164]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800246c:	f7fe fa84 	bl	8000978 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7fe fa80 	bl	8000978 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e03b      	b.n	8002502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_RCC_ClockConfig+0x260>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d1ed      	bne.n	8002474 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4917      	ldr	r1, [pc, #92]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	490f      	ldr	r1, [pc, #60]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d6:	f000 f825 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002510 <HAL_RCC_ClockConfig+0x264>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	490c      	ldr	r1, [pc, #48]	@ (8002518 <HAL_RCC_ClockConfig+0x26c>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
 80024ea:	f003 031f 	and.w	r3, r3, #31
 80024ee:	fa22 f303 	lsr.w	r3, r2, r3
 80024f2:	4a0a      	ldr	r2, [pc, #40]	@ (800251c <HAL_RCC_ClockConfig+0x270>)
 80024f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <HAL_RCC_ClockConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f9f0 	bl	80008e0 <HAL_InitTick>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	04c4b400 	.word	0x04c4b400
 8002518:	08003a04 	.word	0x08003a04
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800252a:	4b2c      	ldr	r3, [pc, #176]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b04      	cmp	r3, #4
 8002534:	d102      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002536:	4b2a      	ldr	r3, [pc, #168]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e047      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800253c:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d102      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002548:	4b26      	ldr	r3, [pc, #152]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e03e      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800254e:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d136      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002564:	4b1d      	ldr	r3, [pc, #116]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3301      	adds	r3, #1
 8002570:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d10c      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002578:	4a1a      	ldr	r2, [pc, #104]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	4a16      	ldr	r2, [pc, #88]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002582:	68d2      	ldr	r2, [r2, #12]
 8002584:	0a12      	lsrs	r2, r2, #8
 8002586:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
      break;
 8002590:	e00c      	b.n	80025ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002592:	4a13      	ldr	r2, [pc, #76]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	4a10      	ldr	r2, [pc, #64]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800259c:	68d2      	ldr	r2, [r2, #12]
 800259e:	0a12      	lsrs	r2, r2, #8
 80025a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      break;
 80025aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0e5b      	lsrs	r3, r3, #25
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e001      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025cc:	693b      	ldr	r3, [r7, #16]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	007a1200 	.word	0x007a1200

080025e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3301      	adds	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d10c      	bne.n	8002626 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260c:	4a17      	ldr	r2, [pc, #92]	@ (800266c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	4a14      	ldr	r2, [pc, #80]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	0a12      	lsrs	r2, r2, #8
 800261a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	617b      	str	r3, [r7, #20]
    break;
 8002624:	e00c      	b.n	8002640 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002626:	4a12      	ldr	r2, [pc, #72]	@ (8002670 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4a0e      	ldr	r2, [pc, #56]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002630:	68d2      	ldr	r2, [r2, #12]
 8002632:	0a12      	lsrs	r2, r2, #8
 8002634:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
    break;
 800263e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002640:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0e5b      	lsrs	r3, r3, #25
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800265a:	687b      	ldr	r3, [r7, #4]
}
 800265c:	4618      	mov	r0, r3
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	00f42400 	.word	0x00f42400

08002674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800267c:	2300      	movs	r3, #0
 800267e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002680:	2300      	movs	r3, #0
 8002682:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8098 	beq.w	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002692:	2300      	movs	r3, #0
 8002694:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	4b43      	ldr	r3, [pc, #268]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10d      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a2:	4b40      	ldr	r3, [pc, #256]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4a3f      	ldr	r2, [pc, #252]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ae:	4b3d      	ldr	r3, [pc, #244]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026be:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a39      	ldr	r2, [pc, #228]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ca:	f7fe f955 	bl	8000978 <HAL_GetTick>
 80026ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026d0:	e009      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe f951 	bl	8000978 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d902      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	74fb      	strb	r3, [r7, #19]
        break;
 80026e4:	e005      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e6:	4b30      	ldr	r3, [pc, #192]	@ (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ef      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d159      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002702:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01e      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	429a      	cmp	r2, r3
 8002712:	d019      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002714:	4b23      	ldr	r3, [pc, #140]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002720:	4b20      	ldr	r3, [pc, #128]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002730:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002736:	4a1b      	ldr	r2, [pc, #108]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002740:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe f911 	bl	8000978 <HAL_GetTick>
 8002756:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002758:	e00b      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fe f90d 	bl	8000978 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002768:	4293      	cmp	r3, r2
 800276a:	d902      	bls.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	74fb      	strb	r3, [r7, #19]
            break;
 8002770:	e006      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002772:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ec      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10b      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800279c:	e008      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	74bb      	strb	r3, [r7, #18]
 80027a2:	e005      	b.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b0:	7c7b      	ldrb	r3, [r7, #17]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d105      	bne.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4ba6      	ldr	r3, [pc, #664]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ba:	4aa5      	ldr	r2, [pc, #660]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ce:	4ba0      	ldr	r3, [pc, #640]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d4:	f023 0203 	bic.w	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	499c      	ldr	r1, [pc, #624]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f0:	4b97      	ldr	r3, [pc, #604]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f6:	f023 020c 	bic.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4994      	ldr	r1, [pc, #592]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002812:	4b8f      	ldr	r3, [pc, #572]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	498b      	ldr	r1, [pc, #556]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002834:	4b86      	ldr	r3, [pc, #536]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	4983      	ldr	r1, [pc, #524]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002856:	4b7e      	ldr	r3, [pc, #504]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	497a      	ldr	r1, [pc, #488]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002878:	4b75      	ldr	r3, [pc, #468]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	4972      	ldr	r1, [pc, #456]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	4969      	ldr	r1, [pc, #420]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028bc:	4b64      	ldr	r3, [pc, #400]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	4961      	ldr	r1, [pc, #388]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028de:	4b5c      	ldr	r3, [pc, #368]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	4958      	ldr	r1, [pc, #352]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d015      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002900:	4b53      	ldr	r3, [pc, #332]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800290e:	4950      	ldr	r1, [pc, #320]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800291e:	d105      	bne.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002920:	4b4b      	ldr	r3, [pc, #300]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	4a4a      	ldr	r2, [pc, #296]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800292a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002934:	2b00      	cmp	r3, #0
 8002936:	d015      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002938:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	4942      	ldr	r1, [pc, #264]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002956:	d105      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002958:	4b3d      	ldr	r3, [pc, #244]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002962:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d015      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002970:	4b37      	ldr	r3, [pc, #220]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	4934      	ldr	r1, [pc, #208]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800298e:	d105      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002990:	4b2f      	ldr	r3, [pc, #188]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a2e      	ldr	r2, [pc, #184]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002996:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a8:	4b29      	ldr	r3, [pc, #164]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b6:	4926      	ldr	r1, [pc, #152]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c8:	4b21      	ldr	r3, [pc, #132]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a20      	ldr	r2, [pc, #128]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ee:	4918      	ldr	r1, [pc, #96]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029fe:	d105      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b13      	ldr	r3, [pc, #76]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d015      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	490a      	ldr	r1, [pc, #40]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a36:	d105      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a44:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <__sflush_r>:
 8002a54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a5c:	0716      	lsls	r6, r2, #28
 8002a5e:	4605      	mov	r5, r0
 8002a60:	460c      	mov	r4, r1
 8002a62:	d454      	bmi.n	8002b0e <__sflush_r+0xba>
 8002a64:	684b      	ldr	r3, [r1, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dc02      	bgt.n	8002a70 <__sflush_r+0x1c>
 8002a6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	dd48      	ble.n	8002b02 <__sflush_r+0xae>
 8002a70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a72:	2e00      	cmp	r6, #0
 8002a74:	d045      	beq.n	8002b02 <__sflush_r+0xae>
 8002a76:	2300      	movs	r3, #0
 8002a78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a7c:	682f      	ldr	r7, [r5, #0]
 8002a7e:	6a21      	ldr	r1, [r4, #32]
 8002a80:	602b      	str	r3, [r5, #0]
 8002a82:	d030      	beq.n	8002ae6 <__sflush_r+0x92>
 8002a84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a86:	89a3      	ldrh	r3, [r4, #12]
 8002a88:	0759      	lsls	r1, r3, #29
 8002a8a:	d505      	bpl.n	8002a98 <__sflush_r+0x44>
 8002a8c:	6863      	ldr	r3, [r4, #4]
 8002a8e:	1ad2      	subs	r2, r2, r3
 8002a90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a92:	b10b      	cbz	r3, 8002a98 <__sflush_r+0x44>
 8002a94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a96:	1ad2      	subs	r2, r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a9c:	6a21      	ldr	r1, [r4, #32]
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	47b0      	blx	r6
 8002aa2:	1c43      	adds	r3, r0, #1
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	d106      	bne.n	8002ab6 <__sflush_r+0x62>
 8002aa8:	6829      	ldr	r1, [r5, #0]
 8002aaa:	291d      	cmp	r1, #29
 8002aac:	d82b      	bhi.n	8002b06 <__sflush_r+0xb2>
 8002aae:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <__sflush_r+0x104>)
 8002ab0:	410a      	asrs	r2, r1
 8002ab2:	07d6      	lsls	r6, r2, #31
 8002ab4:	d427      	bmi.n	8002b06 <__sflush_r+0xb2>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	6062      	str	r2, [r4, #4]
 8002aba:	04d9      	lsls	r1, r3, #19
 8002abc:	6922      	ldr	r2, [r4, #16]
 8002abe:	6022      	str	r2, [r4, #0]
 8002ac0:	d504      	bpl.n	8002acc <__sflush_r+0x78>
 8002ac2:	1c42      	adds	r2, r0, #1
 8002ac4:	d101      	bne.n	8002aca <__sflush_r+0x76>
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	b903      	cbnz	r3, 8002acc <__sflush_r+0x78>
 8002aca:	6560      	str	r0, [r4, #84]	@ 0x54
 8002acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ace:	602f      	str	r7, [r5, #0]
 8002ad0:	b1b9      	cbz	r1, 8002b02 <__sflush_r+0xae>
 8002ad2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ad6:	4299      	cmp	r1, r3
 8002ad8:	d002      	beq.n	8002ae0 <__sflush_r+0x8c>
 8002ada:	4628      	mov	r0, r5
 8002adc:	f000 fb00 	bl	80030e0 <_free_r>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ae4:	e00d      	b.n	8002b02 <__sflush_r+0xae>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4628      	mov	r0, r5
 8002aea:	47b0      	blx	r6
 8002aec:	4602      	mov	r2, r0
 8002aee:	1c50      	adds	r0, r2, #1
 8002af0:	d1c9      	bne.n	8002a86 <__sflush_r+0x32>
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0c6      	beq.n	8002a86 <__sflush_r+0x32>
 8002af8:	2b1d      	cmp	r3, #29
 8002afa:	d001      	beq.n	8002b00 <__sflush_r+0xac>
 8002afc:	2b16      	cmp	r3, #22
 8002afe:	d11e      	bne.n	8002b3e <__sflush_r+0xea>
 8002b00:	602f      	str	r7, [r5, #0]
 8002b02:	2000      	movs	r0, #0
 8002b04:	e022      	b.n	8002b4c <__sflush_r+0xf8>
 8002b06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b0a:	b21b      	sxth	r3, r3
 8002b0c:	e01b      	b.n	8002b46 <__sflush_r+0xf2>
 8002b0e:	690f      	ldr	r7, [r1, #16]
 8002b10:	2f00      	cmp	r7, #0
 8002b12:	d0f6      	beq.n	8002b02 <__sflush_r+0xae>
 8002b14:	0793      	lsls	r3, r2, #30
 8002b16:	680e      	ldr	r6, [r1, #0]
 8002b18:	bf08      	it	eq
 8002b1a:	694b      	ldreq	r3, [r1, #20]
 8002b1c:	600f      	str	r7, [r1, #0]
 8002b1e:	bf18      	it	ne
 8002b20:	2300      	movne	r3, #0
 8002b22:	eba6 0807 	sub.w	r8, r6, r7
 8002b26:	608b      	str	r3, [r1, #8]
 8002b28:	f1b8 0f00 	cmp.w	r8, #0
 8002b2c:	dde9      	ble.n	8002b02 <__sflush_r+0xae>
 8002b2e:	6a21      	ldr	r1, [r4, #32]
 8002b30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002b32:	4643      	mov	r3, r8
 8002b34:	463a      	mov	r2, r7
 8002b36:	4628      	mov	r0, r5
 8002b38:	47b0      	blx	r6
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	dc08      	bgt.n	8002b50 <__sflush_r+0xfc>
 8002b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b46:	81a3      	strh	r3, [r4, #12]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b50:	4407      	add	r7, r0
 8002b52:	eba8 0800 	sub.w	r8, r8, r0
 8002b56:	e7e7      	b.n	8002b28 <__sflush_r+0xd4>
 8002b58:	dfbffffe 	.word	0xdfbffffe

08002b5c <_fflush_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	690b      	ldr	r3, [r1, #16]
 8002b60:	4605      	mov	r5, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	b913      	cbnz	r3, 8002b6c <_fflush_r+0x10>
 8002b66:	2500      	movs	r5, #0
 8002b68:	4628      	mov	r0, r5
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	b118      	cbz	r0, 8002b76 <_fflush_r+0x1a>
 8002b6e:	6a03      	ldr	r3, [r0, #32]
 8002b70:	b90b      	cbnz	r3, 8002b76 <_fflush_r+0x1a>
 8002b72:	f000 f8bb 	bl	8002cec <__sinit>
 8002b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f3      	beq.n	8002b66 <_fflush_r+0xa>
 8002b7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b80:	07d0      	lsls	r0, r2, #31
 8002b82:	d404      	bmi.n	8002b8e <_fflush_r+0x32>
 8002b84:	0599      	lsls	r1, r3, #22
 8002b86:	d402      	bmi.n	8002b8e <_fflush_r+0x32>
 8002b88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b8a:	f000 faa6 	bl	80030da <__retarget_lock_acquire_recursive>
 8002b8e:	4628      	mov	r0, r5
 8002b90:	4621      	mov	r1, r4
 8002b92:	f7ff ff5f 	bl	8002a54 <__sflush_r>
 8002b96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b98:	07da      	lsls	r2, r3, #31
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	d4e4      	bmi.n	8002b68 <_fflush_r+0xc>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	059b      	lsls	r3, r3, #22
 8002ba2:	d4e1      	bmi.n	8002b68 <_fflush_r+0xc>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ba6:	f000 fa99 	bl	80030dc <__retarget_lock_release_recursive>
 8002baa:	e7dd      	b.n	8002b68 <_fflush_r+0xc>

08002bac <fflush>:
 8002bac:	4601      	mov	r1, r0
 8002bae:	b920      	cbnz	r0, 8002bba <fflush+0xe>
 8002bb0:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <fflush+0x18>)
 8002bb2:	4905      	ldr	r1, [pc, #20]	@ (8002bc8 <fflush+0x1c>)
 8002bb4:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <fflush+0x20>)
 8002bb6:	f000 b8b1 	b.w	8002d1c <_fwalk_sglue>
 8002bba:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <fflush+0x24>)
 8002bbc:	6818      	ldr	r0, [r3, #0]
 8002bbe:	f7ff bfcd 	b.w	8002b5c <_fflush_r>
 8002bc2:	bf00      	nop
 8002bc4:	2000000c 	.word	0x2000000c
 8002bc8:	08002b5d 	.word	0x08002b5d
 8002bcc:	2000001c 	.word	0x2000001c
 8002bd0:	20000018 	.word	0x20000018

08002bd4 <std>:
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	4604      	mov	r4, r0
 8002bda:	e9c0 3300 	strd	r3, r3, [r0]
 8002bde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002be2:	6083      	str	r3, [r0, #8]
 8002be4:	8181      	strh	r1, [r0, #12]
 8002be6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002be8:	81c2      	strh	r2, [r0, #14]
 8002bea:	6183      	str	r3, [r0, #24]
 8002bec:	4619      	mov	r1, r3
 8002bee:	2208      	movs	r2, #8
 8002bf0:	305c      	adds	r0, #92	@ 0x5c
 8002bf2:	f000 f9f9 	bl	8002fe8 <memset>
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <std+0x58>)
 8002bf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <std+0x5c>)
 8002bfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <std+0x60>)
 8002c00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <std+0x64>)
 8002c04:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <std+0x68>)
 8002c08:	6224      	str	r4, [r4, #32]
 8002c0a:	429c      	cmp	r4, r3
 8002c0c:	d006      	beq.n	8002c1c <std+0x48>
 8002c0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c12:	4294      	cmp	r4, r2
 8002c14:	d002      	beq.n	8002c1c <std+0x48>
 8002c16:	33d0      	adds	r3, #208	@ 0xd0
 8002c18:	429c      	cmp	r4, r3
 8002c1a:	d105      	bne.n	8002c28 <std+0x54>
 8002c1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c24:	f000 ba58 	b.w	80030d8 <__retarget_lock_init_recursive>
 8002c28:	bd10      	pop	{r4, pc}
 8002c2a:	bf00      	nop
 8002c2c:	08002e39 	.word	0x08002e39
 8002c30:	08002e5b 	.word	0x08002e5b
 8002c34:	08002e93 	.word	0x08002e93
 8002c38:	08002eb7 	.word	0x08002eb7
 8002c3c:	200000f0 	.word	0x200000f0

08002c40 <stdio_exit_handler>:
 8002c40:	4a02      	ldr	r2, [pc, #8]	@ (8002c4c <stdio_exit_handler+0xc>)
 8002c42:	4903      	ldr	r1, [pc, #12]	@ (8002c50 <stdio_exit_handler+0x10>)
 8002c44:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <stdio_exit_handler+0x14>)
 8002c46:	f000 b869 	b.w	8002d1c <_fwalk_sglue>
 8002c4a:	bf00      	nop
 8002c4c:	2000000c 	.word	0x2000000c
 8002c50:	08002b5d 	.word	0x08002b5d
 8002c54:	2000001c 	.word	0x2000001c

08002c58 <cleanup_stdio>:
 8002c58:	6841      	ldr	r1, [r0, #4]
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c8c <cleanup_stdio+0x34>)
 8002c5c:	4299      	cmp	r1, r3
 8002c5e:	b510      	push	{r4, lr}
 8002c60:	4604      	mov	r4, r0
 8002c62:	d001      	beq.n	8002c68 <cleanup_stdio+0x10>
 8002c64:	f7ff ff7a 	bl	8002b5c <_fflush_r>
 8002c68:	68a1      	ldr	r1, [r4, #8]
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <cleanup_stdio+0x38>)
 8002c6c:	4299      	cmp	r1, r3
 8002c6e:	d002      	beq.n	8002c76 <cleanup_stdio+0x1e>
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7ff ff73 	bl	8002b5c <_fflush_r>
 8002c76:	68e1      	ldr	r1, [r4, #12]
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <cleanup_stdio+0x3c>)
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d004      	beq.n	8002c88 <cleanup_stdio+0x30>
 8002c7e:	4620      	mov	r0, r4
 8002c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c84:	f7ff bf6a 	b.w	8002b5c <_fflush_r>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200000f0 	.word	0x200000f0
 8002c90:	20000158 	.word	0x20000158
 8002c94:	200001c0 	.word	0x200001c0

08002c98 <global_stdio_init.part.0>:
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <global_stdio_init.part.0+0x30>)
 8002c9c:	4c0b      	ldr	r4, [pc, #44]	@ (8002ccc <global_stdio_init.part.0+0x34>)
 8002c9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd0 <global_stdio_init.part.0+0x38>)
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	f7ff ff94 	bl	8002bd4 <std>
 8002cac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	2109      	movs	r1, #9
 8002cb4:	f7ff ff8e 	bl	8002bd4 <std>
 8002cb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cc2:	2112      	movs	r1, #18
 8002cc4:	f7ff bf86 	b.w	8002bd4 <std>
 8002cc8:	20000228 	.word	0x20000228
 8002ccc:	200000f0 	.word	0x200000f0
 8002cd0:	08002c41 	.word	0x08002c41

08002cd4 <__sfp_lock_acquire>:
 8002cd4:	4801      	ldr	r0, [pc, #4]	@ (8002cdc <__sfp_lock_acquire+0x8>)
 8002cd6:	f000 ba00 	b.w	80030da <__retarget_lock_acquire_recursive>
 8002cda:	bf00      	nop
 8002cdc:	20000231 	.word	0x20000231

08002ce0 <__sfp_lock_release>:
 8002ce0:	4801      	ldr	r0, [pc, #4]	@ (8002ce8 <__sfp_lock_release+0x8>)
 8002ce2:	f000 b9fb 	b.w	80030dc <__retarget_lock_release_recursive>
 8002ce6:	bf00      	nop
 8002ce8:	20000231 	.word	0x20000231

08002cec <__sinit>:
 8002cec:	b510      	push	{r4, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	f7ff fff0 	bl	8002cd4 <__sfp_lock_acquire>
 8002cf4:	6a23      	ldr	r3, [r4, #32]
 8002cf6:	b11b      	cbz	r3, 8002d00 <__sinit+0x14>
 8002cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cfc:	f7ff bff0 	b.w	8002ce0 <__sfp_lock_release>
 8002d00:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <__sinit+0x28>)
 8002d02:	6223      	str	r3, [r4, #32]
 8002d04:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <__sinit+0x2c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f5      	bne.n	8002cf8 <__sinit+0xc>
 8002d0c:	f7ff ffc4 	bl	8002c98 <global_stdio_init.part.0>
 8002d10:	e7f2      	b.n	8002cf8 <__sinit+0xc>
 8002d12:	bf00      	nop
 8002d14:	08002c59 	.word	0x08002c59
 8002d18:	20000228 	.word	0x20000228

08002d1c <_fwalk_sglue>:
 8002d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d20:	4607      	mov	r7, r0
 8002d22:	4688      	mov	r8, r1
 8002d24:	4614      	mov	r4, r2
 8002d26:	2600      	movs	r6, #0
 8002d28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d2c:	f1b9 0901 	subs.w	r9, r9, #1
 8002d30:	d505      	bpl.n	8002d3e <_fwalk_sglue+0x22>
 8002d32:	6824      	ldr	r4, [r4, #0]
 8002d34:	2c00      	cmp	r4, #0
 8002d36:	d1f7      	bne.n	8002d28 <_fwalk_sglue+0xc>
 8002d38:	4630      	mov	r0, r6
 8002d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d3e:	89ab      	ldrh	r3, [r5, #12]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d907      	bls.n	8002d54 <_fwalk_sglue+0x38>
 8002d44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	d003      	beq.n	8002d54 <_fwalk_sglue+0x38>
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	4638      	mov	r0, r7
 8002d50:	47c0      	blx	r8
 8002d52:	4306      	orrs	r6, r0
 8002d54:	3568      	adds	r5, #104	@ 0x68
 8002d56:	e7e9      	b.n	8002d2c <_fwalk_sglue+0x10>

08002d58 <iprintf>:
 8002d58:	b40f      	push	{r0, r1, r2, r3}
 8002d5a:	b507      	push	{r0, r1, r2, lr}
 8002d5c:	4906      	ldr	r1, [pc, #24]	@ (8002d78 <iprintf+0x20>)
 8002d5e:	ab04      	add	r3, sp, #16
 8002d60:	6808      	ldr	r0, [r1, #0]
 8002d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d66:	6881      	ldr	r1, [r0, #8]
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	f000 fadb 	bl	8003324 <_vfiprintf_r>
 8002d6e:	b003      	add	sp, #12
 8002d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d74:	b004      	add	sp, #16
 8002d76:	4770      	bx	lr
 8002d78:	20000018 	.word	0x20000018

08002d7c <_puts_r>:
 8002d7c:	6a03      	ldr	r3, [r0, #32]
 8002d7e:	b570      	push	{r4, r5, r6, lr}
 8002d80:	6884      	ldr	r4, [r0, #8]
 8002d82:	4605      	mov	r5, r0
 8002d84:	460e      	mov	r6, r1
 8002d86:	b90b      	cbnz	r3, 8002d8c <_puts_r+0x10>
 8002d88:	f7ff ffb0 	bl	8002cec <__sinit>
 8002d8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d8e:	07db      	lsls	r3, r3, #31
 8002d90:	d405      	bmi.n	8002d9e <_puts_r+0x22>
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	0598      	lsls	r0, r3, #22
 8002d96:	d402      	bmi.n	8002d9e <_puts_r+0x22>
 8002d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d9a:	f000 f99e 	bl	80030da <__retarget_lock_acquire_recursive>
 8002d9e:	89a3      	ldrh	r3, [r4, #12]
 8002da0:	0719      	lsls	r1, r3, #28
 8002da2:	d502      	bpl.n	8002daa <_puts_r+0x2e>
 8002da4:	6923      	ldr	r3, [r4, #16]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d135      	bne.n	8002e16 <_puts_r+0x9a>
 8002daa:	4621      	mov	r1, r4
 8002dac:	4628      	mov	r0, r5
 8002dae:	f000 f8c5 	bl	8002f3c <__swsetup_r>
 8002db2:	b380      	cbz	r0, 8002e16 <_puts_r+0x9a>
 8002db4:	f04f 35ff 	mov.w	r5, #4294967295
 8002db8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dba:	07da      	lsls	r2, r3, #31
 8002dbc:	d405      	bmi.n	8002dca <_puts_r+0x4e>
 8002dbe:	89a3      	ldrh	r3, [r4, #12]
 8002dc0:	059b      	lsls	r3, r3, #22
 8002dc2:	d402      	bmi.n	8002dca <_puts_r+0x4e>
 8002dc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002dc6:	f000 f989 	bl	80030dc <__retarget_lock_release_recursive>
 8002dca:	4628      	mov	r0, r5
 8002dcc:	bd70      	pop	{r4, r5, r6, pc}
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da04      	bge.n	8002ddc <_puts_r+0x60>
 8002dd2:	69a2      	ldr	r2, [r4, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	dc17      	bgt.n	8002e08 <_puts_r+0x8c>
 8002dd8:	290a      	cmp	r1, #10
 8002dda:	d015      	beq.n	8002e08 <_puts_r+0x8c>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	6022      	str	r2, [r4, #0]
 8002de2:	7019      	strb	r1, [r3, #0]
 8002de4:	68a3      	ldr	r3, [r4, #8]
 8002de6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60a3      	str	r3, [r4, #8]
 8002dee:	2900      	cmp	r1, #0
 8002df0:	d1ed      	bne.n	8002dce <_puts_r+0x52>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	da11      	bge.n	8002e1a <_puts_r+0x9e>
 8002df6:	4622      	mov	r2, r4
 8002df8:	210a      	movs	r1, #10
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	f000 f85f 	bl	8002ebe <__swbuf_r>
 8002e00:	3001      	adds	r0, #1
 8002e02:	d0d7      	beq.n	8002db4 <_puts_r+0x38>
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7d7      	b.n	8002db8 <_puts_r+0x3c>
 8002e08:	4622      	mov	r2, r4
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f000 f857 	bl	8002ebe <__swbuf_r>
 8002e10:	3001      	adds	r0, #1
 8002e12:	d1e7      	bne.n	8002de4 <_puts_r+0x68>
 8002e14:	e7ce      	b.n	8002db4 <_puts_r+0x38>
 8002e16:	3e01      	subs	r6, #1
 8002e18:	e7e4      	b.n	8002de4 <_puts_r+0x68>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	6022      	str	r2, [r4, #0]
 8002e20:	220a      	movs	r2, #10
 8002e22:	701a      	strb	r2, [r3, #0]
 8002e24:	e7ee      	b.n	8002e04 <_puts_r+0x88>
	...

08002e28 <puts>:
 8002e28:	4b02      	ldr	r3, [pc, #8]	@ (8002e34 <puts+0xc>)
 8002e2a:	4601      	mov	r1, r0
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	f7ff bfa5 	b.w	8002d7c <_puts_r>
 8002e32:	bf00      	nop
 8002e34:	20000018 	.word	0x20000018

08002e38 <__sread>:
 8002e38:	b510      	push	{r4, lr}
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e40:	f000 f8fc 	bl	800303c <_read_r>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	bfab      	itete	ge
 8002e48:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e4a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e4c:	181b      	addge	r3, r3, r0
 8002e4e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e52:	bfac      	ite	ge
 8002e54:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e56:	81a3      	strhlt	r3, [r4, #12]
 8002e58:	bd10      	pop	{r4, pc}

08002e5a <__swrite>:
 8002e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e5e:	461f      	mov	r7, r3
 8002e60:	898b      	ldrh	r3, [r1, #12]
 8002e62:	05db      	lsls	r3, r3, #23
 8002e64:	4605      	mov	r5, r0
 8002e66:	460c      	mov	r4, r1
 8002e68:	4616      	mov	r6, r2
 8002e6a:	d505      	bpl.n	8002e78 <__swrite+0x1e>
 8002e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e70:	2302      	movs	r3, #2
 8002e72:	2200      	movs	r2, #0
 8002e74:	f000 f8d0 	bl	8003018 <_lseek_r>
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e82:	81a3      	strh	r3, [r4, #12]
 8002e84:	4632      	mov	r2, r6
 8002e86:	463b      	mov	r3, r7
 8002e88:	4628      	mov	r0, r5
 8002e8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e8e:	f000 b8e7 	b.w	8003060 <_write_r>

08002e92 <__sseek>:
 8002e92:	b510      	push	{r4, lr}
 8002e94:	460c      	mov	r4, r1
 8002e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e9a:	f000 f8bd 	bl	8003018 <_lseek_r>
 8002e9e:	1c43      	adds	r3, r0, #1
 8002ea0:	89a3      	ldrh	r3, [r4, #12]
 8002ea2:	bf15      	itete	ne
 8002ea4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ea6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002eaa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002eae:	81a3      	strheq	r3, [r4, #12]
 8002eb0:	bf18      	it	ne
 8002eb2:	81a3      	strhne	r3, [r4, #12]
 8002eb4:	bd10      	pop	{r4, pc}

08002eb6 <__sclose>:
 8002eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eba:	f000 b89d 	b.w	8002ff8 <_close_r>

08002ebe <__swbuf_r>:
 8002ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec0:	460e      	mov	r6, r1
 8002ec2:	4614      	mov	r4, r2
 8002ec4:	4605      	mov	r5, r0
 8002ec6:	b118      	cbz	r0, 8002ed0 <__swbuf_r+0x12>
 8002ec8:	6a03      	ldr	r3, [r0, #32]
 8002eca:	b90b      	cbnz	r3, 8002ed0 <__swbuf_r+0x12>
 8002ecc:	f7ff ff0e 	bl	8002cec <__sinit>
 8002ed0:	69a3      	ldr	r3, [r4, #24]
 8002ed2:	60a3      	str	r3, [r4, #8]
 8002ed4:	89a3      	ldrh	r3, [r4, #12]
 8002ed6:	071a      	lsls	r2, r3, #28
 8002ed8:	d501      	bpl.n	8002ede <__swbuf_r+0x20>
 8002eda:	6923      	ldr	r3, [r4, #16]
 8002edc:	b943      	cbnz	r3, 8002ef0 <__swbuf_r+0x32>
 8002ede:	4621      	mov	r1, r4
 8002ee0:	4628      	mov	r0, r5
 8002ee2:	f000 f82b 	bl	8002f3c <__swsetup_r>
 8002ee6:	b118      	cbz	r0, 8002ef0 <__swbuf_r+0x32>
 8002ee8:	f04f 37ff 	mov.w	r7, #4294967295
 8002eec:	4638      	mov	r0, r7
 8002eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	6922      	ldr	r2, [r4, #16]
 8002ef4:	1a98      	subs	r0, r3, r2
 8002ef6:	6963      	ldr	r3, [r4, #20]
 8002ef8:	b2f6      	uxtb	r6, r6
 8002efa:	4283      	cmp	r3, r0
 8002efc:	4637      	mov	r7, r6
 8002efe:	dc05      	bgt.n	8002f0c <__swbuf_r+0x4e>
 8002f00:	4621      	mov	r1, r4
 8002f02:	4628      	mov	r0, r5
 8002f04:	f7ff fe2a 	bl	8002b5c <_fflush_r>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d1ed      	bne.n	8002ee8 <__swbuf_r+0x2a>
 8002f0c:	68a3      	ldr	r3, [r4, #8]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	60a3      	str	r3, [r4, #8]
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	1c5a      	adds	r2, r3, #1
 8002f16:	6022      	str	r2, [r4, #0]
 8002f18:	701e      	strb	r6, [r3, #0]
 8002f1a:	6962      	ldr	r2, [r4, #20]
 8002f1c:	1c43      	adds	r3, r0, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d004      	beq.n	8002f2c <__swbuf_r+0x6e>
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	07db      	lsls	r3, r3, #31
 8002f26:	d5e1      	bpl.n	8002eec <__swbuf_r+0x2e>
 8002f28:	2e0a      	cmp	r6, #10
 8002f2a:	d1df      	bne.n	8002eec <__swbuf_r+0x2e>
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	4628      	mov	r0, r5
 8002f30:	f7ff fe14 	bl	8002b5c <_fflush_r>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d0d9      	beq.n	8002eec <__swbuf_r+0x2e>
 8002f38:	e7d6      	b.n	8002ee8 <__swbuf_r+0x2a>
	...

08002f3c <__swsetup_r>:
 8002f3c:	b538      	push	{r3, r4, r5, lr}
 8002f3e:	4b29      	ldr	r3, [pc, #164]	@ (8002fe4 <__swsetup_r+0xa8>)
 8002f40:	4605      	mov	r5, r0
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	460c      	mov	r4, r1
 8002f46:	b118      	cbz	r0, 8002f50 <__swsetup_r+0x14>
 8002f48:	6a03      	ldr	r3, [r0, #32]
 8002f4a:	b90b      	cbnz	r3, 8002f50 <__swsetup_r+0x14>
 8002f4c:	f7ff fece 	bl	8002cec <__sinit>
 8002f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f54:	0719      	lsls	r1, r3, #28
 8002f56:	d422      	bmi.n	8002f9e <__swsetup_r+0x62>
 8002f58:	06da      	lsls	r2, r3, #27
 8002f5a:	d407      	bmi.n	8002f6c <__swsetup_r+0x30>
 8002f5c:	2209      	movs	r2, #9
 8002f5e:	602a      	str	r2, [r5, #0]
 8002f60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f64:	81a3      	strh	r3, [r4, #12]
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	e033      	b.n	8002fd4 <__swsetup_r+0x98>
 8002f6c:	0758      	lsls	r0, r3, #29
 8002f6e:	d512      	bpl.n	8002f96 <__swsetup_r+0x5a>
 8002f70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f72:	b141      	cbz	r1, 8002f86 <__swsetup_r+0x4a>
 8002f74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f78:	4299      	cmp	r1, r3
 8002f7a:	d002      	beq.n	8002f82 <__swsetup_r+0x46>
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f000 f8af 	bl	80030e0 <_free_r>
 8002f82:	2300      	movs	r3, #0
 8002f84:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	6923      	ldr	r3, [r4, #16]
 8002f94:	6023      	str	r3, [r4, #0]
 8002f96:	89a3      	ldrh	r3, [r4, #12]
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	81a3      	strh	r3, [r4, #12]
 8002f9e:	6923      	ldr	r3, [r4, #16]
 8002fa0:	b94b      	cbnz	r3, 8002fb6 <__swsetup_r+0x7a>
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fac:	d003      	beq.n	8002fb6 <__swsetup_r+0x7a>
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f000 fc83 	bl	80038bc <__smakebuf_r>
 8002fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fba:	f013 0201 	ands.w	r2, r3, #1
 8002fbe:	d00a      	beq.n	8002fd6 <__swsetup_r+0x9a>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	60a2      	str	r2, [r4, #8]
 8002fc4:	6962      	ldr	r2, [r4, #20]
 8002fc6:	4252      	negs	r2, r2
 8002fc8:	61a2      	str	r2, [r4, #24]
 8002fca:	6922      	ldr	r2, [r4, #16]
 8002fcc:	b942      	cbnz	r2, 8002fe0 <__swsetup_r+0xa4>
 8002fce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002fd2:	d1c5      	bne.n	8002f60 <__swsetup_r+0x24>
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
 8002fd6:	0799      	lsls	r1, r3, #30
 8002fd8:	bf58      	it	pl
 8002fda:	6962      	ldrpl	r2, [r4, #20]
 8002fdc:	60a2      	str	r2, [r4, #8]
 8002fde:	e7f4      	b.n	8002fca <__swsetup_r+0x8e>
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	e7f7      	b.n	8002fd4 <__swsetup_r+0x98>
 8002fe4:	20000018 	.word	0x20000018

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <_close_r>:
 8002ff8:	b538      	push	{r3, r4, r5, lr}
 8002ffa:	4d06      	ldr	r5, [pc, #24]	@ (8003014 <_close_r+0x1c>)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	4604      	mov	r4, r0
 8003000:	4608      	mov	r0, r1
 8003002:	602b      	str	r3, [r5, #0]
 8003004:	f7fd fbad 	bl	8000762 <_close>
 8003008:	1c43      	adds	r3, r0, #1
 800300a:	d102      	bne.n	8003012 <_close_r+0x1a>
 800300c:	682b      	ldr	r3, [r5, #0]
 800300e:	b103      	cbz	r3, 8003012 <_close_r+0x1a>
 8003010:	6023      	str	r3, [r4, #0]
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	2000022c 	.word	0x2000022c

08003018 <_lseek_r>:
 8003018:	b538      	push	{r3, r4, r5, lr}
 800301a:	4d07      	ldr	r5, [pc, #28]	@ (8003038 <_lseek_r+0x20>)
 800301c:	4604      	mov	r4, r0
 800301e:	4608      	mov	r0, r1
 8003020:	4611      	mov	r1, r2
 8003022:	2200      	movs	r2, #0
 8003024:	602a      	str	r2, [r5, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	f7fd fbc2 	bl	80007b0 <_lseek>
 800302c:	1c43      	adds	r3, r0, #1
 800302e:	d102      	bne.n	8003036 <_lseek_r+0x1e>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	b103      	cbz	r3, 8003036 <_lseek_r+0x1e>
 8003034:	6023      	str	r3, [r4, #0]
 8003036:	bd38      	pop	{r3, r4, r5, pc}
 8003038:	2000022c 	.word	0x2000022c

0800303c <_read_r>:
 800303c:	b538      	push	{r3, r4, r5, lr}
 800303e:	4d07      	ldr	r5, [pc, #28]	@ (800305c <_read_r+0x20>)
 8003040:	4604      	mov	r4, r0
 8003042:	4608      	mov	r0, r1
 8003044:	4611      	mov	r1, r2
 8003046:	2200      	movs	r2, #0
 8003048:	602a      	str	r2, [r5, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f7fd fb50 	bl	80006f0 <_read>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_read_r+0x1e>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_read_r+0x1e>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	2000022c 	.word	0x2000022c

08003060 <_write_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4d07      	ldr	r5, [pc, #28]	@ (8003080 <_write_r+0x20>)
 8003064:	4604      	mov	r4, r0
 8003066:	4608      	mov	r0, r1
 8003068:	4611      	mov	r1, r2
 800306a:	2200      	movs	r2, #0
 800306c:	602a      	str	r2, [r5, #0]
 800306e:	461a      	mov	r2, r3
 8003070:	f7fd fb5b 	bl	800072a <_write>
 8003074:	1c43      	adds	r3, r0, #1
 8003076:	d102      	bne.n	800307e <_write_r+0x1e>
 8003078:	682b      	ldr	r3, [r5, #0]
 800307a:	b103      	cbz	r3, 800307e <_write_r+0x1e>
 800307c:	6023      	str	r3, [r4, #0]
 800307e:	bd38      	pop	{r3, r4, r5, pc}
 8003080:	2000022c 	.word	0x2000022c

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	@ (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000018 	.word	0x20000018

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4d0d      	ldr	r5, [pc, #52]	@ (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	@ (80030cc <__libc_init_array+0x3c>)
 8003096:	1b64      	subs	r4, r4, r5
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2600      	movs	r6, #0
 800309c:	42a6      	cmp	r6, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4d0b      	ldr	r5, [pc, #44]	@ (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	@ (80030d4 <__libc_init_array+0x44>)
 80030a4:	f000 fc78 	bl	8003998 <_init>
 80030a8:	1b64      	subs	r4, r4, r5
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2600      	movs	r6, #0
 80030ae:	42a6      	cmp	r6, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b8:	4798      	blx	r3
 80030ba:	3601      	adds	r6, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c2:	4798      	blx	r3
 80030c4:	3601      	adds	r6, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	08003a60 	.word	0x08003a60
 80030cc:	08003a60 	.word	0x08003a60
 80030d0:	08003a60 	.word	0x08003a60
 80030d4:	08003a64 	.word	0x08003a64

080030d8 <__retarget_lock_init_recursive>:
 80030d8:	4770      	bx	lr

080030da <__retarget_lock_acquire_recursive>:
 80030da:	4770      	bx	lr

080030dc <__retarget_lock_release_recursive>:
 80030dc:	4770      	bx	lr
	...

080030e0 <_free_r>:
 80030e0:	b538      	push	{r3, r4, r5, lr}
 80030e2:	4605      	mov	r5, r0
 80030e4:	2900      	cmp	r1, #0
 80030e6:	d041      	beq.n	800316c <_free_r+0x8c>
 80030e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ec:	1f0c      	subs	r4, r1, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bfb8      	it	lt
 80030f2:	18e4      	addlt	r4, r4, r3
 80030f4:	f000 f8e0 	bl	80032b8 <__malloc_lock>
 80030f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003170 <_free_r+0x90>)
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	b933      	cbnz	r3, 800310c <_free_r+0x2c>
 80030fe:	6063      	str	r3, [r4, #4]
 8003100:	6014      	str	r4, [r2, #0]
 8003102:	4628      	mov	r0, r5
 8003104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003108:	f000 b8dc 	b.w	80032c4 <__malloc_unlock>
 800310c:	42a3      	cmp	r3, r4
 800310e:	d908      	bls.n	8003122 <_free_r+0x42>
 8003110:	6820      	ldr	r0, [r4, #0]
 8003112:	1821      	adds	r1, r4, r0
 8003114:	428b      	cmp	r3, r1
 8003116:	bf01      	itttt	eq
 8003118:	6819      	ldreq	r1, [r3, #0]
 800311a:	685b      	ldreq	r3, [r3, #4]
 800311c:	1809      	addeq	r1, r1, r0
 800311e:	6021      	streq	r1, [r4, #0]
 8003120:	e7ed      	b.n	80030fe <_free_r+0x1e>
 8003122:	461a      	mov	r2, r3
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b10b      	cbz	r3, 800312c <_free_r+0x4c>
 8003128:	42a3      	cmp	r3, r4
 800312a:	d9fa      	bls.n	8003122 <_free_r+0x42>
 800312c:	6811      	ldr	r1, [r2, #0]
 800312e:	1850      	adds	r0, r2, r1
 8003130:	42a0      	cmp	r0, r4
 8003132:	d10b      	bne.n	800314c <_free_r+0x6c>
 8003134:	6820      	ldr	r0, [r4, #0]
 8003136:	4401      	add	r1, r0
 8003138:	1850      	adds	r0, r2, r1
 800313a:	4283      	cmp	r3, r0
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	d1e0      	bne.n	8003102 <_free_r+0x22>
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	6053      	str	r3, [r2, #4]
 8003146:	4408      	add	r0, r1
 8003148:	6010      	str	r0, [r2, #0]
 800314a:	e7da      	b.n	8003102 <_free_r+0x22>
 800314c:	d902      	bls.n	8003154 <_free_r+0x74>
 800314e:	230c      	movs	r3, #12
 8003150:	602b      	str	r3, [r5, #0]
 8003152:	e7d6      	b.n	8003102 <_free_r+0x22>
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	1821      	adds	r1, r4, r0
 8003158:	428b      	cmp	r3, r1
 800315a:	bf04      	itt	eq
 800315c:	6819      	ldreq	r1, [r3, #0]
 800315e:	685b      	ldreq	r3, [r3, #4]
 8003160:	6063      	str	r3, [r4, #4]
 8003162:	bf04      	itt	eq
 8003164:	1809      	addeq	r1, r1, r0
 8003166:	6021      	streq	r1, [r4, #0]
 8003168:	6054      	str	r4, [r2, #4]
 800316a:	e7ca      	b.n	8003102 <_free_r+0x22>
 800316c:	bd38      	pop	{r3, r4, r5, pc}
 800316e:	bf00      	nop
 8003170:	20000238 	.word	0x20000238

08003174 <sbrk_aligned>:
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	4e0f      	ldr	r6, [pc, #60]	@ (80031b4 <sbrk_aligned+0x40>)
 8003178:	460c      	mov	r4, r1
 800317a:	6831      	ldr	r1, [r6, #0]
 800317c:	4605      	mov	r5, r0
 800317e:	b911      	cbnz	r1, 8003186 <sbrk_aligned+0x12>
 8003180:	f000 fbfa 	bl	8003978 <_sbrk_r>
 8003184:	6030      	str	r0, [r6, #0]
 8003186:	4621      	mov	r1, r4
 8003188:	4628      	mov	r0, r5
 800318a:	f000 fbf5 	bl	8003978 <_sbrk_r>
 800318e:	1c43      	adds	r3, r0, #1
 8003190:	d103      	bne.n	800319a <sbrk_aligned+0x26>
 8003192:	f04f 34ff 	mov.w	r4, #4294967295
 8003196:	4620      	mov	r0, r4
 8003198:	bd70      	pop	{r4, r5, r6, pc}
 800319a:	1cc4      	adds	r4, r0, #3
 800319c:	f024 0403 	bic.w	r4, r4, #3
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	d0f8      	beq.n	8003196 <sbrk_aligned+0x22>
 80031a4:	1a21      	subs	r1, r4, r0
 80031a6:	4628      	mov	r0, r5
 80031a8:	f000 fbe6 	bl	8003978 <_sbrk_r>
 80031ac:	3001      	adds	r0, #1
 80031ae:	d1f2      	bne.n	8003196 <sbrk_aligned+0x22>
 80031b0:	e7ef      	b.n	8003192 <sbrk_aligned+0x1e>
 80031b2:	bf00      	nop
 80031b4:	20000234 	.word	0x20000234

080031b8 <_malloc_r>:
 80031b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031bc:	1ccd      	adds	r5, r1, #3
 80031be:	f025 0503 	bic.w	r5, r5, #3
 80031c2:	3508      	adds	r5, #8
 80031c4:	2d0c      	cmp	r5, #12
 80031c6:	bf38      	it	cc
 80031c8:	250c      	movcc	r5, #12
 80031ca:	2d00      	cmp	r5, #0
 80031cc:	4606      	mov	r6, r0
 80031ce:	db01      	blt.n	80031d4 <_malloc_r+0x1c>
 80031d0:	42a9      	cmp	r1, r5
 80031d2:	d904      	bls.n	80031de <_malloc_r+0x26>
 80031d4:	230c      	movs	r3, #12
 80031d6:	6033      	str	r3, [r6, #0]
 80031d8:	2000      	movs	r0, #0
 80031da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032b4 <_malloc_r+0xfc>
 80031e2:	f000 f869 	bl	80032b8 <__malloc_lock>
 80031e6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ea:	461c      	mov	r4, r3
 80031ec:	bb44      	cbnz	r4, 8003240 <_malloc_r+0x88>
 80031ee:	4629      	mov	r1, r5
 80031f0:	4630      	mov	r0, r6
 80031f2:	f7ff ffbf 	bl	8003174 <sbrk_aligned>
 80031f6:	1c43      	adds	r3, r0, #1
 80031f8:	4604      	mov	r4, r0
 80031fa:	d158      	bne.n	80032ae <_malloc_r+0xf6>
 80031fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003200:	4627      	mov	r7, r4
 8003202:	2f00      	cmp	r7, #0
 8003204:	d143      	bne.n	800328e <_malloc_r+0xd6>
 8003206:	2c00      	cmp	r4, #0
 8003208:	d04b      	beq.n	80032a2 <_malloc_r+0xea>
 800320a:	6823      	ldr	r3, [r4, #0]
 800320c:	4639      	mov	r1, r7
 800320e:	4630      	mov	r0, r6
 8003210:	eb04 0903 	add.w	r9, r4, r3
 8003214:	f000 fbb0 	bl	8003978 <_sbrk_r>
 8003218:	4581      	cmp	r9, r0
 800321a:	d142      	bne.n	80032a2 <_malloc_r+0xea>
 800321c:	6821      	ldr	r1, [r4, #0]
 800321e:	1a6d      	subs	r5, r5, r1
 8003220:	4629      	mov	r1, r5
 8003222:	4630      	mov	r0, r6
 8003224:	f7ff ffa6 	bl	8003174 <sbrk_aligned>
 8003228:	3001      	adds	r0, #1
 800322a:	d03a      	beq.n	80032a2 <_malloc_r+0xea>
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	442b      	add	r3, r5
 8003230:	6023      	str	r3, [r4, #0]
 8003232:	f8d8 3000 	ldr.w	r3, [r8]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	bb62      	cbnz	r2, 8003294 <_malloc_r+0xdc>
 800323a:	f8c8 7000 	str.w	r7, [r8]
 800323e:	e00f      	b.n	8003260 <_malloc_r+0xa8>
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	1b52      	subs	r2, r2, r5
 8003244:	d420      	bmi.n	8003288 <_malloc_r+0xd0>
 8003246:	2a0b      	cmp	r2, #11
 8003248:	d917      	bls.n	800327a <_malloc_r+0xc2>
 800324a:	1961      	adds	r1, r4, r5
 800324c:	42a3      	cmp	r3, r4
 800324e:	6025      	str	r5, [r4, #0]
 8003250:	bf18      	it	ne
 8003252:	6059      	strne	r1, [r3, #4]
 8003254:	6863      	ldr	r3, [r4, #4]
 8003256:	bf08      	it	eq
 8003258:	f8c8 1000 	streq.w	r1, [r8]
 800325c:	5162      	str	r2, [r4, r5]
 800325e:	604b      	str	r3, [r1, #4]
 8003260:	4630      	mov	r0, r6
 8003262:	f000 f82f 	bl	80032c4 <__malloc_unlock>
 8003266:	f104 000b 	add.w	r0, r4, #11
 800326a:	1d23      	adds	r3, r4, #4
 800326c:	f020 0007 	bic.w	r0, r0, #7
 8003270:	1ac2      	subs	r2, r0, r3
 8003272:	bf1c      	itt	ne
 8003274:	1a1b      	subne	r3, r3, r0
 8003276:	50a3      	strne	r3, [r4, r2]
 8003278:	e7af      	b.n	80031da <_malloc_r+0x22>
 800327a:	6862      	ldr	r2, [r4, #4]
 800327c:	42a3      	cmp	r3, r4
 800327e:	bf0c      	ite	eq
 8003280:	f8c8 2000 	streq.w	r2, [r8]
 8003284:	605a      	strne	r2, [r3, #4]
 8003286:	e7eb      	b.n	8003260 <_malloc_r+0xa8>
 8003288:	4623      	mov	r3, r4
 800328a:	6864      	ldr	r4, [r4, #4]
 800328c:	e7ae      	b.n	80031ec <_malloc_r+0x34>
 800328e:	463c      	mov	r4, r7
 8003290:	687f      	ldr	r7, [r7, #4]
 8003292:	e7b6      	b.n	8003202 <_malloc_r+0x4a>
 8003294:	461a      	mov	r2, r3
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	42a3      	cmp	r3, r4
 800329a:	d1fb      	bne.n	8003294 <_malloc_r+0xdc>
 800329c:	2300      	movs	r3, #0
 800329e:	6053      	str	r3, [r2, #4]
 80032a0:	e7de      	b.n	8003260 <_malloc_r+0xa8>
 80032a2:	230c      	movs	r3, #12
 80032a4:	6033      	str	r3, [r6, #0]
 80032a6:	4630      	mov	r0, r6
 80032a8:	f000 f80c 	bl	80032c4 <__malloc_unlock>
 80032ac:	e794      	b.n	80031d8 <_malloc_r+0x20>
 80032ae:	6005      	str	r5, [r0, #0]
 80032b0:	e7d6      	b.n	8003260 <_malloc_r+0xa8>
 80032b2:	bf00      	nop
 80032b4:	20000238 	.word	0x20000238

080032b8 <__malloc_lock>:
 80032b8:	4801      	ldr	r0, [pc, #4]	@ (80032c0 <__malloc_lock+0x8>)
 80032ba:	f7ff bf0e 	b.w	80030da <__retarget_lock_acquire_recursive>
 80032be:	bf00      	nop
 80032c0:	20000230 	.word	0x20000230

080032c4 <__malloc_unlock>:
 80032c4:	4801      	ldr	r0, [pc, #4]	@ (80032cc <__malloc_unlock+0x8>)
 80032c6:	f7ff bf09 	b.w	80030dc <__retarget_lock_release_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000230 	.word	0x20000230

080032d0 <__sfputc_r>:
 80032d0:	6893      	ldr	r3, [r2, #8]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	b410      	push	{r4}
 80032d8:	6093      	str	r3, [r2, #8]
 80032da:	da08      	bge.n	80032ee <__sfputc_r+0x1e>
 80032dc:	6994      	ldr	r4, [r2, #24]
 80032de:	42a3      	cmp	r3, r4
 80032e0:	db01      	blt.n	80032e6 <__sfputc_r+0x16>
 80032e2:	290a      	cmp	r1, #10
 80032e4:	d103      	bne.n	80032ee <__sfputc_r+0x1e>
 80032e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ea:	f7ff bde8 	b.w	8002ebe <__swbuf_r>
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	1c58      	adds	r0, r3, #1
 80032f2:	6010      	str	r0, [r2, #0]
 80032f4:	7019      	strb	r1, [r3, #0]
 80032f6:	4608      	mov	r0, r1
 80032f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <__sfputs_r>:
 80032fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003300:	4606      	mov	r6, r0
 8003302:	460f      	mov	r7, r1
 8003304:	4614      	mov	r4, r2
 8003306:	18d5      	adds	r5, r2, r3
 8003308:	42ac      	cmp	r4, r5
 800330a:	d101      	bne.n	8003310 <__sfputs_r+0x12>
 800330c:	2000      	movs	r0, #0
 800330e:	e007      	b.n	8003320 <__sfputs_r+0x22>
 8003310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003314:	463a      	mov	r2, r7
 8003316:	4630      	mov	r0, r6
 8003318:	f7ff ffda 	bl	80032d0 <__sfputc_r>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d1f3      	bne.n	8003308 <__sfputs_r+0xa>
 8003320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003324 <_vfiprintf_r>:
 8003324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003328:	460d      	mov	r5, r1
 800332a:	b09d      	sub	sp, #116	@ 0x74
 800332c:	4614      	mov	r4, r2
 800332e:	4698      	mov	r8, r3
 8003330:	4606      	mov	r6, r0
 8003332:	b118      	cbz	r0, 800333c <_vfiprintf_r+0x18>
 8003334:	6a03      	ldr	r3, [r0, #32]
 8003336:	b90b      	cbnz	r3, 800333c <_vfiprintf_r+0x18>
 8003338:	f7ff fcd8 	bl	8002cec <__sinit>
 800333c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800333e:	07d9      	lsls	r1, r3, #31
 8003340:	d405      	bmi.n	800334e <_vfiprintf_r+0x2a>
 8003342:	89ab      	ldrh	r3, [r5, #12]
 8003344:	059a      	lsls	r2, r3, #22
 8003346:	d402      	bmi.n	800334e <_vfiprintf_r+0x2a>
 8003348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800334a:	f7ff fec6 	bl	80030da <__retarget_lock_acquire_recursive>
 800334e:	89ab      	ldrh	r3, [r5, #12]
 8003350:	071b      	lsls	r3, r3, #28
 8003352:	d501      	bpl.n	8003358 <_vfiprintf_r+0x34>
 8003354:	692b      	ldr	r3, [r5, #16]
 8003356:	b99b      	cbnz	r3, 8003380 <_vfiprintf_r+0x5c>
 8003358:	4629      	mov	r1, r5
 800335a:	4630      	mov	r0, r6
 800335c:	f7ff fdee 	bl	8002f3c <__swsetup_r>
 8003360:	b170      	cbz	r0, 8003380 <_vfiprintf_r+0x5c>
 8003362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003364:	07dc      	lsls	r4, r3, #31
 8003366:	d504      	bpl.n	8003372 <_vfiprintf_r+0x4e>
 8003368:	f04f 30ff 	mov.w	r0, #4294967295
 800336c:	b01d      	add	sp, #116	@ 0x74
 800336e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003372:	89ab      	ldrh	r3, [r5, #12]
 8003374:	0598      	lsls	r0, r3, #22
 8003376:	d4f7      	bmi.n	8003368 <_vfiprintf_r+0x44>
 8003378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800337a:	f7ff feaf 	bl	80030dc <__retarget_lock_release_recursive>
 800337e:	e7f3      	b.n	8003368 <_vfiprintf_r+0x44>
 8003380:	2300      	movs	r3, #0
 8003382:	9309      	str	r3, [sp, #36]	@ 0x24
 8003384:	2320      	movs	r3, #32
 8003386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800338a:	f8cd 800c 	str.w	r8, [sp, #12]
 800338e:	2330      	movs	r3, #48	@ 0x30
 8003390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003540 <_vfiprintf_r+0x21c>
 8003394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003398:	f04f 0901 	mov.w	r9, #1
 800339c:	4623      	mov	r3, r4
 800339e:	469a      	mov	sl, r3
 80033a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033a4:	b10a      	cbz	r2, 80033aa <_vfiprintf_r+0x86>
 80033a6:	2a25      	cmp	r2, #37	@ 0x25
 80033a8:	d1f9      	bne.n	800339e <_vfiprintf_r+0x7a>
 80033aa:	ebba 0b04 	subs.w	fp, sl, r4
 80033ae:	d00b      	beq.n	80033c8 <_vfiprintf_r+0xa4>
 80033b0:	465b      	mov	r3, fp
 80033b2:	4622      	mov	r2, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	4630      	mov	r0, r6
 80033b8:	f7ff ffa1 	bl	80032fe <__sfputs_r>
 80033bc:	3001      	adds	r0, #1
 80033be:	f000 80a7 	beq.w	8003510 <_vfiprintf_r+0x1ec>
 80033c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033c4:	445a      	add	r2, fp
 80033c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80033c8:	f89a 3000 	ldrb.w	r3, [sl]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 809f 	beq.w	8003510 <_vfiprintf_r+0x1ec>
 80033d2:	2300      	movs	r3, #0
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033dc:	f10a 0a01 	add.w	sl, sl, #1
 80033e0:	9304      	str	r3, [sp, #16]
 80033e2:	9307      	str	r3, [sp, #28]
 80033e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80033ea:	4654      	mov	r4, sl
 80033ec:	2205      	movs	r2, #5
 80033ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033f2:	4853      	ldr	r0, [pc, #332]	@ (8003540 <_vfiprintf_r+0x21c>)
 80033f4:	f7fc ff14 	bl	8000220 <memchr>
 80033f8:	9a04      	ldr	r2, [sp, #16]
 80033fa:	b9d8      	cbnz	r0, 8003434 <_vfiprintf_r+0x110>
 80033fc:	06d1      	lsls	r1, r2, #27
 80033fe:	bf44      	itt	mi
 8003400:	2320      	movmi	r3, #32
 8003402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003406:	0713      	lsls	r3, r2, #28
 8003408:	bf44      	itt	mi
 800340a:	232b      	movmi	r3, #43	@ 0x2b
 800340c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003410:	f89a 3000 	ldrb.w	r3, [sl]
 8003414:	2b2a      	cmp	r3, #42	@ 0x2a
 8003416:	d015      	beq.n	8003444 <_vfiprintf_r+0x120>
 8003418:	9a07      	ldr	r2, [sp, #28]
 800341a:	4654      	mov	r4, sl
 800341c:	2000      	movs	r0, #0
 800341e:	f04f 0c0a 	mov.w	ip, #10
 8003422:	4621      	mov	r1, r4
 8003424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003428:	3b30      	subs	r3, #48	@ 0x30
 800342a:	2b09      	cmp	r3, #9
 800342c:	d94b      	bls.n	80034c6 <_vfiprintf_r+0x1a2>
 800342e:	b1b0      	cbz	r0, 800345e <_vfiprintf_r+0x13a>
 8003430:	9207      	str	r2, [sp, #28]
 8003432:	e014      	b.n	800345e <_vfiprintf_r+0x13a>
 8003434:	eba0 0308 	sub.w	r3, r0, r8
 8003438:	fa09 f303 	lsl.w	r3, r9, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	9304      	str	r3, [sp, #16]
 8003440:	46a2      	mov	sl, r4
 8003442:	e7d2      	b.n	80033ea <_vfiprintf_r+0xc6>
 8003444:	9b03      	ldr	r3, [sp, #12]
 8003446:	1d19      	adds	r1, r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	9103      	str	r1, [sp, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	bfbb      	ittet	lt
 8003450:	425b      	neglt	r3, r3
 8003452:	f042 0202 	orrlt.w	r2, r2, #2
 8003456:	9307      	strge	r3, [sp, #28]
 8003458:	9307      	strlt	r3, [sp, #28]
 800345a:	bfb8      	it	lt
 800345c:	9204      	strlt	r2, [sp, #16]
 800345e:	7823      	ldrb	r3, [r4, #0]
 8003460:	2b2e      	cmp	r3, #46	@ 0x2e
 8003462:	d10a      	bne.n	800347a <_vfiprintf_r+0x156>
 8003464:	7863      	ldrb	r3, [r4, #1]
 8003466:	2b2a      	cmp	r3, #42	@ 0x2a
 8003468:	d132      	bne.n	80034d0 <_vfiprintf_r+0x1ac>
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	1d1a      	adds	r2, r3, #4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	9203      	str	r2, [sp, #12]
 8003472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003476:	3402      	adds	r4, #2
 8003478:	9305      	str	r3, [sp, #20]
 800347a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003550 <_vfiprintf_r+0x22c>
 800347e:	7821      	ldrb	r1, [r4, #0]
 8003480:	2203      	movs	r2, #3
 8003482:	4650      	mov	r0, sl
 8003484:	f7fc fecc 	bl	8000220 <memchr>
 8003488:	b138      	cbz	r0, 800349a <_vfiprintf_r+0x176>
 800348a:	9b04      	ldr	r3, [sp, #16]
 800348c:	eba0 000a 	sub.w	r0, r0, sl
 8003490:	2240      	movs	r2, #64	@ 0x40
 8003492:	4082      	lsls	r2, r0
 8003494:	4313      	orrs	r3, r2
 8003496:	3401      	adds	r4, #1
 8003498:	9304      	str	r3, [sp, #16]
 800349a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800349e:	4829      	ldr	r0, [pc, #164]	@ (8003544 <_vfiprintf_r+0x220>)
 80034a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034a4:	2206      	movs	r2, #6
 80034a6:	f7fc febb 	bl	8000220 <memchr>
 80034aa:	2800      	cmp	r0, #0
 80034ac:	d03f      	beq.n	800352e <_vfiprintf_r+0x20a>
 80034ae:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <_vfiprintf_r+0x224>)
 80034b0:	bb1b      	cbnz	r3, 80034fa <_vfiprintf_r+0x1d6>
 80034b2:	9b03      	ldr	r3, [sp, #12]
 80034b4:	3307      	adds	r3, #7
 80034b6:	f023 0307 	bic.w	r3, r3, #7
 80034ba:	3308      	adds	r3, #8
 80034bc:	9303      	str	r3, [sp, #12]
 80034be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034c0:	443b      	add	r3, r7
 80034c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034c4:	e76a      	b.n	800339c <_vfiprintf_r+0x78>
 80034c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ca:	460c      	mov	r4, r1
 80034cc:	2001      	movs	r0, #1
 80034ce:	e7a8      	b.n	8003422 <_vfiprintf_r+0xfe>
 80034d0:	2300      	movs	r3, #0
 80034d2:	3401      	adds	r4, #1
 80034d4:	9305      	str	r3, [sp, #20]
 80034d6:	4619      	mov	r1, r3
 80034d8:	f04f 0c0a 	mov.w	ip, #10
 80034dc:	4620      	mov	r0, r4
 80034de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e2:	3a30      	subs	r2, #48	@ 0x30
 80034e4:	2a09      	cmp	r2, #9
 80034e6:	d903      	bls.n	80034f0 <_vfiprintf_r+0x1cc>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0c6      	beq.n	800347a <_vfiprintf_r+0x156>
 80034ec:	9105      	str	r1, [sp, #20]
 80034ee:	e7c4      	b.n	800347a <_vfiprintf_r+0x156>
 80034f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80034f4:	4604      	mov	r4, r0
 80034f6:	2301      	movs	r3, #1
 80034f8:	e7f0      	b.n	80034dc <_vfiprintf_r+0x1b8>
 80034fa:	ab03      	add	r3, sp, #12
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	462a      	mov	r2, r5
 8003500:	4b12      	ldr	r3, [pc, #72]	@ (800354c <_vfiprintf_r+0x228>)
 8003502:	a904      	add	r1, sp, #16
 8003504:	4630      	mov	r0, r6
 8003506:	f3af 8000 	nop.w
 800350a:	4607      	mov	r7, r0
 800350c:	1c78      	adds	r0, r7, #1
 800350e:	d1d6      	bne.n	80034be <_vfiprintf_r+0x19a>
 8003510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003512:	07d9      	lsls	r1, r3, #31
 8003514:	d405      	bmi.n	8003522 <_vfiprintf_r+0x1fe>
 8003516:	89ab      	ldrh	r3, [r5, #12]
 8003518:	059a      	lsls	r2, r3, #22
 800351a:	d402      	bmi.n	8003522 <_vfiprintf_r+0x1fe>
 800351c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800351e:	f7ff fddd 	bl	80030dc <__retarget_lock_release_recursive>
 8003522:	89ab      	ldrh	r3, [r5, #12]
 8003524:	065b      	lsls	r3, r3, #25
 8003526:	f53f af1f 	bmi.w	8003368 <_vfiprintf_r+0x44>
 800352a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800352c:	e71e      	b.n	800336c <_vfiprintf_r+0x48>
 800352e:	ab03      	add	r3, sp, #12
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	462a      	mov	r2, r5
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <_vfiprintf_r+0x228>)
 8003536:	a904      	add	r1, sp, #16
 8003538:	4630      	mov	r0, r6
 800353a:	f000 f879 	bl	8003630 <_printf_i>
 800353e:	e7e4      	b.n	800350a <_vfiprintf_r+0x1e6>
 8003540:	08003a24 	.word	0x08003a24
 8003544:	08003a2e 	.word	0x08003a2e
 8003548:	00000000 	.word	0x00000000
 800354c:	080032ff 	.word	0x080032ff
 8003550:	08003a2a 	.word	0x08003a2a

08003554 <_printf_common>:
 8003554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003558:	4616      	mov	r6, r2
 800355a:	4698      	mov	r8, r3
 800355c:	688a      	ldr	r2, [r1, #8]
 800355e:	690b      	ldr	r3, [r1, #16]
 8003560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003564:	4293      	cmp	r3, r2
 8003566:	bfb8      	it	lt
 8003568:	4613      	movlt	r3, r2
 800356a:	6033      	str	r3, [r6, #0]
 800356c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003570:	4607      	mov	r7, r0
 8003572:	460c      	mov	r4, r1
 8003574:	b10a      	cbz	r2, 800357a <_printf_common+0x26>
 8003576:	3301      	adds	r3, #1
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	0699      	lsls	r1, r3, #26
 800357e:	bf42      	ittt	mi
 8003580:	6833      	ldrmi	r3, [r6, #0]
 8003582:	3302      	addmi	r3, #2
 8003584:	6033      	strmi	r3, [r6, #0]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	f015 0506 	ands.w	r5, r5, #6
 800358c:	d106      	bne.n	800359c <_printf_common+0x48>
 800358e:	f104 0a19 	add.w	sl, r4, #25
 8003592:	68e3      	ldr	r3, [r4, #12]
 8003594:	6832      	ldr	r2, [r6, #0]
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	42ab      	cmp	r3, r5
 800359a:	dc26      	bgt.n	80035ea <_printf_common+0x96>
 800359c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035a0:	6822      	ldr	r2, [r4, #0]
 80035a2:	3b00      	subs	r3, #0
 80035a4:	bf18      	it	ne
 80035a6:	2301      	movne	r3, #1
 80035a8:	0692      	lsls	r2, r2, #26
 80035aa:	d42b      	bmi.n	8003604 <_printf_common+0xb0>
 80035ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035b0:	4641      	mov	r1, r8
 80035b2:	4638      	mov	r0, r7
 80035b4:	47c8      	blx	r9
 80035b6:	3001      	adds	r0, #1
 80035b8:	d01e      	beq.n	80035f8 <_printf_common+0xa4>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	6922      	ldr	r2, [r4, #16]
 80035be:	f003 0306 	and.w	r3, r3, #6
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf02      	ittt	eq
 80035c6:	68e5      	ldreq	r5, [r4, #12]
 80035c8:	6833      	ldreq	r3, [r6, #0]
 80035ca:	1aed      	subeq	r5, r5, r3
 80035cc:	68a3      	ldr	r3, [r4, #8]
 80035ce:	bf0c      	ite	eq
 80035d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d4:	2500      	movne	r5, #0
 80035d6:	4293      	cmp	r3, r2
 80035d8:	bfc4      	itt	gt
 80035da:	1a9b      	subgt	r3, r3, r2
 80035dc:	18ed      	addgt	r5, r5, r3
 80035de:	2600      	movs	r6, #0
 80035e0:	341a      	adds	r4, #26
 80035e2:	42b5      	cmp	r5, r6
 80035e4:	d11a      	bne.n	800361c <_printf_common+0xc8>
 80035e6:	2000      	movs	r0, #0
 80035e8:	e008      	b.n	80035fc <_printf_common+0xa8>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4652      	mov	r2, sl
 80035ee:	4641      	mov	r1, r8
 80035f0:	4638      	mov	r0, r7
 80035f2:	47c8      	blx	r9
 80035f4:	3001      	adds	r0, #1
 80035f6:	d103      	bne.n	8003600 <_printf_common+0xac>
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003600:	3501      	adds	r5, #1
 8003602:	e7c6      	b.n	8003592 <_printf_common+0x3e>
 8003604:	18e1      	adds	r1, r4, r3
 8003606:	1c5a      	adds	r2, r3, #1
 8003608:	2030      	movs	r0, #48	@ 0x30
 800360a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800360e:	4422      	add	r2, r4
 8003610:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003618:	3302      	adds	r3, #2
 800361a:	e7c7      	b.n	80035ac <_printf_common+0x58>
 800361c:	2301      	movs	r3, #1
 800361e:	4622      	mov	r2, r4
 8003620:	4641      	mov	r1, r8
 8003622:	4638      	mov	r0, r7
 8003624:	47c8      	blx	r9
 8003626:	3001      	adds	r0, #1
 8003628:	d0e6      	beq.n	80035f8 <_printf_common+0xa4>
 800362a:	3601      	adds	r6, #1
 800362c:	e7d9      	b.n	80035e2 <_printf_common+0x8e>
	...

08003630 <_printf_i>:
 8003630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	7e0f      	ldrb	r7, [r1, #24]
 8003636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003638:	2f78      	cmp	r7, #120	@ 0x78
 800363a:	4691      	mov	r9, r2
 800363c:	4680      	mov	r8, r0
 800363e:	460c      	mov	r4, r1
 8003640:	469a      	mov	sl, r3
 8003642:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003646:	d807      	bhi.n	8003658 <_printf_i+0x28>
 8003648:	2f62      	cmp	r7, #98	@ 0x62
 800364a:	d80a      	bhi.n	8003662 <_printf_i+0x32>
 800364c:	2f00      	cmp	r7, #0
 800364e:	f000 80d2 	beq.w	80037f6 <_printf_i+0x1c6>
 8003652:	2f58      	cmp	r7, #88	@ 0x58
 8003654:	f000 80b9 	beq.w	80037ca <_printf_i+0x19a>
 8003658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800365c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003660:	e03a      	b.n	80036d8 <_printf_i+0xa8>
 8003662:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003666:	2b15      	cmp	r3, #21
 8003668:	d8f6      	bhi.n	8003658 <_printf_i+0x28>
 800366a:	a101      	add	r1, pc, #4	@ (adr r1, 8003670 <_printf_i+0x40>)
 800366c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003670:	080036c9 	.word	0x080036c9
 8003674:	080036dd 	.word	0x080036dd
 8003678:	08003659 	.word	0x08003659
 800367c:	08003659 	.word	0x08003659
 8003680:	08003659 	.word	0x08003659
 8003684:	08003659 	.word	0x08003659
 8003688:	080036dd 	.word	0x080036dd
 800368c:	08003659 	.word	0x08003659
 8003690:	08003659 	.word	0x08003659
 8003694:	08003659 	.word	0x08003659
 8003698:	08003659 	.word	0x08003659
 800369c:	080037dd 	.word	0x080037dd
 80036a0:	08003707 	.word	0x08003707
 80036a4:	08003797 	.word	0x08003797
 80036a8:	08003659 	.word	0x08003659
 80036ac:	08003659 	.word	0x08003659
 80036b0:	080037ff 	.word	0x080037ff
 80036b4:	08003659 	.word	0x08003659
 80036b8:	08003707 	.word	0x08003707
 80036bc:	08003659 	.word	0x08003659
 80036c0:	08003659 	.word	0x08003659
 80036c4:	0800379f 	.word	0x0800379f
 80036c8:	6833      	ldr	r3, [r6, #0]
 80036ca:	1d1a      	adds	r2, r3, #4
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6032      	str	r2, [r6, #0]
 80036d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80036d8:	2301      	movs	r3, #1
 80036da:	e09d      	b.n	8003818 <_printf_i+0x1e8>
 80036dc:	6833      	ldr	r3, [r6, #0]
 80036de:	6820      	ldr	r0, [r4, #0]
 80036e0:	1d19      	adds	r1, r3, #4
 80036e2:	6031      	str	r1, [r6, #0]
 80036e4:	0606      	lsls	r6, r0, #24
 80036e6:	d501      	bpl.n	80036ec <_printf_i+0xbc>
 80036e8:	681d      	ldr	r5, [r3, #0]
 80036ea:	e003      	b.n	80036f4 <_printf_i+0xc4>
 80036ec:	0645      	lsls	r5, r0, #25
 80036ee:	d5fb      	bpl.n	80036e8 <_printf_i+0xb8>
 80036f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036f4:	2d00      	cmp	r5, #0
 80036f6:	da03      	bge.n	8003700 <_printf_i+0xd0>
 80036f8:	232d      	movs	r3, #45	@ 0x2d
 80036fa:	426d      	negs	r5, r5
 80036fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003700:	4859      	ldr	r0, [pc, #356]	@ (8003868 <_printf_i+0x238>)
 8003702:	230a      	movs	r3, #10
 8003704:	e011      	b.n	800372a <_printf_i+0xfa>
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	6833      	ldr	r3, [r6, #0]
 800370a:	0608      	lsls	r0, r1, #24
 800370c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003710:	d402      	bmi.n	8003718 <_printf_i+0xe8>
 8003712:	0649      	lsls	r1, r1, #25
 8003714:	bf48      	it	mi
 8003716:	b2ad      	uxthmi	r5, r5
 8003718:	2f6f      	cmp	r7, #111	@ 0x6f
 800371a:	4853      	ldr	r0, [pc, #332]	@ (8003868 <_printf_i+0x238>)
 800371c:	6033      	str	r3, [r6, #0]
 800371e:	bf14      	ite	ne
 8003720:	230a      	movne	r3, #10
 8003722:	2308      	moveq	r3, #8
 8003724:	2100      	movs	r1, #0
 8003726:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800372a:	6866      	ldr	r6, [r4, #4]
 800372c:	60a6      	str	r6, [r4, #8]
 800372e:	2e00      	cmp	r6, #0
 8003730:	bfa2      	ittt	ge
 8003732:	6821      	ldrge	r1, [r4, #0]
 8003734:	f021 0104 	bicge.w	r1, r1, #4
 8003738:	6021      	strge	r1, [r4, #0]
 800373a:	b90d      	cbnz	r5, 8003740 <_printf_i+0x110>
 800373c:	2e00      	cmp	r6, #0
 800373e:	d04b      	beq.n	80037d8 <_printf_i+0x1a8>
 8003740:	4616      	mov	r6, r2
 8003742:	fbb5 f1f3 	udiv	r1, r5, r3
 8003746:	fb03 5711 	mls	r7, r3, r1, r5
 800374a:	5dc7      	ldrb	r7, [r0, r7]
 800374c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003750:	462f      	mov	r7, r5
 8003752:	42bb      	cmp	r3, r7
 8003754:	460d      	mov	r5, r1
 8003756:	d9f4      	bls.n	8003742 <_printf_i+0x112>
 8003758:	2b08      	cmp	r3, #8
 800375a:	d10b      	bne.n	8003774 <_printf_i+0x144>
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	07df      	lsls	r7, r3, #31
 8003760:	d508      	bpl.n	8003774 <_printf_i+0x144>
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	6861      	ldr	r1, [r4, #4]
 8003766:	4299      	cmp	r1, r3
 8003768:	bfde      	ittt	le
 800376a:	2330      	movle	r3, #48	@ 0x30
 800376c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003774:	1b92      	subs	r2, r2, r6
 8003776:	6122      	str	r2, [r4, #16]
 8003778:	f8cd a000 	str.w	sl, [sp]
 800377c:	464b      	mov	r3, r9
 800377e:	aa03      	add	r2, sp, #12
 8003780:	4621      	mov	r1, r4
 8003782:	4640      	mov	r0, r8
 8003784:	f7ff fee6 	bl	8003554 <_printf_common>
 8003788:	3001      	adds	r0, #1
 800378a:	d14a      	bne.n	8003822 <_printf_i+0x1f2>
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	b004      	add	sp, #16
 8003792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	f043 0320 	orr.w	r3, r3, #32
 800379c:	6023      	str	r3, [r4, #0]
 800379e:	4833      	ldr	r0, [pc, #204]	@ (800386c <_printf_i+0x23c>)
 80037a0:	2778      	movs	r7, #120	@ 0x78
 80037a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	6831      	ldr	r1, [r6, #0]
 80037aa:	061f      	lsls	r7, r3, #24
 80037ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80037b0:	d402      	bmi.n	80037b8 <_printf_i+0x188>
 80037b2:	065f      	lsls	r7, r3, #25
 80037b4:	bf48      	it	mi
 80037b6:	b2ad      	uxthmi	r5, r5
 80037b8:	6031      	str	r1, [r6, #0]
 80037ba:	07d9      	lsls	r1, r3, #31
 80037bc:	bf44      	itt	mi
 80037be:	f043 0320 	orrmi.w	r3, r3, #32
 80037c2:	6023      	strmi	r3, [r4, #0]
 80037c4:	b11d      	cbz	r5, 80037ce <_printf_i+0x19e>
 80037c6:	2310      	movs	r3, #16
 80037c8:	e7ac      	b.n	8003724 <_printf_i+0xf4>
 80037ca:	4827      	ldr	r0, [pc, #156]	@ (8003868 <_printf_i+0x238>)
 80037cc:	e7e9      	b.n	80037a2 <_printf_i+0x172>
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	f023 0320 	bic.w	r3, r3, #32
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	e7f6      	b.n	80037c6 <_printf_i+0x196>
 80037d8:	4616      	mov	r6, r2
 80037da:	e7bd      	b.n	8003758 <_printf_i+0x128>
 80037dc:	6833      	ldr	r3, [r6, #0]
 80037de:	6825      	ldr	r5, [r4, #0]
 80037e0:	6961      	ldr	r1, [r4, #20]
 80037e2:	1d18      	adds	r0, r3, #4
 80037e4:	6030      	str	r0, [r6, #0]
 80037e6:	062e      	lsls	r6, r5, #24
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	d501      	bpl.n	80037f0 <_printf_i+0x1c0>
 80037ec:	6019      	str	r1, [r3, #0]
 80037ee:	e002      	b.n	80037f6 <_printf_i+0x1c6>
 80037f0:	0668      	lsls	r0, r5, #25
 80037f2:	d5fb      	bpl.n	80037ec <_printf_i+0x1bc>
 80037f4:	8019      	strh	r1, [r3, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	4616      	mov	r6, r2
 80037fc:	e7bc      	b.n	8003778 <_printf_i+0x148>
 80037fe:	6833      	ldr	r3, [r6, #0]
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	6032      	str	r2, [r6, #0]
 8003804:	681e      	ldr	r6, [r3, #0]
 8003806:	6862      	ldr	r2, [r4, #4]
 8003808:	2100      	movs	r1, #0
 800380a:	4630      	mov	r0, r6
 800380c:	f7fc fd08 	bl	8000220 <memchr>
 8003810:	b108      	cbz	r0, 8003816 <_printf_i+0x1e6>
 8003812:	1b80      	subs	r0, r0, r6
 8003814:	6060      	str	r0, [r4, #4]
 8003816:	6863      	ldr	r3, [r4, #4]
 8003818:	6123      	str	r3, [r4, #16]
 800381a:	2300      	movs	r3, #0
 800381c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003820:	e7aa      	b.n	8003778 <_printf_i+0x148>
 8003822:	6923      	ldr	r3, [r4, #16]
 8003824:	4632      	mov	r2, r6
 8003826:	4649      	mov	r1, r9
 8003828:	4640      	mov	r0, r8
 800382a:	47d0      	blx	sl
 800382c:	3001      	adds	r0, #1
 800382e:	d0ad      	beq.n	800378c <_printf_i+0x15c>
 8003830:	6823      	ldr	r3, [r4, #0]
 8003832:	079b      	lsls	r3, r3, #30
 8003834:	d413      	bmi.n	800385e <_printf_i+0x22e>
 8003836:	68e0      	ldr	r0, [r4, #12]
 8003838:	9b03      	ldr	r3, [sp, #12]
 800383a:	4298      	cmp	r0, r3
 800383c:	bfb8      	it	lt
 800383e:	4618      	movlt	r0, r3
 8003840:	e7a6      	b.n	8003790 <_printf_i+0x160>
 8003842:	2301      	movs	r3, #1
 8003844:	4632      	mov	r2, r6
 8003846:	4649      	mov	r1, r9
 8003848:	4640      	mov	r0, r8
 800384a:	47d0      	blx	sl
 800384c:	3001      	adds	r0, #1
 800384e:	d09d      	beq.n	800378c <_printf_i+0x15c>
 8003850:	3501      	adds	r5, #1
 8003852:	68e3      	ldr	r3, [r4, #12]
 8003854:	9903      	ldr	r1, [sp, #12]
 8003856:	1a5b      	subs	r3, r3, r1
 8003858:	42ab      	cmp	r3, r5
 800385a:	dcf2      	bgt.n	8003842 <_printf_i+0x212>
 800385c:	e7eb      	b.n	8003836 <_printf_i+0x206>
 800385e:	2500      	movs	r5, #0
 8003860:	f104 0619 	add.w	r6, r4, #25
 8003864:	e7f5      	b.n	8003852 <_printf_i+0x222>
 8003866:	bf00      	nop
 8003868:	08003a35 	.word	0x08003a35
 800386c:	08003a46 	.word	0x08003a46

08003870 <__swhatbuf_r>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	460c      	mov	r4, r1
 8003874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003878:	2900      	cmp	r1, #0
 800387a:	b096      	sub	sp, #88	@ 0x58
 800387c:	4615      	mov	r5, r2
 800387e:	461e      	mov	r6, r3
 8003880:	da0d      	bge.n	800389e <__swhatbuf_r+0x2e>
 8003882:	89a3      	ldrh	r3, [r4, #12]
 8003884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003888:	f04f 0100 	mov.w	r1, #0
 800388c:	bf14      	ite	ne
 800388e:	2340      	movne	r3, #64	@ 0x40
 8003890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003894:	2000      	movs	r0, #0
 8003896:	6031      	str	r1, [r6, #0]
 8003898:	602b      	str	r3, [r5, #0]
 800389a:	b016      	add	sp, #88	@ 0x58
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	466a      	mov	r2, sp
 80038a0:	f000 f848 	bl	8003934 <_fstat_r>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	dbec      	blt.n	8003882 <__swhatbuf_r+0x12>
 80038a8:	9901      	ldr	r1, [sp, #4]
 80038aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038b2:	4259      	negs	r1, r3
 80038b4:	4159      	adcs	r1, r3
 80038b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038ba:	e7eb      	b.n	8003894 <__swhatbuf_r+0x24>

080038bc <__smakebuf_r>:
 80038bc:	898b      	ldrh	r3, [r1, #12]
 80038be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038c0:	079d      	lsls	r5, r3, #30
 80038c2:	4606      	mov	r6, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	d507      	bpl.n	80038d8 <__smakebuf_r+0x1c>
 80038c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038cc:	6023      	str	r3, [r4, #0]
 80038ce:	6123      	str	r3, [r4, #16]
 80038d0:	2301      	movs	r3, #1
 80038d2:	6163      	str	r3, [r4, #20]
 80038d4:	b003      	add	sp, #12
 80038d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038d8:	ab01      	add	r3, sp, #4
 80038da:	466a      	mov	r2, sp
 80038dc:	f7ff ffc8 	bl	8003870 <__swhatbuf_r>
 80038e0:	9f00      	ldr	r7, [sp, #0]
 80038e2:	4605      	mov	r5, r0
 80038e4:	4639      	mov	r1, r7
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7ff fc66 	bl	80031b8 <_malloc_r>
 80038ec:	b948      	cbnz	r0, 8003902 <__smakebuf_r+0x46>
 80038ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038f2:	059a      	lsls	r2, r3, #22
 80038f4:	d4ee      	bmi.n	80038d4 <__smakebuf_r+0x18>
 80038f6:	f023 0303 	bic.w	r3, r3, #3
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	e7e2      	b.n	80038c8 <__smakebuf_r+0xc>
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	6020      	str	r0, [r4, #0]
 8003906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800390a:	81a3      	strh	r3, [r4, #12]
 800390c:	9b01      	ldr	r3, [sp, #4]
 800390e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003912:	b15b      	cbz	r3, 800392c <__smakebuf_r+0x70>
 8003914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003918:	4630      	mov	r0, r6
 800391a:	f000 f81d 	bl	8003958 <_isatty_r>
 800391e:	b128      	cbz	r0, 800392c <__smakebuf_r+0x70>
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	81a3      	strh	r3, [r4, #12]
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	431d      	orrs	r5, r3
 8003930:	81a5      	strh	r5, [r4, #12]
 8003932:	e7cf      	b.n	80038d4 <__smakebuf_r+0x18>

08003934 <_fstat_r>:
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4d07      	ldr	r5, [pc, #28]	@ (8003954 <_fstat_r+0x20>)
 8003938:	2300      	movs	r3, #0
 800393a:	4604      	mov	r4, r0
 800393c:	4608      	mov	r0, r1
 800393e:	4611      	mov	r1, r2
 8003940:	602b      	str	r3, [r5, #0]
 8003942:	f7fc ff1a 	bl	800077a <_fstat>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	d102      	bne.n	8003950 <_fstat_r+0x1c>
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	b103      	cbz	r3, 8003950 <_fstat_r+0x1c>
 800394e:	6023      	str	r3, [r4, #0]
 8003950:	bd38      	pop	{r3, r4, r5, pc}
 8003952:	bf00      	nop
 8003954:	2000022c 	.word	0x2000022c

08003958 <_isatty_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4d06      	ldr	r5, [pc, #24]	@ (8003974 <_isatty_r+0x1c>)
 800395c:	2300      	movs	r3, #0
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	602b      	str	r3, [r5, #0]
 8003964:	f7fc ff19 	bl	800079a <_isatty>
 8003968:	1c43      	adds	r3, r0, #1
 800396a:	d102      	bne.n	8003972 <_isatty_r+0x1a>
 800396c:	682b      	ldr	r3, [r5, #0]
 800396e:	b103      	cbz	r3, 8003972 <_isatty_r+0x1a>
 8003970:	6023      	str	r3, [r4, #0]
 8003972:	bd38      	pop	{r3, r4, r5, pc}
 8003974:	2000022c 	.word	0x2000022c

08003978 <_sbrk_r>:
 8003978:	b538      	push	{r3, r4, r5, lr}
 800397a:	4d06      	ldr	r5, [pc, #24]	@ (8003994 <_sbrk_r+0x1c>)
 800397c:	2300      	movs	r3, #0
 800397e:	4604      	mov	r4, r0
 8003980:	4608      	mov	r0, r1
 8003982:	602b      	str	r3, [r5, #0]
 8003984:	f7fc ff22 	bl	80007cc <_sbrk>
 8003988:	1c43      	adds	r3, r0, #1
 800398a:	d102      	bne.n	8003992 <_sbrk_r+0x1a>
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	b103      	cbz	r3, 8003992 <_sbrk_r+0x1a>
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	bd38      	pop	{r3, r4, r5, pc}
 8003994:	2000022c 	.word	0x2000022c

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
