
ITM_Viewer_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024fc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080026dc  080026dc  000036dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002748  08002748  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002748  08002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002750  08002750  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002758  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000068  080027c0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  080027c0  000041d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ced  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000133e  00000000  00000000  00008d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  0000a0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004b0  00000000  00000000  0000a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd12  00000000  00000000  0000abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d27  00000000  00000000  00027902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b189d  00000000  00000000  0002e629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  000dff0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e1e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080026c4 	.word	0x080026c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080026c4 	.word	0x080026c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 fa0a 	bl	80006de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f82b 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f869 	bl	80003a4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  uint32_t button_count = 0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 80002d6:	2101      	movs	r1, #1
 80002d8:	4810      	ldr	r0, [pc, #64]	@ (800031c <main+0x5c>)
 80002da:	f000 fcf9 	bl	8000cd0 <HAL_GPIO_ReadPin>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d115      	bne.n	8000310 <main+0x50>
		  // wait 50ms for debounce
		  HAL_Delay(50);
 80002e4:	2032      	movs	r0, #50	@ 0x32
 80002e6:	f000 fa6b 	bl	80007c0 <HAL_Delay>
		  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET) {
 80002ea:	2101      	movs	r1, #1
 80002ec:	480b      	ldr	r0, [pc, #44]	@ (800031c <main+0x5c>)
 80002ee:	f000 fcef 	bl	8000cd0 <HAL_GPIO_ReadPin>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d10b      	bne.n	8000310 <main+0x50>
			  // if button press
			  button_count++;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
			  printf("You have pressed the button %lu times\n", button_count);
 80002fe:	6879      	ldr	r1, [r7, #4]
 8000300:	4807      	ldr	r0, [pc, #28]	@ (8000320 <main+0x60>)
 8000302:	f001 fb71 	bl	80019e8 <iprintf>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2120      	movs	r1, #32
 800030a:	4804      	ldr	r0, [pc, #16]	@ (800031c <main+0x5c>)
 800030c:	f000 fcf8 	bl	8000d00 <HAL_GPIO_WritePin>
		  }
  	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	2120      	movs	r1, #32
 8000314:	4801      	ldr	r0, [pc, #4]	@ (800031c <main+0x5c>)
 8000316:	f000 fcf3 	bl	8000d00 <HAL_GPIO_WritePin>
	  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET){
 800031a:	e7dc      	b.n	80002d6 <main+0x16>
 800031c:	48000400 	.word	0x48000400
 8000320:	080026dc 	.word	0x080026dc

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b094      	sub	sp, #80	@ 0x50
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2238      	movs	r2, #56	@ 0x38
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 fbad 	bl	8001a92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000346:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800034a:	f000 fcf1 	bl	8000d30 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800034e:	2302      	movs	r3, #2
 8000350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000356:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000358:	2340      	movs	r3, #64	@ 0x40
 800035a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800035c:	2300      	movs	r3, #0
 800035e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 fd87 	bl	8000e78 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000370:	f000 f854 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000378:	2301      	movs	r3, #1
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f001 f885 	bl	800149c <HAL_RCC_ClockConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000398:	f000 f840 	bl	800041c <Error_Handler>
  }
}
 800039c:	bf00      	nop
 800039e:	3750      	adds	r7, #80	@ 0x50
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b16      	ldr	r3, [pc, #88]	@ (8000414 <MX_GPIO_Init+0x70>)
 80003ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003bc:	4a15      	ldr	r2, [pc, #84]	@ (8000414 <MX_GPIO_Init+0x70>)
 80003be:	f043 0302 	orr.w	r3, r3, #2
 80003c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003c4:	4b13      	ldr	r3, [pc, #76]	@ (8000414 <MX_GPIO_Init+0x70>)
 80003c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c8:	f003 0302 	and.w	r3, r3, #2
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2120      	movs	r1, #32
 80003d4:	4810      	ldr	r0, [pc, #64]	@ (8000418 <MX_GPIO_Init+0x74>)
 80003d6:	f000 fc93 	bl	8000d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80003da:	2301      	movs	r3, #1
 80003dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e2:	2300      	movs	r3, #0
 80003e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	4619      	mov	r1, r3
 80003ea:	480b      	ldr	r0, [pc, #44]	@ (8000418 <MX_GPIO_Init+0x74>)
 80003ec:	f000 faee 	bl	80009cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003f0:	2320      	movs	r3, #32
 80003f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	1d3b      	adds	r3, r7, #4
 8000402:	4619      	mov	r1, r3
 8000404:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_GPIO_Init+0x74>)
 8000406:	f000 fae1 	bl	80009cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040a:	bf00      	nop
 800040c:	3718      	adds	r7, #24
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	48000400 	.word	0x48000400

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x44>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6613      	str	r3, [r2, #96]	@ 0x60
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <HAL_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044a:	4a08      	ldr	r2, [pc, #32]	@ (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	6593      	str	r3, [r2, #88]	@ 0x58
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <NMI_Handler+0x4>

08000478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <UsageFault_Handler+0x4>

08000498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f95d 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004da:	4b0f      	ldr	r3, [pc, #60]	@ (8000518 <ITM_SendChar+0x48>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a0e      	ldr	r2, [pc, #56]	@ (8000518 <ITM_SendChar+0x48>)
 80004e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004e6:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <ITM_SendChar+0x4c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a0c      	ldr	r2, [pc, #48]	@ (800051c <ITM_SendChar+0x4c>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004f2:	bf00      	nop
 80004f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f8      	beq.n	80004f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000502:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	6013      	str	r3, [r2, #0]
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000edfc 	.word	0xe000edfc
 800051c:	e0000e00 	.word	0xe0000e00

08000520 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	e00a      	b.n	8000548 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000532:	f3af 8000 	nop.w
 8000536:	4601      	mov	r1, r0
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	b2ca      	uxtb	r2, r1
 8000540:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	3301      	adds	r3, #1
 8000546:	617b      	str	r3, [r7, #20]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	429a      	cmp	r2, r3
 800054e:	dbf0      	blt.n	8000532 <_read+0x12>
  }

  return len;
 8000550:	687b      	ldr	r3, [r7, #4]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3718      	adds	r7, #24
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b086      	sub	sp, #24
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e009      	b.n	8000580 <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	1c5a      	adds	r2, r3, #1
 8000570:	60ba      	str	r2, [r7, #8]
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ffab 	bl	80004d0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	3301      	adds	r3, #1
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697a      	ldr	r2, [r7, #20]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	429a      	cmp	r2, r3
 8000586:	dbf1      	blt.n	800056c <_write+0x12>
  }
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <_close>:

int _close(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005ba:	605a      	str	r2, [r3, #4]
  return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <_isatty>:

int _isatty(int file)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b083      	sub	sp, #12
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d2:	2301      	movs	r3, #1
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
	...

080005fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000604:	4a14      	ldr	r2, [pc, #80]	@ (8000658 <_sbrk+0x5c>)
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <_sbrk+0x60>)
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <_sbrk+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d102      	bne.n	800061e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <_sbrk+0x64>)
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <_sbrk+0x68>)
 800061c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	693a      	ldr	r2, [r7, #16]
 8000628:	429a      	cmp	r2, r3
 800062a:	d207      	bcs.n	800063c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800062c:	f001 fa80 	bl	8001b30 <__errno>
 8000630:	4603      	mov	r3, r0
 8000632:	220c      	movs	r2, #12
 8000634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000636:	f04f 33ff 	mov.w	r3, #4294967295
 800063a:	e009      	b.n	8000650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000642:	4b07      	ldr	r3, [pc, #28]	@ (8000660 <_sbrk+0x64>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4413      	add	r3, r2
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <_sbrk+0x64>)
 800064c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064e:	68fb      	ldr	r3, [r7, #12]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20008000 	.word	0x20008000
 800065c:	00000400 	.word	0x00000400
 8000660:	20000084 	.word	0x20000084
 8000664:	200001d8 	.word	0x200001d8

08000668 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <SystemInit+0x20>)
 800066e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000672:	4a05      	ldr	r2, [pc, #20]	@ (8000688 <SystemInit+0x20>)
 8000674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800068e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff ffea 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000696:	490d      	ldr	r1, [pc, #52]	@ (80006cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000698:	4a0d      	ldr	r2, [pc, #52]	@ (80006d0 <LoopForever+0xe>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ac:	4c0a      	ldr	r4, [pc, #40]	@ (80006d8 <LoopForever+0x16>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80006ba:	f001 fa3f 	bl	8001b3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006be:	f7ff fdff 	bl	80002c0 <main>

080006c2 <LoopForever>:

LoopForever:
    b LoopForever
 80006c2:	e7fe      	b.n	80006c2 <LoopForever>
  ldr   r0, =_estack
 80006c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006cc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80006d0:	08002758 	.word	0x08002758
  ldr r2, =_sbss
 80006d4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80006d8:	200001d8 	.word	0x200001d8

080006dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006dc:	e7fe      	b.n	80006dc <ADC1_2_IRQHandler>

080006de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e8:	2003      	movs	r0, #3
 80006ea:	f000 f93d 	bl	8000968 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ee:	200f      	movs	r0, #15
 80006f0:	f000 f80e 	bl	8000710 <HAL_InitTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d002      	beq.n	8000700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e001      	b.n	8000704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000700:	f7ff fe92 	bl	8000428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000704:	79fb      	ldrb	r3, [r7, #7]

}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800071c:	4b16      	ldr	r3, [pc, #88]	@ (8000778 <HAL_InitTick+0x68>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d022      	beq.n	800076a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000724:	4b15      	ldr	r3, [pc, #84]	@ (800077c <HAL_InitTick+0x6c>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b13      	ldr	r3, [pc, #76]	@ (8000778 <HAL_InitTick+0x68>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000730:	fbb1 f3f3 	udiv	r3, r1, r3
 8000734:	fbb2 f3f3 	udiv	r3, r2, r3
 8000738:	4618      	mov	r0, r3
 800073a:	f000 f93a 	bl	80009b2 <HAL_SYSTICK_Config>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d10f      	bne.n	8000764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b0f      	cmp	r3, #15
 8000748:	d809      	bhi.n	800075e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074a:	2200      	movs	r2, #0
 800074c:	6879      	ldr	r1, [r7, #4]
 800074e:	f04f 30ff 	mov.w	r0, #4294967295
 8000752:	f000 f914 	bl	800097e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <HAL_InitTick+0x70>)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6013      	str	r3, [r2, #0]
 800075c:	e007      	b.n	800076e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	73fb      	strb	r3, [r7, #15]
 8000762:	e004      	b.n	800076e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e001      	b.n	800076e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000008 	.word	0x20000008
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <HAL_IncTick+0x1c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <HAL_IncTick+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4413      	add	r3, r2
 8000792:	4a03      	ldr	r2, [pc, #12]	@ (80007a0 <HAL_IncTick+0x1c>)
 8000794:	6013      	str	r3, [r2, #0]
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000088 	.word	0x20000088
 80007a4:	20000008 	.word	0x20000008

080007a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return uwTick;
 80007ac:	4b03      	ldr	r3, [pc, #12]	@ (80007bc <HAL_GetTick+0x14>)
 80007ae:	681b      	ldr	r3, [r3, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000088 	.word	0x20000088

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff ffee 	bl	80007a8 <HAL_GetTick>
 80007cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d8:	d004      	beq.n	80007e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <HAL_Delay+0x40>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	4413      	add	r3, r2
 80007e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e4:	bf00      	nop
 80007e6:	f7ff ffdf 	bl	80007a8 <HAL_GetTick>
 80007ea:	4602      	mov	r2, r0
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8f7      	bhi.n	80007e6 <HAL_Delay+0x26>
  {
  }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000008 	.word	0x20000008

08000804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000816:	68db      	ldr	r3, [r3, #12]
 8000818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800082c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000836:	4a04      	ldr	r2, [pc, #16]	@ (8000848 <__NVIC_SetPriorityGrouping+0x44>)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	60d3      	str	r3, [r2, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000850:	4b04      	ldr	r3, [pc, #16]	@ (8000864 <__NVIC_GetPriorityGrouping+0x18>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	0a1b      	lsrs	r3, r3, #8
 8000856:	f003 0307 	and.w	r3, r3, #7
}
 800085a:	4618      	mov	r0, r3
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	@ (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	@ (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b089      	sub	sp, #36	@ 0x24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d0:	69fb      	ldr	r3, [r7, #28]
 80008d2:	f1c3 0307 	rsb	r3, r3, #7
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	bf28      	it	cs
 80008da:	2304      	movcs	r3, #4
 80008dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3304      	adds	r3, #4
 80008e2:	2b06      	cmp	r3, #6
 80008e4:	d902      	bls.n	80008ec <NVIC_EncodePriority+0x30>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3b03      	subs	r3, #3
 80008ea:	e000      	b.n	80008ee <NVIC_EncodePriority+0x32>
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	f04f 32ff 	mov.w	r2, #4294967295
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	401a      	ands	r2, r3
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000904:	f04f 31ff 	mov.w	r1, #4294967295
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	fa01 f303 	lsl.w	r3, r1, r3
 800090e:	43d9      	mvns	r1, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000914:	4313      	orrs	r3, r2
         );
}
 8000916:	4618      	mov	r0, r3
 8000918:	3724      	adds	r7, #36	@ 0x24
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3b01      	subs	r3, #1
 8000930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000934:	d301      	bcc.n	800093a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000936:	2301      	movs	r3, #1
 8000938:	e00f      	b.n	800095a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093a:	4a0a      	ldr	r2, [pc, #40]	@ (8000964 <SysTick_Config+0x40>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000942:	210f      	movs	r1, #15
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f7ff ff8e 	bl	8000868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800094c:	4b05      	ldr	r3, [pc, #20]	@ (8000964 <SysTick_Config+0x40>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000952:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <SysTick_Config+0x40>)
 8000954:	2207      	movs	r2, #7
 8000956:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000958:	2300      	movs	r3, #0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	e000e010 	.word	0xe000e010

08000968 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f7ff ff47 	bl	8000804 <__NVIC_SetPriorityGrouping>
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	4603      	mov	r3, r0
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098c:	f7ff ff5e 	bl	800084c <__NVIC_GetPriorityGrouping>
 8000990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	68b9      	ldr	r1, [r7, #8]
 8000996:	6978      	ldr	r0, [r7, #20]
 8000998:	f7ff ff90 	bl	80008bc <NVIC_EncodePriority>
 800099c:	4602      	mov	r2, r0
 800099e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009a2:	4611      	mov	r1, r2
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff ff5f 	bl	8000868 <__NVIC_SetPriority>
}
 80009aa:	bf00      	nop
 80009ac:	3718      	adds	r7, #24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b082      	sub	sp, #8
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ffb2 	bl	8000924 <SysTick_Config>
 80009c0:	4603      	mov	r3, r0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80009da:	e15a      	b.n	8000c92 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	2101      	movs	r1, #1
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	4013      	ands	r3, r2
 80009ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 814c 	beq.w	8000c8c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	f003 0303 	and.w	r3, r3, #3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d005      	beq.n	8000a0c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d130      	bne.n	8000a6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	2203      	movs	r2, #3
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a42:	2201      	movs	r2, #1
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	091b      	lsrs	r3, r3, #4
 8000a58:	f003 0201 	and.w	r2, r3, #1
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	685b      	ldr	r3, [r3, #4]
 8000a72:	f003 0303 	and.w	r3, r3, #3
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d017      	beq.n	8000aaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	68db      	ldr	r3, [r3, #12]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	2203      	movs	r2, #3
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 0303 	and.w	r3, r3, #3
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d123      	bne.n	8000afe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	08da      	lsrs	r2, r3, #3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3208      	adds	r2, #8
 8000abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	220f      	movs	r2, #15
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	691a      	ldr	r2, [r3, #16]
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	f003 0307 	and.w	r3, r3, #7
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	08da      	lsrs	r2, r3, #3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3208      	adds	r2, #8
 8000af8:	6939      	ldr	r1, [r7, #16]
 8000afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43db      	mvns	r3, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4013      	ands	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0203 	and.w	r2, r3, #3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 80a6 	beq.w	8000c8c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	4b5b      	ldr	r3, [pc, #364]	@ (8000cb0 <HAL_GPIO_Init+0x2e4>)
 8000b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b44:	4a5a      	ldr	r2, [pc, #360]	@ (8000cb0 <HAL_GPIO_Init+0x2e4>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b4c:	4b58      	ldr	r3, [pc, #352]	@ (8000cb0 <HAL_GPIO_Init+0x2e4>)
 8000b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b58:	4a56      	ldr	r2, [pc, #344]	@ (8000cb4 <HAL_GPIO_Init+0x2e8>)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	089b      	lsrs	r3, r3, #2
 8000b5e:	3302      	adds	r3, #2
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0303 	and.w	r3, r3, #3
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	220f      	movs	r2, #15
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b82:	d01f      	beq.n	8000bc4 <HAL_GPIO_Init+0x1f8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a4c      	ldr	r2, [pc, #304]	@ (8000cb8 <HAL_GPIO_Init+0x2ec>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d019      	beq.n	8000bc0 <HAL_GPIO_Init+0x1f4>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	@ (8000cbc <HAL_GPIO_Init+0x2f0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d013      	beq.n	8000bbc <HAL_GPIO_Init+0x1f0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a4a      	ldr	r2, [pc, #296]	@ (8000cc0 <HAL_GPIO_Init+0x2f4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d00d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1ec>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a49      	ldr	r2, [pc, #292]	@ (8000cc4 <HAL_GPIO_Init+0x2f8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e8>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a48      	ldr	r2, [pc, #288]	@ (8000cc8 <HAL_GPIO_Init+0x2fc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <HAL_GPIO_Init+0x1e4>
 8000bac:	2305      	movs	r3, #5
 8000bae:	e00a      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	e008      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	e006      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bb8:	2303      	movs	r3, #3
 8000bba:	e004      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e002      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e000      	b.n	8000bc6 <HAL_GPIO_Init+0x1fa>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	f002 0203 	and.w	r2, r2, #3
 8000bcc:	0092      	lsls	r2, r2, #2
 8000bce:	4093      	lsls	r3, r2
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bd6:	4937      	ldr	r1, [pc, #220]	@ (8000cb4 <HAL_GPIO_Init+0x2e8>)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	3302      	adds	r3, #2
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be4:	4b39      	ldr	r3, [pc, #228]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	43db      	mvns	r3, r3
 8000bee:	693a      	ldr	r2, [r7, #16]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c00:	693a      	ldr	r2, [r7, #16]
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c08:	4a30      	ldr	r2, [pc, #192]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c32:	4a26      	ldr	r2, [pc, #152]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000c38:	4b24      	ldr	r3, [pc, #144]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	43db      	mvns	r3, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4013      	ands	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c86:	4a11      	ldr	r2, [pc, #68]	@ (8000ccc <HAL_GPIO_Init+0x300>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f47f ae9d 	bne.w	80009dc <HAL_GPIO_Init+0x10>
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00
 8000cc4:	48001000 	.word	0x48001000
 8000cc8:	48001400 	.word	0x48001400
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	691a      	ldr	r2, [r3, #16]
 8000ce0:	887b      	ldrh	r3, [r7, #2]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d002      	beq.n	8000cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e001      	b.n	8000cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d141      	bne.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d4a:	d131      	bne.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d4c:	4b47      	ldr	r3, [pc, #284]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d52:	4a46      	ldr	r2, [pc, #280]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d5c:	4b43      	ldr	r3, [pc, #268]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d64:	4a41      	ldr	r2, [pc, #260]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d6c:	4b40      	ldr	r3, [pc, #256]	@ (8000e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2232      	movs	r2, #50	@ 0x32
 8000d72:	fb02 f303 	mul.w	r3, r2, r3
 8000d76:	4a3f      	ldr	r2, [pc, #252]	@ (8000e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d78:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7c:	0c9b      	lsrs	r3, r3, #18
 8000d7e:	3301      	adds	r3, #1
 8000d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d82:	e002      	b.n	8000d8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d8a:	4b38      	ldr	r3, [pc, #224]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d96:	d102      	bne.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f2      	bne.n	8000d84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d9e:	4b33      	ldr	r3, [pc, #204]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000daa:	d158      	bne.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e057      	b.n	8000e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000db0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000db6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000dc0:	e04d      	b.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000dc8:	d141      	bne.n	8000e4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dca:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dd6:	d131      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dde:	4a23      	ldr	r2, [pc, #140]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000de4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de8:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000df0:	4a1e      	ldr	r2, [pc, #120]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2232      	movs	r2, #50	@ 0x32
 8000dfe:	fb02 f303 	mul.w	r3, r2, r3
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000e04:	fba2 2303 	umull	r2, r3, r2, r3
 8000e08:	0c9b      	lsrs	r3, r3, #18
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e0e:	e002      	b.n	8000e16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e22:	d102      	bne.n	8000e2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d1f2      	bne.n	8000e10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e2a:	4b10      	ldr	r3, [pc, #64]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e36:	d112      	bne.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e011      	b.n	8000e60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e4c:	e007      	b.n	8000e5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e56:	4a05      	ldr	r2, [pc, #20]	@ (8000e6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e58:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	20000000 	.word	0x20000000
 8000e74:	431bde83 	.word	0x431bde83

08000e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e2fe      	b.n	8001488 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d075      	beq.n	8000f82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e96:	4b97      	ldr	r3, [pc, #604]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea0:	4b94      	ldr	r3, [pc, #592]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0303 	and.w	r3, r3, #3
 8000ea8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b0c      	cmp	r3, #12
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x3e>
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d002      	beq.n	8000ebc <HAL_RCC_OscConfig+0x44>
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	d10b      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ebc:	4b8d      	ldr	r3, [pc, #564]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d05b      	beq.n	8000f80 <HAL_RCC_OscConfig+0x108>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d157      	bne.n	8000f80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e2d9      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000edc:	d106      	bne.n	8000eec <HAL_RCC_OscConfig+0x74>
 8000ede:	4b85      	ldr	r3, [pc, #532]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a84      	ldr	r2, [pc, #528]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e01d      	b.n	8000f28 <HAL_RCC_OscConfig+0xb0>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x98>
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7e      	ldr	r2, [pc, #504]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	4b7c      	ldr	r3, [pc, #496]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a7b      	ldr	r2, [pc, #492]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f0c:	6013      	str	r3, [r2, #0]
 8000f0e:	e00b      	b.n	8000f28 <HAL_RCC_OscConfig+0xb0>
 8000f10:	4b78      	ldr	r3, [pc, #480]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a77      	ldr	r2, [pc, #476]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	4b75      	ldr	r3, [pc, #468]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a74      	ldr	r2, [pc, #464]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d013      	beq.n	8000f58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f30:	f7ff fc3a 	bl	80007a8 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f38:	f7ff fc36 	bl	80007a8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b64      	cmp	r3, #100	@ 0x64
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e29e      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f4a:	4b6a      	ldr	r3, [pc, #424]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0xc0>
 8000f56:	e014      	b.n	8000f82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc26 	bl	80007a8 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fc22 	bl	80007a8 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	@ 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e28a      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f72:	4b60      	ldr	r3, [pc, #384]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0xe8>
 8000f7e:	e000      	b.n	8000f82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d075      	beq.n	800107a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8e:	4b59      	ldr	r3, [pc, #356]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f98:	4b56      	ldr	r3, [pc, #344]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d102      	bne.n	8000fae <HAL_RCC_OscConfig+0x136>
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d002      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x13c>
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	2b04      	cmp	r3, #4
 8000fb2:	d11f      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_RCC_OscConfig+0x154>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e25d      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fcc:	4b49      	ldr	r3, [pc, #292]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	4946      	ldr	r1, [pc, #280]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fe0:	4b45      	ldr	r3, [pc, #276]	@ (80010f8 <HAL_RCC_OscConfig+0x280>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fb93 	bl	8000710 <HAL_InitTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d043      	beq.n	8001078 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e249      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d023      	beq.n	8001044 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ffc:	4b3d      	ldr	r3, [pc, #244]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a3c      	ldr	r2, [pc, #240]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fbce 	bl	80007a8 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001010:	f7ff fbca 	bl	80007a8 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b02      	cmp	r3, #2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e232      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102e:	4b31      	ldr	r3, [pc, #196]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	061b      	lsls	r3, r3, #24
 800103c:	492d      	ldr	r1, [pc, #180]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 800103e:	4313      	orrs	r3, r2
 8001040:	604b      	str	r3, [r1, #4]
 8001042:	e01a      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001044:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a2a      	ldr	r2, [pc, #168]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 800104a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800104e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001050:	f7ff fbaa 	bl	80007a8 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001058:	f7ff fba6 	bl	80007a8 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e20e      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800106a:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x1e0>
 8001076:	e000      	b.n	800107a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001078:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	2b00      	cmp	r3, #0
 8001084:	d041      	beq.n	800110a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	695b      	ldr	r3, [r3, #20]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d01c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001090:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001094:	4a17      	ldr	r2, [pc, #92]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff fb83 	bl	80007a8 <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a6:	f7ff fb7f 	bl	80007a8 <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1e7      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0ef      	beq.n	80010a6 <HAL_RCC_OscConfig+0x22e>
 80010c6:	e020      	b.n	800110a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 80010ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010ce:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <HAL_RCC_OscConfig+0x27c>)
 80010d0:	f023 0301 	bic.w	r3, r3, #1
 80010d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb66 	bl	80007a8 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010de:	e00d      	b.n	80010fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb62 	bl	80007a8 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d906      	bls.n	80010fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e1ca      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80010fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d1ea      	bne.n	80010e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80a6 	beq.w	8001264 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001118:	2300      	movs	r3, #0
 800111a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800111c:	4b84      	ldr	r3, [pc, #528]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x2b4>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <HAL_RCC_OscConfig+0x2b6>
 800112c:	2300      	movs	r3, #0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00d      	beq.n	800114e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b7f      	ldr	r3, [pc, #508]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	4a7e      	ldr	r2, [pc, #504]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800113c:	6593      	str	r3, [r2, #88]	@ 0x58
 800113e:	4b7c      	ldr	r3, [pc, #496]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800114e:	4b79      	ldr	r3, [pc, #484]	@ (8001334 <HAL_RCC_OscConfig+0x4bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800115a:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <HAL_RCC_OscConfig+0x4bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a75      	ldr	r2, [pc, #468]	@ (8001334 <HAL_RCC_OscConfig+0x4bc>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fb1f 	bl	80007a8 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fb1b 	bl	80007a8 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e183      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001180:	4b6c      	ldr	r3, [pc, #432]	@ (8001334 <HAL_RCC_OscConfig+0x4bc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_RCC_OscConfig+0x32e>
 8001194:	4b66      	ldr	r3, [pc, #408]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800119a:	4a65      	ldr	r2, [pc, #404]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011a4:	e024      	b.n	80011f0 <HAL_RCC_OscConfig+0x378>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d110      	bne.n	80011d0 <HAL_RCC_OscConfig+0x358>
 80011ae:	4b60      	ldr	r3, [pc, #384]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011b4:	4a5e      	ldr	r2, [pc, #376]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011be:	4b5c      	ldr	r3, [pc, #368]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011ce:	e00f      	b.n	80011f0 <HAL_RCC_OscConfig+0x378>
 80011d0:	4b57      	ldr	r3, [pc, #348]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d6:	4a56      	ldr	r2, [pc, #344]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80011e0:	4b53      	ldr	r3, [pc, #332]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011e6:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80011e8:	f023 0304 	bic.w	r3, r3, #4
 80011ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d016      	beq.n	8001226 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011f8:	f7ff fad6 	bl	80007a8 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001200:	f7ff fad2 	bl	80007a8 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e138      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001216:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0ed      	beq.n	8001200 <HAL_RCC_OscConfig+0x388>
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001226:	f7ff fabf 	bl	80007a8 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800122e:	f7ff fabb 	bl	80007a8 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123c:	4293      	cmp	r3, r2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e121      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001244:	4b3a      	ldr	r3, [pc, #232]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1ed      	bne.n	800122e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001252:	7ffb      	ldrb	r3, [r7, #31]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001258:	4b35      	ldr	r3, [pc, #212]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800125a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800125c:	4a34      	ldr	r2, [pc, #208]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800125e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0320 	and.w	r3, r3, #32
 800126c:	2b00      	cmp	r3, #0
 800126e:	d03c      	beq.n	80012ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d01c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001278:	4b2d      	ldr	r3, [pc, #180]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800127a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800127e:	4a2c      	ldr	r2, [pc, #176]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001288:	f7ff fa8e 	bl	80007a8 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001290:	f7ff fa8a 	bl	80007a8 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0f2      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012a2:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80012a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d0ef      	beq.n	8001290 <HAL_RCC_OscConfig+0x418>
 80012b0:	e01b      	b.n	80012ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80012b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80012ba:	f023 0301 	bic.w	r3, r3, #1
 80012be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fa71 	bl	80007a8 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ca:	f7ff fa6d 	bl	80007a8 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0d5      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80012dc:	4b14      	ldr	r3, [pc, #80]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80012de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ef      	bne.n	80012ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80c9 	beq.w	8001486 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	f000 8083 	beq.w	8001408 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d15e      	bne.n	80013c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_RCC_OscConfig+0x4b8>)
 8001310:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001316:	f7ff fa47 	bl	80007a8 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800131c:	e00c      	b.n	8001338 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fa43 	bl	80007a8 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d905      	bls.n	8001338 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e0ab      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
 8001330:	40021000 	.word	0x40021000
 8001334:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001338:	4b55      	ldr	r3, [pc, #340]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ec      	bne.n	800131e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001344:	4b52      	ldr	r3, [pc, #328]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	4b52      	ldr	r3, [pc, #328]	@ (8001494 <HAL_RCC_OscConfig+0x61c>)
 800134a:	4013      	ands	r3, r2
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	6a11      	ldr	r1, [r2, #32]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001354:	3a01      	subs	r2, #1
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	4311      	orrs	r1, r2
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800135e:	0212      	lsls	r2, r2, #8
 8001360:	4311      	orrs	r1, r2
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001366:	0852      	lsrs	r2, r2, #1
 8001368:	3a01      	subs	r2, #1
 800136a:	0552      	lsls	r2, r2, #21
 800136c:	4311      	orrs	r1, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001372:	0852      	lsrs	r2, r2, #1
 8001374:	3a01      	subs	r2, #1
 8001376:	0652      	lsls	r2, r2, #25
 8001378:	4311      	orrs	r1, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800137e:	06d2      	lsls	r2, r2, #27
 8001380:	430a      	orrs	r2, r1
 8001382:	4943      	ldr	r1, [pc, #268]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001388:	4b41      	ldr	r3, [pc, #260]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a40      	ldr	r2, [pc, #256]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 800138e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001392:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001394:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	4a3d      	ldr	r2, [pc, #244]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 800139a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800139e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a0:	f7ff fa02 	bl	80007a8 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff f9fe 	bl	80007a8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e066      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ba:	4b35      	ldr	r3, [pc, #212]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0x530>
 80013c6:	e05e      	b.n	8001486 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a30      	ldr	r2, [pc, #192]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 80013ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff f9e8 	bl	80007a8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013dc:	f7ff f9e4 	bl	80007a8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e04c      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ee:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80013fa:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 80013fc:	68da      	ldr	r2, [r3, #12]
 80013fe:	4924      	ldr	r1, [pc, #144]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 8001400:	4b25      	ldr	r3, [pc, #148]	@ (8001498 <HAL_RCC_OscConfig+0x620>)
 8001402:	4013      	ands	r3, r2
 8001404:	60cb      	str	r3, [r1, #12]
 8001406:	e03e      	b.n	8001486 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e039      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <HAL_RCC_OscConfig+0x618>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	429a      	cmp	r2, r3
 8001426:	d12c      	bne.n	8001482 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	3b01      	subs	r3, #1
 8001434:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	429a      	cmp	r2, r3
 8001438:	d123      	bne.n	8001482 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d11b      	bne.n	8001482 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001454:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d113      	bne.n	8001482 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d109      	bne.n	8001482 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800147e:	429a      	cmp	r2, r3
 8001480:	d001      	beq.n	8001486 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	019f800c 	.word	0x019f800c
 8001498:	feeefffc 	.word	0xfeeefffc

0800149c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d101      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e11e      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b4:	4b91      	ldr	r3, [pc, #580]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d910      	bls.n	80014e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c2:	4b8e      	ldr	r3, [pc, #568]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 020f 	bic.w	r2, r3, #15
 80014ca:	498c      	ldr	r1, [pc, #560]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d2:	4b8a      	ldr	r3, [pc, #552]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d001      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e106      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d073      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d129      	bne.n	800154c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014f8:	4b81      	ldr	r3, [pc, #516]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e0f4      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001508:	f000 f966 	bl	80017d8 <RCC_GetSysClockFreqFromPLLSource>
 800150c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4a7c      	ldr	r2, [pc, #496]	@ (8001704 <HAL_RCC_ClockConfig+0x268>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d93f      	bls.n	8001596 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001516:	4b7a      	ldr	r3, [pc, #488]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800152a:	2b00      	cmp	r3, #0
 800152c:	d033      	beq.n	8001596 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001532:	2b00      	cmp	r3, #0
 8001534:	d12f      	bne.n	8001596 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001536:	4b72      	ldr	r3, [pc, #456]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800153e:	4a70      	ldr	r2, [pc, #448]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001544:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001546:	2380      	movs	r3, #128	@ 0x80
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e024      	b.n	8001596 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d107      	bne.n	8001564 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001554:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0c6      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	4b66      	ldr	r3, [pc, #408]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0be      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001574:	f000 f8ce 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 8001578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4a61      	ldr	r2, [pc, #388]	@ (8001704 <HAL_RCC_ClockConfig+0x268>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d909      	bls.n	8001596 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001582:	4b5f      	ldr	r3, [pc, #380]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800158a:	4a5d      	ldr	r2, [pc, #372]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001590:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001592:	2380      	movs	r3, #128	@ 0x80
 8001594:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001596:	4b5a      	ldr	r3, [pc, #360]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 0203 	bic.w	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4957      	ldr	r1, [pc, #348]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80015a8:	f7ff f8fe 	bl	80007a8 <HAL_GetTick>
 80015ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ae:	e00a      	b.n	80015c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b0:	f7ff f8fa 	bl	80007a8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015be:	4293      	cmp	r3, r2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e095      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 020c 	and.w	r2, r3, #12
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d1eb      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d023      	beq.n	800162c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f0:	4b43      	ldr	r3, [pc, #268]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a42      	ldr	r2, [pc, #264]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80015f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001610:	4a3b      	ldr	r2, [pc, #236]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001616:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001618:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4936      	ldr	r1, [pc, #216]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001626:	4313      	orrs	r3, r2
 8001628:	608b      	str	r3, [r1, #8]
 800162a:	e008      	b.n	800163e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b80      	cmp	r3, #128	@ 0x80
 8001630:	d105      	bne.n	800163e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001638:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800163c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800163e:	4b2f      	ldr	r3, [pc, #188]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d21d      	bcs.n	8001688 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164c:	4b2b      	ldr	r3, [pc, #172]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f023 020f 	bic.w	r2, r3, #15
 8001654:	4929      	ldr	r1, [pc, #164]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800165c:	f7ff f8a4 	bl	80007a8 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001662:	e00a      	b.n	800167a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	f7ff f8a0 	bl	80007a8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e03b      	b.n	80016f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_RCC_ClockConfig+0x260>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	d1ed      	bne.n	8001664 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001694:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	4917      	ldr	r1, [pc, #92]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016b2:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	490f      	ldr	r1, [pc, #60]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016c6:	f000 f825 	bl	8001714 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_RCC_ClockConfig+0x264>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	091b      	lsrs	r3, r3, #4
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	490c      	ldr	r1, [pc, #48]	@ (8001708 <HAL_RCC_ClockConfig+0x26c>)
 80016d8:	5ccb      	ldrb	r3, [r1, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	fa22 f303 	lsr.w	r3, r2, r3
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_RCC_ClockConfig+0x270>)
 80016e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <HAL_RCC_ClockConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff f810 	bl	8000710 <HAL_InitTick>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40022000 	.word	0x40022000
 8001700:	40021000 	.word	0x40021000
 8001704:	04c4b400 	.word	0x04c4b400
 8001708:	08002704 	.word	0x08002704
 800170c:	20000000 	.word	0x20000000
 8001710:	20000004 	.word	0x20000004

08001714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800171a:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b04      	cmp	r3, #4
 8001724:	d102      	bne.n	800172c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001726:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	e047      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800172c:	4b27      	ldr	r3, [pc, #156]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d102      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001738:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e03e      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b0c      	cmp	r3, #12
 8001748:	d136      	bne.n	80017b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800174a:	4b20      	ldr	r3, [pc, #128]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001754:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3301      	adds	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d10c      	bne.n	8001782 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001768:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	4a16      	ldr	r2, [pc, #88]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001772:	68d2      	ldr	r2, [r2, #12]
 8001774:	0a12      	lsrs	r2, r2, #8
 8001776:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
      break;
 8001780:	e00c      	b.n	800179c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001782:	4a13      	ldr	r2, [pc, #76]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4a10      	ldr	r2, [pc, #64]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	0a12      	lsrs	r2, r2, #8
 8001790:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
      break;
 800179a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800179c:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0e5b      	lsrs	r3, r3, #25
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	e001      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80017bc:	693b      	ldr	r3, [r7, #16]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000
 80017d0:	00f42400 	.word	0x00f42400
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d10c      	bne.n	8001816 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017fc:	4a17      	ldr	r2, [pc, #92]	@ (800185c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001806:	68d2      	ldr	r2, [r2, #12]
 8001808:	0a12      	lsrs	r2, r2, #8
 800180a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
    break;
 8001814:	e00c      	b.n	8001830 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	4a0e      	ldr	r2, [pc, #56]	@ (8001858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001820:	68d2      	ldr	r2, [r2, #12]
 8001822:	0a12      	lsrs	r2, r2, #8
 8001824:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    break;
 800182e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0e5b      	lsrs	r3, r3, #25
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	3301      	adds	r3, #1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	fbb2 f3f3 	udiv	r3, r2, r3
 8001848:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	007a1200 	.word	0x007a1200
 8001860:	00f42400 	.word	0x00f42400

08001864 <std>:
 8001864:	2300      	movs	r3, #0
 8001866:	b510      	push	{r4, lr}
 8001868:	4604      	mov	r4, r0
 800186a:	e9c0 3300 	strd	r3, r3, [r0]
 800186e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001872:	6083      	str	r3, [r0, #8]
 8001874:	8181      	strh	r1, [r0, #12]
 8001876:	6643      	str	r3, [r0, #100]	@ 0x64
 8001878:	81c2      	strh	r2, [r0, #14]
 800187a:	6183      	str	r3, [r0, #24]
 800187c:	4619      	mov	r1, r3
 800187e:	2208      	movs	r2, #8
 8001880:	305c      	adds	r0, #92	@ 0x5c
 8001882:	f000 f906 	bl	8001a92 <memset>
 8001886:	4b0d      	ldr	r3, [pc, #52]	@ (80018bc <std+0x58>)
 8001888:	6263      	str	r3, [r4, #36]	@ 0x24
 800188a:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <std+0x5c>)
 800188c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800188e:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <std+0x60>)
 8001890:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001892:	4b0d      	ldr	r3, [pc, #52]	@ (80018c8 <std+0x64>)
 8001894:	6323      	str	r3, [r4, #48]	@ 0x30
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <std+0x68>)
 8001898:	6224      	str	r4, [r4, #32]
 800189a:	429c      	cmp	r4, r3
 800189c:	d006      	beq.n	80018ac <std+0x48>
 800189e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80018a2:	4294      	cmp	r4, r2
 80018a4:	d002      	beq.n	80018ac <std+0x48>
 80018a6:	33d0      	adds	r3, #208	@ 0xd0
 80018a8:	429c      	cmp	r4, r3
 80018aa:	d105      	bne.n	80018b8 <std+0x54>
 80018ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80018b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018b4:	f000 b966 	b.w	8001b84 <__retarget_lock_init_recursive>
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	08001a0d 	.word	0x08001a0d
 80018c0:	08001a2f 	.word	0x08001a2f
 80018c4:	08001a67 	.word	0x08001a67
 80018c8:	08001a8b 	.word	0x08001a8b
 80018cc:	2000008c 	.word	0x2000008c

080018d0 <stdio_exit_handler>:
 80018d0:	4a02      	ldr	r2, [pc, #8]	@ (80018dc <stdio_exit_handler+0xc>)
 80018d2:	4903      	ldr	r1, [pc, #12]	@ (80018e0 <stdio_exit_handler+0x10>)
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <stdio_exit_handler+0x14>)
 80018d6:	f000 b869 	b.w	80019ac <_fwalk_sglue>
 80018da:	bf00      	nop
 80018dc:	2000000c 	.word	0x2000000c
 80018e0:	08002425 	.word	0x08002425
 80018e4:	2000001c 	.word	0x2000001c

080018e8 <cleanup_stdio>:
 80018e8:	6841      	ldr	r1, [r0, #4]
 80018ea:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <cleanup_stdio+0x34>)
 80018ec:	4299      	cmp	r1, r3
 80018ee:	b510      	push	{r4, lr}
 80018f0:	4604      	mov	r4, r0
 80018f2:	d001      	beq.n	80018f8 <cleanup_stdio+0x10>
 80018f4:	f000 fd96 	bl	8002424 <_fflush_r>
 80018f8:	68a1      	ldr	r1, [r4, #8]
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <cleanup_stdio+0x38>)
 80018fc:	4299      	cmp	r1, r3
 80018fe:	d002      	beq.n	8001906 <cleanup_stdio+0x1e>
 8001900:	4620      	mov	r0, r4
 8001902:	f000 fd8f 	bl	8002424 <_fflush_r>
 8001906:	68e1      	ldr	r1, [r4, #12]
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <cleanup_stdio+0x3c>)
 800190a:	4299      	cmp	r1, r3
 800190c:	d004      	beq.n	8001918 <cleanup_stdio+0x30>
 800190e:	4620      	mov	r0, r4
 8001910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001914:	f000 bd86 	b.w	8002424 <_fflush_r>
 8001918:	bd10      	pop	{r4, pc}
 800191a:	bf00      	nop
 800191c:	2000008c 	.word	0x2000008c
 8001920:	200000f4 	.word	0x200000f4
 8001924:	2000015c 	.word	0x2000015c

08001928 <global_stdio_init.part.0>:
 8001928:	b510      	push	{r4, lr}
 800192a:	4b0b      	ldr	r3, [pc, #44]	@ (8001958 <global_stdio_init.part.0+0x30>)
 800192c:	4c0b      	ldr	r4, [pc, #44]	@ (800195c <global_stdio_init.part.0+0x34>)
 800192e:	4a0c      	ldr	r2, [pc, #48]	@ (8001960 <global_stdio_init.part.0+0x38>)
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	4620      	mov	r0, r4
 8001934:	2200      	movs	r2, #0
 8001936:	2104      	movs	r1, #4
 8001938:	f7ff ff94 	bl	8001864 <std>
 800193c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001940:	2201      	movs	r2, #1
 8001942:	2109      	movs	r1, #9
 8001944:	f7ff ff8e 	bl	8001864 <std>
 8001948:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800194c:	2202      	movs	r2, #2
 800194e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001952:	2112      	movs	r1, #18
 8001954:	f7ff bf86 	b.w	8001864 <std>
 8001958:	200001c4 	.word	0x200001c4
 800195c:	2000008c 	.word	0x2000008c
 8001960:	080018d1 	.word	0x080018d1

08001964 <__sfp_lock_acquire>:
 8001964:	4801      	ldr	r0, [pc, #4]	@ (800196c <__sfp_lock_acquire+0x8>)
 8001966:	f000 b90e 	b.w	8001b86 <__retarget_lock_acquire_recursive>
 800196a:	bf00      	nop
 800196c:	200001cd 	.word	0x200001cd

08001970 <__sfp_lock_release>:
 8001970:	4801      	ldr	r0, [pc, #4]	@ (8001978 <__sfp_lock_release+0x8>)
 8001972:	f000 b909 	b.w	8001b88 <__retarget_lock_release_recursive>
 8001976:	bf00      	nop
 8001978:	200001cd 	.word	0x200001cd

0800197c <__sinit>:
 800197c:	b510      	push	{r4, lr}
 800197e:	4604      	mov	r4, r0
 8001980:	f7ff fff0 	bl	8001964 <__sfp_lock_acquire>
 8001984:	6a23      	ldr	r3, [r4, #32]
 8001986:	b11b      	cbz	r3, 8001990 <__sinit+0x14>
 8001988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800198c:	f7ff bff0 	b.w	8001970 <__sfp_lock_release>
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <__sinit+0x28>)
 8001992:	6223      	str	r3, [r4, #32]
 8001994:	4b04      	ldr	r3, [pc, #16]	@ (80019a8 <__sinit+0x2c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f5      	bne.n	8001988 <__sinit+0xc>
 800199c:	f7ff ffc4 	bl	8001928 <global_stdio_init.part.0>
 80019a0:	e7f2      	b.n	8001988 <__sinit+0xc>
 80019a2:	bf00      	nop
 80019a4:	080018e9 	.word	0x080018e9
 80019a8:	200001c4 	.word	0x200001c4

080019ac <_fwalk_sglue>:
 80019ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019b0:	4607      	mov	r7, r0
 80019b2:	4688      	mov	r8, r1
 80019b4:	4614      	mov	r4, r2
 80019b6:	2600      	movs	r6, #0
 80019b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80019bc:	f1b9 0901 	subs.w	r9, r9, #1
 80019c0:	d505      	bpl.n	80019ce <_fwalk_sglue+0x22>
 80019c2:	6824      	ldr	r4, [r4, #0]
 80019c4:	2c00      	cmp	r4, #0
 80019c6:	d1f7      	bne.n	80019b8 <_fwalk_sglue+0xc>
 80019c8:	4630      	mov	r0, r6
 80019ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019ce:	89ab      	ldrh	r3, [r5, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d907      	bls.n	80019e4 <_fwalk_sglue+0x38>
 80019d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80019d8:	3301      	adds	r3, #1
 80019da:	d003      	beq.n	80019e4 <_fwalk_sglue+0x38>
 80019dc:	4629      	mov	r1, r5
 80019de:	4638      	mov	r0, r7
 80019e0:	47c0      	blx	r8
 80019e2:	4306      	orrs	r6, r0
 80019e4:	3568      	adds	r5, #104	@ 0x68
 80019e6:	e7e9      	b.n	80019bc <_fwalk_sglue+0x10>

080019e8 <iprintf>:
 80019e8:	b40f      	push	{r0, r1, r2, r3}
 80019ea:	b507      	push	{r0, r1, r2, lr}
 80019ec:	4906      	ldr	r1, [pc, #24]	@ (8001a08 <iprintf+0x20>)
 80019ee:	ab04      	add	r3, sp, #16
 80019f0:	6808      	ldr	r0, [r1, #0]
 80019f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80019f6:	6881      	ldr	r1, [r0, #8]
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	f000 f9e9 	bl	8001dd0 <_vfiprintf_r>
 80019fe:	b003      	add	sp, #12
 8001a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8001a04:	b004      	add	sp, #16
 8001a06:	4770      	bx	lr
 8001a08:	20000018 	.word	0x20000018

08001a0c <__sread>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	460c      	mov	r4, r1
 8001a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a14:	f000 f868 	bl	8001ae8 <_read_r>
 8001a18:	2800      	cmp	r0, #0
 8001a1a:	bfab      	itete	ge
 8001a1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8001a20:	181b      	addge	r3, r3, r0
 8001a22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001a26:	bfac      	ite	ge
 8001a28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001a2a:	81a3      	strhlt	r3, [r4, #12]
 8001a2c:	bd10      	pop	{r4, pc}

08001a2e <__swrite>:
 8001a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a32:	461f      	mov	r7, r3
 8001a34:	898b      	ldrh	r3, [r1, #12]
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	4605      	mov	r5, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	4616      	mov	r6, r2
 8001a3e:	d505      	bpl.n	8001a4c <__swrite+0x1e>
 8001a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a44:	2302      	movs	r3, #2
 8001a46:	2200      	movs	r2, #0
 8001a48:	f000 f83c 	bl	8001ac4 <_lseek_r>
 8001a4c:	89a3      	ldrh	r3, [r4, #12]
 8001a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a56:	81a3      	strh	r3, [r4, #12]
 8001a58:	4632      	mov	r2, r6
 8001a5a:	463b      	mov	r3, r7
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a62:	f000 b853 	b.w	8001b0c <_write_r>

08001a66 <__sseek>:
 8001a66:	b510      	push	{r4, lr}
 8001a68:	460c      	mov	r4, r1
 8001a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a6e:	f000 f829 	bl	8001ac4 <_lseek_r>
 8001a72:	1c43      	adds	r3, r0, #1
 8001a74:	89a3      	ldrh	r3, [r4, #12]
 8001a76:	bf15      	itete	ne
 8001a78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a82:	81a3      	strheq	r3, [r4, #12]
 8001a84:	bf18      	it	ne
 8001a86:	81a3      	strhne	r3, [r4, #12]
 8001a88:	bd10      	pop	{r4, pc}

08001a8a <__sclose>:
 8001a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a8e:	f000 b809 	b.w	8001aa4 <_close_r>

08001a92 <memset>:
 8001a92:	4402      	add	r2, r0
 8001a94:	4603      	mov	r3, r0
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d100      	bne.n	8001a9c <memset+0xa>
 8001a9a:	4770      	bx	lr
 8001a9c:	f803 1b01 	strb.w	r1, [r3], #1
 8001aa0:	e7f9      	b.n	8001a96 <memset+0x4>
	...

08001aa4 <_close_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4d06      	ldr	r5, [pc, #24]	@ (8001ac0 <_close_r+0x1c>)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	602b      	str	r3, [r5, #0]
 8001ab0:	f7fe fd6f 	bl	8000592 <_close>
 8001ab4:	1c43      	adds	r3, r0, #1
 8001ab6:	d102      	bne.n	8001abe <_close_r+0x1a>
 8001ab8:	682b      	ldr	r3, [r5, #0]
 8001aba:	b103      	cbz	r3, 8001abe <_close_r+0x1a>
 8001abc:	6023      	str	r3, [r4, #0]
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
 8001ac0:	200001c8 	.word	0x200001c8

08001ac4 <_lseek_r>:
 8001ac4:	b538      	push	{r3, r4, r5, lr}
 8001ac6:	4d07      	ldr	r5, [pc, #28]	@ (8001ae4 <_lseek_r+0x20>)
 8001ac8:	4604      	mov	r4, r0
 8001aca:	4608      	mov	r0, r1
 8001acc:	4611      	mov	r1, r2
 8001ace:	2200      	movs	r2, #0
 8001ad0:	602a      	str	r2, [r5, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f7fe fd84 	bl	80005e0 <_lseek>
 8001ad8:	1c43      	adds	r3, r0, #1
 8001ada:	d102      	bne.n	8001ae2 <_lseek_r+0x1e>
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	b103      	cbz	r3, 8001ae2 <_lseek_r+0x1e>
 8001ae0:	6023      	str	r3, [r4, #0]
 8001ae2:	bd38      	pop	{r3, r4, r5, pc}
 8001ae4:	200001c8 	.word	0x200001c8

08001ae8 <_read_r>:
 8001ae8:	b538      	push	{r3, r4, r5, lr}
 8001aea:	4d07      	ldr	r5, [pc, #28]	@ (8001b08 <_read_r+0x20>)
 8001aec:	4604      	mov	r4, r0
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	2200      	movs	r2, #0
 8001af4:	602a      	str	r2, [r5, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	f7fe fd12 	bl	8000520 <_read>
 8001afc:	1c43      	adds	r3, r0, #1
 8001afe:	d102      	bne.n	8001b06 <_read_r+0x1e>
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	b103      	cbz	r3, 8001b06 <_read_r+0x1e>
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	bd38      	pop	{r3, r4, r5, pc}
 8001b08:	200001c8 	.word	0x200001c8

08001b0c <_write_r>:
 8001b0c:	b538      	push	{r3, r4, r5, lr}
 8001b0e:	4d07      	ldr	r5, [pc, #28]	@ (8001b2c <_write_r+0x20>)
 8001b10:	4604      	mov	r4, r0
 8001b12:	4608      	mov	r0, r1
 8001b14:	4611      	mov	r1, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	602a      	str	r2, [r5, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	f7fe fd1d 	bl	800055a <_write>
 8001b20:	1c43      	adds	r3, r0, #1
 8001b22:	d102      	bne.n	8001b2a <_write_r+0x1e>
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b103      	cbz	r3, 8001b2a <_write_r+0x1e>
 8001b28:	6023      	str	r3, [r4, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
 8001b2c:	200001c8 	.word	0x200001c8

08001b30 <__errno>:
 8001b30:	4b01      	ldr	r3, [pc, #4]	@ (8001b38 <__errno+0x8>)
 8001b32:	6818      	ldr	r0, [r3, #0]
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000018 	.word	0x20000018

08001b3c <__libc_init_array>:
 8001b3c:	b570      	push	{r4, r5, r6, lr}
 8001b3e:	4d0d      	ldr	r5, [pc, #52]	@ (8001b74 <__libc_init_array+0x38>)
 8001b40:	4c0d      	ldr	r4, [pc, #52]	@ (8001b78 <__libc_init_array+0x3c>)
 8001b42:	1b64      	subs	r4, r4, r5
 8001b44:	10a4      	asrs	r4, r4, #2
 8001b46:	2600      	movs	r6, #0
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d109      	bne.n	8001b60 <__libc_init_array+0x24>
 8001b4c:	4d0b      	ldr	r5, [pc, #44]	@ (8001b7c <__libc_init_array+0x40>)
 8001b4e:	4c0c      	ldr	r4, [pc, #48]	@ (8001b80 <__libc_init_array+0x44>)
 8001b50:	f000 fdb8 	bl	80026c4 <_init>
 8001b54:	1b64      	subs	r4, r4, r5
 8001b56:	10a4      	asrs	r4, r4, #2
 8001b58:	2600      	movs	r6, #0
 8001b5a:	42a6      	cmp	r6, r4
 8001b5c:	d105      	bne.n	8001b6a <__libc_init_array+0x2e>
 8001b5e:	bd70      	pop	{r4, r5, r6, pc}
 8001b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b64:	4798      	blx	r3
 8001b66:	3601      	adds	r6, #1
 8001b68:	e7ee      	b.n	8001b48 <__libc_init_array+0xc>
 8001b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b6e:	4798      	blx	r3
 8001b70:	3601      	adds	r6, #1
 8001b72:	e7f2      	b.n	8001b5a <__libc_init_array+0x1e>
 8001b74:	08002750 	.word	0x08002750
 8001b78:	08002750 	.word	0x08002750
 8001b7c:	08002750 	.word	0x08002750
 8001b80:	08002754 	.word	0x08002754

08001b84 <__retarget_lock_init_recursive>:
 8001b84:	4770      	bx	lr

08001b86 <__retarget_lock_acquire_recursive>:
 8001b86:	4770      	bx	lr

08001b88 <__retarget_lock_release_recursive>:
 8001b88:	4770      	bx	lr
	...

08001b8c <_free_r>:
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4605      	mov	r5, r0
 8001b90:	2900      	cmp	r1, #0
 8001b92:	d041      	beq.n	8001c18 <_free_r+0x8c>
 8001b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b98:	1f0c      	subs	r4, r1, #4
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bfb8      	it	lt
 8001b9e:	18e4      	addlt	r4, r4, r3
 8001ba0:	f000 f8e0 	bl	8001d64 <__malloc_lock>
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8001c1c <_free_r+0x90>)
 8001ba6:	6813      	ldr	r3, [r2, #0]
 8001ba8:	b933      	cbnz	r3, 8001bb8 <_free_r+0x2c>
 8001baa:	6063      	str	r3, [r4, #4]
 8001bac:	6014      	str	r4, [r2, #0]
 8001bae:	4628      	mov	r0, r5
 8001bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bb4:	f000 b8dc 	b.w	8001d70 <__malloc_unlock>
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d908      	bls.n	8001bce <_free_r+0x42>
 8001bbc:	6820      	ldr	r0, [r4, #0]
 8001bbe:	1821      	adds	r1, r4, r0
 8001bc0:	428b      	cmp	r3, r1
 8001bc2:	bf01      	itttt	eq
 8001bc4:	6819      	ldreq	r1, [r3, #0]
 8001bc6:	685b      	ldreq	r3, [r3, #4]
 8001bc8:	1809      	addeq	r1, r1, r0
 8001bca:	6021      	streq	r1, [r4, #0]
 8001bcc:	e7ed      	b.n	8001baa <_free_r+0x1e>
 8001bce:	461a      	mov	r2, r3
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	b10b      	cbz	r3, 8001bd8 <_free_r+0x4c>
 8001bd4:	42a3      	cmp	r3, r4
 8001bd6:	d9fa      	bls.n	8001bce <_free_r+0x42>
 8001bd8:	6811      	ldr	r1, [r2, #0]
 8001bda:	1850      	adds	r0, r2, r1
 8001bdc:	42a0      	cmp	r0, r4
 8001bde:	d10b      	bne.n	8001bf8 <_free_r+0x6c>
 8001be0:	6820      	ldr	r0, [r4, #0]
 8001be2:	4401      	add	r1, r0
 8001be4:	1850      	adds	r0, r2, r1
 8001be6:	4283      	cmp	r3, r0
 8001be8:	6011      	str	r1, [r2, #0]
 8001bea:	d1e0      	bne.n	8001bae <_free_r+0x22>
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	6053      	str	r3, [r2, #4]
 8001bf2:	4408      	add	r0, r1
 8001bf4:	6010      	str	r0, [r2, #0]
 8001bf6:	e7da      	b.n	8001bae <_free_r+0x22>
 8001bf8:	d902      	bls.n	8001c00 <_free_r+0x74>
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	602b      	str	r3, [r5, #0]
 8001bfe:	e7d6      	b.n	8001bae <_free_r+0x22>
 8001c00:	6820      	ldr	r0, [r4, #0]
 8001c02:	1821      	adds	r1, r4, r0
 8001c04:	428b      	cmp	r3, r1
 8001c06:	bf04      	itt	eq
 8001c08:	6819      	ldreq	r1, [r3, #0]
 8001c0a:	685b      	ldreq	r3, [r3, #4]
 8001c0c:	6063      	str	r3, [r4, #4]
 8001c0e:	bf04      	itt	eq
 8001c10:	1809      	addeq	r1, r1, r0
 8001c12:	6021      	streq	r1, [r4, #0]
 8001c14:	6054      	str	r4, [r2, #4]
 8001c16:	e7ca      	b.n	8001bae <_free_r+0x22>
 8001c18:	bd38      	pop	{r3, r4, r5, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200001d4 	.word	0x200001d4

08001c20 <sbrk_aligned>:
 8001c20:	b570      	push	{r4, r5, r6, lr}
 8001c22:	4e0f      	ldr	r6, [pc, #60]	@ (8001c60 <sbrk_aligned+0x40>)
 8001c24:	460c      	mov	r4, r1
 8001c26:	6831      	ldr	r1, [r6, #0]
 8001c28:	4605      	mov	r5, r0
 8001c2a:	b911      	cbnz	r1, 8001c32 <sbrk_aligned+0x12>
 8001c2c:	f000 fcb6 	bl	800259c <_sbrk_r>
 8001c30:	6030      	str	r0, [r6, #0]
 8001c32:	4621      	mov	r1, r4
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 fcb1 	bl	800259c <_sbrk_r>
 8001c3a:	1c43      	adds	r3, r0, #1
 8001c3c:	d103      	bne.n	8001c46 <sbrk_aligned+0x26>
 8001c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8001c42:	4620      	mov	r0, r4
 8001c44:	bd70      	pop	{r4, r5, r6, pc}
 8001c46:	1cc4      	adds	r4, r0, #3
 8001c48:	f024 0403 	bic.w	r4, r4, #3
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d0f8      	beq.n	8001c42 <sbrk_aligned+0x22>
 8001c50:	1a21      	subs	r1, r4, r0
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 fca2 	bl	800259c <_sbrk_r>
 8001c58:	3001      	adds	r0, #1
 8001c5a:	d1f2      	bne.n	8001c42 <sbrk_aligned+0x22>
 8001c5c:	e7ef      	b.n	8001c3e <sbrk_aligned+0x1e>
 8001c5e:	bf00      	nop
 8001c60:	200001d0 	.word	0x200001d0

08001c64 <_malloc_r>:
 8001c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c68:	1ccd      	adds	r5, r1, #3
 8001c6a:	f025 0503 	bic.w	r5, r5, #3
 8001c6e:	3508      	adds	r5, #8
 8001c70:	2d0c      	cmp	r5, #12
 8001c72:	bf38      	it	cc
 8001c74:	250c      	movcc	r5, #12
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	4606      	mov	r6, r0
 8001c7a:	db01      	blt.n	8001c80 <_malloc_r+0x1c>
 8001c7c:	42a9      	cmp	r1, r5
 8001c7e:	d904      	bls.n	8001c8a <_malloc_r+0x26>
 8001c80:	230c      	movs	r3, #12
 8001c82:	6033      	str	r3, [r6, #0]
 8001c84:	2000      	movs	r0, #0
 8001c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d60 <_malloc_r+0xfc>
 8001c8e:	f000 f869 	bl	8001d64 <__malloc_lock>
 8001c92:	f8d8 3000 	ldr.w	r3, [r8]
 8001c96:	461c      	mov	r4, r3
 8001c98:	bb44      	cbnz	r4, 8001cec <_malloc_r+0x88>
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	f7ff ffbf 	bl	8001c20 <sbrk_aligned>
 8001ca2:	1c43      	adds	r3, r0, #1
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	d158      	bne.n	8001d5a <_malloc_r+0xf6>
 8001ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8001cac:	4627      	mov	r7, r4
 8001cae:	2f00      	cmp	r7, #0
 8001cb0:	d143      	bne.n	8001d3a <_malloc_r+0xd6>
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d04b      	beq.n	8001d4e <_malloc_r+0xea>
 8001cb6:	6823      	ldr	r3, [r4, #0]
 8001cb8:	4639      	mov	r1, r7
 8001cba:	4630      	mov	r0, r6
 8001cbc:	eb04 0903 	add.w	r9, r4, r3
 8001cc0:	f000 fc6c 	bl	800259c <_sbrk_r>
 8001cc4:	4581      	cmp	r9, r0
 8001cc6:	d142      	bne.n	8001d4e <_malloc_r+0xea>
 8001cc8:	6821      	ldr	r1, [r4, #0]
 8001cca:	1a6d      	subs	r5, r5, r1
 8001ccc:	4629      	mov	r1, r5
 8001cce:	4630      	mov	r0, r6
 8001cd0:	f7ff ffa6 	bl	8001c20 <sbrk_aligned>
 8001cd4:	3001      	adds	r0, #1
 8001cd6:	d03a      	beq.n	8001d4e <_malloc_r+0xea>
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	442b      	add	r3, r5
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	f8d8 3000 	ldr.w	r3, [r8]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	bb62      	cbnz	r2, 8001d40 <_malloc_r+0xdc>
 8001ce6:	f8c8 7000 	str.w	r7, [r8]
 8001cea:	e00f      	b.n	8001d0c <_malloc_r+0xa8>
 8001cec:	6822      	ldr	r2, [r4, #0]
 8001cee:	1b52      	subs	r2, r2, r5
 8001cf0:	d420      	bmi.n	8001d34 <_malloc_r+0xd0>
 8001cf2:	2a0b      	cmp	r2, #11
 8001cf4:	d917      	bls.n	8001d26 <_malloc_r+0xc2>
 8001cf6:	1961      	adds	r1, r4, r5
 8001cf8:	42a3      	cmp	r3, r4
 8001cfa:	6025      	str	r5, [r4, #0]
 8001cfc:	bf18      	it	ne
 8001cfe:	6059      	strne	r1, [r3, #4]
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	bf08      	it	eq
 8001d04:	f8c8 1000 	streq.w	r1, [r8]
 8001d08:	5162      	str	r2, [r4, r5]
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f000 f82f 	bl	8001d70 <__malloc_unlock>
 8001d12:	f104 000b 	add.w	r0, r4, #11
 8001d16:	1d23      	adds	r3, r4, #4
 8001d18:	f020 0007 	bic.w	r0, r0, #7
 8001d1c:	1ac2      	subs	r2, r0, r3
 8001d1e:	bf1c      	itt	ne
 8001d20:	1a1b      	subne	r3, r3, r0
 8001d22:	50a3      	strne	r3, [r4, r2]
 8001d24:	e7af      	b.n	8001c86 <_malloc_r+0x22>
 8001d26:	6862      	ldr	r2, [r4, #4]
 8001d28:	42a3      	cmp	r3, r4
 8001d2a:	bf0c      	ite	eq
 8001d2c:	f8c8 2000 	streq.w	r2, [r8]
 8001d30:	605a      	strne	r2, [r3, #4]
 8001d32:	e7eb      	b.n	8001d0c <_malloc_r+0xa8>
 8001d34:	4623      	mov	r3, r4
 8001d36:	6864      	ldr	r4, [r4, #4]
 8001d38:	e7ae      	b.n	8001c98 <_malloc_r+0x34>
 8001d3a:	463c      	mov	r4, r7
 8001d3c:	687f      	ldr	r7, [r7, #4]
 8001d3e:	e7b6      	b.n	8001cae <_malloc_r+0x4a>
 8001d40:	461a      	mov	r2, r3
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	42a3      	cmp	r3, r4
 8001d46:	d1fb      	bne.n	8001d40 <_malloc_r+0xdc>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	6053      	str	r3, [r2, #4]
 8001d4c:	e7de      	b.n	8001d0c <_malloc_r+0xa8>
 8001d4e:	230c      	movs	r3, #12
 8001d50:	6033      	str	r3, [r6, #0]
 8001d52:	4630      	mov	r0, r6
 8001d54:	f000 f80c 	bl	8001d70 <__malloc_unlock>
 8001d58:	e794      	b.n	8001c84 <_malloc_r+0x20>
 8001d5a:	6005      	str	r5, [r0, #0]
 8001d5c:	e7d6      	b.n	8001d0c <_malloc_r+0xa8>
 8001d5e:	bf00      	nop
 8001d60:	200001d4 	.word	0x200001d4

08001d64 <__malloc_lock>:
 8001d64:	4801      	ldr	r0, [pc, #4]	@ (8001d6c <__malloc_lock+0x8>)
 8001d66:	f7ff bf0e 	b.w	8001b86 <__retarget_lock_acquire_recursive>
 8001d6a:	bf00      	nop
 8001d6c:	200001cc 	.word	0x200001cc

08001d70 <__malloc_unlock>:
 8001d70:	4801      	ldr	r0, [pc, #4]	@ (8001d78 <__malloc_unlock+0x8>)
 8001d72:	f7ff bf09 	b.w	8001b88 <__retarget_lock_release_recursive>
 8001d76:	bf00      	nop
 8001d78:	200001cc 	.word	0x200001cc

08001d7c <__sfputc_r>:
 8001d7c:	6893      	ldr	r3, [r2, #8]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	b410      	push	{r4}
 8001d84:	6093      	str	r3, [r2, #8]
 8001d86:	da08      	bge.n	8001d9a <__sfputc_r+0x1e>
 8001d88:	6994      	ldr	r4, [r2, #24]
 8001d8a:	42a3      	cmp	r3, r4
 8001d8c:	db01      	blt.n	8001d92 <__sfputc_r+0x16>
 8001d8e:	290a      	cmp	r1, #10
 8001d90:	d103      	bne.n	8001d9a <__sfputc_r+0x1e>
 8001d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d96:	f000 bb6d 	b.w	8002474 <__swbuf_r>
 8001d9a:	6813      	ldr	r3, [r2, #0]
 8001d9c:	1c58      	adds	r0, r3, #1
 8001d9e:	6010      	str	r0, [r2, #0]
 8001da0:	7019      	strb	r1, [r3, #0]
 8001da2:	4608      	mov	r0, r1
 8001da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <__sfputs_r>:
 8001daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dac:	4606      	mov	r6, r0
 8001dae:	460f      	mov	r7, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	18d5      	adds	r5, r2, r3
 8001db4:	42ac      	cmp	r4, r5
 8001db6:	d101      	bne.n	8001dbc <__sfputs_r+0x12>
 8001db8:	2000      	movs	r0, #0
 8001dba:	e007      	b.n	8001dcc <__sfputs_r+0x22>
 8001dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dc0:	463a      	mov	r2, r7
 8001dc2:	4630      	mov	r0, r6
 8001dc4:	f7ff ffda 	bl	8001d7c <__sfputc_r>
 8001dc8:	1c43      	adds	r3, r0, #1
 8001dca:	d1f3      	bne.n	8001db4 <__sfputs_r+0xa>
 8001dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dd0 <_vfiprintf_r>:
 8001dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	b09d      	sub	sp, #116	@ 0x74
 8001dd8:	4614      	mov	r4, r2
 8001dda:	4698      	mov	r8, r3
 8001ddc:	4606      	mov	r6, r0
 8001dde:	b118      	cbz	r0, 8001de8 <_vfiprintf_r+0x18>
 8001de0:	6a03      	ldr	r3, [r0, #32]
 8001de2:	b90b      	cbnz	r3, 8001de8 <_vfiprintf_r+0x18>
 8001de4:	f7ff fdca 	bl	800197c <__sinit>
 8001de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dea:	07d9      	lsls	r1, r3, #31
 8001dec:	d405      	bmi.n	8001dfa <_vfiprintf_r+0x2a>
 8001dee:	89ab      	ldrh	r3, [r5, #12]
 8001df0:	059a      	lsls	r2, r3, #22
 8001df2:	d402      	bmi.n	8001dfa <_vfiprintf_r+0x2a>
 8001df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001df6:	f7ff fec6 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8001dfa:	89ab      	ldrh	r3, [r5, #12]
 8001dfc:	071b      	lsls	r3, r3, #28
 8001dfe:	d501      	bpl.n	8001e04 <_vfiprintf_r+0x34>
 8001e00:	692b      	ldr	r3, [r5, #16]
 8001e02:	b99b      	cbnz	r3, 8001e2c <_vfiprintf_r+0x5c>
 8001e04:	4629      	mov	r1, r5
 8001e06:	4630      	mov	r0, r6
 8001e08:	f000 fb72 	bl	80024f0 <__swsetup_r>
 8001e0c:	b170      	cbz	r0, 8001e2c <_vfiprintf_r+0x5c>
 8001e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001e10:	07dc      	lsls	r4, r3, #31
 8001e12:	d504      	bpl.n	8001e1e <_vfiprintf_r+0x4e>
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	b01d      	add	sp, #116	@ 0x74
 8001e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e1e:	89ab      	ldrh	r3, [r5, #12]
 8001e20:	0598      	lsls	r0, r3, #22
 8001e22:	d4f7      	bmi.n	8001e14 <_vfiprintf_r+0x44>
 8001e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e26:	f7ff feaf 	bl	8001b88 <__retarget_lock_release_recursive>
 8001e2a:	e7f3      	b.n	8001e14 <_vfiprintf_r+0x44>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e30:	2320      	movs	r3, #32
 8001e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e3a:	2330      	movs	r3, #48	@ 0x30
 8001e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001fec <_vfiprintf_r+0x21c>
 8001e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e44:	f04f 0901 	mov.w	r9, #1
 8001e48:	4623      	mov	r3, r4
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e50:	b10a      	cbz	r2, 8001e56 <_vfiprintf_r+0x86>
 8001e52:	2a25      	cmp	r2, #37	@ 0x25
 8001e54:	d1f9      	bne.n	8001e4a <_vfiprintf_r+0x7a>
 8001e56:	ebba 0b04 	subs.w	fp, sl, r4
 8001e5a:	d00b      	beq.n	8001e74 <_vfiprintf_r+0xa4>
 8001e5c:	465b      	mov	r3, fp
 8001e5e:	4622      	mov	r2, r4
 8001e60:	4629      	mov	r1, r5
 8001e62:	4630      	mov	r0, r6
 8001e64:	f7ff ffa1 	bl	8001daa <__sfputs_r>
 8001e68:	3001      	adds	r0, #1
 8001e6a:	f000 80a7 	beq.w	8001fbc <_vfiprintf_r+0x1ec>
 8001e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e70:	445a      	add	r2, fp
 8001e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e74:	f89a 3000 	ldrb.w	r3, [sl]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 809f 	beq.w	8001fbc <_vfiprintf_r+0x1ec>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	f04f 32ff 	mov.w	r2, #4294967295
 8001e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e88:	f10a 0a01 	add.w	sl, sl, #1
 8001e8c:	9304      	str	r3, [sp, #16]
 8001e8e:	9307      	str	r3, [sp, #28]
 8001e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e96:	4654      	mov	r4, sl
 8001e98:	2205      	movs	r2, #5
 8001e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e9e:	4853      	ldr	r0, [pc, #332]	@ (8001fec <_vfiprintf_r+0x21c>)
 8001ea0:	f7fe f9be 	bl	8000220 <memchr>
 8001ea4:	9a04      	ldr	r2, [sp, #16]
 8001ea6:	b9d8      	cbnz	r0, 8001ee0 <_vfiprintf_r+0x110>
 8001ea8:	06d1      	lsls	r1, r2, #27
 8001eaa:	bf44      	itt	mi
 8001eac:	2320      	movmi	r3, #32
 8001eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001eb2:	0713      	lsls	r3, r2, #28
 8001eb4:	bf44      	itt	mi
 8001eb6:	232b      	movmi	r3, #43	@ 0x2b
 8001eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8001ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ec2:	d015      	beq.n	8001ef0 <_vfiprintf_r+0x120>
 8001ec4:	9a07      	ldr	r2, [sp, #28]
 8001ec6:	4654      	mov	r4, sl
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f04f 0c0a 	mov.w	ip, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ed4:	3b30      	subs	r3, #48	@ 0x30
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	d94b      	bls.n	8001f72 <_vfiprintf_r+0x1a2>
 8001eda:	b1b0      	cbz	r0, 8001f0a <_vfiprintf_r+0x13a>
 8001edc:	9207      	str	r2, [sp, #28]
 8001ede:	e014      	b.n	8001f0a <_vfiprintf_r+0x13a>
 8001ee0:	eba0 0308 	sub.w	r3, r0, r8
 8001ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	9304      	str	r3, [sp, #16]
 8001eec:	46a2      	mov	sl, r4
 8001eee:	e7d2      	b.n	8001e96 <_vfiprintf_r+0xc6>
 8001ef0:	9b03      	ldr	r3, [sp, #12]
 8001ef2:	1d19      	adds	r1, r3, #4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	9103      	str	r1, [sp, #12]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bfbb      	ittet	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	f042 0202 	orrlt.w	r2, r2, #2
 8001f02:	9307      	strge	r3, [sp, #28]
 8001f04:	9307      	strlt	r3, [sp, #28]
 8001f06:	bfb8      	it	lt
 8001f08:	9204      	strlt	r2, [sp, #16]
 8001f0a:	7823      	ldrb	r3, [r4, #0]
 8001f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f0e:	d10a      	bne.n	8001f26 <_vfiprintf_r+0x156>
 8001f10:	7863      	ldrb	r3, [r4, #1]
 8001f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f14:	d132      	bne.n	8001f7c <_vfiprintf_r+0x1ac>
 8001f16:	9b03      	ldr	r3, [sp, #12]
 8001f18:	1d1a      	adds	r2, r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	9203      	str	r2, [sp, #12]
 8001f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f22:	3402      	adds	r4, #2
 8001f24:	9305      	str	r3, [sp, #20]
 8001f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001ffc <_vfiprintf_r+0x22c>
 8001f2a:	7821      	ldrb	r1, [r4, #0]
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	4650      	mov	r0, sl
 8001f30:	f7fe f976 	bl	8000220 <memchr>
 8001f34:	b138      	cbz	r0, 8001f46 <_vfiprintf_r+0x176>
 8001f36:	9b04      	ldr	r3, [sp, #16]
 8001f38:	eba0 000a 	sub.w	r0, r0, sl
 8001f3c:	2240      	movs	r2, #64	@ 0x40
 8001f3e:	4082      	lsls	r2, r0
 8001f40:	4313      	orrs	r3, r2
 8001f42:	3401      	adds	r4, #1
 8001f44:	9304      	str	r3, [sp, #16]
 8001f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f4a:	4829      	ldr	r0, [pc, #164]	@ (8001ff0 <_vfiprintf_r+0x220>)
 8001f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f50:	2206      	movs	r2, #6
 8001f52:	f7fe f965 	bl	8000220 <memchr>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d03f      	beq.n	8001fda <_vfiprintf_r+0x20a>
 8001f5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ff4 <_vfiprintf_r+0x224>)
 8001f5c:	bb1b      	cbnz	r3, 8001fa6 <_vfiprintf_r+0x1d6>
 8001f5e:	9b03      	ldr	r3, [sp, #12]
 8001f60:	3307      	adds	r3, #7
 8001f62:	f023 0307 	bic.w	r3, r3, #7
 8001f66:	3308      	adds	r3, #8
 8001f68:	9303      	str	r3, [sp, #12]
 8001f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f6c:	443b      	add	r3, r7
 8001f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f70:	e76a      	b.n	8001e48 <_vfiprintf_r+0x78>
 8001f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f76:	460c      	mov	r4, r1
 8001f78:	2001      	movs	r0, #1
 8001f7a:	e7a8      	b.n	8001ece <_vfiprintf_r+0xfe>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	3401      	adds	r4, #1
 8001f80:	9305      	str	r3, [sp, #20]
 8001f82:	4619      	mov	r1, r3
 8001f84:	f04f 0c0a 	mov.w	ip, #10
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f8e:	3a30      	subs	r2, #48	@ 0x30
 8001f90:	2a09      	cmp	r2, #9
 8001f92:	d903      	bls.n	8001f9c <_vfiprintf_r+0x1cc>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0c6      	beq.n	8001f26 <_vfiprintf_r+0x156>
 8001f98:	9105      	str	r1, [sp, #20]
 8001f9a:	e7c4      	b.n	8001f26 <_vfiprintf_r+0x156>
 8001f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e7f0      	b.n	8001f88 <_vfiprintf_r+0x1b8>
 8001fa6:	ab03      	add	r3, sp, #12
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	462a      	mov	r2, r5
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <_vfiprintf_r+0x228>)
 8001fae:	a904      	add	r1, sp, #16
 8001fb0:	4630      	mov	r0, r6
 8001fb2:	f3af 8000 	nop.w
 8001fb6:	4607      	mov	r7, r0
 8001fb8:	1c78      	adds	r0, r7, #1
 8001fba:	d1d6      	bne.n	8001f6a <_vfiprintf_r+0x19a>
 8001fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001fbe:	07d9      	lsls	r1, r3, #31
 8001fc0:	d405      	bmi.n	8001fce <_vfiprintf_r+0x1fe>
 8001fc2:	89ab      	ldrh	r3, [r5, #12]
 8001fc4:	059a      	lsls	r2, r3, #22
 8001fc6:	d402      	bmi.n	8001fce <_vfiprintf_r+0x1fe>
 8001fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001fca:	f7ff fddd 	bl	8001b88 <__retarget_lock_release_recursive>
 8001fce:	89ab      	ldrh	r3, [r5, #12]
 8001fd0:	065b      	lsls	r3, r3, #25
 8001fd2:	f53f af1f 	bmi.w	8001e14 <_vfiprintf_r+0x44>
 8001fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001fd8:	e71e      	b.n	8001e18 <_vfiprintf_r+0x48>
 8001fda:	ab03      	add	r3, sp, #12
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	462a      	mov	r2, r5
 8001fe0:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <_vfiprintf_r+0x228>)
 8001fe2:	a904      	add	r1, sp, #16
 8001fe4:	4630      	mov	r0, r6
 8001fe6:	f000 f879 	bl	80020dc <_printf_i>
 8001fea:	e7e4      	b.n	8001fb6 <_vfiprintf_r+0x1e6>
 8001fec:	08002714 	.word	0x08002714
 8001ff0:	0800271e 	.word	0x0800271e
 8001ff4:	00000000 	.word	0x00000000
 8001ff8:	08001dab 	.word	0x08001dab
 8001ffc:	0800271a 	.word	0x0800271a

08002000 <_printf_common>:
 8002000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002004:	4616      	mov	r6, r2
 8002006:	4698      	mov	r8, r3
 8002008:	688a      	ldr	r2, [r1, #8]
 800200a:	690b      	ldr	r3, [r1, #16]
 800200c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002010:	4293      	cmp	r3, r2
 8002012:	bfb8      	it	lt
 8002014:	4613      	movlt	r3, r2
 8002016:	6033      	str	r3, [r6, #0]
 8002018:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800201c:	4607      	mov	r7, r0
 800201e:	460c      	mov	r4, r1
 8002020:	b10a      	cbz	r2, 8002026 <_printf_common+0x26>
 8002022:	3301      	adds	r3, #1
 8002024:	6033      	str	r3, [r6, #0]
 8002026:	6823      	ldr	r3, [r4, #0]
 8002028:	0699      	lsls	r1, r3, #26
 800202a:	bf42      	ittt	mi
 800202c:	6833      	ldrmi	r3, [r6, #0]
 800202e:	3302      	addmi	r3, #2
 8002030:	6033      	strmi	r3, [r6, #0]
 8002032:	6825      	ldr	r5, [r4, #0]
 8002034:	f015 0506 	ands.w	r5, r5, #6
 8002038:	d106      	bne.n	8002048 <_printf_common+0x48>
 800203a:	f104 0a19 	add.w	sl, r4, #25
 800203e:	68e3      	ldr	r3, [r4, #12]
 8002040:	6832      	ldr	r2, [r6, #0]
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	42ab      	cmp	r3, r5
 8002046:	dc26      	bgt.n	8002096 <_printf_common+0x96>
 8002048:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	3b00      	subs	r3, #0
 8002050:	bf18      	it	ne
 8002052:	2301      	movne	r3, #1
 8002054:	0692      	lsls	r2, r2, #26
 8002056:	d42b      	bmi.n	80020b0 <_printf_common+0xb0>
 8002058:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800205c:	4641      	mov	r1, r8
 800205e:	4638      	mov	r0, r7
 8002060:	47c8      	blx	r9
 8002062:	3001      	adds	r0, #1
 8002064:	d01e      	beq.n	80020a4 <_printf_common+0xa4>
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	6922      	ldr	r2, [r4, #16]
 800206a:	f003 0306 	and.w	r3, r3, #6
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf02      	ittt	eq
 8002072:	68e5      	ldreq	r5, [r4, #12]
 8002074:	6833      	ldreq	r3, [r6, #0]
 8002076:	1aed      	subeq	r5, r5, r3
 8002078:	68a3      	ldr	r3, [r4, #8]
 800207a:	bf0c      	ite	eq
 800207c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002080:	2500      	movne	r5, #0
 8002082:	4293      	cmp	r3, r2
 8002084:	bfc4      	itt	gt
 8002086:	1a9b      	subgt	r3, r3, r2
 8002088:	18ed      	addgt	r5, r5, r3
 800208a:	2600      	movs	r6, #0
 800208c:	341a      	adds	r4, #26
 800208e:	42b5      	cmp	r5, r6
 8002090:	d11a      	bne.n	80020c8 <_printf_common+0xc8>
 8002092:	2000      	movs	r0, #0
 8002094:	e008      	b.n	80020a8 <_printf_common+0xa8>
 8002096:	2301      	movs	r3, #1
 8002098:	4652      	mov	r2, sl
 800209a:	4641      	mov	r1, r8
 800209c:	4638      	mov	r0, r7
 800209e:	47c8      	blx	r9
 80020a0:	3001      	adds	r0, #1
 80020a2:	d103      	bne.n	80020ac <_printf_common+0xac>
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ac:	3501      	adds	r5, #1
 80020ae:	e7c6      	b.n	800203e <_printf_common+0x3e>
 80020b0:	18e1      	adds	r1, r4, r3
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	2030      	movs	r0, #48	@ 0x30
 80020b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80020ba:	4422      	add	r2, r4
 80020bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80020c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80020c4:	3302      	adds	r3, #2
 80020c6:	e7c7      	b.n	8002058 <_printf_common+0x58>
 80020c8:	2301      	movs	r3, #1
 80020ca:	4622      	mov	r2, r4
 80020cc:	4641      	mov	r1, r8
 80020ce:	4638      	mov	r0, r7
 80020d0:	47c8      	blx	r9
 80020d2:	3001      	adds	r0, #1
 80020d4:	d0e6      	beq.n	80020a4 <_printf_common+0xa4>
 80020d6:	3601      	adds	r6, #1
 80020d8:	e7d9      	b.n	800208e <_printf_common+0x8e>
	...

080020dc <_printf_i>:
 80020dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020e0:	7e0f      	ldrb	r7, [r1, #24]
 80020e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020e4:	2f78      	cmp	r7, #120	@ 0x78
 80020e6:	4691      	mov	r9, r2
 80020e8:	4680      	mov	r8, r0
 80020ea:	460c      	mov	r4, r1
 80020ec:	469a      	mov	sl, r3
 80020ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020f2:	d807      	bhi.n	8002104 <_printf_i+0x28>
 80020f4:	2f62      	cmp	r7, #98	@ 0x62
 80020f6:	d80a      	bhi.n	800210e <_printf_i+0x32>
 80020f8:	2f00      	cmp	r7, #0
 80020fa:	f000 80d2 	beq.w	80022a2 <_printf_i+0x1c6>
 80020fe:	2f58      	cmp	r7, #88	@ 0x58
 8002100:	f000 80b9 	beq.w	8002276 <_printf_i+0x19a>
 8002104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002108:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800210c:	e03a      	b.n	8002184 <_printf_i+0xa8>
 800210e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002112:	2b15      	cmp	r3, #21
 8002114:	d8f6      	bhi.n	8002104 <_printf_i+0x28>
 8002116:	a101      	add	r1, pc, #4	@ (adr r1, 800211c <_printf_i+0x40>)
 8002118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800211c:	08002175 	.word	0x08002175
 8002120:	08002189 	.word	0x08002189
 8002124:	08002105 	.word	0x08002105
 8002128:	08002105 	.word	0x08002105
 800212c:	08002105 	.word	0x08002105
 8002130:	08002105 	.word	0x08002105
 8002134:	08002189 	.word	0x08002189
 8002138:	08002105 	.word	0x08002105
 800213c:	08002105 	.word	0x08002105
 8002140:	08002105 	.word	0x08002105
 8002144:	08002105 	.word	0x08002105
 8002148:	08002289 	.word	0x08002289
 800214c:	080021b3 	.word	0x080021b3
 8002150:	08002243 	.word	0x08002243
 8002154:	08002105 	.word	0x08002105
 8002158:	08002105 	.word	0x08002105
 800215c:	080022ab 	.word	0x080022ab
 8002160:	08002105 	.word	0x08002105
 8002164:	080021b3 	.word	0x080021b3
 8002168:	08002105 	.word	0x08002105
 800216c:	08002105 	.word	0x08002105
 8002170:	0800224b 	.word	0x0800224b
 8002174:	6833      	ldr	r3, [r6, #0]
 8002176:	1d1a      	adds	r2, r3, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6032      	str	r2, [r6, #0]
 800217c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002180:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002184:	2301      	movs	r3, #1
 8002186:	e09d      	b.n	80022c4 <_printf_i+0x1e8>
 8002188:	6833      	ldr	r3, [r6, #0]
 800218a:	6820      	ldr	r0, [r4, #0]
 800218c:	1d19      	adds	r1, r3, #4
 800218e:	6031      	str	r1, [r6, #0]
 8002190:	0606      	lsls	r6, r0, #24
 8002192:	d501      	bpl.n	8002198 <_printf_i+0xbc>
 8002194:	681d      	ldr	r5, [r3, #0]
 8002196:	e003      	b.n	80021a0 <_printf_i+0xc4>
 8002198:	0645      	lsls	r5, r0, #25
 800219a:	d5fb      	bpl.n	8002194 <_printf_i+0xb8>
 800219c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	da03      	bge.n	80021ac <_printf_i+0xd0>
 80021a4:	232d      	movs	r3, #45	@ 0x2d
 80021a6:	426d      	negs	r5, r5
 80021a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021ac:	4859      	ldr	r0, [pc, #356]	@ (8002314 <_printf_i+0x238>)
 80021ae:	230a      	movs	r3, #10
 80021b0:	e011      	b.n	80021d6 <_printf_i+0xfa>
 80021b2:	6821      	ldr	r1, [r4, #0]
 80021b4:	6833      	ldr	r3, [r6, #0]
 80021b6:	0608      	lsls	r0, r1, #24
 80021b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80021bc:	d402      	bmi.n	80021c4 <_printf_i+0xe8>
 80021be:	0649      	lsls	r1, r1, #25
 80021c0:	bf48      	it	mi
 80021c2:	b2ad      	uxthmi	r5, r5
 80021c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80021c6:	4853      	ldr	r0, [pc, #332]	@ (8002314 <_printf_i+0x238>)
 80021c8:	6033      	str	r3, [r6, #0]
 80021ca:	bf14      	ite	ne
 80021cc:	230a      	movne	r3, #10
 80021ce:	2308      	moveq	r3, #8
 80021d0:	2100      	movs	r1, #0
 80021d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80021d6:	6866      	ldr	r6, [r4, #4]
 80021d8:	60a6      	str	r6, [r4, #8]
 80021da:	2e00      	cmp	r6, #0
 80021dc:	bfa2      	ittt	ge
 80021de:	6821      	ldrge	r1, [r4, #0]
 80021e0:	f021 0104 	bicge.w	r1, r1, #4
 80021e4:	6021      	strge	r1, [r4, #0]
 80021e6:	b90d      	cbnz	r5, 80021ec <_printf_i+0x110>
 80021e8:	2e00      	cmp	r6, #0
 80021ea:	d04b      	beq.n	8002284 <_printf_i+0x1a8>
 80021ec:	4616      	mov	r6, r2
 80021ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80021f2:	fb03 5711 	mls	r7, r3, r1, r5
 80021f6:	5dc7      	ldrb	r7, [r0, r7]
 80021f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021fc:	462f      	mov	r7, r5
 80021fe:	42bb      	cmp	r3, r7
 8002200:	460d      	mov	r5, r1
 8002202:	d9f4      	bls.n	80021ee <_printf_i+0x112>
 8002204:	2b08      	cmp	r3, #8
 8002206:	d10b      	bne.n	8002220 <_printf_i+0x144>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	07df      	lsls	r7, r3, #31
 800220c:	d508      	bpl.n	8002220 <_printf_i+0x144>
 800220e:	6923      	ldr	r3, [r4, #16]
 8002210:	6861      	ldr	r1, [r4, #4]
 8002212:	4299      	cmp	r1, r3
 8002214:	bfde      	ittt	le
 8002216:	2330      	movle	r3, #48	@ 0x30
 8002218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800221c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002220:	1b92      	subs	r2, r2, r6
 8002222:	6122      	str	r2, [r4, #16]
 8002224:	f8cd a000 	str.w	sl, [sp]
 8002228:	464b      	mov	r3, r9
 800222a:	aa03      	add	r2, sp, #12
 800222c:	4621      	mov	r1, r4
 800222e:	4640      	mov	r0, r8
 8002230:	f7ff fee6 	bl	8002000 <_printf_common>
 8002234:	3001      	adds	r0, #1
 8002236:	d14a      	bne.n	80022ce <_printf_i+0x1f2>
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	b004      	add	sp, #16
 800223e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	f043 0320 	orr.w	r3, r3, #32
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	4833      	ldr	r0, [pc, #204]	@ (8002318 <_printf_i+0x23c>)
 800224c:	2778      	movs	r7, #120	@ 0x78
 800224e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002252:	6823      	ldr	r3, [r4, #0]
 8002254:	6831      	ldr	r1, [r6, #0]
 8002256:	061f      	lsls	r7, r3, #24
 8002258:	f851 5b04 	ldr.w	r5, [r1], #4
 800225c:	d402      	bmi.n	8002264 <_printf_i+0x188>
 800225e:	065f      	lsls	r7, r3, #25
 8002260:	bf48      	it	mi
 8002262:	b2ad      	uxthmi	r5, r5
 8002264:	6031      	str	r1, [r6, #0]
 8002266:	07d9      	lsls	r1, r3, #31
 8002268:	bf44      	itt	mi
 800226a:	f043 0320 	orrmi.w	r3, r3, #32
 800226e:	6023      	strmi	r3, [r4, #0]
 8002270:	b11d      	cbz	r5, 800227a <_printf_i+0x19e>
 8002272:	2310      	movs	r3, #16
 8002274:	e7ac      	b.n	80021d0 <_printf_i+0xf4>
 8002276:	4827      	ldr	r0, [pc, #156]	@ (8002314 <_printf_i+0x238>)
 8002278:	e7e9      	b.n	800224e <_printf_i+0x172>
 800227a:	6823      	ldr	r3, [r4, #0]
 800227c:	f023 0320 	bic.w	r3, r3, #32
 8002280:	6023      	str	r3, [r4, #0]
 8002282:	e7f6      	b.n	8002272 <_printf_i+0x196>
 8002284:	4616      	mov	r6, r2
 8002286:	e7bd      	b.n	8002204 <_printf_i+0x128>
 8002288:	6833      	ldr	r3, [r6, #0]
 800228a:	6825      	ldr	r5, [r4, #0]
 800228c:	6961      	ldr	r1, [r4, #20]
 800228e:	1d18      	adds	r0, r3, #4
 8002290:	6030      	str	r0, [r6, #0]
 8002292:	062e      	lsls	r6, r5, #24
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	d501      	bpl.n	800229c <_printf_i+0x1c0>
 8002298:	6019      	str	r1, [r3, #0]
 800229a:	e002      	b.n	80022a2 <_printf_i+0x1c6>
 800229c:	0668      	lsls	r0, r5, #25
 800229e:	d5fb      	bpl.n	8002298 <_printf_i+0x1bc>
 80022a0:	8019      	strh	r1, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	6123      	str	r3, [r4, #16]
 80022a6:	4616      	mov	r6, r2
 80022a8:	e7bc      	b.n	8002224 <_printf_i+0x148>
 80022aa:	6833      	ldr	r3, [r6, #0]
 80022ac:	1d1a      	adds	r2, r3, #4
 80022ae:	6032      	str	r2, [r6, #0]
 80022b0:	681e      	ldr	r6, [r3, #0]
 80022b2:	6862      	ldr	r2, [r4, #4]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4630      	mov	r0, r6
 80022b8:	f7fd ffb2 	bl	8000220 <memchr>
 80022bc:	b108      	cbz	r0, 80022c2 <_printf_i+0x1e6>
 80022be:	1b80      	subs	r0, r0, r6
 80022c0:	6060      	str	r0, [r4, #4]
 80022c2:	6863      	ldr	r3, [r4, #4]
 80022c4:	6123      	str	r3, [r4, #16]
 80022c6:	2300      	movs	r3, #0
 80022c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022cc:	e7aa      	b.n	8002224 <_printf_i+0x148>
 80022ce:	6923      	ldr	r3, [r4, #16]
 80022d0:	4632      	mov	r2, r6
 80022d2:	4649      	mov	r1, r9
 80022d4:	4640      	mov	r0, r8
 80022d6:	47d0      	blx	sl
 80022d8:	3001      	adds	r0, #1
 80022da:	d0ad      	beq.n	8002238 <_printf_i+0x15c>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	079b      	lsls	r3, r3, #30
 80022e0:	d413      	bmi.n	800230a <_printf_i+0x22e>
 80022e2:	68e0      	ldr	r0, [r4, #12]
 80022e4:	9b03      	ldr	r3, [sp, #12]
 80022e6:	4298      	cmp	r0, r3
 80022e8:	bfb8      	it	lt
 80022ea:	4618      	movlt	r0, r3
 80022ec:	e7a6      	b.n	800223c <_printf_i+0x160>
 80022ee:	2301      	movs	r3, #1
 80022f0:	4632      	mov	r2, r6
 80022f2:	4649      	mov	r1, r9
 80022f4:	4640      	mov	r0, r8
 80022f6:	47d0      	blx	sl
 80022f8:	3001      	adds	r0, #1
 80022fa:	d09d      	beq.n	8002238 <_printf_i+0x15c>
 80022fc:	3501      	adds	r5, #1
 80022fe:	68e3      	ldr	r3, [r4, #12]
 8002300:	9903      	ldr	r1, [sp, #12]
 8002302:	1a5b      	subs	r3, r3, r1
 8002304:	42ab      	cmp	r3, r5
 8002306:	dcf2      	bgt.n	80022ee <_printf_i+0x212>
 8002308:	e7eb      	b.n	80022e2 <_printf_i+0x206>
 800230a:	2500      	movs	r5, #0
 800230c:	f104 0619 	add.w	r6, r4, #25
 8002310:	e7f5      	b.n	80022fe <_printf_i+0x222>
 8002312:	bf00      	nop
 8002314:	08002725 	.word	0x08002725
 8002318:	08002736 	.word	0x08002736

0800231c <__sflush_r>:
 800231c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002324:	0716      	lsls	r6, r2, #28
 8002326:	4605      	mov	r5, r0
 8002328:	460c      	mov	r4, r1
 800232a:	d454      	bmi.n	80023d6 <__sflush_r+0xba>
 800232c:	684b      	ldr	r3, [r1, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	dc02      	bgt.n	8002338 <__sflush_r+0x1c>
 8002332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	dd48      	ble.n	80023ca <__sflush_r+0xae>
 8002338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800233a:	2e00      	cmp	r6, #0
 800233c:	d045      	beq.n	80023ca <__sflush_r+0xae>
 800233e:	2300      	movs	r3, #0
 8002340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002344:	682f      	ldr	r7, [r5, #0]
 8002346:	6a21      	ldr	r1, [r4, #32]
 8002348:	602b      	str	r3, [r5, #0]
 800234a:	d030      	beq.n	80023ae <__sflush_r+0x92>
 800234c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800234e:	89a3      	ldrh	r3, [r4, #12]
 8002350:	0759      	lsls	r1, r3, #29
 8002352:	d505      	bpl.n	8002360 <__sflush_r+0x44>
 8002354:	6863      	ldr	r3, [r4, #4]
 8002356:	1ad2      	subs	r2, r2, r3
 8002358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800235a:	b10b      	cbz	r3, 8002360 <__sflush_r+0x44>
 800235c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002364:	6a21      	ldr	r1, [r4, #32]
 8002366:	4628      	mov	r0, r5
 8002368:	47b0      	blx	r6
 800236a:	1c43      	adds	r3, r0, #1
 800236c:	89a3      	ldrh	r3, [r4, #12]
 800236e:	d106      	bne.n	800237e <__sflush_r+0x62>
 8002370:	6829      	ldr	r1, [r5, #0]
 8002372:	291d      	cmp	r1, #29
 8002374:	d82b      	bhi.n	80023ce <__sflush_r+0xb2>
 8002376:	4a2a      	ldr	r2, [pc, #168]	@ (8002420 <__sflush_r+0x104>)
 8002378:	410a      	asrs	r2, r1
 800237a:	07d6      	lsls	r6, r2, #31
 800237c:	d427      	bmi.n	80023ce <__sflush_r+0xb2>
 800237e:	2200      	movs	r2, #0
 8002380:	6062      	str	r2, [r4, #4]
 8002382:	04d9      	lsls	r1, r3, #19
 8002384:	6922      	ldr	r2, [r4, #16]
 8002386:	6022      	str	r2, [r4, #0]
 8002388:	d504      	bpl.n	8002394 <__sflush_r+0x78>
 800238a:	1c42      	adds	r2, r0, #1
 800238c:	d101      	bne.n	8002392 <__sflush_r+0x76>
 800238e:	682b      	ldr	r3, [r5, #0]
 8002390:	b903      	cbnz	r3, 8002394 <__sflush_r+0x78>
 8002392:	6560      	str	r0, [r4, #84]	@ 0x54
 8002394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002396:	602f      	str	r7, [r5, #0]
 8002398:	b1b9      	cbz	r1, 80023ca <__sflush_r+0xae>
 800239a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800239e:	4299      	cmp	r1, r3
 80023a0:	d002      	beq.n	80023a8 <__sflush_r+0x8c>
 80023a2:	4628      	mov	r0, r5
 80023a4:	f7ff fbf2 	bl	8001b8c <_free_r>
 80023a8:	2300      	movs	r3, #0
 80023aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80023ac:	e00d      	b.n	80023ca <__sflush_r+0xae>
 80023ae:	2301      	movs	r3, #1
 80023b0:	4628      	mov	r0, r5
 80023b2:	47b0      	blx	r6
 80023b4:	4602      	mov	r2, r0
 80023b6:	1c50      	adds	r0, r2, #1
 80023b8:	d1c9      	bne.n	800234e <__sflush_r+0x32>
 80023ba:	682b      	ldr	r3, [r5, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0c6      	beq.n	800234e <__sflush_r+0x32>
 80023c0:	2b1d      	cmp	r3, #29
 80023c2:	d001      	beq.n	80023c8 <__sflush_r+0xac>
 80023c4:	2b16      	cmp	r3, #22
 80023c6:	d11e      	bne.n	8002406 <__sflush_r+0xea>
 80023c8:	602f      	str	r7, [r5, #0]
 80023ca:	2000      	movs	r0, #0
 80023cc:	e022      	b.n	8002414 <__sflush_r+0xf8>
 80023ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	e01b      	b.n	800240e <__sflush_r+0xf2>
 80023d6:	690f      	ldr	r7, [r1, #16]
 80023d8:	2f00      	cmp	r7, #0
 80023da:	d0f6      	beq.n	80023ca <__sflush_r+0xae>
 80023dc:	0793      	lsls	r3, r2, #30
 80023de:	680e      	ldr	r6, [r1, #0]
 80023e0:	bf08      	it	eq
 80023e2:	694b      	ldreq	r3, [r1, #20]
 80023e4:	600f      	str	r7, [r1, #0]
 80023e6:	bf18      	it	ne
 80023e8:	2300      	movne	r3, #0
 80023ea:	eba6 0807 	sub.w	r8, r6, r7
 80023ee:	608b      	str	r3, [r1, #8]
 80023f0:	f1b8 0f00 	cmp.w	r8, #0
 80023f4:	dde9      	ble.n	80023ca <__sflush_r+0xae>
 80023f6:	6a21      	ldr	r1, [r4, #32]
 80023f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80023fa:	4643      	mov	r3, r8
 80023fc:	463a      	mov	r2, r7
 80023fe:	4628      	mov	r0, r5
 8002400:	47b0      	blx	r6
 8002402:	2800      	cmp	r0, #0
 8002404:	dc08      	bgt.n	8002418 <__sflush_r+0xfc>
 8002406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800240a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800240e:	81a3      	strh	r3, [r4, #12]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002418:	4407      	add	r7, r0
 800241a:	eba8 0800 	sub.w	r8, r8, r0
 800241e:	e7e7      	b.n	80023f0 <__sflush_r+0xd4>
 8002420:	dfbffffe 	.word	0xdfbffffe

08002424 <_fflush_r>:
 8002424:	b538      	push	{r3, r4, r5, lr}
 8002426:	690b      	ldr	r3, [r1, #16]
 8002428:	4605      	mov	r5, r0
 800242a:	460c      	mov	r4, r1
 800242c:	b913      	cbnz	r3, 8002434 <_fflush_r+0x10>
 800242e:	2500      	movs	r5, #0
 8002430:	4628      	mov	r0, r5
 8002432:	bd38      	pop	{r3, r4, r5, pc}
 8002434:	b118      	cbz	r0, 800243e <_fflush_r+0x1a>
 8002436:	6a03      	ldr	r3, [r0, #32]
 8002438:	b90b      	cbnz	r3, 800243e <_fflush_r+0x1a>
 800243a:	f7ff fa9f 	bl	800197c <__sinit>
 800243e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f3      	beq.n	800242e <_fflush_r+0xa>
 8002446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002448:	07d0      	lsls	r0, r2, #31
 800244a:	d404      	bmi.n	8002456 <_fflush_r+0x32>
 800244c:	0599      	lsls	r1, r3, #22
 800244e:	d402      	bmi.n	8002456 <_fflush_r+0x32>
 8002450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002452:	f7ff fb98 	bl	8001b86 <__retarget_lock_acquire_recursive>
 8002456:	4628      	mov	r0, r5
 8002458:	4621      	mov	r1, r4
 800245a:	f7ff ff5f 	bl	800231c <__sflush_r>
 800245e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002460:	07da      	lsls	r2, r3, #31
 8002462:	4605      	mov	r5, r0
 8002464:	d4e4      	bmi.n	8002430 <_fflush_r+0xc>
 8002466:	89a3      	ldrh	r3, [r4, #12]
 8002468:	059b      	lsls	r3, r3, #22
 800246a:	d4e1      	bmi.n	8002430 <_fflush_r+0xc>
 800246c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800246e:	f7ff fb8b 	bl	8001b88 <__retarget_lock_release_recursive>
 8002472:	e7dd      	b.n	8002430 <_fflush_r+0xc>

08002474 <__swbuf_r>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	460e      	mov	r6, r1
 8002478:	4614      	mov	r4, r2
 800247a:	4605      	mov	r5, r0
 800247c:	b118      	cbz	r0, 8002486 <__swbuf_r+0x12>
 800247e:	6a03      	ldr	r3, [r0, #32]
 8002480:	b90b      	cbnz	r3, 8002486 <__swbuf_r+0x12>
 8002482:	f7ff fa7b 	bl	800197c <__sinit>
 8002486:	69a3      	ldr	r3, [r4, #24]
 8002488:	60a3      	str	r3, [r4, #8]
 800248a:	89a3      	ldrh	r3, [r4, #12]
 800248c:	071a      	lsls	r2, r3, #28
 800248e:	d501      	bpl.n	8002494 <__swbuf_r+0x20>
 8002490:	6923      	ldr	r3, [r4, #16]
 8002492:	b943      	cbnz	r3, 80024a6 <__swbuf_r+0x32>
 8002494:	4621      	mov	r1, r4
 8002496:	4628      	mov	r0, r5
 8002498:	f000 f82a 	bl	80024f0 <__swsetup_r>
 800249c:	b118      	cbz	r0, 80024a6 <__swbuf_r+0x32>
 800249e:	f04f 37ff 	mov.w	r7, #4294967295
 80024a2:	4638      	mov	r0, r7
 80024a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	6922      	ldr	r2, [r4, #16]
 80024aa:	1a98      	subs	r0, r3, r2
 80024ac:	6963      	ldr	r3, [r4, #20]
 80024ae:	b2f6      	uxtb	r6, r6
 80024b0:	4283      	cmp	r3, r0
 80024b2:	4637      	mov	r7, r6
 80024b4:	dc05      	bgt.n	80024c2 <__swbuf_r+0x4e>
 80024b6:	4621      	mov	r1, r4
 80024b8:	4628      	mov	r0, r5
 80024ba:	f7ff ffb3 	bl	8002424 <_fflush_r>
 80024be:	2800      	cmp	r0, #0
 80024c0:	d1ed      	bne.n	800249e <__swbuf_r+0x2a>
 80024c2:	68a3      	ldr	r3, [r4, #8]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	60a3      	str	r3, [r4, #8]
 80024c8:	6823      	ldr	r3, [r4, #0]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	6022      	str	r2, [r4, #0]
 80024ce:	701e      	strb	r6, [r3, #0]
 80024d0:	6962      	ldr	r2, [r4, #20]
 80024d2:	1c43      	adds	r3, r0, #1
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d004      	beq.n	80024e2 <__swbuf_r+0x6e>
 80024d8:	89a3      	ldrh	r3, [r4, #12]
 80024da:	07db      	lsls	r3, r3, #31
 80024dc:	d5e1      	bpl.n	80024a2 <__swbuf_r+0x2e>
 80024de:	2e0a      	cmp	r6, #10
 80024e0:	d1df      	bne.n	80024a2 <__swbuf_r+0x2e>
 80024e2:	4621      	mov	r1, r4
 80024e4:	4628      	mov	r0, r5
 80024e6:	f7ff ff9d 	bl	8002424 <_fflush_r>
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d0d9      	beq.n	80024a2 <__swbuf_r+0x2e>
 80024ee:	e7d6      	b.n	800249e <__swbuf_r+0x2a>

080024f0 <__swsetup_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <__swsetup_r+0xa8>)
 80024f4:	4605      	mov	r5, r0
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	460c      	mov	r4, r1
 80024fa:	b118      	cbz	r0, 8002504 <__swsetup_r+0x14>
 80024fc:	6a03      	ldr	r3, [r0, #32]
 80024fe:	b90b      	cbnz	r3, 8002504 <__swsetup_r+0x14>
 8002500:	f7ff fa3c 	bl	800197c <__sinit>
 8002504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002508:	0719      	lsls	r1, r3, #28
 800250a:	d422      	bmi.n	8002552 <__swsetup_r+0x62>
 800250c:	06da      	lsls	r2, r3, #27
 800250e:	d407      	bmi.n	8002520 <__swsetup_r+0x30>
 8002510:	2209      	movs	r2, #9
 8002512:	602a      	str	r2, [r5, #0]
 8002514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002518:	81a3      	strh	r3, [r4, #12]
 800251a:	f04f 30ff 	mov.w	r0, #4294967295
 800251e:	e033      	b.n	8002588 <__swsetup_r+0x98>
 8002520:	0758      	lsls	r0, r3, #29
 8002522:	d512      	bpl.n	800254a <__swsetup_r+0x5a>
 8002524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002526:	b141      	cbz	r1, 800253a <__swsetup_r+0x4a>
 8002528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800252c:	4299      	cmp	r1, r3
 800252e:	d002      	beq.n	8002536 <__swsetup_r+0x46>
 8002530:	4628      	mov	r0, r5
 8002532:	f7ff fb2b 	bl	8001b8c <_free_r>
 8002536:	2300      	movs	r3, #0
 8002538:	6363      	str	r3, [r4, #52]	@ 0x34
 800253a:	89a3      	ldrh	r3, [r4, #12]
 800253c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002540:	81a3      	strh	r3, [r4, #12]
 8002542:	2300      	movs	r3, #0
 8002544:	6063      	str	r3, [r4, #4]
 8002546:	6923      	ldr	r3, [r4, #16]
 8002548:	6023      	str	r3, [r4, #0]
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	6923      	ldr	r3, [r4, #16]
 8002554:	b94b      	cbnz	r3, 800256a <__swsetup_r+0x7a>
 8002556:	89a3      	ldrh	r3, [r4, #12]
 8002558:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d003      	beq.n	800256a <__swsetup_r+0x7a>
 8002562:	4621      	mov	r1, r4
 8002564:	4628      	mov	r0, r5
 8002566:	f000 f84f 	bl	8002608 <__smakebuf_r>
 800256a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800256e:	f013 0201 	ands.w	r2, r3, #1
 8002572:	d00a      	beq.n	800258a <__swsetup_r+0x9a>
 8002574:	2200      	movs	r2, #0
 8002576:	60a2      	str	r2, [r4, #8]
 8002578:	6962      	ldr	r2, [r4, #20]
 800257a:	4252      	negs	r2, r2
 800257c:	61a2      	str	r2, [r4, #24]
 800257e:	6922      	ldr	r2, [r4, #16]
 8002580:	b942      	cbnz	r2, 8002594 <__swsetup_r+0xa4>
 8002582:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002586:	d1c5      	bne.n	8002514 <__swsetup_r+0x24>
 8002588:	bd38      	pop	{r3, r4, r5, pc}
 800258a:	0799      	lsls	r1, r3, #30
 800258c:	bf58      	it	pl
 800258e:	6962      	ldrpl	r2, [r4, #20]
 8002590:	60a2      	str	r2, [r4, #8]
 8002592:	e7f4      	b.n	800257e <__swsetup_r+0x8e>
 8002594:	2000      	movs	r0, #0
 8002596:	e7f7      	b.n	8002588 <__swsetup_r+0x98>
 8002598:	20000018 	.word	0x20000018

0800259c <_sbrk_r>:
 800259c:	b538      	push	{r3, r4, r5, lr}
 800259e:	4d06      	ldr	r5, [pc, #24]	@ (80025b8 <_sbrk_r+0x1c>)
 80025a0:	2300      	movs	r3, #0
 80025a2:	4604      	mov	r4, r0
 80025a4:	4608      	mov	r0, r1
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	f7fe f828 	bl	80005fc <_sbrk>
 80025ac:	1c43      	adds	r3, r0, #1
 80025ae:	d102      	bne.n	80025b6 <_sbrk_r+0x1a>
 80025b0:	682b      	ldr	r3, [r5, #0]
 80025b2:	b103      	cbz	r3, 80025b6 <_sbrk_r+0x1a>
 80025b4:	6023      	str	r3, [r4, #0]
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	200001c8 	.word	0x200001c8

080025bc <__swhatbuf_r>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	460c      	mov	r4, r1
 80025c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c4:	2900      	cmp	r1, #0
 80025c6:	b096      	sub	sp, #88	@ 0x58
 80025c8:	4615      	mov	r5, r2
 80025ca:	461e      	mov	r6, r3
 80025cc:	da0d      	bge.n	80025ea <__swhatbuf_r+0x2e>
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	bf14      	ite	ne
 80025da:	2340      	movne	r3, #64	@ 0x40
 80025dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80025e0:	2000      	movs	r0, #0
 80025e2:	6031      	str	r1, [r6, #0]
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	b016      	add	sp, #88	@ 0x58
 80025e8:	bd70      	pop	{r4, r5, r6, pc}
 80025ea:	466a      	mov	r2, sp
 80025ec:	f000 f848 	bl	8002680 <_fstat_r>
 80025f0:	2800      	cmp	r0, #0
 80025f2:	dbec      	blt.n	80025ce <__swhatbuf_r+0x12>
 80025f4:	9901      	ldr	r1, [sp, #4]
 80025f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80025fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025fe:	4259      	negs	r1, r3
 8002600:	4159      	adcs	r1, r3
 8002602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002606:	e7eb      	b.n	80025e0 <__swhatbuf_r+0x24>

08002608 <__smakebuf_r>:
 8002608:	898b      	ldrh	r3, [r1, #12]
 800260a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800260c:	079d      	lsls	r5, r3, #30
 800260e:	4606      	mov	r6, r0
 8002610:	460c      	mov	r4, r1
 8002612:	d507      	bpl.n	8002624 <__smakebuf_r+0x1c>
 8002614:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	6123      	str	r3, [r4, #16]
 800261c:	2301      	movs	r3, #1
 800261e:	6163      	str	r3, [r4, #20]
 8002620:	b003      	add	sp, #12
 8002622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002624:	ab01      	add	r3, sp, #4
 8002626:	466a      	mov	r2, sp
 8002628:	f7ff ffc8 	bl	80025bc <__swhatbuf_r>
 800262c:	9f00      	ldr	r7, [sp, #0]
 800262e:	4605      	mov	r5, r0
 8002630:	4639      	mov	r1, r7
 8002632:	4630      	mov	r0, r6
 8002634:	f7ff fb16 	bl	8001c64 <_malloc_r>
 8002638:	b948      	cbnz	r0, 800264e <__smakebuf_r+0x46>
 800263a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800263e:	059a      	lsls	r2, r3, #22
 8002640:	d4ee      	bmi.n	8002620 <__smakebuf_r+0x18>
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	81a3      	strh	r3, [r4, #12]
 800264c:	e7e2      	b.n	8002614 <__smakebuf_r+0xc>
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	6020      	str	r0, [r4, #0]
 8002652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002656:	81a3      	strh	r3, [r4, #12]
 8002658:	9b01      	ldr	r3, [sp, #4]
 800265a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800265e:	b15b      	cbz	r3, 8002678 <__smakebuf_r+0x70>
 8002660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002664:	4630      	mov	r0, r6
 8002666:	f000 f81d 	bl	80026a4 <_isatty_r>
 800266a:	b128      	cbz	r0, 8002678 <__smakebuf_r+0x70>
 800266c:	89a3      	ldrh	r3, [r4, #12]
 800266e:	f023 0303 	bic.w	r3, r3, #3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	81a3      	strh	r3, [r4, #12]
 8002678:	89a3      	ldrh	r3, [r4, #12]
 800267a:	431d      	orrs	r5, r3
 800267c:	81a5      	strh	r5, [r4, #12]
 800267e:	e7cf      	b.n	8002620 <__smakebuf_r+0x18>

08002680 <_fstat_r>:
 8002680:	b538      	push	{r3, r4, r5, lr}
 8002682:	4d07      	ldr	r5, [pc, #28]	@ (80026a0 <_fstat_r+0x20>)
 8002684:	2300      	movs	r3, #0
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	602b      	str	r3, [r5, #0]
 800268e:	f7fd ff8c 	bl	80005aa <_fstat>
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	d102      	bne.n	800269c <_fstat_r+0x1c>
 8002696:	682b      	ldr	r3, [r5, #0]
 8002698:	b103      	cbz	r3, 800269c <_fstat_r+0x1c>
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	bd38      	pop	{r3, r4, r5, pc}
 800269e:	bf00      	nop
 80026a0:	200001c8 	.word	0x200001c8

080026a4 <_isatty_r>:
 80026a4:	b538      	push	{r3, r4, r5, lr}
 80026a6:	4d06      	ldr	r5, [pc, #24]	@ (80026c0 <_isatty_r+0x1c>)
 80026a8:	2300      	movs	r3, #0
 80026aa:	4604      	mov	r4, r0
 80026ac:	4608      	mov	r0, r1
 80026ae:	602b      	str	r3, [r5, #0]
 80026b0:	f7fd ff8b 	bl	80005ca <_isatty>
 80026b4:	1c43      	adds	r3, r0, #1
 80026b6:	d102      	bne.n	80026be <_isatty_r+0x1a>
 80026b8:	682b      	ldr	r3, [r5, #0]
 80026ba:	b103      	cbz	r3, 80026be <_isatty_r+0x1a>
 80026bc:	6023      	str	r3, [r4, #0]
 80026be:	bd38      	pop	{r3, r4, r5, pc}
 80026c0:	200001c8 	.word	0x200001c8

080026c4 <_init>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr

080026d0 <_fini>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	bf00      	nop
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr
