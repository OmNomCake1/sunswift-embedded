
Internal_Temp_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  080068b0  080068b0  000078b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd8  08006cd8  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd8  08006cd8  00007cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce0  08006ce0  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006ce8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  200001d4  08006ebc  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08006ebc  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fd0  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae2  00000000  00000000  000121d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00013cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000820  00000000  00000000  000147a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee1e  00000000  00000000  00014fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af81  00000000  00000000  00033dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c76e3  00000000  00000000  0003ed5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d28  00000000  00000000  00106488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010a1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006894 	.word	0x08006894

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08006894 	.word	0x08006894

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	b5b0      	push	{r4, r5, r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9e:	f000 fb3a 	bl	8001316 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca2:	f000 f8cb 	bl	8000e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8000ca6:	f000 f909 	bl	8000ebc <MX_ADC1_Init>

  // converted ADC value
  uint16_t adc_val;

  // address for calibration registers
  const uint16_t* ADDR_TS_CAL1 = (uint16_t*)0x1FFF75A8;
 8000caa:	4b55      	ldr	r3, [pc, #340]	@ (8000e00 <main+0x168>)
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint16_t* ADDR_TS_CAL2 = (uint16_t*)0x1FFF75CA;
 8000cae:	4b55      	ldr	r3, [pc, #340]	@ (8000e04 <main+0x16c>)
 8000cb0:	623b      	str	r3, [r7, #32]

  // Calibration values
  const uint16_t TS_CAL1 = *ADDR_TS_CAL1;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	83fb      	strh	r3, [r7, #30]
  const uint16_t TS_CAL2 = *ADDR_TS_CAL2;
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	83bb      	strh	r3, [r7, #28]
  printf("TS_CAL1: %u\nTS_CAL2: %u\n", TS_CAL1, TS_CAL2);
 8000cbe:	8bfb      	ldrh	r3, [r7, #30]
 8000cc0:	8bba      	ldrh	r2, [r7, #28]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4850      	ldr	r0, [pc, #320]	@ (8000e08 <main+0x170>)
 8000cc6:	f003 fe0f 	bl	80048e8 <iprintf>

  // constants for temperature formula
  const float TS_CAL2_TEMP = 130.0f;
 8000cca:	4b50      	ldr	r3, [pc, #320]	@ (8000e0c <main+0x174>)
 8000ccc:	61bb      	str	r3, [r7, #24]
  const float TS_CAL1_TEMP = 30.0f;
 8000cce:	4b50      	ldr	r3, [pc, #320]	@ (8000e10 <main+0x178>)
 8000cd0:	617b      	str	r3, [r7, #20]

  const uint16_t VREFINT = *(uint16_t*)0x1FFF75AA;
 8000cd2:	4b50      	ldr	r3, [pc, #320]	@ (8000e14 <main+0x17c>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	827b      	strh	r3, [r7, #18]
  printf("VREFINT: %u\n", VREFINT);
 8000cd8:	8a7b      	ldrh	r3, [r7, #18]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	484e      	ldr	r0, [pc, #312]	@ (8000e18 <main+0x180>)
 8000cde:	f003 fe03 	bl	80048e8 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8000ce2:	217f      	movs	r1, #127	@ 0x7f
 8000ce4:	484d      	ldr	r0, [pc, #308]	@ (8000e1c <main+0x184>)
 8000ce6:	f001 ff61 	bl	8002bac <HAL_ADCEx_Calibration_Start>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <main+0x60>
	  printf("Calibration error\n");
 8000cf0:	484b      	ldr	r0, [pc, #300]	@ (8000e20 <main+0x188>)
 8000cf2:	f003 fe61 	bl	80049b8 <puts>
 8000cf6:	e002      	b.n	8000cfe <main+0x66>
  } else {
	  printf("Calibration successful\n");
 8000cf8:	484a      	ldr	r0, [pc, #296]	@ (8000e24 <main+0x18c>)
 8000cfa:	f003 fe5d 	bl	80049b8 <puts>
  }
  HAL_Delay(5000);
 8000cfe:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000d02:	f000 fb79 	bl	80013f8 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 8000d06:	4845      	ldr	r0, [pc, #276]	@ (8000e1c <main+0x184>)
 8000d08:	f000 ff96 	bl	8001c38 <HAL_ADC_Start>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d002      	beq.n	8000d18 <main+0x80>
	  printf("Error starting ADC\n");
 8000d12:	4845      	ldr	r0, [pc, #276]	@ (8000e28 <main+0x190>)
 8000d14:	f003 fe50 	bl	80049b8 <puts>
	}

	if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8000d18:	2164      	movs	r1, #100	@ 0x64
 8000d1a:	4840      	ldr	r0, [pc, #256]	@ (8000e1c <main+0x184>)
 8000d1c:	f001 f87c 	bl	8001e18 <HAL_ADC_PollForConversion>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d002      	beq.n	8000d2c <main+0x94>
		printf("Poll conversion error\n");
 8000d26:	4841      	ldr	r0, [pc, #260]	@ (8000e2c <main+0x194>)
 8000d28:	f003 fe46 	bl	80049b8 <puts>
	}
	adc_val = HAL_ADC_GetValue(&hadc1);
 8000d2c:	483b      	ldr	r0, [pc, #236]	@ (8000e1c <main+0x184>)
 8000d2e:	f001 f94b 	bl	8001fc8 <HAL_ADC_GetValue>
 8000d32:	4603      	mov	r3, r0
 8000d34:	823b      	strh	r3, [r7, #16]

	printf("ADC_VAL: %u\n", adc_val);
 8000d36:	8a3b      	ldrh	r3, [r7, #16]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	483d      	ldr	r0, [pc, #244]	@ (8000e30 <main+0x198>)
 8000d3c:	f003 fdd4 	bl	80048e8 <iprintf>
	// Implement formula for temp calc
	float top = TS_CAL2_TEMP - TS_CAL1_TEMP;
 8000d40:	ed97 7a06 	vldr	s14, [r7, #24]
 8000d44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d4c:	edc7 7a03 	vstr	s15, [r7, #12]
	float bottom = TS_CAL2 - TS_CAL1;
 8000d50:	8bba      	ldrh	r2, [r7, #28]
 8000d52:	8bfb      	ldrh	r3, [r7, #30]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	edc7 7a02 	vstr	s15, [r7, #8]
	float multiply = adc_val * 3.3/3.0 - TS_CAL1;
 8000d62:	8a3b      	ldrh	r3, [r7, #16]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fc05 	bl	8000574 <__aeabi_i2d>
 8000d6a:	a323      	add	r3, pc, #140	@ (adr r3, 8000df8 <main+0x160>)
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	f7ff fc6a 	bl	8000648 <__aeabi_dmul>
 8000d74:	4602      	mov	r2, r0
 8000d76:	460b      	mov	r3, r1
 8000d78:	4610      	mov	r0, r2
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	4b2c      	ldr	r3, [pc, #176]	@ (8000e34 <main+0x19c>)
 8000d82:	f7ff fd8b 	bl	800089c <__aeabi_ddiv>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4614      	mov	r4, r2
 8000d8c:	461d      	mov	r5, r3
 8000d8e:	8bfb      	ldrh	r3, [r7, #30]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fbef 	bl	8000574 <__aeabi_i2d>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	4629      	mov	r1, r5
 8000d9e:	f7ff fa9b 	bl	80002d8 <__aeabi_dsub>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	4610      	mov	r0, r2
 8000da8:	4619      	mov	r1, r3
 8000daa:	f7ff ff25 	bl	8000bf8 <__aeabi_d2f>
 8000dae:	4603      	mov	r3, r0
 8000db0:	607b      	str	r3, [r7, #4]

	float temp = (top / bottom) * multiply + TS_CAL1_TEMP;
 8000db2:	edd7 6a03 	vldr	s13, [r7, #12]
 8000db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000dbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc6:	ed97 7a05 	vldr	s14, [r7, #20]
 8000dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dce:	edc7 7a00 	vstr	s15, [r7]
	printf("Temperature: %f\n", temp);
 8000dd2:	6838      	ldr	r0, [r7, #0]
 8000dd4:	f7ff fbe0 	bl	8000598 <__aeabi_f2d>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4816      	ldr	r0, [pc, #88]	@ (8000e38 <main+0x1a0>)
 8000dde:	f003 fd83 	bl	80048e8 <iprintf>

	HAL_ADC_Stop(&hadc1);
 8000de2:	480e      	ldr	r0, [pc, #56]	@ (8000e1c <main+0x184>)
 8000de4:	f000 ffe4 	bl	8001db0 <HAL_ADC_Stop>
	HAL_Delay(400);
 8000de8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000dec:	f000 fb04 	bl	80013f8 <HAL_Delay>
  {
 8000df0:	e789      	b.n	8000d06 <main+0x6e>
 8000df2:	bf00      	nop
 8000df4:	f3af 8000 	nop.w
 8000df8:	66666666 	.word	0x66666666
 8000dfc:	400a6666 	.word	0x400a6666
 8000e00:	1fff75a8 	.word	0x1fff75a8
 8000e04:	1fff75ca 	.word	0x1fff75ca
 8000e08:	080068b0 	.word	0x080068b0
 8000e0c:	43020000 	.word	0x43020000
 8000e10:	41f00000 	.word	0x41f00000
 8000e14:	1fff75aa 	.word	0x1fff75aa
 8000e18:	080068cc 	.word	0x080068cc
 8000e1c:	200001f0 	.word	0x200001f0
 8000e20:	080068dc 	.word	0x080068dc
 8000e24:	080068f0 	.word	0x080068f0
 8000e28:	08006908 	.word	0x08006908
 8000e2c:	0800691c 	.word	0x0800691c
 8000e30:	08006934 	.word	0x08006934
 8000e34:	40080000 	.word	0x40080000
 8000e38:	08006944 	.word	0x08006944

08000e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b094      	sub	sp, #80	@ 0x50
 8000e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	2238      	movs	r2, #56	@ 0x38
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f003 fe94 	bl	8004b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e5e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e62:	f002 f88d 	bl	8002f80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2340      	movs	r3, #64	@ 0x40
 8000e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0318 	add.w	r3, r7, #24
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f002 f933 	bl	80030e8 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e88:	f000 f890 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e90:	2301      	movs	r3, #1
 8000e92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fc31 	bl	800370c <HAL_RCC_ClockConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000eb0:	f000 f87c 	bl	8000fac <Error_Handler>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	3750      	adds	r7, #80	@ 0x50
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ec2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2220      	movs	r2, #32
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fe4f 	bl	8004b78 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eda:	4b32      	ldr	r3, [pc, #200]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000edc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ee0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ee2:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000ee4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ee8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f02:	4b28      	ldr	r3, [pc, #160]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f04:	2204      	movs	r2, #4
 8000f06:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f08:	4b26      	ldr	r3, [pc, #152]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f14:	4b23      	ldr	r3, [pc, #140]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1a:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f22:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f46:	f000 fcf3 	bl	8001930 <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f50:	f000 f82c 	bl	8000fac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f60:	f001 fe86 	bl	8002c70 <HAL_ADCEx_MultiModeConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f6a:	f000 f81f 	bl	8000fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_ADC1_Init+0xec>)
 8000f70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f72:	2306      	movs	r3, #6
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f76:	2307      	movs	r3, #7
 8000f78:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7a:	237f      	movs	r3, #127	@ 0x7f
 8000f7c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <MX_ADC1_Init+0xe8>)
 8000f8c:	f001 f82a 	bl	8001fe4 <HAL_ADC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f96:	f000 f809 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	3730      	adds	r7, #48	@ 0x30
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001f0 	.word	0x200001f0
 8000fa8:	c3210000 	.word	0xc3210000

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_MspInit+0x44>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fee:	f002 f86b 	bl	80030c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b094      	sub	sp, #80	@ 0x50
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2244      	movs	r2, #68	@ 0x44
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f003 fdb1 	bl	8004b78 <memset>
  if(hadc->Instance==ADC1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800101e:	d11b      	bne.n	8001058 <HAL_ADC_MspInit+0x58>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001020:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001024:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001026:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800102a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fd4f 	bl	8003ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_ADC_MspInit+0x40>
    {
      Error_Handler();
 800103c:	f7ff ffb6 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <HAL_ADC_MspInit+0x60>)
 8001042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001044:	4a06      	ldr	r2, [pc, #24]	@ (8001060 <HAL_ADC_MspInit+0x60>)
 8001046:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800104a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <HAL_ADC_MspInit+0x60>)
 800104e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001058:	bf00      	nop
 800105a:	3750      	adds	r7, #80	@ 0x50
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f000 f97f 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <ITM_SendChar+0x48>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	@ (800110c <ITM_SendChar+0x48>)
 80010d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010d8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <ITM_SendChar+0x4c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a0c      	ldr	r2, [pc, #48]	@ (8001110 <ITM_SendChar+0x4c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010e6:	bf00      	nop
 80010e8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f8      	beq.n	80010e8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010f6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	6013      	str	r3, [r2, #0]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000edfc 	.word	0xe000edfc
 8001110:	e0000e00 	.word	0xe0000e00

08001114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_kill>:

int _kill(int pid, int sig)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800112e:	f003 fd75 	bl	8004c1c <__errno>
 8001132:	4603      	mov	r3, r0
 8001134:	2216      	movs	r2, #22
 8001136:	601a      	str	r2, [r3, #0]
  return -1;
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <_exit>:

void _exit (int status)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ffe7 	bl	8001124 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <_exit+0x12>

0800115a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	e00a      	b.n	8001182 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800116c:	f3af 8000 	nop.w
 8001170:	4601      	mov	r1, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	60ba      	str	r2, [r7, #8]
 8001178:	b2ca      	uxtb	r2, r1
 800117a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbf0      	blt.n	800116c <_read+0x12>
  }

  return len;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
 80011a4:	e009      	b.n	80011ba <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	60ba      	str	r2, [r7, #8]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff88 	bl	80010c4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	429a      	cmp	r2, r3
 80011c0:	dbf1      	blt.n	80011a6 <_write+0x12>
  }
  return len;
 80011c2:	687b      	ldr	r3, [r7, #4]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_close>:

int _close(int file)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f4:	605a      	str	r2, [r3, #4]
  return 0;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_isatty>:

int _isatty(int file)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800121a:	b480      	push	{r7}
 800121c:	b085      	sub	sp, #20
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	@ (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f003 fcda 	bl	8004c1c <__errno>
 8001268:	4603      	mov	r3, r0
 800126a:	220c      	movs	r2, #12
 800126c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20008000 	.word	0x20008000
 8001294:	00000400 	.word	0x00000400
 8001298:	2000025c 	.word	0x2000025c
 800129c:	200003b0 	.word	0x200003b0

080012a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	@ (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c4:	480d      	ldr	r0, [pc, #52]	@ (80012fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012c8:	f7ff ffea 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ce:	490d      	ldr	r1, [pc, #52]	@ (8001304 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001308 <LoopForever+0xe>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80012d4:	e002      	b.n	80012dc <LoopCopyDataInit>

080012d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012da:	3304      	adds	r3, #4

080012dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e0:	d3f9      	bcc.n	80012d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001310 <LoopForever+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e8:	e001      	b.n	80012ee <LoopFillZerobss>

080012ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ec:	3204      	adds	r2, #4

080012ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f0:	d3fb      	bcc.n	80012ea <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f003 fc99 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012f6:	f7ff fccf 	bl	8000c98 <main>

080012fa <LoopForever>:

LoopForever:
    b LoopForever
 80012fa:	e7fe      	b.n	80012fa <LoopForever>
  ldr   r0, =_estack
 80012fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001308:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 800130c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001310:	200003b0 	.word	0x200003b0

08001314 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC1_2_IRQHandler>

08001316 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f001 fdfb 	bl	8002f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001326:	200f      	movs	r0, #15
 8001328:	f000 f80e 	bl	8001348 <HAL_InitTick>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	71fb      	strb	r3, [r7, #7]
 8001336:	e001      	b.n	800133c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001338:	f7ff fe3e 	bl	8000fb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133c:	79fb      	ldrb	r3, [r7, #7]

}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <HAL_InitTick+0x68>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d022      	beq.n	80013a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800135c:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HAL_InitTick+0x6c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <HAL_InitTick+0x68>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001368:	fbb1 f3f3 	udiv	r3, r1, r3
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f001 fdf8 	bl	8002f66 <HAL_SYSTICK_Config>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10f      	bne.n	800139c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d809      	bhi.n	8001396 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001382:	2200      	movs	r2, #0
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	f04f 30ff 	mov.w	r0, #4294967295
 800138a:	f001 fdd2 	bl	8002f32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <HAL_InitTick+0x70>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	e007      	b.n	80013a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e004      	b.n	80013a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
 80013a0:	e001      	b.n	80013a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_IncTick+0x20>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a03      	ldr	r2, [pc, #12]	@ (80013d8 <HAL_IncTick+0x1c>)
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20000260 	.word	0x20000260
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000260 	.word	0x20000260

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d004      	beq.n	800141c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_Delay+0x40>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141c:	bf00      	nop
 800141e:	f7ff ffdf 	bl	80013e0 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	429a      	cmp	r2, r3
 800142c:	d8f7      	bhi.n	800141e <HAL_Delay+0x26>
  {
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000008 	.word	0x20000008

0800143c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	609a      	str	r2, [r3, #8]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3360      	adds	r3, #96	@ 0x60
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <LL_ADC_SetOffset+0x44>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	4313      	orrs	r3, r2
 80014d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	03fff000 	.word	0x03fff000

080014ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3360      	adds	r3, #96	@ 0x60
 80014fa:	461a      	mov	r2, r3
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	3360      	adds	r3, #96	@ 0x60
 8001528:	461a      	mov	r2, r3
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001542:	bf00      	nop
 8001544:	371c      	adds	r7, #28
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800154e:	b480      	push	{r7}
 8001550:	b087      	sub	sp, #28
 8001552:	af00      	add	r7, sp, #0
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3360      	adds	r3, #96	@ 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	431a      	orrs	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001578:	bf00      	nop
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3360      	adds	r3, #96	@ 0x60
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
 80015c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	615a      	str	r2, [r3, #20]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001606:	b480      	push	{r7}
 8001608:	b087      	sub	sp, #28
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3330      	adds	r3, #48	@ 0x30
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	0a1b      	lsrs	r3, r3, #8
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	4413      	add	r3, r2
 8001624:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	f003 031f 	and.w	r3, r3, #31
 8001630:	211f      	movs	r1, #31
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	0e9b      	lsrs	r3, r3, #26
 800163e:	f003 011f 	and.w	r1, r3, #31
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f003 031f 	and.w	r3, r3, #31
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001652:	bf00      	nop
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800165e:	b480      	push	{r7}
 8001660:	b087      	sub	sp, #28
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3314      	adds	r3, #20
 800166e:	461a      	mov	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	0e5b      	lsrs	r3, r3, #25
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	0d1b      	lsrs	r3, r3, #20
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2107      	movs	r1, #7
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	0d1b      	lsrs	r3, r3, #20
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	431a      	orrs	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016cc:	43db      	mvns	r3, r3
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0318 	and.w	r3, r3, #24
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016d8:	40d9      	lsrs	r1, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	400b      	ands	r3, r1
 80016de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e2:	431a      	orrs	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	0007ffff 	.word	0x0007ffff

080016fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 031f 	and.w	r3, r3, #31
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6093      	str	r3, [r2, #8]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800176c:	d101      	bne.n	8001772 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800176e:	2301      	movs	r3, #1
 8001770:	e000      	b.n	8001774 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001794:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001808:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <LL_ADC_IsEnabled+0x18>
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <LL_ADC_IsEnabled+0x1a>
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d101      	bne.n	800185e <LL_ADC_IsDisableOngoing+0x18>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <LL_ADC_IsDisableOngoing+0x1a>
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800187c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001880:	f043 0204 	orr.w	r2, r3, #4
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d101      	bne.n	80018d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b08      	cmp	r3, #8
 800191c:	d101      	bne.n	8001922 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e167      	b.n	8001c1a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fb51 	bl	8001000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fef1 	bl	8001758 <LL_ADC_IsDeepPowerDownEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fed7 	bl	8001734 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff0c 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fef0 	bl	8001780 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a0:	4ba0      	ldr	r3, [pc, #640]	@ (8001c24 <HAL_ADC_Init+0x2f4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	4aa0      	ldr	r2, [pc, #640]	@ (8001c28 <HAL_ADC_Init+0x2f8>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff feee 	bl	80017a8 <LL_ADC_IsInternalRegulatorEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff62 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 80019f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8100 	bne.w	8001c08 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 80fc 	bne.w	8001c08 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fefb 	bl	8001820 <LL_ADC_IsEnabled>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d111      	bne.n	8001a54 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a34:	f7ff fef4 	bl	8001820 <LL_ADC_IsEnabled>
 8001a38:	4604      	mov	r4, r0
 8001a3a:	487c      	ldr	r0, [pc, #496]	@ (8001c2c <HAL_ADC_Init+0x2fc>)
 8001a3c:	f7ff fef0 	bl	8001820 <LL_ADC_IsEnabled>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4323      	orrs	r3, r4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4878      	ldr	r0, [pc, #480]	@ (8001c30 <HAL_ADC_Init+0x300>)
 8001a50:	f7ff fcf4 	bl	800143c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7f5b      	ldrb	r3, [r3, #29]
 8001a58:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a5e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001a64:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001a6a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a72:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d106      	bne.n	8001a90 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a86:	3b01      	subs	r3, #1
 8001a88:	045b      	lsls	r3, r3, #17
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d009      	beq.n	8001aac <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a9c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68da      	ldr	r2, [r3, #12]
 8001ab2:	4b60      	ldr	r3, [pc, #384]	@ (8001c34 <HAL_ADC_Init+0x304>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	69b9      	ldr	r1, [r7, #24]
 8001abc:	430b      	orrs	r3, r1
 8001abe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff15 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 8001ae0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d16d      	bne.n	8001bc4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d16a      	bne.n	8001bc4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001af2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001afa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b0a:	f023 0302 	bic.w	r3, r3, #2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	69b9      	ldr	r1, [r7, #24]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d017      	beq.n	8001b50 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6911      	ldr	r1, [r2, #16]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001b4e:	e013      	b.n	8001b78 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001b5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b74:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d118      	bne.n	8001bb4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001b9e:	4311      	orrs	r1, r2
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	e007      	b.n	8001bc4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10c      	bne.n	8001be6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f023 010f 	bic.w	r1, r3, #15
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001be4:	e007      	b.n	8001bf6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 020f 	bic.w	r2, r2, #15
 8001bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfa:	f023 0303 	bic.w	r3, r3, #3
 8001bfe:	f043 0201 	orr.w	r2, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c06:	e007      	b.n	8001c18 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	f043 0210 	orr.w	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3724      	adds	r7, #36	@ 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd90      	pop	{r4, r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000000 	.word	0x20000000
 8001c28:	053e2d63 	.word	0x053e2d63
 8001c2c:	50000100 	.word	0x50000100
 8001c30:	50000300 	.word	0x50000300
 8001c34:	fff04007 	.word	0xfff04007

08001c38 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c40:	4859      	ldr	r0, [pc, #356]	@ (8001da8 <HAL_ADC_Start+0x170>)
 8001c42:	f7ff fd5b 	bl	80016fc <LL_ADC_GetMultimode>
 8001c46:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fe35 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 809f 	bne.w	8001d98 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_Start+0x30>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e09a      	b.n	8001d9e <HAL_ADC_Start+0x166>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 fe63 	bl	800293c <ADC_Enable>
 8001c76:	4603      	mov	r3, r0
 8001c78:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 8086 	bne.w	8001d8e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c86:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a44      	ldr	r2, [pc, #272]	@ (8001dac <HAL_ADC_Start+0x174>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d002      	beq.n	8001ca6 <HAL_ADC_Start+0x6e>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e001      	b.n	8001caa <HAL_ADC_Start+0x72>
 8001ca6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d002      	beq.n	8001cb8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	f023 0206 	bic.w	r2, r3, #6
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	661a      	str	r2, [r3, #96]	@ 0x60
 8001cde:	e002      	b.n	8001ce6 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	221c      	movs	r2, #28
 8001cec:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	@ (8001dac <HAL_ADC_Start+0x174>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d002      	beq.n	8001d06 <HAL_ADC_Start+0xce>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e001      	b.n	8001d0a <HAL_ADC_Start+0xd2>
 8001d06:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d008      	beq.n	8001d24 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d005      	beq.n	8001d24 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2b05      	cmp	r3, #5
 8001d1c:	d002      	beq.n	8001d24 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b09      	cmp	r3, #9
 8001d22:	d114      	bne.n	8001d4e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d36:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d3a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fd90 	bl	800186c <LL_ADC_REG_StartConversion>
 8001d4c:	e026      	b.n	8001d9c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d52:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a13      	ldr	r2, [pc, #76]	@ (8001dac <HAL_ADC_Start+0x174>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d002      	beq.n	8001d6a <HAL_ADC_Start+0x132>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	e001      	b.n	8001d6e <HAL_ADC_Start+0x136>
 8001d6a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d6e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00f      	beq.n	8001d9c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d8c:	e006      	b.n	8001d9c <HAL_ADC_Start+0x164>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001d96:	e001      	b.n	8001d9c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	50000300 	.word	0x50000300
 8001dac:	50000100 	.word	0x50000100

08001db0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Stop+0x16>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e023      	b.n	8001e0e <HAL_ADC_Stop+0x5e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001dce:	2103      	movs	r1, #3
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fcf7 	bl	80027c4 <ADC_ConversionStop>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d111      	bne.n	8001e04 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fe31 	bl	8002a48 <ADC_Disable>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e22:	4867      	ldr	r0, [pc, #412]	@ (8001fc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e24:	f7ff fc6a 	bl	80016fc <LL_ADC_GetMultimode>
 8001e28:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d102      	bne.n	8001e38 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001e32:	2308      	movs	r3, #8
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e02a      	b.n	8001e8e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d002      	beq.n	8001e4a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b09      	cmp	r3, #9
 8001e48:	d111      	bne.n	8001e6e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	f043 0220 	orr.w	r2, r3, #32
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0a6      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e68:	2304      	movs	r3, #4
 8001e6a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001e6c:	e00f      	b.n	8001e8e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001e6e:	4854      	ldr	r0, [pc, #336]	@ (8001fc0 <HAL_ADC_PollForConversion+0x1a8>)
 8001e70:	f7ff fc52 	bl	8001718 <LL_ADC_GetMultiDMATransfer>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7e:	f043 0220 	orr.w	r2, r3, #32
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e095      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001e8e:	f7ff faa7 	bl	80013e0 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001e94:	e021      	b.n	8001eda <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9c:	d01d      	beq.n	8001eda <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001e9e:	f7ff fa9f 	bl	80013e0 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <HAL_ADC_PollForConversion+0x9c>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d112      	bne.n	8001eda <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec6:	f043 0204 	orr.w	r2, r3, #4
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e06d      	b.n	8001fb6 <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0d6      	beq.n	8001e96 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fb71 	bl	80015e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7f5b      	ldrb	r3, [r3, #29]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d118      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a20      	ldr	r2, [pc, #128]	@ (8001fc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d002      	beq.n	8001f4e <HAL_ADC_PollForConversion+0x136>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	e001      	b.n	8001f52 <HAL_ADC_PollForConversion+0x13a>
 8001f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d008      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d002      	beq.n	8001f6c <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d104      	bne.n	8001f76 <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	61bb      	str	r3, [r7, #24]
 8001f74:	e00d      	b.n	8001f92 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a12      	ldr	r2, [pc, #72]	@ (8001fc4 <HAL_ADC_PollForConversion+0x1ac>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d002      	beq.n	8001f86 <HAL_ADC_PollForConversion+0x16e>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e001      	b.n	8001f8a <HAL_ADC_PollForConversion+0x172>
 8001f86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f8a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d104      	bne.n	8001fa2 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	e008      	b.n	8001fb4 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d103      	bne.n	8001fb4 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	50000300 	.word	0x50000300
 8001fc4:	50000100 	.word	0x50000100

08001fc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b0b6      	sub	sp, #216	@ 0xd8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_ADC_ConfigChannel+0x22>
 8002002:	2302      	movs	r3, #2
 8002004:	e3c8      	b.n	8002798 <HAL_ADC_ConfigChannel+0x7b4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fc52 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 83ad 	bne.w	800277a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	f7ff faea 	bl	8001606 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fc40 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 800203c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fc60 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 800204a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800204e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 81d9 	bne.w	800240a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002058:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 81d4 	bne.w	800240a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800206a:	d10f      	bne.n	800208c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2200      	movs	r2, #0
 8002076:	4619      	mov	r1, r3
 8002078:	f7ff faf1 	bl	800165e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fa98 	bl	80015ba <LL_ADC_SetSamplingTimeCommonConfig>
 800208a:	e00e      	b.n	80020aa <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6819      	ldr	r1, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	461a      	mov	r2, r3
 800209a:	f7ff fae0 	bl	800165e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fa88 	bl	80015ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	695a      	ldr	r2, [r3, #20]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d022      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80020dc:	f7ff f9e2 	bl	80014a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	461a      	mov	r2, r3
 80020ee:	f7ff fa2e 	bl	800154e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x124>
 8002102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002106:	e000      	b.n	800210a <HAL_ADC_ConfigChannel+0x126>
 8002108:	2300      	movs	r3, #0
 800210a:	461a      	mov	r2, r3
 800210c:	f7ff fa3a 	bl	8001584 <LL_ADC_SetOffsetSaturation>
 8002110:	e17b      	b.n	800240a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff f9e7 	bl	80014ec <LL_ADC_GetOffsetChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <HAL_ADC_ConfigChannel+0x15a>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f9dc 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	0e9b      	lsrs	r3, r3, #26
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	e01e      	b.n	800217c <HAL_ADC_ConfigChannel+0x198>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff f9d1 	bl	80014ec <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002154:	fa93 f3a3 	rbit	r3, r3
 8002158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800215c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002160:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e004      	b.n	800217a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002170:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1b0>
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0e9b      	lsrs	r3, r3, #26
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	e018      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1e2>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80021a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80021b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80021b8:	2320      	movs	r3, #32
 80021ba:	e004      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80021bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f9a0 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2101      	movs	r1, #1
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff f984 	bl	80014ec <LL_ADC_GetOffsetChannel>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x220>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff f979 	bl	80014ec <LL_ADC_GetOffsetChannel>
 80021fa:	4603      	mov	r3, r0
 80021fc:	0e9b      	lsrs	r3, r3, #26
 80021fe:	f003 021f 	and.w	r2, r3, #31
 8002202:	e01e      	b.n	8002242 <HAL_ADC_ConfigChannel+0x25e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f96e 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e004      	b.n	8002240 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002236:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_ConfigChannel+0x276>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	e018      	b.n	800228c <HAL_ADC_ConfigChannel+0x2a8>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800226e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002276:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800227e:	2320      	movs	r3, #32
 8002280:	e004      	b.n	800228c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002282:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800228c:	429a      	cmp	r2, r3
 800228e:	d106      	bne.n	800229e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff f93d 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2102      	movs	r1, #2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f921 	bl	80014ec <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10a      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x2e6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f916 	bl	80014ec <LL_ADC_GetOffsetChannel>
 80022c0:	4603      	mov	r3, r0
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	e01e      	b.n	8002308 <HAL_ADC_ConfigChannel+0x324>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2102      	movs	r1, #2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f90b 	bl	80014ec <LL_ADC_GetOffsetChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e0:	fa93 f3a3 	rbit	r3, r3
 80022e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80022e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80022f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e004      	b.n	8002306 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80022fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002300:	fab3 f383 	clz	r3, r3
 8002304:	b2db      	uxtb	r3, r3
 8002306:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x33c>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e9b      	lsrs	r3, r3, #26
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	e016      	b.n	800234e <HAL_ADC_ConfigChannel+0x36a>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002332:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e004      	b.n	800234e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800234e:	429a      	cmp	r2, r3
 8002350:	d106      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	2102      	movs	r1, #2
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f8dc 	bl	8001518 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2103      	movs	r1, #3
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff f8c0 	bl	80014ec <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <HAL_ADC_ConfigChannel+0x3a8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2103      	movs	r1, #3
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff f8b5 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	0e9b      	lsrs	r3, r3, #26
 8002386:	f003 021f 	and.w	r2, r3, #31
 800238a:	e017      	b.n	80023bc <HAL_ADC_ConfigChannel+0x3d8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2103      	movs	r1, #3
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f8aa 	bl	80014ec <LL_ADC_GetOffsetChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80023a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80023a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80023a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80023b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d105      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x3f0>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	f003 031f 	and.w	r3, r3, #31
 80023d2:	e011      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x414>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80023e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80023e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80023f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f887 	bl	8001518 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fa06 	bl	8001820 <LL_ADC_IsEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	f040 8140 	bne.w	800269c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	461a      	mov	r2, r3
 800242a:	f7ff f943 	bl	80016b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4a8f      	ldr	r2, [pc, #572]	@ (8002670 <HAL_ADC_ConfigChannel+0x68c>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f040 8131 	bne.w	800269c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x47e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2b09      	cmp	r3, #9
 8002458:	bf94      	ite	ls
 800245a:	2301      	movls	r3, #1
 800245c:	2300      	movhi	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	e019      	b.n	8002496 <HAL_ADC_ConfigChannel+0x4b2>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002472:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002474:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800247e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b09      	cmp	r3, #9
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002496:	2b00      	cmp	r3, #0
 8002498:	d079      	beq.n	800258e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x4d2>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0e9b      	lsrs	r3, r3, #26
 80024ac:	3301      	adds	r3, #1
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024b4:	e015      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x4fe>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80024c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024c6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80024c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80024ce:	2320      	movs	r3, #32
 80024d0:	e003      	b.n	80024da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80024d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	069b      	lsls	r3, r3, #26
 80024de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d109      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x51e>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	0e9b      	lsrs	r3, r3, #26
 80024f4:	3301      	adds	r3, #1
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2101      	movs	r1, #1
 80024fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002500:	e017      	b.n	8002532 <HAL_ADC_ConfigChannel+0x54e>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002512:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800251e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	ea42 0103 	orr.w	r1, r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x574>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	051b      	lsls	r3, r3, #20
 8002556:	e018      	b.n	800258a <HAL_ADC_ConfigChannel+0x5a6>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002560:	fa93 f3a3 	rbit	r3, r3
 8002564:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002568:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800256a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002570:	2320      	movs	r3, #32
 8002572:	e003      	b.n	800257c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	3301      	adds	r3, #1
 800257e:	f003 021f 	and.w	r2, r3, #31
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800258a:	430b      	orrs	r3, r1
 800258c:	e081      	b.n	8002692 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d107      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x5c6>
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0e9b      	lsrs	r3, r3, #26
 80025a0:	3301      	adds	r3, #1
 80025a2:	069b      	lsls	r3, r3, #26
 80025a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a8:	e015      	b.n	80025d6 <HAL_ADC_ConfigChannel+0x5f2>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80025b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80025c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	069b      	lsls	r3, r3, #26
 80025d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d109      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x612>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0e9b      	lsrs	r3, r3, #26
 80025e8:	3301      	adds	r3, #1
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2101      	movs	r1, #1
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	e017      	b.n	8002626 <HAL_ADC_ConfigChannel+0x642>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	61fb      	str	r3, [r7, #28]
  return result;
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	ea42 0103 	orr.w	r1, r2, r3
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x66e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	3301      	adds	r3, #1
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	3b1e      	subs	r3, #30
 800264a:	051b      	lsls	r3, r3, #20
 800264c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002650:	e01e      	b.n	8002690 <HAL_ADC_ConfigChannel+0x6ac>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	613b      	str	r3, [r7, #16]
  return result;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800266a:	2320      	movs	r3, #32
 800266c:	e006      	b.n	800267c <HAL_ADC_ConfigChannel+0x698>
 800266e:	bf00      	nop
 8002670:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f003 021f 	and.w	r2, r3, #31
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	3b1e      	subs	r3, #30
 800268a:	051b      	lsls	r3, r3, #20
 800268c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002690:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002696:	4619      	mov	r1, r3
 8002698:	f7fe ffe1 	bl	800165e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b3f      	ldr	r3, [pc, #252]	@ (80027a0 <HAL_ADC_ConfigChannel+0x7bc>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d071      	beq.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026a8:	483e      	ldr	r0, [pc, #248]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80026aa:	f7fe feed 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 80026ae:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3c      	ldr	r2, [pc, #240]	@ (80027a8 <HAL_ADC_ConfigChannel+0x7c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_ConfigChannel+0x6e2>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a3a      	ldr	r2, [pc, #232]	@ (80027ac <HAL_ADC_ConfigChannel+0x7c8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d127      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d121      	bne.n	8002716 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026da:	d157      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026e4:	4619      	mov	r1, r3
 80026e6:	482f      	ldr	r0, [pc, #188]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7c0>)
 80026e8:	f7fe febb 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026ec:	4b30      	ldr	r3, [pc, #192]	@ (80027b0 <HAL_ADC_ConfigChannel+0x7cc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <HAL_ADC_ConfigChannel+0x7d0>)
 80026f4:	fba2 2303 	umull	r2, r3, r2, r3
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002706:	e002      	b.n	800270e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3b01      	subs	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002714:	e03a      	b.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a27      	ldr	r2, [pc, #156]	@ (80027b8 <HAL_ADC_ConfigChannel+0x7d4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d113      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002720:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a22      	ldr	r2, [pc, #136]	@ (80027bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d02a      	beq.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800273a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800273e:	4619      	mov	r1, r3
 8002740:	4818      	ldr	r0, [pc, #96]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002742:	f7fe fe8e 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002746:	e021      	b.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_ADC_ConfigChannel+0x7dc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d11c      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d116      	bne.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a16      	ldr	r2, [pc, #88]	@ (80027bc <HAL_ADC_ConfigChannel+0x7d8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d011      	beq.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800276c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002770:	4619      	mov	r1, r3
 8002772:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002774:	f7fe fe75 	bl	8001462 <LL_ADC_SetCommonPathInternalCh>
 8002778:	e008      	b.n	800278c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277e:	f043 0220 	orr.w	r2, r3, #32
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002794:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002798:	4618      	mov	r0, r3
 800279a:	37d8      	adds	r7, #216	@ 0xd8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	80080000 	.word	0x80080000
 80027a4:	50000300 	.word	0x50000300
 80027a8:	c3210000 	.word	0xc3210000
 80027ac:	90c00010 	.word	0x90c00010
 80027b0:	20000000 	.word	0x20000000
 80027b4:	053e2d63 	.word	0x053e2d63
 80027b8:	c7520000 	.word	0xc7520000
 80027bc:	50000100 	.word	0x50000100
 80027c0:	cb840000 	.word	0xcb840000

080027c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f86e 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 80027e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff f88f 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 80027ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8098 	beq.w	800292c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d02a      	beq.n	8002860 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	7f5b      	ldrb	r3, [r3, #29]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d126      	bne.n	8002860 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7f1b      	ldrb	r3, [r3, #28]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d122      	bne.n	8002860 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800281a:	2301      	movs	r3, #1
 800281c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800281e:	e014      	b.n	800284a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4a45      	ldr	r2, [pc, #276]	@ (8002938 <ADC_ConversionStop+0x174>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d90d      	bls.n	8002844 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282c:	f043 0210 	orr.w	r2, r3, #16
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e074      	b.n	800292e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3301      	adds	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002854:	2b40      	cmp	r3, #64	@ 0x40
 8002856:	d1e3      	bne.n	8002820 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2240      	movs	r2, #64	@ 0x40
 800285e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d014      	beq.n	8002890 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff f826 	bl	80018bc <LL_ADC_REG_IsConversionOngoing>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00c      	beq.n	8002890 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe ffe3 	bl	8001846 <LL_ADC_IsDisableOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d104      	bne.n	8002890 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff f802 	bl	8001894 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d014      	beq.n	80028c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f835 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe ffcb 	bl	8001846 <LL_ADC_IsDisableOngoing>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d104      	bne.n	80028c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff f811 	bl	80018e2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d005      	beq.n	80028d2 <ADC_ConversionStop+0x10e>
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d105      	bne.n	80028d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80028cc:	230c      	movs	r3, #12
 80028ce:	617b      	str	r3, [r7, #20]
        break;
 80028d0:	e005      	b.n	80028de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80028d2:	2308      	movs	r3, #8
 80028d4:	617b      	str	r3, [r7, #20]
        break;
 80028d6:	e002      	b.n	80028de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80028d8:	2304      	movs	r3, #4
 80028da:	617b      	str	r3, [r7, #20]
        break;
 80028dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80028de:	f7fe fd7f 	bl	80013e0 <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028e4:	e01b      	b.n	800291e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028e6:	f7fe fd7b 	bl	80013e0 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d914      	bls.n	800291e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00d      	beq.n	800291e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	f043 0210 	orr.w	r2, r3, #16
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e007      	b.n	800292e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	4013      	ands	r3, r2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1dc      	bne.n	80028e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3720      	adds	r7, #32
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	a33fffff 	.word	0xa33fffff

0800293c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe ff67 	bl	8001820 <LL_ADC_IsEnabled>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d169      	bne.n	8002a2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	4b36      	ldr	r3, [pc, #216]	@ (8002a38 <ADC_Enable+0xfc>)
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00d      	beq.n	8002982 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	f043 0210 	orr.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	f043 0201 	orr.w	r2, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e055      	b.n	8002a2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe ff22 	bl	80017d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800298c:	482b      	ldr	r0, [pc, #172]	@ (8002a3c <ADC_Enable+0x100>)
 800298e:	f7fe fd7b 	bl	8001488 <LL_ADC_GetCommonPathInternalCh>
 8002992:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002998:	2b00      	cmp	r3, #0
 800299a:	d013      	beq.n	80029c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800299c:	4b28      	ldr	r3, [pc, #160]	@ (8002a40 <ADC_Enable+0x104>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	099b      	lsrs	r3, r3, #6
 80029a2:	4a28      	ldr	r2, [pc, #160]	@ (8002a44 <ADC_Enable+0x108>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	099b      	lsrs	r3, r3, #6
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029b6:	e002      	b.n	80029be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f9      	bne.n	80029b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80029c4:	f7fe fd0c 	bl	80013e0 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029ca:	e028      	b.n	8002a1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ff25 	bl	8001820 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe fef5 	bl	80017d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029e6:	f7fe fcfb 	bl	80013e0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d914      	bls.n	8002a1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d00d      	beq.n	8002a1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a06:	f043 0210 	orr.w	r2, r3, #16
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a12:	f043 0201 	orr.w	r2, r3, #1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e007      	b.n	8002a2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d1cf      	bne.n	80029cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	8000003f 	.word	0x8000003f
 8002a3c:	50000300 	.word	0x50000300
 8002a40:	20000000 	.word	0x20000000
 8002a44:	053e2d63 	.word	0x053e2d63

08002a48 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fef6 	bl	8001846 <LL_ADC_IsDisableOngoing>
 8002a5a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe fedd 	bl	8001820 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d047      	beq.n	8002afc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d144      	bne.n	8002afc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030d 	and.w	r3, r3, #13
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d10c      	bne.n	8002a9a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe feb7 	bl	80017f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fca5 	bl	80013e0 <HAL_GetTick>
 8002a96:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a98:	e029      	b.n	8002aee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9e:	f043 0210 	orr.w	r2, r3, #16
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e023      	b.n	8002afe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ab6:	f7fe fc93 	bl	80013e0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d914      	bls.n	8002aee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e007      	b.n	8002afe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1dc      	bne.n	8002ab6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <LL_ADC_IsEnabled>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <LL_ADC_IsEnabled+0x18>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <LL_ADC_IsEnabled+0x1a>
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_StartCalibration>:
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002b3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_ADC_IsCalibrationOnGoing>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b72:	d101      	bne.n	8002b78 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8002b86:	b480      	push	{r7}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d101      	bne.n	8002b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e04d      	b.n	8002c64 <HAL_ADCEx_Calibration_Start+0xb8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff39 	bl	8002a48 <ADC_Disable>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d136      	bne.n	8002c4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002be8:	f023 0302 	bic.w	r3, r3, #2
 8002bec:	f043 0202 	orr.w	r2, r3, #2
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6839      	ldr	r1, [r7, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff96 	bl	8002b2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c00:	e014      	b.n	8002c2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3301      	adds	r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d90d      	bls.n	8002c2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f023 0312 	bic.w	r3, r3, #18
 8002c18:	f043 0210 	orr.w	r2, r3, #16
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e01b      	b.n	8002c64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff ff94 	bl	8002b5e <LL_ADC_IsCalibrationOnGoing>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e2      	bne.n	8002c02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c40:	f023 0303 	bic.w	r3, r3, #3
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c4c:	e005      	b.n	8002c5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c52:	f043 0210 	orr.w	r2, r3, #16
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	0004de01 	.word	0x0004de01

08002c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c70:	b590      	push	{r4, r7, lr}
 8002c72:	b0a1      	sub	sp, #132	@ 0x84
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e08b      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c96:	2300      	movs	r3, #0
 8002c98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ca6:	d102      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ca8:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	e001      	b.n	8002cb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10b      	bne.n	8002cd0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	f043 0220 	orr.w	r2, r3, #32
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e06a      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff ff57 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002cd8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff51 	bl	8002b86 <LL_ADC_REG_IsConversionOngoing>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d14c      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d149      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cf0:	4b30      	ldr	r3, [pc, #192]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cf2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d028      	beq.n	8002d4e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d0e:	035b      	lsls	r3, r3, #13
 8002d10:	430b      	orrs	r3, r1
 8002d12:	431a      	orrs	r2, r3
 8002d14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d1c:	f7ff fef3 	bl	8002b06 <LL_ADC_IsEnabled>
 8002d20:	4604      	mov	r4, r0
 8002d22:	4823      	ldr	r0, [pc, #140]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d24:	f7ff feef 	bl	8002b06 <LL_ADC_IsEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4323      	orrs	r3, r4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d133      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	6811      	ldr	r1, [r2, #0]
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d4a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d4c:	e024      	b.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d5a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d5e:	f7ff fed2 	bl	8002b06 <LL_ADC_IsEnabled>
 8002d62:	4604      	mov	r4, r0
 8002d64:	4812      	ldr	r0, [pc, #72]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d66:	f7ff fece 	bl	8002b06 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4323      	orrs	r3, r4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d112      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d82:	e009      	b.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d96:	e000      	b.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002da2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3784      	adds	r7, #132	@ 0x84
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	50000100 	.word	0x50000100
 8002db4:	50000300 	.word	0x50000300

08002db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f003 0307 	and.w	r3, r3, #7
 8002dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <__NVIC_SetPriorityGrouping+0x44>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dea:	4a04      	ldr	r2, [pc, #16]	@ (8002dfc <__NVIC_SetPriorityGrouping+0x44>)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	60d3      	str	r3, [r2, #12]
}
 8002df0:	bf00      	nop
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e04:	4b04      	ldr	r3, [pc, #16]	@ (8002e18 <__NVIC_GetPriorityGrouping+0x18>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	f003 0307 	and.w	r3, r3, #7
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000ed00 	.word	0xe000ed00

08002e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db0a      	blt.n	8002e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	490c      	ldr	r1, [pc, #48]	@ (8002e68 <__NVIC_SetPriority+0x4c>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e44:	e00a      	b.n	8002e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <__NVIC_SetPriority+0x50>)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	3b04      	subs	r3, #4
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	440b      	add	r3, r1
 8002e5a:	761a      	strb	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f1c3 0307 	rsb	r3, r3, #7
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	bf28      	it	cs
 8002e8e:	2304      	movcs	r3, #4
 8002e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d902      	bls.n	8002ea0 <NVIC_EncodePriority+0x30>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3b03      	subs	r3, #3
 8002e9e:	e000      	b.n	8002ea2 <NVIC_EncodePriority+0x32>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43d9      	mvns	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	4313      	orrs	r3, r2
         );
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
	...

08002ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ee8:	d301      	bcc.n	8002eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eea:	2301      	movs	r3, #1
 8002eec:	e00f      	b.n	8002f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eee:	4a0a      	ldr	r2, [pc, #40]	@ (8002f18 <SysTick_Config+0x40>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ef6:	210f      	movs	r1, #15
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f7ff ff8e 	bl	8002e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f00:	4b05      	ldr	r3, [pc, #20]	@ (8002f18 <SysTick_Config+0x40>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f06:	4b04      	ldr	r3, [pc, #16]	@ (8002f18 <SysTick_Config+0x40>)
 8002f08:	2207      	movs	r2, #7
 8002f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000e010 	.word	0xe000e010

08002f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff47 	bl	8002db8 <__NVIC_SetPriorityGrouping>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f40:	f7ff ff5e 	bl	8002e00 <__NVIC_GetPriorityGrouping>
 8002f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	6978      	ldr	r0, [r7, #20]
 8002f4c:	f7ff ff90 	bl	8002e70 <NVIC_EncodePriority>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff ff5f 	bl	8002e1c <__NVIC_SetPriority>
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff ffb2 	bl	8002ed8 <SysTick_Config>
 8002f74:	4603      	mov	r3, r0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d141      	bne.n	8003012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8e:	4b4b      	ldr	r3, [pc, #300]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9a:	d131      	bne.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f9c:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa2:	4a46      	ldr	r2, [pc, #280]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fac:	4b43      	ldr	r3, [pc, #268]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fb4:	4a41      	ldr	r2, [pc, #260]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fbc:	4b40      	ldr	r3, [pc, #256]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2232      	movs	r2, #50	@ 0x32
 8002fc2:	fb02 f303 	mul.w	r3, r2, r3
 8002fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80030c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fcc:	0c9b      	lsrs	r3, r3, #18
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fd2:	e002      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fda:	4b38      	ldr	r3, [pc, #224]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe6:	d102      	bne.n	8002fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fee:	4b33      	ldr	r3, [pc, #204]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ffa:	d158      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e057      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003000:	4b2e      	ldr	r3, [pc, #184]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003006:	4a2d      	ldr	r2, [pc, #180]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003008:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800300c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003010:	e04d      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003018:	d141      	bne.n	800309e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800301a:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	d131      	bne.n	800308c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003028:	4b24      	ldr	r3, [pc, #144]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800302a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800302e:	4a23      	ldr	r2, [pc, #140]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003034:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003040:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003042:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2232      	movs	r2, #50	@ 0x32
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	4a1c      	ldr	r2, [pc, #112]	@ (80030c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	3301      	adds	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800305e:	e002      	b.n	8003066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3b01      	subs	r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003072:	d102      	bne.n	800307a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f2      	bne.n	8003060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307a:	4b10      	ldr	r3, [pc, #64]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003086:	d112      	bne.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e011      	b.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800308c:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003092:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003098:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800309c:	e007      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800309e:	4b07      	ldr	r3, [pc, #28]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a6:	4a05      	ldr	r2, [pc, #20]	@ (80030bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40007000 	.word	0x40007000
 80030c0:	20000000 	.word	0x20000000
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80030cc:	4b05      	ldr	r3, [pc, #20]	@ (80030e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4a04      	ldr	r2, [pc, #16]	@ (80030e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80030d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030d6:	6093      	str	r3, [r2, #8]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000

080030e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e2fe      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d075      	beq.n	80031f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003106:	4b97      	ldr	r3, [pc, #604]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003110:	4b94      	ldr	r3, [pc, #592]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d102      	bne.n	8003126 <HAL_RCC_OscConfig+0x3e>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d002      	beq.n	800312c <HAL_RCC_OscConfig+0x44>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d10b      	bne.n	8003144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	4b8d      	ldr	r3, [pc, #564]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05b      	beq.n	80031f0 <HAL_RCC_OscConfig+0x108>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d157      	bne.n	80031f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e2d9      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d106      	bne.n	800315c <HAL_RCC_OscConfig+0x74>
 800314e:	4b85      	ldr	r3, [pc, #532]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a84      	ldr	r2, [pc, #528]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e01d      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x98>
 8003166:	4b7f      	ldr	r3, [pc, #508]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7e      	ldr	r2, [pc, #504]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800316c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	4b7c      	ldr	r3, [pc, #496]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7b      	ldr	r2, [pc, #492]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e00b      	b.n	8003198 <HAL_RCC_OscConfig+0xb0>
 8003180:	4b78      	ldr	r3, [pc, #480]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a77      	ldr	r2, [pc, #476]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b75      	ldr	r3, [pc, #468]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a74      	ldr	r2, [pc, #464]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d013      	beq.n	80031c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a0:	f7fe f91e 	bl	80013e0 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a8:	f7fe f91a 	bl	80013e0 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b64      	cmp	r3, #100	@ 0x64
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e29e      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0xc0>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c8:	f7fe f90a 	bl	80013e0 <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7fe f906 	bl	80013e0 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	@ 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e28a      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	4b60      	ldr	r3, [pc, #384]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <HAL_RCC_OscConfig+0xe8>
 80031ee:	e000      	b.n	80031f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031fe:	4b59      	ldr	r3, [pc, #356]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003208:	4b56      	ldr	r3, [pc, #344]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	f003 0303 	and.w	r3, r3, #3
 8003210:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d102      	bne.n	800321e <HAL_RCC_OscConfig+0x136>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d002      	beq.n	8003224 <HAL_RCC_OscConfig+0x13c>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d11f      	bne.n	8003264 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003224:	4b4f      	ldr	r3, [pc, #316]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_OscConfig+0x154>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e25d      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323c:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	4946      	ldr	r1, [pc, #280]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003250:	4b45      	ldr	r3, [pc, #276]	@ (8003368 <HAL_RCC_OscConfig+0x280>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe f877 	bl	8001348 <HAL_InitTick>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d043      	beq.n	80032e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e249      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3c      	ldr	r2, [pc, #240]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe f8b2 	bl	80013e0 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003280:	f7fe f8ae 	bl	80013e0 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e232      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003292:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329e:	4b31      	ldr	r3, [pc, #196]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	492d      	ldr	r1, [pc, #180]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
 80032b2:	e01a      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe f88e 	bl	80013e0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe f88a 	bl	80013e0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e20e      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032da:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1e0>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d041      	beq.n	800337a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01c      	beq.n	8003338 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b19      	ldr	r3, [pc, #100]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003300:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003304:	4a17      	ldr	r2, [pc, #92]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe f867 	bl	80013e0 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fe f863 	bl	80013e0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e1e7      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003328:	4b0e      	ldr	r3, [pc, #56]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800332a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ef      	beq.n	8003316 <HAL_RCC_OscConfig+0x22e>
 8003336:	e020      	b.n	800337a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333e:	4a09      	ldr	r2, [pc, #36]	@ (8003364 <HAL_RCC_OscConfig+0x27c>)
 8003340:	f023 0301 	bic.w	r3, r3, #1
 8003344:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003348:	f7fe f84a 	bl	80013e0 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334e:	e00d      	b.n	800336c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fe f846 	bl	80013e0 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d906      	bls.n	800336c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e1ca      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800336c:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ea      	bne.n	8003350 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 80a6 	beq.w	80034d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003388:	2300      	movs	r3, #0
 800338a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800338c:	4b84      	ldr	r3, [pc, #528]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_RCC_OscConfig+0x2b4>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_RCC_OscConfig+0x2b6>
 800339c:	2300      	movs	r3, #0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	4b7f      	ldr	r3, [pc, #508]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	4a7e      	ldr	r2, [pc, #504]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ae:	4b7c      	ldr	r3, [pc, #496]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80033ba:	2301      	movs	r3, #1
 80033bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033be:	4b79      	ldr	r3, [pc, #484]	@ (80035a4 <HAL_RCC_OscConfig+0x4bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ca:	4b76      	ldr	r3, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x4bc>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a75      	ldr	r2, [pc, #468]	@ (80035a4 <HAL_RCC_OscConfig+0x4bc>)
 80033d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d6:	f7fe f803 	bl	80013e0 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fd ffff 	bl	80013e0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e183      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033f0:	4b6c      	ldr	r3, [pc, #432]	@ (80035a4 <HAL_RCC_OscConfig+0x4bc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0f0      	beq.n	80033de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d108      	bne.n	8003416 <HAL_RCC_OscConfig+0x32e>
 8003404:	4b66      	ldr	r3, [pc, #408]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a65      	ldr	r2, [pc, #404]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800340c:	f043 0301 	orr.w	r3, r3, #1
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003414:	e024      	b.n	8003460 <HAL_RCC_OscConfig+0x378>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d110      	bne.n	8003440 <HAL_RCC_OscConfig+0x358>
 800341e:	4b60      	ldr	r3, [pc, #384]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	4a5e      	ldr	r2, [pc, #376]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800342e:	4b5c      	ldr	r3, [pc, #368]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	4a5a      	ldr	r2, [pc, #360]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x378>
 8003440:	4b57      	ldr	r3, [pc, #348]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a56      	ldr	r2, [pc, #344]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003448:	f023 0301 	bic.w	r3, r3, #1
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003456:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003458:	f023 0304 	bic.w	r3, r3, #4
 800345c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d016      	beq.n	8003496 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fd ffba 	bl	80013e0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800346e:	e00a      	b.n	8003486 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003470:	f7fd ffb6 	bl	80013e0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347e:	4293      	cmp	r3, r2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e138      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003486:	4b46      	ldr	r3, [pc, #280]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ed      	beq.n	8003470 <HAL_RCC_OscConfig+0x388>
 8003494:	e015      	b.n	80034c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003496:	f7fd ffa3 	bl	80013e0 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800349c:	e00a      	b.n	80034b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349e:	f7fd ff9f 	bl	80013e0 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e121      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034b4:	4b3a      	ldr	r3, [pc, #232]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ed      	bne.n	800349e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c2:	7ffb      	ldrb	r3, [r7, #31]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b35      	ldr	r3, [pc, #212]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034cc:	4a34      	ldr	r2, [pc, #208]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03c      	beq.n	800355a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034e8:	4b2d      	ldr	r3, [pc, #180]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80034ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ee:	4a2c      	ldr	r2, [pc, #176]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fd ff72 	bl	80013e0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003500:	f7fd ff6e 	bl	80013e0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0f2      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003512:	4b23      	ldr	r3, [pc, #140]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003514:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x418>
 8003520:	e01b      	b.n	800355a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003522:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003528:	4a1d      	ldr	r2, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd ff55 	bl	80013e0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800353a:	f7fd ff51 	bl	80013e0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0d5      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800354c:	4b14      	ldr	r3, [pc, #80]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800354e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 80c9 	beq.w	80036f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003564:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b0c      	cmp	r3, #12
 800356e:	f000 8083 	beq.w	8003678 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d15e      	bne.n	8003638 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a08      	ldr	r2, [pc, #32]	@ (80035a0 <HAL_RCC_OscConfig+0x4b8>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fd ff2b 	bl	80013e0 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e00c      	b.n	80035a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fd ff27 	bl	80013e0 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d905      	bls.n	80035a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e0ab      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	4b55      	ldr	r3, [pc, #340]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ec      	bne.n	800358e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b4:	4b52      	ldr	r3, [pc, #328]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4b52      	ldr	r3, [pc, #328]	@ (8003704 <HAL_RCC_OscConfig+0x61c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6a11      	ldr	r1, [r2, #32]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035c4:	3a01      	subs	r2, #1
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	4311      	orrs	r1, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80035ce:	0212      	lsls	r2, r2, #8
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	3a01      	subs	r2, #1
 80035da:	0552      	lsls	r2, r2, #21
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035e2:	0852      	lsrs	r2, r2, #1
 80035e4:	3a01      	subs	r2, #1
 80035e6:	0652      	lsls	r2, r2, #25
 80035e8:	4311      	orrs	r1, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035ee:	06d2      	lsls	r2, r2, #27
 80035f0:	430a      	orrs	r2, r1
 80035f2:	4943      	ldr	r1, [pc, #268]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f8:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a40      	ldr	r2, [pc, #256]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003602:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003604:	4b3e      	ldr	r3, [pc, #248]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a3d      	ldr	r2, [pc, #244]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 800360a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd fee6 	bl	80013e0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003618:	f7fd fee2 	bl	80013e0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e066      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362a:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x530>
 8003636:	e05e      	b.n	80036f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a30      	ldr	r2, [pc, #192]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fd fecc 	bl	80013e0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fec8 	bl	80013e0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e04c      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800366a:	4b25      	ldr	r3, [pc, #148]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4924      	ldr	r1, [pc, #144]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <HAL_RCC_OscConfig+0x620>)
 8003672:	4013      	ands	r3, r2
 8003674:	60cb      	str	r3, [r1, #12]
 8003676:	e03e      	b.n	80036f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e039      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <HAL_RCC_OscConfig+0x618>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	429a      	cmp	r2, r3
 8003696:	d12c      	bne.n	80036f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	3b01      	subs	r3, #1
 80036a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d123      	bne.n	80036f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d11b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d113      	bne.n	80036f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	3b01      	subs	r3, #1
 80036d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d001      	beq.n	80036f6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3720      	adds	r7, #32
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000
 8003704:	019f800c 	.word	0x019f800c
 8003708:	feeefffc 	.word	0xfeeefffc

0800370c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e11e      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003724:	4b91      	ldr	r3, [pc, #580]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 030f 	and.w	r3, r3, #15
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	429a      	cmp	r2, r3
 8003730:	d910      	bls.n	8003754 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003732:	4b8e      	ldr	r3, [pc, #568]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 020f 	bic.w	r2, r3, #15
 800373a:	498c      	ldr	r1, [pc, #560]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003742:	4b8a      	ldr	r3, [pc, #552]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d001      	beq.n	8003754 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e106      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d073      	beq.n	8003848 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b03      	cmp	r3, #3
 8003766:	d129      	bne.n	80037bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003768:	4b81      	ldr	r3, [pc, #516]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0f4      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003778:	f000 f966 	bl	8003a48 <RCC_GetSysClockFreqFromPLLSource>
 800377c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4a7c      	ldr	r2, [pc, #496]	@ (8003974 <HAL_RCC_ClockConfig+0x268>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d93f      	bls.n	8003806 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003786:	4b7a      	ldr	r3, [pc, #488]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800379a:	2b00      	cmp	r3, #0
 800379c:	d033      	beq.n	8003806 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12f      	bne.n	8003806 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037a6:	4b72      	ldr	r3, [pc, #456]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ae:	4a70      	ldr	r2, [pc, #448]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037b6:	2380      	movs	r3, #128	@ 0x80
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e024      	b.n	8003806 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0c6      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d4:	4b66      	ldr	r3, [pc, #408]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0be      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80037e4:	f000 f8ce 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80037e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4a61      	ldr	r2, [pc, #388]	@ (8003974 <HAL_RCC_ClockConfig+0x268>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d909      	bls.n	8003806 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037fa:	4a5d      	ldr	r2, [pc, #372]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80037fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003800:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003806:	4b5a      	ldr	r3, [pc, #360]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f023 0203 	bic.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	4957      	ldr	r1, [pc, #348]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003814:	4313      	orrs	r3, r2
 8003816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003818:	f7fd fde2 	bl	80013e0 <HAL_GetTick>
 800381c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800381e:	e00a      	b.n	8003836 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003820:	f7fd fdde 	bl	80013e0 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e095      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 020c 	and.w	r2, r3, #12
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	429a      	cmp	r2, r3
 8003846:	d1eb      	bne.n	8003820 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d023      	beq.n	800389c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003860:	4b43      	ldr	r3, [pc, #268]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a42      	ldr	r2, [pc, #264]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800386a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b00      	cmp	r3, #0
 8003876:	d007      	beq.n	8003888 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003878:	4b3d      	ldr	r3, [pc, #244]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003880:	4a3b      	ldr	r2, [pc, #236]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003882:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003886:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003888:	4b39      	ldr	r3, [pc, #228]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4936      	ldr	r1, [pc, #216]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
 800389a:	e008      	b.n	80038ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2b80      	cmp	r3, #128	@ 0x80
 80038a0:	d105      	bne.n	80038ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038a2:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	4a32      	ldr	r2, [pc, #200]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 80038a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ae:	4b2f      	ldr	r3, [pc, #188]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d21d      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038bc:	4b2b      	ldr	r3, [pc, #172]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f023 020f 	bic.w	r2, r3, #15
 80038c4:	4929      	ldr	r1, [pc, #164]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80038cc:	f7fd fd88 	bl	80013e0 <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fd fd84 	bl	80013e0 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e03b      	b.n	8003962 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b20      	ldr	r3, [pc, #128]	@ (800396c <HAL_RCC_ClockConfig+0x260>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d1ed      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d008      	beq.n	8003916 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003904:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	4917      	ldr	r1, [pc, #92]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	490f      	ldr	r1, [pc, #60]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003936:	f000 f825 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <HAL_RCC_ClockConfig+0x264>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	091b      	lsrs	r3, r3, #4
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	490c      	ldr	r1, [pc, #48]	@ (8003978 <HAL_RCC_ClockConfig+0x26c>)
 8003948:	5ccb      	ldrb	r3, [r1, r3]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa22 f303 	lsr.w	r3, r2, r3
 8003952:	4a0a      	ldr	r2, [pc, #40]	@ (800397c <HAL_RCC_ClockConfig+0x270>)
 8003954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003956:	4b0a      	ldr	r3, [pc, #40]	@ (8003980 <HAL_RCC_ClockConfig+0x274>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fcf4 	bl	8001348 <HAL_InitTick>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	04c4b400 	.word	0x04c4b400
 8003978:	08006958 	.word	0x08006958
 800397c:	20000000 	.word	0x20000000
 8003980:	20000004 	.word	0x20000004

08003984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800398a:	4b2c      	ldr	r3, [pc, #176]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d102      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003996:	4b2a      	ldr	r3, [pc, #168]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e047      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800399c:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e03e      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80039ae:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d136      	bne.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039c4:	4b1d      	ldr	r3, [pc, #116]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	091b      	lsrs	r3, r3, #4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	3301      	adds	r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0xc0>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	4a16      	ldr	r2, [pc, #88]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039e2:	68d2      	ldr	r2, [r2, #12]
 80039e4:	0a12      	lsrs	r2, r2, #8
 80039e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f2:	4a13      	ldr	r2, [pc, #76]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0xbc>)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4a10      	ldr	r2, [pc, #64]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	0a12      	lsrs	r2, r2, #8
 8003a00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a04:	fb02 f303 	mul.w	r3, r2, r3
 8003a08:	617b      	str	r3, [r7, #20]
      break;
 8003a0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	0e5b      	lsrs	r3, r3, #25
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	3301      	adds	r3, #1
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	e001      	b.n	8003a2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003a2c:	693b      	ldr	r3, [r7, #16]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	00f42400 	.word	0x00f42400
 8003a44:	007a1200 	.word	0x007a1200

08003a48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a58:	4b1b      	ldr	r3, [pc, #108]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 030f 	and.w	r3, r3, #15
 8003a62:	3301      	adds	r3, #1
 8003a64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b03      	cmp	r3, #3
 8003a6a:	d10c      	bne.n	8003a86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a6c:	4a17      	ldr	r2, [pc, #92]	@ (8003acc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	4a14      	ldr	r2, [pc, #80]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a76:	68d2      	ldr	r2, [r2, #12]
 8003a78:	0a12      	lsrs	r2, r2, #8
 8003a7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	617b      	str	r3, [r7, #20]
    break;
 8003a84:	e00c      	b.n	8003aa0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a86:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a90:	68d2      	ldr	r2, [r2, #12]
 8003a92:	0a12      	lsrs	r2, r2, #8
 8003a94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a98:	fb02 f303 	mul.w	r3, r2, r3
 8003a9c:	617b      	str	r3, [r7, #20]
    break;
 8003a9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa0:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0e5b      	lsrs	r3, r3, #25
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aba:	687b      	ldr	r3, [r7, #4]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	00f42400 	.word	0x00f42400

08003ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003adc:	2300      	movs	r3, #0
 8003ade:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 8098 	beq.w	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af6:	4b43      	ldr	r3, [pc, #268]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b40      	ldr	r3, [pc, #256]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b06:	4a3f      	ldr	r2, [pc, #252]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0e:	4b3d      	ldr	r3, [pc, #244]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a39      	ldr	r2, [pc, #228]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fc59 	bl	80013e0 <HAL_GetTick>
 8003b2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b30:	e009      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b32:	f7fd fc55 	bl	80013e0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d902      	bls.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	74fb      	strb	r3, [r7, #19]
        break;
 8003b44:	e005      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b46:	4b30      	ldr	r3, [pc, #192]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0ef      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d159      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b58:	4b2a      	ldr	r3, [pc, #168]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01e      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d019      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b74:	4b23      	ldr	r3, [pc, #140]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b80:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	4a1f      	ldr	r2, [pc, #124]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b90:	4b1c      	ldr	r3, [pc, #112]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b96:	4a1b      	ldr	r2, [pc, #108]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ba0:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d016      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb2:	f7fd fc15 	bl	80013e0 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb8:	e00b      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bba:	f7fd fc11 	bl	80013e0 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d902      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	74fb      	strb	r3, [r7, #19]
            break;
 8003bd0:	e006      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ec      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003be0:	7cfb      	ldrb	r3, [r7, #19]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be6:	4b07      	ldr	r3, [pc, #28]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	4903      	ldr	r1, [pc, #12]	@ (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bfc:	e008      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfe:	7cfb      	ldrb	r3, [r7, #19]
 8003c00:	74bb      	strb	r3, [r7, #18]
 8003c02:	e005      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	7cfb      	ldrb	r3, [r7, #19]
 8003c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c10:	7c7b      	ldrb	r3, [r7, #17]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d105      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c16:	4ba6      	ldr	r3, [pc, #664]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c1a:	4aa5      	ldr	r2, [pc, #660]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c2e:	4ba0      	ldr	r3, [pc, #640]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c34:	f023 0203 	bic.w	r2, r3, #3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	499c      	ldr	r1, [pc, #624]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00a      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c50:	4b97      	ldr	r3, [pc, #604]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f023 020c 	bic.w	r2, r3, #12
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4994      	ldr	r1, [pc, #592]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c72:	4b8f      	ldr	r3, [pc, #572]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	498b      	ldr	r1, [pc, #556]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00a      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c94:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	4983      	ldr	r1, [pc, #524]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0320 	and.w	r3, r3, #32
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb6:	4b7e      	ldr	r3, [pc, #504]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	497a      	ldr	r1, [pc, #488]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cd8:	4b75      	ldr	r3, [pc, #468]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	4972      	ldr	r1, [pc, #456]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00a      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4969      	ldr	r1, [pc, #420]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d1c:	4b64      	ldr	r3, [pc, #400]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	4961      	ldr	r1, [pc, #388]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	4958      	ldr	r1, [pc, #352]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d60:	4b53      	ldr	r3, [pc, #332]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6e:	4950      	ldr	r1, [pc, #320]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d98:	4b45      	ldr	r3, [pc, #276]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	4942      	ldr	r1, [pc, #264]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dd0:	4b37      	ldr	r3, [pc, #220]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	4934      	ldr	r1, [pc, #208]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df0:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a2e      	ldr	r2, [pc, #184]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dfa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d015      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e08:	4b29      	ldr	r3, [pc, #164]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e16:	4926      	ldr	r1, [pc, #152]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e26:	d105      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e28:	4b21      	ldr	r3, [pc, #132]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d015      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e46:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4e:	4918      	ldr	r1, [pc, #96]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4a12      	ldr	r2, [pc, #72]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d015      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e86:	490a      	ldr	r1, [pc, #40]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e96:	d105      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e98:	4b05      	ldr	r3, [pc, #20]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ea4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000

08003eb4 <__cvt>:
 8003eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	ec57 6b10 	vmov	r6, r7, d0
 8003ebc:	2f00      	cmp	r7, #0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	bfbb      	ittet	lt
 8003ec6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003eca:	461f      	movlt	r7, r3
 8003ecc:	2300      	movge	r3, #0
 8003ece:	232d      	movlt	r3, #45	@ 0x2d
 8003ed0:	700b      	strb	r3, [r1, #0]
 8003ed2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ed4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003ed8:	4691      	mov	r9, r2
 8003eda:	f023 0820 	bic.w	r8, r3, #32
 8003ede:	bfbc      	itt	lt
 8003ee0:	4632      	movlt	r2, r6
 8003ee2:	4616      	movlt	r6, r2
 8003ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ee8:	d005      	beq.n	8003ef6 <__cvt+0x42>
 8003eea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003eee:	d100      	bne.n	8003ef2 <__cvt+0x3e>
 8003ef0:	3401      	adds	r4, #1
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	e000      	b.n	8003ef8 <__cvt+0x44>
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	9301      	str	r3, [sp, #4]
 8003efc:	ab02      	add	r3, sp, #8
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	ec47 6b10 	vmov	d0, r6, r7
 8003f04:	4653      	mov	r3, sl
 8003f06:	4622      	mov	r2, r4
 8003f08:	f000 ff3e 	bl	8004d88 <_dtoa_r>
 8003f0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f10:	4605      	mov	r5, r0
 8003f12:	d119      	bne.n	8003f48 <__cvt+0x94>
 8003f14:	f019 0f01 	tst.w	r9, #1
 8003f18:	d00e      	beq.n	8003f38 <__cvt+0x84>
 8003f1a:	eb00 0904 	add.w	r9, r0, r4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2300      	movs	r3, #0
 8003f22:	4630      	mov	r0, r6
 8003f24:	4639      	mov	r1, r7
 8003f26:	f7fc fdf7 	bl	8000b18 <__aeabi_dcmpeq>
 8003f2a:	b108      	cbz	r0, 8003f30 <__cvt+0x7c>
 8003f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f30:	2230      	movs	r2, #48	@ 0x30
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	454b      	cmp	r3, r9
 8003f36:	d31e      	bcc.n	8003f76 <__cvt+0xc2>
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f3c:	1b5b      	subs	r3, r3, r5
 8003f3e:	4628      	mov	r0, r5
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	b004      	add	sp, #16
 8003f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f4c:	eb00 0904 	add.w	r9, r0, r4
 8003f50:	d1e5      	bne.n	8003f1e <__cvt+0x6a>
 8003f52:	7803      	ldrb	r3, [r0, #0]
 8003f54:	2b30      	cmp	r3, #48	@ 0x30
 8003f56:	d10a      	bne.n	8003f6e <__cvt+0xba>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4639      	mov	r1, r7
 8003f60:	f7fc fdda 	bl	8000b18 <__aeabi_dcmpeq>
 8003f64:	b918      	cbnz	r0, 8003f6e <__cvt+0xba>
 8003f66:	f1c4 0401 	rsb	r4, r4, #1
 8003f6a:	f8ca 4000 	str.w	r4, [sl]
 8003f6e:	f8da 3000 	ldr.w	r3, [sl]
 8003f72:	4499      	add	r9, r3
 8003f74:	e7d3      	b.n	8003f1e <__cvt+0x6a>
 8003f76:	1c59      	adds	r1, r3, #1
 8003f78:	9103      	str	r1, [sp, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]
 8003f7c:	e7d9      	b.n	8003f32 <__cvt+0x7e>

08003f7e <__exponent>:
 8003f7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f80:	2900      	cmp	r1, #0
 8003f82:	bfba      	itte	lt
 8003f84:	4249      	neglt	r1, r1
 8003f86:	232d      	movlt	r3, #45	@ 0x2d
 8003f88:	232b      	movge	r3, #43	@ 0x2b
 8003f8a:	2909      	cmp	r1, #9
 8003f8c:	7002      	strb	r2, [r0, #0]
 8003f8e:	7043      	strb	r3, [r0, #1]
 8003f90:	dd29      	ble.n	8003fe6 <__exponent+0x68>
 8003f92:	f10d 0307 	add.w	r3, sp, #7
 8003f96:	461d      	mov	r5, r3
 8003f98:	270a      	movs	r7, #10
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fa0:	fb07 1416 	mls	r4, r7, r6, r1
 8003fa4:	3430      	adds	r4, #48	@ 0x30
 8003fa6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003faa:	460c      	mov	r4, r1
 8003fac:	2c63      	cmp	r4, #99	@ 0x63
 8003fae:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	dcf1      	bgt.n	8003f9a <__exponent+0x1c>
 8003fb6:	3130      	adds	r1, #48	@ 0x30
 8003fb8:	1e94      	subs	r4, r2, #2
 8003fba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fbe:	1c41      	adds	r1, r0, #1
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	d30a      	bcc.n	8003fdc <__exponent+0x5e>
 8003fc6:	f10d 0309 	add.w	r3, sp, #9
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	42ac      	cmp	r4, r5
 8003fce:	bf88      	it	hi
 8003fd0:	2300      	movhi	r3, #0
 8003fd2:	3302      	adds	r3, #2
 8003fd4:	4403      	add	r3, r0
 8003fd6:	1a18      	subs	r0, r3, r0
 8003fd8:	b003      	add	sp, #12
 8003fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003fe0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fe4:	e7ed      	b.n	8003fc2 <__exponent+0x44>
 8003fe6:	2330      	movs	r3, #48	@ 0x30
 8003fe8:	3130      	adds	r1, #48	@ 0x30
 8003fea:	7083      	strb	r3, [r0, #2]
 8003fec:	70c1      	strb	r1, [r0, #3]
 8003fee:	1d03      	adds	r3, r0, #4
 8003ff0:	e7f1      	b.n	8003fd6 <__exponent+0x58>
	...

08003ff4 <_printf_float>:
 8003ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff8:	b08d      	sub	sp, #52	@ 0x34
 8003ffa:	460c      	mov	r4, r1
 8003ffc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004000:	4616      	mov	r6, r2
 8004002:	461f      	mov	r7, r3
 8004004:	4605      	mov	r5, r0
 8004006:	f000 fdbf 	bl	8004b88 <_localeconv_r>
 800400a:	6803      	ldr	r3, [r0, #0]
 800400c:	9304      	str	r3, [sp, #16]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc f956 	bl	80002c0 <strlen>
 8004014:	2300      	movs	r3, #0
 8004016:	930a      	str	r3, [sp, #40]	@ 0x28
 8004018:	f8d8 3000 	ldr.w	r3, [r8]
 800401c:	9005      	str	r0, [sp, #20]
 800401e:	3307      	adds	r3, #7
 8004020:	f023 0307 	bic.w	r3, r3, #7
 8004024:	f103 0208 	add.w	r2, r3, #8
 8004028:	f894 a018 	ldrb.w	sl, [r4, #24]
 800402c:	f8d4 b000 	ldr.w	fp, [r4]
 8004030:	f8c8 2000 	str.w	r2, [r8]
 8004034:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004038:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800403c:	9307      	str	r3, [sp, #28]
 800403e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004042:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800404a:	4b9c      	ldr	r3, [pc, #624]	@ (80042bc <_printf_float+0x2c8>)
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	f7fc fd94 	bl	8000b7c <__aeabi_dcmpun>
 8004054:	bb70      	cbnz	r0, 80040b4 <_printf_float+0xc0>
 8004056:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800405a:	4b98      	ldr	r3, [pc, #608]	@ (80042bc <_printf_float+0x2c8>)
 800405c:	f04f 32ff 	mov.w	r2, #4294967295
 8004060:	f7fc fd6e 	bl	8000b40 <__aeabi_dcmple>
 8004064:	bb30      	cbnz	r0, 80040b4 <_printf_float+0xc0>
 8004066:	2200      	movs	r2, #0
 8004068:	2300      	movs	r3, #0
 800406a:	4640      	mov	r0, r8
 800406c:	4649      	mov	r1, r9
 800406e:	f7fc fd5d 	bl	8000b2c <__aeabi_dcmplt>
 8004072:	b110      	cbz	r0, 800407a <_printf_float+0x86>
 8004074:	232d      	movs	r3, #45	@ 0x2d
 8004076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800407a:	4a91      	ldr	r2, [pc, #580]	@ (80042c0 <_printf_float+0x2cc>)
 800407c:	4b91      	ldr	r3, [pc, #580]	@ (80042c4 <_printf_float+0x2d0>)
 800407e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004082:	bf94      	ite	ls
 8004084:	4690      	movls	r8, r2
 8004086:	4698      	movhi	r8, r3
 8004088:	2303      	movs	r3, #3
 800408a:	6123      	str	r3, [r4, #16]
 800408c:	f02b 0304 	bic.w	r3, fp, #4
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	f04f 0900 	mov.w	r9, #0
 8004096:	9700      	str	r7, [sp, #0]
 8004098:	4633      	mov	r3, r6
 800409a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800409c:	4621      	mov	r1, r4
 800409e:	4628      	mov	r0, r5
 80040a0:	f000 f9d2 	bl	8004448 <_printf_common>
 80040a4:	3001      	adds	r0, #1
 80040a6:	f040 808d 	bne.w	80041c4 <_printf_float+0x1d0>
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	b00d      	add	sp, #52	@ 0x34
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	4640      	mov	r0, r8
 80040ba:	4649      	mov	r1, r9
 80040bc:	f7fc fd5e 	bl	8000b7c <__aeabi_dcmpun>
 80040c0:	b140      	cbz	r0, 80040d4 <_printf_float+0xe0>
 80040c2:	464b      	mov	r3, r9
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bfbc      	itt	lt
 80040c8:	232d      	movlt	r3, #45	@ 0x2d
 80040ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040ce:	4a7e      	ldr	r2, [pc, #504]	@ (80042c8 <_printf_float+0x2d4>)
 80040d0:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <_printf_float+0x2d8>)
 80040d2:	e7d4      	b.n	800407e <_printf_float+0x8a>
 80040d4:	6863      	ldr	r3, [r4, #4]
 80040d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80040da:	9206      	str	r2, [sp, #24]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	d13b      	bne.n	8004158 <_printf_float+0x164>
 80040e0:	2306      	movs	r3, #6
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80040e8:	2300      	movs	r3, #0
 80040ea:	6022      	str	r2, [r4, #0]
 80040ec:	9303      	str	r3, [sp, #12]
 80040ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80040f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80040f4:	ab09      	add	r3, sp, #36	@ 0x24
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	6861      	ldr	r1, [r4, #4]
 80040fa:	ec49 8b10 	vmov	d0, r8, r9
 80040fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004102:	4628      	mov	r0, r5
 8004104:	f7ff fed6 	bl	8003eb4 <__cvt>
 8004108:	9b06      	ldr	r3, [sp, #24]
 800410a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800410c:	2b47      	cmp	r3, #71	@ 0x47
 800410e:	4680      	mov	r8, r0
 8004110:	d129      	bne.n	8004166 <_printf_float+0x172>
 8004112:	1cc8      	adds	r0, r1, #3
 8004114:	db02      	blt.n	800411c <_printf_float+0x128>
 8004116:	6863      	ldr	r3, [r4, #4]
 8004118:	4299      	cmp	r1, r3
 800411a:	dd41      	ble.n	80041a0 <_printf_float+0x1ac>
 800411c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004120:	fa5f fa8a 	uxtb.w	sl, sl
 8004124:	3901      	subs	r1, #1
 8004126:	4652      	mov	r2, sl
 8004128:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800412c:	9109      	str	r1, [sp, #36]	@ 0x24
 800412e:	f7ff ff26 	bl	8003f7e <__exponent>
 8004132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004134:	1813      	adds	r3, r2, r0
 8004136:	2a01      	cmp	r2, #1
 8004138:	4681      	mov	r9, r0
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	dc02      	bgt.n	8004144 <_printf_float+0x150>
 800413e:	6822      	ldr	r2, [r4, #0]
 8004140:	07d2      	lsls	r2, r2, #31
 8004142:	d501      	bpl.n	8004148 <_printf_float+0x154>
 8004144:	3301      	adds	r3, #1
 8004146:	6123      	str	r3, [r4, #16]
 8004148:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0a2      	beq.n	8004096 <_printf_float+0xa2>
 8004150:	232d      	movs	r3, #45	@ 0x2d
 8004152:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004156:	e79e      	b.n	8004096 <_printf_float+0xa2>
 8004158:	9a06      	ldr	r2, [sp, #24]
 800415a:	2a47      	cmp	r2, #71	@ 0x47
 800415c:	d1c2      	bne.n	80040e4 <_printf_float+0xf0>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1c0      	bne.n	80040e4 <_printf_float+0xf0>
 8004162:	2301      	movs	r3, #1
 8004164:	e7bd      	b.n	80040e2 <_printf_float+0xee>
 8004166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800416a:	d9db      	bls.n	8004124 <_printf_float+0x130>
 800416c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004170:	d118      	bne.n	80041a4 <_printf_float+0x1b0>
 8004172:	2900      	cmp	r1, #0
 8004174:	6863      	ldr	r3, [r4, #4]
 8004176:	dd0b      	ble.n	8004190 <_printf_float+0x19c>
 8004178:	6121      	str	r1, [r4, #16]
 800417a:	b913      	cbnz	r3, 8004182 <_printf_float+0x18e>
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	07d0      	lsls	r0, r2, #31
 8004180:	d502      	bpl.n	8004188 <_printf_float+0x194>
 8004182:	3301      	adds	r3, #1
 8004184:	440b      	add	r3, r1
 8004186:	6123      	str	r3, [r4, #16]
 8004188:	65a1      	str	r1, [r4, #88]	@ 0x58
 800418a:	f04f 0900 	mov.w	r9, #0
 800418e:	e7db      	b.n	8004148 <_printf_float+0x154>
 8004190:	b913      	cbnz	r3, 8004198 <_printf_float+0x1a4>
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	07d2      	lsls	r2, r2, #31
 8004196:	d501      	bpl.n	800419c <_printf_float+0x1a8>
 8004198:	3302      	adds	r3, #2
 800419a:	e7f4      	b.n	8004186 <_printf_float+0x192>
 800419c:	2301      	movs	r3, #1
 800419e:	e7f2      	b.n	8004186 <_printf_float+0x192>
 80041a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80041a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041a6:	4299      	cmp	r1, r3
 80041a8:	db05      	blt.n	80041b6 <_printf_float+0x1c2>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	6121      	str	r1, [r4, #16]
 80041ae:	07d8      	lsls	r0, r3, #31
 80041b0:	d5ea      	bpl.n	8004188 <_printf_float+0x194>
 80041b2:	1c4b      	adds	r3, r1, #1
 80041b4:	e7e7      	b.n	8004186 <_printf_float+0x192>
 80041b6:	2900      	cmp	r1, #0
 80041b8:	bfd4      	ite	le
 80041ba:	f1c1 0202 	rsble	r2, r1, #2
 80041be:	2201      	movgt	r2, #1
 80041c0:	4413      	add	r3, r2
 80041c2:	e7e0      	b.n	8004186 <_printf_float+0x192>
 80041c4:	6823      	ldr	r3, [r4, #0]
 80041c6:	055a      	lsls	r2, r3, #21
 80041c8:	d407      	bmi.n	80041da <_printf_float+0x1e6>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	4642      	mov	r2, r8
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	d12b      	bne.n	8004230 <_printf_float+0x23c>
 80041d8:	e767      	b.n	80040aa <_printf_float+0xb6>
 80041da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041de:	f240 80dd 	bls.w	800439c <_printf_float+0x3a8>
 80041e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041e6:	2200      	movs	r2, #0
 80041e8:	2300      	movs	r3, #0
 80041ea:	f7fc fc95 	bl	8000b18 <__aeabi_dcmpeq>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	d033      	beq.n	800425a <_printf_float+0x266>
 80041f2:	4a37      	ldr	r2, [pc, #220]	@ (80042d0 <_printf_float+0x2dc>)
 80041f4:	2301      	movs	r3, #1
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f af54 	beq.w	80040aa <_printf_float+0xb6>
 8004202:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004206:	4543      	cmp	r3, r8
 8004208:	db02      	blt.n	8004210 <_printf_float+0x21c>
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	07d8      	lsls	r0, r3, #31
 800420e:	d50f      	bpl.n	8004230 <_printf_float+0x23c>
 8004210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004214:	4631      	mov	r1, r6
 8004216:	4628      	mov	r0, r5
 8004218:	47b8      	blx	r7
 800421a:	3001      	adds	r0, #1
 800421c:	f43f af45 	beq.w	80040aa <_printf_float+0xb6>
 8004220:	f04f 0900 	mov.w	r9, #0
 8004224:	f108 38ff 	add.w	r8, r8, #4294967295
 8004228:	f104 0a1a 	add.w	sl, r4, #26
 800422c:	45c8      	cmp	r8, r9
 800422e:	dc09      	bgt.n	8004244 <_printf_float+0x250>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	079b      	lsls	r3, r3, #30
 8004234:	f100 8103 	bmi.w	800443e <_printf_float+0x44a>
 8004238:	68e0      	ldr	r0, [r4, #12]
 800423a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800423c:	4298      	cmp	r0, r3
 800423e:	bfb8      	it	lt
 8004240:	4618      	movlt	r0, r3
 8004242:	e734      	b.n	80040ae <_printf_float+0xba>
 8004244:	2301      	movs	r3, #1
 8004246:	4652      	mov	r2, sl
 8004248:	4631      	mov	r1, r6
 800424a:	4628      	mov	r0, r5
 800424c:	47b8      	blx	r7
 800424e:	3001      	adds	r0, #1
 8004250:	f43f af2b 	beq.w	80040aa <_printf_float+0xb6>
 8004254:	f109 0901 	add.w	r9, r9, #1
 8004258:	e7e8      	b.n	800422c <_printf_float+0x238>
 800425a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800425c:	2b00      	cmp	r3, #0
 800425e:	dc39      	bgt.n	80042d4 <_printf_float+0x2e0>
 8004260:	4a1b      	ldr	r2, [pc, #108]	@ (80042d0 <_printf_float+0x2dc>)
 8004262:	2301      	movs	r3, #1
 8004264:	4631      	mov	r1, r6
 8004266:	4628      	mov	r0, r5
 8004268:	47b8      	blx	r7
 800426a:	3001      	adds	r0, #1
 800426c:	f43f af1d 	beq.w	80040aa <_printf_float+0xb6>
 8004270:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004274:	ea59 0303 	orrs.w	r3, r9, r3
 8004278:	d102      	bne.n	8004280 <_printf_float+0x28c>
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	07d9      	lsls	r1, r3, #31
 800427e:	d5d7      	bpl.n	8004230 <_printf_float+0x23c>
 8004280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004284:	4631      	mov	r1, r6
 8004286:	4628      	mov	r0, r5
 8004288:	47b8      	blx	r7
 800428a:	3001      	adds	r0, #1
 800428c:	f43f af0d 	beq.w	80040aa <_printf_float+0xb6>
 8004290:	f04f 0a00 	mov.w	sl, #0
 8004294:	f104 0b1a 	add.w	fp, r4, #26
 8004298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800429a:	425b      	negs	r3, r3
 800429c:	4553      	cmp	r3, sl
 800429e:	dc01      	bgt.n	80042a4 <_printf_float+0x2b0>
 80042a0:	464b      	mov	r3, r9
 80042a2:	e793      	b.n	80041cc <_printf_float+0x1d8>
 80042a4:	2301      	movs	r3, #1
 80042a6:	465a      	mov	r2, fp
 80042a8:	4631      	mov	r1, r6
 80042aa:	4628      	mov	r0, r5
 80042ac:	47b8      	blx	r7
 80042ae:	3001      	adds	r0, #1
 80042b0:	f43f aefb 	beq.w	80040aa <_printf_float+0xb6>
 80042b4:	f10a 0a01 	add.w	sl, sl, #1
 80042b8:	e7ee      	b.n	8004298 <_printf_float+0x2a4>
 80042ba:	bf00      	nop
 80042bc:	7fefffff 	.word	0x7fefffff
 80042c0:	08006968 	.word	0x08006968
 80042c4:	0800696c 	.word	0x0800696c
 80042c8:	08006970 	.word	0x08006970
 80042cc:	08006974 	.word	0x08006974
 80042d0:	08006978 	.word	0x08006978
 80042d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042da:	4553      	cmp	r3, sl
 80042dc:	bfa8      	it	ge
 80042de:	4653      	movge	r3, sl
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	4699      	mov	r9, r3
 80042e4:	dc36      	bgt.n	8004354 <_printf_float+0x360>
 80042e6:	f04f 0b00 	mov.w	fp, #0
 80042ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042ee:	f104 021a 	add.w	r2, r4, #26
 80042f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042f4:	9306      	str	r3, [sp, #24]
 80042f6:	eba3 0309 	sub.w	r3, r3, r9
 80042fa:	455b      	cmp	r3, fp
 80042fc:	dc31      	bgt.n	8004362 <_printf_float+0x36e>
 80042fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004300:	459a      	cmp	sl, r3
 8004302:	dc3a      	bgt.n	800437a <_printf_float+0x386>
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	07da      	lsls	r2, r3, #31
 8004308:	d437      	bmi.n	800437a <_printf_float+0x386>
 800430a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800430c:	ebaa 0903 	sub.w	r9, sl, r3
 8004310:	9b06      	ldr	r3, [sp, #24]
 8004312:	ebaa 0303 	sub.w	r3, sl, r3
 8004316:	4599      	cmp	r9, r3
 8004318:	bfa8      	it	ge
 800431a:	4699      	movge	r9, r3
 800431c:	f1b9 0f00 	cmp.w	r9, #0
 8004320:	dc33      	bgt.n	800438a <_printf_float+0x396>
 8004322:	f04f 0800 	mov.w	r8, #0
 8004326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800432a:	f104 0b1a 	add.w	fp, r4, #26
 800432e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004330:	ebaa 0303 	sub.w	r3, sl, r3
 8004334:	eba3 0309 	sub.w	r3, r3, r9
 8004338:	4543      	cmp	r3, r8
 800433a:	f77f af79 	ble.w	8004230 <_printf_float+0x23c>
 800433e:	2301      	movs	r3, #1
 8004340:	465a      	mov	r2, fp
 8004342:	4631      	mov	r1, r6
 8004344:	4628      	mov	r0, r5
 8004346:	47b8      	blx	r7
 8004348:	3001      	adds	r0, #1
 800434a:	f43f aeae 	beq.w	80040aa <_printf_float+0xb6>
 800434e:	f108 0801 	add.w	r8, r8, #1
 8004352:	e7ec      	b.n	800432e <_printf_float+0x33a>
 8004354:	4642      	mov	r2, r8
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	d1c2      	bne.n	80042e6 <_printf_float+0x2f2>
 8004360:	e6a3      	b.n	80040aa <_printf_float+0xb6>
 8004362:	2301      	movs	r3, #1
 8004364:	4631      	mov	r1, r6
 8004366:	4628      	mov	r0, r5
 8004368:	9206      	str	r2, [sp, #24]
 800436a:	47b8      	blx	r7
 800436c:	3001      	adds	r0, #1
 800436e:	f43f ae9c 	beq.w	80040aa <_printf_float+0xb6>
 8004372:	9a06      	ldr	r2, [sp, #24]
 8004374:	f10b 0b01 	add.w	fp, fp, #1
 8004378:	e7bb      	b.n	80042f2 <_printf_float+0x2fe>
 800437a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800437e:	4631      	mov	r1, r6
 8004380:	4628      	mov	r0, r5
 8004382:	47b8      	blx	r7
 8004384:	3001      	adds	r0, #1
 8004386:	d1c0      	bne.n	800430a <_printf_float+0x316>
 8004388:	e68f      	b.n	80040aa <_printf_float+0xb6>
 800438a:	9a06      	ldr	r2, [sp, #24]
 800438c:	464b      	mov	r3, r9
 800438e:	4442      	add	r2, r8
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	d1c3      	bne.n	8004322 <_printf_float+0x32e>
 800439a:	e686      	b.n	80040aa <_printf_float+0xb6>
 800439c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043a0:	f1ba 0f01 	cmp.w	sl, #1
 80043a4:	dc01      	bgt.n	80043aa <_printf_float+0x3b6>
 80043a6:	07db      	lsls	r3, r3, #31
 80043a8:	d536      	bpl.n	8004418 <_printf_float+0x424>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4642      	mov	r2, r8
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f ae78 	beq.w	80040aa <_printf_float+0xb6>
 80043ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043be:	4631      	mov	r1, r6
 80043c0:	4628      	mov	r0, r5
 80043c2:	47b8      	blx	r7
 80043c4:	3001      	adds	r0, #1
 80043c6:	f43f ae70 	beq.w	80040aa <_printf_float+0xb6>
 80043ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043ce:	2200      	movs	r2, #0
 80043d0:	2300      	movs	r3, #0
 80043d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043d6:	f7fc fb9f 	bl	8000b18 <__aeabi_dcmpeq>
 80043da:	b9c0      	cbnz	r0, 800440e <_printf_float+0x41a>
 80043dc:	4653      	mov	r3, sl
 80043de:	f108 0201 	add.w	r2, r8, #1
 80043e2:	4631      	mov	r1, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	47b8      	blx	r7
 80043e8:	3001      	adds	r0, #1
 80043ea:	d10c      	bne.n	8004406 <_printf_float+0x412>
 80043ec:	e65d      	b.n	80040aa <_printf_float+0xb6>
 80043ee:	2301      	movs	r3, #1
 80043f0:	465a      	mov	r2, fp
 80043f2:	4631      	mov	r1, r6
 80043f4:	4628      	mov	r0, r5
 80043f6:	47b8      	blx	r7
 80043f8:	3001      	adds	r0, #1
 80043fa:	f43f ae56 	beq.w	80040aa <_printf_float+0xb6>
 80043fe:	f108 0801 	add.w	r8, r8, #1
 8004402:	45d0      	cmp	r8, sl
 8004404:	dbf3      	blt.n	80043ee <_printf_float+0x3fa>
 8004406:	464b      	mov	r3, r9
 8004408:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800440c:	e6df      	b.n	80041ce <_printf_float+0x1da>
 800440e:	f04f 0800 	mov.w	r8, #0
 8004412:	f104 0b1a 	add.w	fp, r4, #26
 8004416:	e7f4      	b.n	8004402 <_printf_float+0x40e>
 8004418:	2301      	movs	r3, #1
 800441a:	4642      	mov	r2, r8
 800441c:	e7e1      	b.n	80043e2 <_printf_float+0x3ee>
 800441e:	2301      	movs	r3, #1
 8004420:	464a      	mov	r2, r9
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f ae3e 	beq.w	80040aa <_printf_float+0xb6>
 800442e:	f108 0801 	add.w	r8, r8, #1
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004436:	1a5b      	subs	r3, r3, r1
 8004438:	4543      	cmp	r3, r8
 800443a:	dcf0      	bgt.n	800441e <_printf_float+0x42a>
 800443c:	e6fc      	b.n	8004238 <_printf_float+0x244>
 800443e:	f04f 0800 	mov.w	r8, #0
 8004442:	f104 0919 	add.w	r9, r4, #25
 8004446:	e7f4      	b.n	8004432 <_printf_float+0x43e>

08004448 <_printf_common>:
 8004448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800444c:	4616      	mov	r6, r2
 800444e:	4698      	mov	r8, r3
 8004450:	688a      	ldr	r2, [r1, #8]
 8004452:	690b      	ldr	r3, [r1, #16]
 8004454:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004458:	4293      	cmp	r3, r2
 800445a:	bfb8      	it	lt
 800445c:	4613      	movlt	r3, r2
 800445e:	6033      	str	r3, [r6, #0]
 8004460:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004464:	4607      	mov	r7, r0
 8004466:	460c      	mov	r4, r1
 8004468:	b10a      	cbz	r2, 800446e <_printf_common+0x26>
 800446a:	3301      	adds	r3, #1
 800446c:	6033      	str	r3, [r6, #0]
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	0699      	lsls	r1, r3, #26
 8004472:	bf42      	ittt	mi
 8004474:	6833      	ldrmi	r3, [r6, #0]
 8004476:	3302      	addmi	r3, #2
 8004478:	6033      	strmi	r3, [r6, #0]
 800447a:	6825      	ldr	r5, [r4, #0]
 800447c:	f015 0506 	ands.w	r5, r5, #6
 8004480:	d106      	bne.n	8004490 <_printf_common+0x48>
 8004482:	f104 0a19 	add.w	sl, r4, #25
 8004486:	68e3      	ldr	r3, [r4, #12]
 8004488:	6832      	ldr	r2, [r6, #0]
 800448a:	1a9b      	subs	r3, r3, r2
 800448c:	42ab      	cmp	r3, r5
 800448e:	dc26      	bgt.n	80044de <_printf_common+0x96>
 8004490:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004494:	6822      	ldr	r2, [r4, #0]
 8004496:	3b00      	subs	r3, #0
 8004498:	bf18      	it	ne
 800449a:	2301      	movne	r3, #1
 800449c:	0692      	lsls	r2, r2, #26
 800449e:	d42b      	bmi.n	80044f8 <_printf_common+0xb0>
 80044a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044a4:	4641      	mov	r1, r8
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c8      	blx	r9
 80044aa:	3001      	adds	r0, #1
 80044ac:	d01e      	beq.n	80044ec <_printf_common+0xa4>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	6922      	ldr	r2, [r4, #16]
 80044b2:	f003 0306 	and.w	r3, r3, #6
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	bf02      	ittt	eq
 80044ba:	68e5      	ldreq	r5, [r4, #12]
 80044bc:	6833      	ldreq	r3, [r6, #0]
 80044be:	1aed      	subeq	r5, r5, r3
 80044c0:	68a3      	ldr	r3, [r4, #8]
 80044c2:	bf0c      	ite	eq
 80044c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044c8:	2500      	movne	r5, #0
 80044ca:	4293      	cmp	r3, r2
 80044cc:	bfc4      	itt	gt
 80044ce:	1a9b      	subgt	r3, r3, r2
 80044d0:	18ed      	addgt	r5, r5, r3
 80044d2:	2600      	movs	r6, #0
 80044d4:	341a      	adds	r4, #26
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d11a      	bne.n	8004510 <_printf_common+0xc8>
 80044da:	2000      	movs	r0, #0
 80044dc:	e008      	b.n	80044f0 <_printf_common+0xa8>
 80044de:	2301      	movs	r3, #1
 80044e0:	4652      	mov	r2, sl
 80044e2:	4641      	mov	r1, r8
 80044e4:	4638      	mov	r0, r7
 80044e6:	47c8      	blx	r9
 80044e8:	3001      	adds	r0, #1
 80044ea:	d103      	bne.n	80044f4 <_printf_common+0xac>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7c6      	b.n	8004486 <_printf_common+0x3e>
 80044f8:	18e1      	adds	r1, r4, r3
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	2030      	movs	r0, #48	@ 0x30
 80044fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004502:	4422      	add	r2, r4
 8004504:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004508:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800450c:	3302      	adds	r3, #2
 800450e:	e7c7      	b.n	80044a0 <_printf_common+0x58>
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	4641      	mov	r1, r8
 8004516:	4638      	mov	r0, r7
 8004518:	47c8      	blx	r9
 800451a:	3001      	adds	r0, #1
 800451c:	d0e6      	beq.n	80044ec <_printf_common+0xa4>
 800451e:	3601      	adds	r6, #1
 8004520:	e7d9      	b.n	80044d6 <_printf_common+0x8e>
	...

08004524 <_printf_i>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	7e0f      	ldrb	r7, [r1, #24]
 800452a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800452c:	2f78      	cmp	r7, #120	@ 0x78
 800452e:	4691      	mov	r9, r2
 8004530:	4680      	mov	r8, r0
 8004532:	460c      	mov	r4, r1
 8004534:	469a      	mov	sl, r3
 8004536:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800453a:	d807      	bhi.n	800454c <_printf_i+0x28>
 800453c:	2f62      	cmp	r7, #98	@ 0x62
 800453e:	d80a      	bhi.n	8004556 <_printf_i+0x32>
 8004540:	2f00      	cmp	r7, #0
 8004542:	f000 80d2 	beq.w	80046ea <_printf_i+0x1c6>
 8004546:	2f58      	cmp	r7, #88	@ 0x58
 8004548:	f000 80b9 	beq.w	80046be <_printf_i+0x19a>
 800454c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004550:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004554:	e03a      	b.n	80045cc <_printf_i+0xa8>
 8004556:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800455a:	2b15      	cmp	r3, #21
 800455c:	d8f6      	bhi.n	800454c <_printf_i+0x28>
 800455e:	a101      	add	r1, pc, #4	@ (adr r1, 8004564 <_printf_i+0x40>)
 8004560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045d1 	.word	0x080045d1
 800456c:	0800454d 	.word	0x0800454d
 8004570:	0800454d 	.word	0x0800454d
 8004574:	0800454d 	.word	0x0800454d
 8004578:	0800454d 	.word	0x0800454d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800454d 	.word	0x0800454d
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	080046d1 	.word	0x080046d1
 8004594:	080045fb 	.word	0x080045fb
 8004598:	0800468b 	.word	0x0800468b
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	0800454d 	.word	0x0800454d
 80045a4:	080046f3 	.word	0x080046f3
 80045a8:	0800454d 	.word	0x0800454d
 80045ac:	080045fb 	.word	0x080045fb
 80045b0:	0800454d 	.word	0x0800454d
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	08004693 	.word	0x08004693
 80045bc:	6833      	ldr	r3, [r6, #0]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6032      	str	r2, [r6, #0]
 80045c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045cc:	2301      	movs	r3, #1
 80045ce:	e09d      	b.n	800470c <_printf_i+0x1e8>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	6820      	ldr	r0, [r4, #0]
 80045d4:	1d19      	adds	r1, r3, #4
 80045d6:	6031      	str	r1, [r6, #0]
 80045d8:	0606      	lsls	r6, r0, #24
 80045da:	d501      	bpl.n	80045e0 <_printf_i+0xbc>
 80045dc:	681d      	ldr	r5, [r3, #0]
 80045de:	e003      	b.n	80045e8 <_printf_i+0xc4>
 80045e0:	0645      	lsls	r5, r0, #25
 80045e2:	d5fb      	bpl.n	80045dc <_printf_i+0xb8>
 80045e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045e8:	2d00      	cmp	r5, #0
 80045ea:	da03      	bge.n	80045f4 <_printf_i+0xd0>
 80045ec:	232d      	movs	r3, #45	@ 0x2d
 80045ee:	426d      	negs	r5, r5
 80045f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f4:	4859      	ldr	r0, [pc, #356]	@ (800475c <_printf_i+0x238>)
 80045f6:	230a      	movs	r3, #10
 80045f8:	e011      	b.n	800461e <_printf_i+0xfa>
 80045fa:	6821      	ldr	r1, [r4, #0]
 80045fc:	6833      	ldr	r3, [r6, #0]
 80045fe:	0608      	lsls	r0, r1, #24
 8004600:	f853 5b04 	ldr.w	r5, [r3], #4
 8004604:	d402      	bmi.n	800460c <_printf_i+0xe8>
 8004606:	0649      	lsls	r1, r1, #25
 8004608:	bf48      	it	mi
 800460a:	b2ad      	uxthmi	r5, r5
 800460c:	2f6f      	cmp	r7, #111	@ 0x6f
 800460e:	4853      	ldr	r0, [pc, #332]	@ (800475c <_printf_i+0x238>)
 8004610:	6033      	str	r3, [r6, #0]
 8004612:	bf14      	ite	ne
 8004614:	230a      	movne	r3, #10
 8004616:	2308      	moveq	r3, #8
 8004618:	2100      	movs	r1, #0
 800461a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800461e:	6866      	ldr	r6, [r4, #4]
 8004620:	60a6      	str	r6, [r4, #8]
 8004622:	2e00      	cmp	r6, #0
 8004624:	bfa2      	ittt	ge
 8004626:	6821      	ldrge	r1, [r4, #0]
 8004628:	f021 0104 	bicge.w	r1, r1, #4
 800462c:	6021      	strge	r1, [r4, #0]
 800462e:	b90d      	cbnz	r5, 8004634 <_printf_i+0x110>
 8004630:	2e00      	cmp	r6, #0
 8004632:	d04b      	beq.n	80046cc <_printf_i+0x1a8>
 8004634:	4616      	mov	r6, r2
 8004636:	fbb5 f1f3 	udiv	r1, r5, r3
 800463a:	fb03 5711 	mls	r7, r3, r1, r5
 800463e:	5dc7      	ldrb	r7, [r0, r7]
 8004640:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004644:	462f      	mov	r7, r5
 8004646:	42bb      	cmp	r3, r7
 8004648:	460d      	mov	r5, r1
 800464a:	d9f4      	bls.n	8004636 <_printf_i+0x112>
 800464c:	2b08      	cmp	r3, #8
 800464e:	d10b      	bne.n	8004668 <_printf_i+0x144>
 8004650:	6823      	ldr	r3, [r4, #0]
 8004652:	07df      	lsls	r7, r3, #31
 8004654:	d508      	bpl.n	8004668 <_printf_i+0x144>
 8004656:	6923      	ldr	r3, [r4, #16]
 8004658:	6861      	ldr	r1, [r4, #4]
 800465a:	4299      	cmp	r1, r3
 800465c:	bfde      	ittt	le
 800465e:	2330      	movle	r3, #48	@ 0x30
 8004660:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004664:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004668:	1b92      	subs	r2, r2, r6
 800466a:	6122      	str	r2, [r4, #16]
 800466c:	f8cd a000 	str.w	sl, [sp]
 8004670:	464b      	mov	r3, r9
 8004672:	aa03      	add	r2, sp, #12
 8004674:	4621      	mov	r1, r4
 8004676:	4640      	mov	r0, r8
 8004678:	f7ff fee6 	bl	8004448 <_printf_common>
 800467c:	3001      	adds	r0, #1
 800467e:	d14a      	bne.n	8004716 <_printf_i+0x1f2>
 8004680:	f04f 30ff 	mov.w	r0, #4294967295
 8004684:	b004      	add	sp, #16
 8004686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468a:	6823      	ldr	r3, [r4, #0]
 800468c:	f043 0320 	orr.w	r3, r3, #32
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	4833      	ldr	r0, [pc, #204]	@ (8004760 <_printf_i+0x23c>)
 8004694:	2778      	movs	r7, #120	@ 0x78
 8004696:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	6831      	ldr	r1, [r6, #0]
 800469e:	061f      	lsls	r7, r3, #24
 80046a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80046a4:	d402      	bmi.n	80046ac <_printf_i+0x188>
 80046a6:	065f      	lsls	r7, r3, #25
 80046a8:	bf48      	it	mi
 80046aa:	b2ad      	uxthmi	r5, r5
 80046ac:	6031      	str	r1, [r6, #0]
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	bf44      	itt	mi
 80046b2:	f043 0320 	orrmi.w	r3, r3, #32
 80046b6:	6023      	strmi	r3, [r4, #0]
 80046b8:	b11d      	cbz	r5, 80046c2 <_printf_i+0x19e>
 80046ba:	2310      	movs	r3, #16
 80046bc:	e7ac      	b.n	8004618 <_printf_i+0xf4>
 80046be:	4827      	ldr	r0, [pc, #156]	@ (800475c <_printf_i+0x238>)
 80046c0:	e7e9      	b.n	8004696 <_printf_i+0x172>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	f023 0320 	bic.w	r3, r3, #32
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	e7f6      	b.n	80046ba <_printf_i+0x196>
 80046cc:	4616      	mov	r6, r2
 80046ce:	e7bd      	b.n	800464c <_printf_i+0x128>
 80046d0:	6833      	ldr	r3, [r6, #0]
 80046d2:	6825      	ldr	r5, [r4, #0]
 80046d4:	6961      	ldr	r1, [r4, #20]
 80046d6:	1d18      	adds	r0, r3, #4
 80046d8:	6030      	str	r0, [r6, #0]
 80046da:	062e      	lsls	r6, r5, #24
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	d501      	bpl.n	80046e4 <_printf_i+0x1c0>
 80046e0:	6019      	str	r1, [r3, #0]
 80046e2:	e002      	b.n	80046ea <_printf_i+0x1c6>
 80046e4:	0668      	lsls	r0, r5, #25
 80046e6:	d5fb      	bpl.n	80046e0 <_printf_i+0x1bc>
 80046e8:	8019      	strh	r1, [r3, #0]
 80046ea:	2300      	movs	r3, #0
 80046ec:	6123      	str	r3, [r4, #16]
 80046ee:	4616      	mov	r6, r2
 80046f0:	e7bc      	b.n	800466c <_printf_i+0x148>
 80046f2:	6833      	ldr	r3, [r6, #0]
 80046f4:	1d1a      	adds	r2, r3, #4
 80046f6:	6032      	str	r2, [r6, #0]
 80046f8:	681e      	ldr	r6, [r3, #0]
 80046fa:	6862      	ldr	r2, [r4, #4]
 80046fc:	2100      	movs	r1, #0
 80046fe:	4630      	mov	r0, r6
 8004700:	f7fb fd8e 	bl	8000220 <memchr>
 8004704:	b108      	cbz	r0, 800470a <_printf_i+0x1e6>
 8004706:	1b80      	subs	r0, r0, r6
 8004708:	6060      	str	r0, [r4, #4]
 800470a:	6863      	ldr	r3, [r4, #4]
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	2300      	movs	r3, #0
 8004710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004714:	e7aa      	b.n	800466c <_printf_i+0x148>
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	4632      	mov	r2, r6
 800471a:	4649      	mov	r1, r9
 800471c:	4640      	mov	r0, r8
 800471e:	47d0      	blx	sl
 8004720:	3001      	adds	r0, #1
 8004722:	d0ad      	beq.n	8004680 <_printf_i+0x15c>
 8004724:	6823      	ldr	r3, [r4, #0]
 8004726:	079b      	lsls	r3, r3, #30
 8004728:	d413      	bmi.n	8004752 <_printf_i+0x22e>
 800472a:	68e0      	ldr	r0, [r4, #12]
 800472c:	9b03      	ldr	r3, [sp, #12]
 800472e:	4298      	cmp	r0, r3
 8004730:	bfb8      	it	lt
 8004732:	4618      	movlt	r0, r3
 8004734:	e7a6      	b.n	8004684 <_printf_i+0x160>
 8004736:	2301      	movs	r3, #1
 8004738:	4632      	mov	r2, r6
 800473a:	4649      	mov	r1, r9
 800473c:	4640      	mov	r0, r8
 800473e:	47d0      	blx	sl
 8004740:	3001      	adds	r0, #1
 8004742:	d09d      	beq.n	8004680 <_printf_i+0x15c>
 8004744:	3501      	adds	r5, #1
 8004746:	68e3      	ldr	r3, [r4, #12]
 8004748:	9903      	ldr	r1, [sp, #12]
 800474a:	1a5b      	subs	r3, r3, r1
 800474c:	42ab      	cmp	r3, r5
 800474e:	dcf2      	bgt.n	8004736 <_printf_i+0x212>
 8004750:	e7eb      	b.n	800472a <_printf_i+0x206>
 8004752:	2500      	movs	r5, #0
 8004754:	f104 0619 	add.w	r6, r4, #25
 8004758:	e7f5      	b.n	8004746 <_printf_i+0x222>
 800475a:	bf00      	nop
 800475c:	0800697a 	.word	0x0800697a
 8004760:	0800698b 	.word	0x0800698b

08004764 <std>:
 8004764:	2300      	movs	r3, #0
 8004766:	b510      	push	{r4, lr}
 8004768:	4604      	mov	r4, r0
 800476a:	e9c0 3300 	strd	r3, r3, [r0]
 800476e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004772:	6083      	str	r3, [r0, #8]
 8004774:	8181      	strh	r1, [r0, #12]
 8004776:	6643      	str	r3, [r0, #100]	@ 0x64
 8004778:	81c2      	strh	r2, [r0, #14]
 800477a:	6183      	str	r3, [r0, #24]
 800477c:	4619      	mov	r1, r3
 800477e:	2208      	movs	r2, #8
 8004780:	305c      	adds	r0, #92	@ 0x5c
 8004782:	f000 f9f9 	bl	8004b78 <memset>
 8004786:	4b0d      	ldr	r3, [pc, #52]	@ (80047bc <std+0x58>)
 8004788:	6263      	str	r3, [r4, #36]	@ 0x24
 800478a:	4b0d      	ldr	r3, [pc, #52]	@ (80047c0 <std+0x5c>)
 800478c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800478e:	4b0d      	ldr	r3, [pc, #52]	@ (80047c4 <std+0x60>)
 8004790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <std+0x64>)
 8004794:	6323      	str	r3, [r4, #48]	@ 0x30
 8004796:	4b0d      	ldr	r3, [pc, #52]	@ (80047cc <std+0x68>)
 8004798:	6224      	str	r4, [r4, #32]
 800479a:	429c      	cmp	r4, r3
 800479c:	d006      	beq.n	80047ac <std+0x48>
 800479e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047a2:	4294      	cmp	r4, r2
 80047a4:	d002      	beq.n	80047ac <std+0x48>
 80047a6:	33d0      	adds	r3, #208	@ 0xd0
 80047a8:	429c      	cmp	r4, r3
 80047aa:	d105      	bne.n	80047b8 <std+0x54>
 80047ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047b4:	f000 ba5c 	b.w	8004c70 <__retarget_lock_init_recursive>
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	bf00      	nop
 80047bc:	080049c9 	.word	0x080049c9
 80047c0:	080049eb 	.word	0x080049eb
 80047c4:	08004a23 	.word	0x08004a23
 80047c8:	08004a47 	.word	0x08004a47
 80047cc:	20000264 	.word	0x20000264

080047d0 <stdio_exit_handler>:
 80047d0:	4a02      	ldr	r2, [pc, #8]	@ (80047dc <stdio_exit_handler+0xc>)
 80047d2:	4903      	ldr	r1, [pc, #12]	@ (80047e0 <stdio_exit_handler+0x10>)
 80047d4:	4803      	ldr	r0, [pc, #12]	@ (80047e4 <stdio_exit_handler+0x14>)
 80047d6:	f000 b869 	b.w	80048ac <_fwalk_sglue>
 80047da:	bf00      	nop
 80047dc:	2000000c 	.word	0x2000000c
 80047e0:	080065a1 	.word	0x080065a1
 80047e4:	2000001c 	.word	0x2000001c

080047e8 <cleanup_stdio>:
 80047e8:	6841      	ldr	r1, [r0, #4]
 80047ea:	4b0c      	ldr	r3, [pc, #48]	@ (800481c <cleanup_stdio+0x34>)
 80047ec:	4299      	cmp	r1, r3
 80047ee:	b510      	push	{r4, lr}
 80047f0:	4604      	mov	r4, r0
 80047f2:	d001      	beq.n	80047f8 <cleanup_stdio+0x10>
 80047f4:	f001 fed4 	bl	80065a0 <_fflush_r>
 80047f8:	68a1      	ldr	r1, [r4, #8]
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <cleanup_stdio+0x38>)
 80047fc:	4299      	cmp	r1, r3
 80047fe:	d002      	beq.n	8004806 <cleanup_stdio+0x1e>
 8004800:	4620      	mov	r0, r4
 8004802:	f001 fecd 	bl	80065a0 <_fflush_r>
 8004806:	68e1      	ldr	r1, [r4, #12]
 8004808:	4b06      	ldr	r3, [pc, #24]	@ (8004824 <cleanup_stdio+0x3c>)
 800480a:	4299      	cmp	r1, r3
 800480c:	d004      	beq.n	8004818 <cleanup_stdio+0x30>
 800480e:	4620      	mov	r0, r4
 8004810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004814:	f001 bec4 	b.w	80065a0 <_fflush_r>
 8004818:	bd10      	pop	{r4, pc}
 800481a:	bf00      	nop
 800481c:	20000264 	.word	0x20000264
 8004820:	200002cc 	.word	0x200002cc
 8004824:	20000334 	.word	0x20000334

08004828 <global_stdio_init.part.0>:
 8004828:	b510      	push	{r4, lr}
 800482a:	4b0b      	ldr	r3, [pc, #44]	@ (8004858 <global_stdio_init.part.0+0x30>)
 800482c:	4c0b      	ldr	r4, [pc, #44]	@ (800485c <global_stdio_init.part.0+0x34>)
 800482e:	4a0c      	ldr	r2, [pc, #48]	@ (8004860 <global_stdio_init.part.0+0x38>)
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	4620      	mov	r0, r4
 8004834:	2200      	movs	r2, #0
 8004836:	2104      	movs	r1, #4
 8004838:	f7ff ff94 	bl	8004764 <std>
 800483c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004840:	2201      	movs	r2, #1
 8004842:	2109      	movs	r1, #9
 8004844:	f7ff ff8e 	bl	8004764 <std>
 8004848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800484c:	2202      	movs	r2, #2
 800484e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004852:	2112      	movs	r1, #18
 8004854:	f7ff bf86 	b.w	8004764 <std>
 8004858:	2000039c 	.word	0x2000039c
 800485c:	20000264 	.word	0x20000264
 8004860:	080047d1 	.word	0x080047d1

08004864 <__sfp_lock_acquire>:
 8004864:	4801      	ldr	r0, [pc, #4]	@ (800486c <__sfp_lock_acquire+0x8>)
 8004866:	f000 ba04 	b.w	8004c72 <__retarget_lock_acquire_recursive>
 800486a:	bf00      	nop
 800486c:	200003a5 	.word	0x200003a5

08004870 <__sfp_lock_release>:
 8004870:	4801      	ldr	r0, [pc, #4]	@ (8004878 <__sfp_lock_release+0x8>)
 8004872:	f000 b9ff 	b.w	8004c74 <__retarget_lock_release_recursive>
 8004876:	bf00      	nop
 8004878:	200003a5 	.word	0x200003a5

0800487c <__sinit>:
 800487c:	b510      	push	{r4, lr}
 800487e:	4604      	mov	r4, r0
 8004880:	f7ff fff0 	bl	8004864 <__sfp_lock_acquire>
 8004884:	6a23      	ldr	r3, [r4, #32]
 8004886:	b11b      	cbz	r3, 8004890 <__sinit+0x14>
 8004888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800488c:	f7ff bff0 	b.w	8004870 <__sfp_lock_release>
 8004890:	4b04      	ldr	r3, [pc, #16]	@ (80048a4 <__sinit+0x28>)
 8004892:	6223      	str	r3, [r4, #32]
 8004894:	4b04      	ldr	r3, [pc, #16]	@ (80048a8 <__sinit+0x2c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f5      	bne.n	8004888 <__sinit+0xc>
 800489c:	f7ff ffc4 	bl	8004828 <global_stdio_init.part.0>
 80048a0:	e7f2      	b.n	8004888 <__sinit+0xc>
 80048a2:	bf00      	nop
 80048a4:	080047e9 	.word	0x080047e9
 80048a8:	2000039c 	.word	0x2000039c

080048ac <_fwalk_sglue>:
 80048ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048b0:	4607      	mov	r7, r0
 80048b2:	4688      	mov	r8, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	2600      	movs	r6, #0
 80048b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048bc:	f1b9 0901 	subs.w	r9, r9, #1
 80048c0:	d505      	bpl.n	80048ce <_fwalk_sglue+0x22>
 80048c2:	6824      	ldr	r4, [r4, #0]
 80048c4:	2c00      	cmp	r4, #0
 80048c6:	d1f7      	bne.n	80048b8 <_fwalk_sglue+0xc>
 80048c8:	4630      	mov	r0, r6
 80048ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ce:	89ab      	ldrh	r3, [r5, #12]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d907      	bls.n	80048e4 <_fwalk_sglue+0x38>
 80048d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048d8:	3301      	adds	r3, #1
 80048da:	d003      	beq.n	80048e4 <_fwalk_sglue+0x38>
 80048dc:	4629      	mov	r1, r5
 80048de:	4638      	mov	r0, r7
 80048e0:	47c0      	blx	r8
 80048e2:	4306      	orrs	r6, r0
 80048e4:	3568      	adds	r5, #104	@ 0x68
 80048e6:	e7e9      	b.n	80048bc <_fwalk_sglue+0x10>

080048e8 <iprintf>:
 80048e8:	b40f      	push	{r0, r1, r2, r3}
 80048ea:	b507      	push	{r0, r1, r2, lr}
 80048ec:	4906      	ldr	r1, [pc, #24]	@ (8004908 <iprintf+0x20>)
 80048ee:	ab04      	add	r3, sp, #16
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80048f6:	6881      	ldr	r1, [r0, #8]
 80048f8:	9301      	str	r3, [sp, #4]
 80048fa:	f001 fcb5 	bl	8006268 <_vfiprintf_r>
 80048fe:	b003      	add	sp, #12
 8004900:	f85d eb04 	ldr.w	lr, [sp], #4
 8004904:	b004      	add	sp, #16
 8004906:	4770      	bx	lr
 8004908:	20000018 	.word	0x20000018

0800490c <_puts_r>:
 800490c:	6a03      	ldr	r3, [r0, #32]
 800490e:	b570      	push	{r4, r5, r6, lr}
 8004910:	6884      	ldr	r4, [r0, #8]
 8004912:	4605      	mov	r5, r0
 8004914:	460e      	mov	r6, r1
 8004916:	b90b      	cbnz	r3, 800491c <_puts_r+0x10>
 8004918:	f7ff ffb0 	bl	800487c <__sinit>
 800491c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800491e:	07db      	lsls	r3, r3, #31
 8004920:	d405      	bmi.n	800492e <_puts_r+0x22>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	0598      	lsls	r0, r3, #22
 8004926:	d402      	bmi.n	800492e <_puts_r+0x22>
 8004928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800492a:	f000 f9a2 	bl	8004c72 <__retarget_lock_acquire_recursive>
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	0719      	lsls	r1, r3, #28
 8004932:	d502      	bpl.n	800493a <_puts_r+0x2e>
 8004934:	6923      	ldr	r3, [r4, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d135      	bne.n	80049a6 <_puts_r+0x9a>
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f8c5 	bl	8004acc <__swsetup_r>
 8004942:	b380      	cbz	r0, 80049a6 <_puts_r+0x9a>
 8004944:	f04f 35ff 	mov.w	r5, #4294967295
 8004948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800494a:	07da      	lsls	r2, r3, #31
 800494c:	d405      	bmi.n	800495a <_puts_r+0x4e>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	d402      	bmi.n	800495a <_puts_r+0x4e>
 8004954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004956:	f000 f98d 	bl	8004c74 <__retarget_lock_release_recursive>
 800495a:	4628      	mov	r0, r5
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	2b00      	cmp	r3, #0
 8004960:	da04      	bge.n	800496c <_puts_r+0x60>
 8004962:	69a2      	ldr	r2, [r4, #24]
 8004964:	429a      	cmp	r2, r3
 8004966:	dc17      	bgt.n	8004998 <_puts_r+0x8c>
 8004968:	290a      	cmp	r1, #10
 800496a:	d015      	beq.n	8004998 <_puts_r+0x8c>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	1c5a      	adds	r2, r3, #1
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	7019      	strb	r1, [r3, #0]
 8004974:	68a3      	ldr	r3, [r4, #8]
 8004976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800497a:	3b01      	subs	r3, #1
 800497c:	60a3      	str	r3, [r4, #8]
 800497e:	2900      	cmp	r1, #0
 8004980:	d1ed      	bne.n	800495e <_puts_r+0x52>
 8004982:	2b00      	cmp	r3, #0
 8004984:	da11      	bge.n	80049aa <_puts_r+0x9e>
 8004986:	4622      	mov	r2, r4
 8004988:	210a      	movs	r1, #10
 800498a:	4628      	mov	r0, r5
 800498c:	f000 f85f 	bl	8004a4e <__swbuf_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d0d7      	beq.n	8004944 <_puts_r+0x38>
 8004994:	250a      	movs	r5, #10
 8004996:	e7d7      	b.n	8004948 <_puts_r+0x3c>
 8004998:	4622      	mov	r2, r4
 800499a:	4628      	mov	r0, r5
 800499c:	f000 f857 	bl	8004a4e <__swbuf_r>
 80049a0:	3001      	adds	r0, #1
 80049a2:	d1e7      	bne.n	8004974 <_puts_r+0x68>
 80049a4:	e7ce      	b.n	8004944 <_puts_r+0x38>
 80049a6:	3e01      	subs	r6, #1
 80049a8:	e7e4      	b.n	8004974 <_puts_r+0x68>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	220a      	movs	r2, #10
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e7ee      	b.n	8004994 <_puts_r+0x88>
	...

080049b8 <puts>:
 80049b8:	4b02      	ldr	r3, [pc, #8]	@ (80049c4 <puts+0xc>)
 80049ba:	4601      	mov	r1, r0
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f7ff bfa5 	b.w	800490c <_puts_r>
 80049c2:	bf00      	nop
 80049c4:	20000018 	.word	0x20000018

080049c8 <__sread>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	460c      	mov	r4, r1
 80049cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049d0:	f000 f900 	bl	8004bd4 <_read_r>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	bfab      	itete	ge
 80049d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80049da:	89a3      	ldrhlt	r3, [r4, #12]
 80049dc:	181b      	addge	r3, r3, r0
 80049de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80049e2:	bfac      	ite	ge
 80049e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80049e6:	81a3      	strhlt	r3, [r4, #12]
 80049e8:	bd10      	pop	{r4, pc}

080049ea <__swrite>:
 80049ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049ee:	461f      	mov	r7, r3
 80049f0:	898b      	ldrh	r3, [r1, #12]
 80049f2:	05db      	lsls	r3, r3, #23
 80049f4:	4605      	mov	r5, r0
 80049f6:	460c      	mov	r4, r1
 80049f8:	4616      	mov	r6, r2
 80049fa:	d505      	bpl.n	8004a08 <__swrite+0x1e>
 80049fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a00:	2302      	movs	r3, #2
 8004a02:	2200      	movs	r2, #0
 8004a04:	f000 f8d4 	bl	8004bb0 <_lseek_r>
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a12:	81a3      	strh	r3, [r4, #12]
 8004a14:	4632      	mov	r2, r6
 8004a16:	463b      	mov	r3, r7
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1e:	f000 b8eb 	b.w	8004bf8 <_write_r>

08004a22 <__sseek>:
 8004a22:	b510      	push	{r4, lr}
 8004a24:	460c      	mov	r4, r1
 8004a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a2a:	f000 f8c1 	bl	8004bb0 <_lseek_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	bf15      	itete	ne
 8004a34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a3e:	81a3      	strheq	r3, [r4, #12]
 8004a40:	bf18      	it	ne
 8004a42:	81a3      	strhne	r3, [r4, #12]
 8004a44:	bd10      	pop	{r4, pc}

08004a46 <__sclose>:
 8004a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a4a:	f000 b8a1 	b.w	8004b90 <_close_r>

08004a4e <__swbuf_r>:
 8004a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a50:	460e      	mov	r6, r1
 8004a52:	4614      	mov	r4, r2
 8004a54:	4605      	mov	r5, r0
 8004a56:	b118      	cbz	r0, 8004a60 <__swbuf_r+0x12>
 8004a58:	6a03      	ldr	r3, [r0, #32]
 8004a5a:	b90b      	cbnz	r3, 8004a60 <__swbuf_r+0x12>
 8004a5c:	f7ff ff0e 	bl	800487c <__sinit>
 8004a60:	69a3      	ldr	r3, [r4, #24]
 8004a62:	60a3      	str	r3, [r4, #8]
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	071a      	lsls	r2, r3, #28
 8004a68:	d501      	bpl.n	8004a6e <__swbuf_r+0x20>
 8004a6a:	6923      	ldr	r3, [r4, #16]
 8004a6c:	b943      	cbnz	r3, 8004a80 <__swbuf_r+0x32>
 8004a6e:	4621      	mov	r1, r4
 8004a70:	4628      	mov	r0, r5
 8004a72:	f000 f82b 	bl	8004acc <__swsetup_r>
 8004a76:	b118      	cbz	r0, 8004a80 <__swbuf_r+0x32>
 8004a78:	f04f 37ff 	mov.w	r7, #4294967295
 8004a7c:	4638      	mov	r0, r7
 8004a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	6922      	ldr	r2, [r4, #16]
 8004a84:	1a98      	subs	r0, r3, r2
 8004a86:	6963      	ldr	r3, [r4, #20]
 8004a88:	b2f6      	uxtb	r6, r6
 8004a8a:	4283      	cmp	r3, r0
 8004a8c:	4637      	mov	r7, r6
 8004a8e:	dc05      	bgt.n	8004a9c <__swbuf_r+0x4e>
 8004a90:	4621      	mov	r1, r4
 8004a92:	4628      	mov	r0, r5
 8004a94:	f001 fd84 	bl	80065a0 <_fflush_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1ed      	bne.n	8004a78 <__swbuf_r+0x2a>
 8004a9c:	68a3      	ldr	r3, [r4, #8]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	6022      	str	r2, [r4, #0]
 8004aa8:	701e      	strb	r6, [r3, #0]
 8004aaa:	6962      	ldr	r2, [r4, #20]
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d004      	beq.n	8004abc <__swbuf_r+0x6e>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	07db      	lsls	r3, r3, #31
 8004ab6:	d5e1      	bpl.n	8004a7c <__swbuf_r+0x2e>
 8004ab8:	2e0a      	cmp	r6, #10
 8004aba:	d1df      	bne.n	8004a7c <__swbuf_r+0x2e>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f001 fd6e 	bl	80065a0 <_fflush_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0d9      	beq.n	8004a7c <__swbuf_r+0x2e>
 8004ac8:	e7d6      	b.n	8004a78 <__swbuf_r+0x2a>
	...

08004acc <__swsetup_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4b29      	ldr	r3, [pc, #164]	@ (8004b74 <__swsetup_r+0xa8>)
 8004ad0:	4605      	mov	r5, r0
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	460c      	mov	r4, r1
 8004ad6:	b118      	cbz	r0, 8004ae0 <__swsetup_r+0x14>
 8004ad8:	6a03      	ldr	r3, [r0, #32]
 8004ada:	b90b      	cbnz	r3, 8004ae0 <__swsetup_r+0x14>
 8004adc:	f7ff fece 	bl	800487c <__sinit>
 8004ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ae4:	0719      	lsls	r1, r3, #28
 8004ae6:	d422      	bmi.n	8004b2e <__swsetup_r+0x62>
 8004ae8:	06da      	lsls	r2, r3, #27
 8004aea:	d407      	bmi.n	8004afc <__swsetup_r+0x30>
 8004aec:	2209      	movs	r2, #9
 8004aee:	602a      	str	r2, [r5, #0]
 8004af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	e033      	b.n	8004b64 <__swsetup_r+0x98>
 8004afc:	0758      	lsls	r0, r3, #29
 8004afe:	d512      	bpl.n	8004b26 <__swsetup_r+0x5a>
 8004b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b02:	b141      	cbz	r1, 8004b16 <__swsetup_r+0x4a>
 8004b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	d002      	beq.n	8004b12 <__swsetup_r+0x46>
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	f000 feff 	bl	8005910 <_free_r>
 8004b12:	2300      	movs	r3, #0
 8004b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6063      	str	r3, [r4, #4]
 8004b22:	6923      	ldr	r3, [r4, #16]
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	89a3      	ldrh	r3, [r4, #12]
 8004b28:	f043 0308 	orr.w	r3, r3, #8
 8004b2c:	81a3      	strh	r3, [r4, #12]
 8004b2e:	6923      	ldr	r3, [r4, #16]
 8004b30:	b94b      	cbnz	r3, 8004b46 <__swsetup_r+0x7a>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b3c:	d003      	beq.n	8004b46 <__swsetup_r+0x7a>
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4628      	mov	r0, r5
 8004b42:	f001 fd7b 	bl	800663c <__smakebuf_r>
 8004b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b4a:	f013 0201 	ands.w	r2, r3, #1
 8004b4e:	d00a      	beq.n	8004b66 <__swsetup_r+0x9a>
 8004b50:	2200      	movs	r2, #0
 8004b52:	60a2      	str	r2, [r4, #8]
 8004b54:	6962      	ldr	r2, [r4, #20]
 8004b56:	4252      	negs	r2, r2
 8004b58:	61a2      	str	r2, [r4, #24]
 8004b5a:	6922      	ldr	r2, [r4, #16]
 8004b5c:	b942      	cbnz	r2, 8004b70 <__swsetup_r+0xa4>
 8004b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b62:	d1c5      	bne.n	8004af0 <__swsetup_r+0x24>
 8004b64:	bd38      	pop	{r3, r4, r5, pc}
 8004b66:	0799      	lsls	r1, r3, #30
 8004b68:	bf58      	it	pl
 8004b6a:	6962      	ldrpl	r2, [r4, #20]
 8004b6c:	60a2      	str	r2, [r4, #8]
 8004b6e:	e7f4      	b.n	8004b5a <__swsetup_r+0x8e>
 8004b70:	2000      	movs	r0, #0
 8004b72:	e7f7      	b.n	8004b64 <__swsetup_r+0x98>
 8004b74:	20000018 	.word	0x20000018

08004b78 <memset>:
 8004b78:	4402      	add	r2, r0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d100      	bne.n	8004b82 <memset+0xa>
 8004b80:	4770      	bx	lr
 8004b82:	f803 1b01 	strb.w	r1, [r3], #1
 8004b86:	e7f9      	b.n	8004b7c <memset+0x4>

08004b88 <_localeconv_r>:
 8004b88:	4800      	ldr	r0, [pc, #0]	@ (8004b8c <_localeconv_r+0x4>)
 8004b8a:	4770      	bx	lr
 8004b8c:	20000158 	.word	0x20000158

08004b90 <_close_r>:
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4d06      	ldr	r5, [pc, #24]	@ (8004bac <_close_r+0x1c>)
 8004b94:	2300      	movs	r3, #0
 8004b96:	4604      	mov	r4, r0
 8004b98:	4608      	mov	r0, r1
 8004b9a:	602b      	str	r3, [r5, #0]
 8004b9c:	f7fc fb16 	bl	80011cc <_close>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d102      	bne.n	8004baa <_close_r+0x1a>
 8004ba4:	682b      	ldr	r3, [r5, #0]
 8004ba6:	b103      	cbz	r3, 8004baa <_close_r+0x1a>
 8004ba8:	6023      	str	r3, [r4, #0]
 8004baa:	bd38      	pop	{r3, r4, r5, pc}
 8004bac:	200003a0 	.word	0x200003a0

08004bb0 <_lseek_r>:
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	4d07      	ldr	r5, [pc, #28]	@ (8004bd0 <_lseek_r+0x20>)
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	4608      	mov	r0, r1
 8004bb8:	4611      	mov	r1, r2
 8004bba:	2200      	movs	r2, #0
 8004bbc:	602a      	str	r2, [r5, #0]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f7fc fb2b 	bl	800121a <_lseek>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_lseek_r+0x1e>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_lseek_r+0x1e>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200003a0 	.word	0x200003a0

08004bd4 <_read_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d07      	ldr	r5, [pc, #28]	@ (8004bf4 <_read_r+0x20>)
 8004bd8:	4604      	mov	r4, r0
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	2200      	movs	r2, #0
 8004be0:	602a      	str	r2, [r5, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f7fc fab9 	bl	800115a <_read>
 8004be8:	1c43      	adds	r3, r0, #1
 8004bea:	d102      	bne.n	8004bf2 <_read_r+0x1e>
 8004bec:	682b      	ldr	r3, [r5, #0]
 8004bee:	b103      	cbz	r3, 8004bf2 <_read_r+0x1e>
 8004bf0:	6023      	str	r3, [r4, #0]
 8004bf2:	bd38      	pop	{r3, r4, r5, pc}
 8004bf4:	200003a0 	.word	0x200003a0

08004bf8 <_write_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d07      	ldr	r5, [pc, #28]	@ (8004c18 <_write_r+0x20>)
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4611      	mov	r1, r2
 8004c02:	2200      	movs	r2, #0
 8004c04:	602a      	str	r2, [r5, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	f7fc fac4 	bl	8001194 <_write>
 8004c0c:	1c43      	adds	r3, r0, #1
 8004c0e:	d102      	bne.n	8004c16 <_write_r+0x1e>
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	b103      	cbz	r3, 8004c16 <_write_r+0x1e>
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	bd38      	pop	{r3, r4, r5, pc}
 8004c18:	200003a0 	.word	0x200003a0

08004c1c <__errno>:
 8004c1c:	4b01      	ldr	r3, [pc, #4]	@ (8004c24 <__errno+0x8>)
 8004c1e:	6818      	ldr	r0, [r3, #0]
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000018 	.word	0x20000018

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	@ (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f001 fe2a 	bl	8006894 <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08006ce0 	.word	0x08006ce0
 8004c64:	08006ce0 	.word	0x08006ce0
 8004c68:	08006ce0 	.word	0x08006ce0
 8004c6c:	08006ce4 	.word	0x08006ce4

08004c70 <__retarget_lock_init_recursive>:
 8004c70:	4770      	bx	lr

08004c72 <__retarget_lock_acquire_recursive>:
 8004c72:	4770      	bx	lr

08004c74 <__retarget_lock_release_recursive>:
 8004c74:	4770      	bx	lr

08004c76 <quorem>:
 8004c76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6903      	ldr	r3, [r0, #16]
 8004c7c:	690c      	ldr	r4, [r1, #16]
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	4607      	mov	r7, r0
 8004c82:	db7e      	blt.n	8004d82 <quorem+0x10c>
 8004c84:	3c01      	subs	r4, #1
 8004c86:	f101 0814 	add.w	r8, r1, #20
 8004c8a:	00a3      	lsls	r3, r4, #2
 8004c8c:	f100 0514 	add.w	r5, r0, #20
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cac:	d32e      	bcc.n	8004d0c <quorem+0x96>
 8004cae:	f04f 0a00 	mov.w	sl, #0
 8004cb2:	46c4      	mov	ip, r8
 8004cb4:	46ae      	mov	lr, r5
 8004cb6:	46d3      	mov	fp, sl
 8004cb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004cbc:	b298      	uxth	r0, r3
 8004cbe:	fb06 a000 	mla	r0, r6, r0, sl
 8004cc2:	0c02      	lsrs	r2, r0, #16
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	fb06 2303 	mla	r3, r6, r3, r2
 8004cca:	f8de 2000 	ldr.w	r2, [lr]
 8004cce:	b280      	uxth	r0, r0
 8004cd0:	b292      	uxth	r2, r2
 8004cd2:	1a12      	subs	r2, r2, r0
 8004cd4:	445a      	add	r2, fp
 8004cd6:	f8de 0000 	ldr.w	r0, [lr]
 8004cda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ce4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004cee:	45e1      	cmp	r9, ip
 8004cf0:	f84e 2b04 	str.w	r2, [lr], #4
 8004cf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004cf8:	d2de      	bcs.n	8004cb8 <quorem+0x42>
 8004cfa:	9b00      	ldr	r3, [sp, #0]
 8004cfc:	58eb      	ldr	r3, [r5, r3]
 8004cfe:	b92b      	cbnz	r3, 8004d0c <quorem+0x96>
 8004d00:	9b01      	ldr	r3, [sp, #4]
 8004d02:	3b04      	subs	r3, #4
 8004d04:	429d      	cmp	r5, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	d32f      	bcc.n	8004d6a <quorem+0xf4>
 8004d0a:	613c      	str	r4, [r7, #16]
 8004d0c:	4638      	mov	r0, r7
 8004d0e:	f001 f979 	bl	8006004 <__mcmp>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	db25      	blt.n	8004d62 <quorem+0xec>
 8004d16:	4629      	mov	r1, r5
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d1e:	f8d1 c000 	ldr.w	ip, [r1]
 8004d22:	fa1f fe82 	uxth.w	lr, r2
 8004d26:	fa1f f38c 	uxth.w	r3, ip
 8004d2a:	eba3 030e 	sub.w	r3, r3, lr
 8004d2e:	4403      	add	r3, r0
 8004d30:	0c12      	lsrs	r2, r2, #16
 8004d32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004d36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d40:	45c1      	cmp	r9, r8
 8004d42:	f841 3b04 	str.w	r3, [r1], #4
 8004d46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d4a:	d2e6      	bcs.n	8004d1a <quorem+0xa4>
 8004d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d54:	b922      	cbnz	r2, 8004d60 <quorem+0xea>
 8004d56:	3b04      	subs	r3, #4
 8004d58:	429d      	cmp	r5, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	d30b      	bcc.n	8004d76 <quorem+0x100>
 8004d5e:	613c      	str	r4, [r7, #16]
 8004d60:	3601      	adds	r6, #1
 8004d62:	4630      	mov	r0, r6
 8004d64:	b003      	add	sp, #12
 8004d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d1cb      	bne.n	8004d0a <quorem+0x94>
 8004d72:	3c01      	subs	r4, #1
 8004d74:	e7c6      	b.n	8004d04 <quorem+0x8e>
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	d1ef      	bne.n	8004d5e <quorem+0xe8>
 8004d7e:	3c01      	subs	r4, #1
 8004d80:	e7ea      	b.n	8004d58 <quorem+0xe2>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e7ee      	b.n	8004d64 <quorem+0xee>
	...

08004d88 <_dtoa_r>:
 8004d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8c:	69c7      	ldr	r7, [r0, #28]
 8004d8e:	b099      	sub	sp, #100	@ 0x64
 8004d90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d94:	ec55 4b10 	vmov	r4, r5, d0
 8004d98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004d9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d9c:	4683      	mov	fp, r0
 8004d9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004da2:	b97f      	cbnz	r7, 8004dc4 <_dtoa_r+0x3c>
 8004da4:	2010      	movs	r0, #16
 8004da6:	f000 fdfd 	bl	80059a4 <malloc>
 8004daa:	4602      	mov	r2, r0
 8004dac:	f8cb 001c 	str.w	r0, [fp, #28]
 8004db0:	b920      	cbnz	r0, 8004dbc <_dtoa_r+0x34>
 8004db2:	4ba7      	ldr	r3, [pc, #668]	@ (8005050 <_dtoa_r+0x2c8>)
 8004db4:	21ef      	movs	r1, #239	@ 0xef
 8004db6:	48a7      	ldr	r0, [pc, #668]	@ (8005054 <_dtoa_r+0x2cc>)
 8004db8:	f001 fcbc 	bl	8006734 <__assert_func>
 8004dbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004dc0:	6007      	str	r7, [r0, #0]
 8004dc2:	60c7      	str	r7, [r0, #12]
 8004dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	b159      	cbz	r1, 8004de4 <_dtoa_r+0x5c>
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	604a      	str	r2, [r1, #4]
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	4093      	lsls	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
 8004dd6:	4658      	mov	r0, fp
 8004dd8:	f000 feda 	bl	8005b90 <_Bfree>
 8004ddc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	1e2b      	subs	r3, r5, #0
 8004de6:	bfb9      	ittee	lt
 8004de8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004dec:	9303      	strlt	r3, [sp, #12]
 8004dee:	2300      	movge	r3, #0
 8004df0:	6033      	strge	r3, [r6, #0]
 8004df2:	9f03      	ldr	r7, [sp, #12]
 8004df4:	4b98      	ldr	r3, [pc, #608]	@ (8005058 <_dtoa_r+0x2d0>)
 8004df6:	bfbc      	itt	lt
 8004df8:	2201      	movlt	r2, #1
 8004dfa:	6032      	strlt	r2, [r6, #0]
 8004dfc:	43bb      	bics	r3, r7
 8004dfe:	d112      	bne.n	8004e26 <_dtoa_r+0x9e>
 8004e00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e0c:	4323      	orrs	r3, r4
 8004e0e:	f000 854d 	beq.w	80058ac <_dtoa_r+0xb24>
 8004e12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800506c <_dtoa_r+0x2e4>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 854f 	beq.w	80058bc <_dtoa_r+0xb34>
 8004e1e:	f10a 0303 	add.w	r3, sl, #3
 8004e22:	f000 bd49 	b.w	80058b8 <_dtoa_r+0xb30>
 8004e26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	ec51 0b17 	vmov	r0, r1, d7
 8004e30:	2300      	movs	r3, #0
 8004e32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004e36:	f7fb fe6f 	bl	8000b18 <__aeabi_dcmpeq>
 8004e3a:	4680      	mov	r8, r0
 8004e3c:	b158      	cbz	r0, 8004e56 <_dtoa_r+0xce>
 8004e3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004e40:	2301      	movs	r3, #1
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004e46:	b113      	cbz	r3, 8004e4e <_dtoa_r+0xc6>
 8004e48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004e4a:	4b84      	ldr	r3, [pc, #528]	@ (800505c <_dtoa_r+0x2d4>)
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005070 <_dtoa_r+0x2e8>
 8004e52:	f000 bd33 	b.w	80058bc <_dtoa_r+0xb34>
 8004e56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004e5a:	aa16      	add	r2, sp, #88	@ 0x58
 8004e5c:	a917      	add	r1, sp, #92	@ 0x5c
 8004e5e:	4658      	mov	r0, fp
 8004e60:	f001 f980 	bl	8006164 <__d2b>
 8004e64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e68:	4681      	mov	r9, r0
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	d077      	beq.n	8004f5e <_dtoa_r+0x1d6>
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004e80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004e84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004e88:	4619      	mov	r1, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4b74      	ldr	r3, [pc, #464]	@ (8005060 <_dtoa_r+0x2d8>)
 8004e8e:	f7fb fa23 	bl	80002d8 <__aeabi_dsub>
 8004e92:	a369      	add	r3, pc, #420	@ (adr r3, 8005038 <_dtoa_r+0x2b0>)
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f7fb fbd6 	bl	8000648 <__aeabi_dmul>
 8004e9c:	a368      	add	r3, pc, #416	@ (adr r3, 8005040 <_dtoa_r+0x2b8>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb fa1b 	bl	80002dc <__adddf3>
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	460d      	mov	r5, r1
 8004eac:	f7fb fb62 	bl	8000574 <__aeabi_i2d>
 8004eb0:	a365      	add	r3, pc, #404	@ (adr r3, 8005048 <_dtoa_r+0x2c0>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb fbc7 	bl	8000648 <__aeabi_dmul>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	f7fb fa0b 	bl	80002dc <__adddf3>
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	460d      	mov	r5, r1
 8004eca:	f7fb fe6d 	bl	8000ba8 <__aeabi_d2iz>
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb fe28 	bl	8000b2c <__aeabi_dcmplt>
 8004edc:	b140      	cbz	r0, 8004ef0 <_dtoa_r+0x168>
 8004ede:	4638      	mov	r0, r7
 8004ee0:	f7fb fb48 	bl	8000574 <__aeabi_i2d>
 8004ee4:	4622      	mov	r2, r4
 8004ee6:	462b      	mov	r3, r5
 8004ee8:	f7fb fe16 	bl	8000b18 <__aeabi_dcmpeq>
 8004eec:	b900      	cbnz	r0, 8004ef0 <_dtoa_r+0x168>
 8004eee:	3f01      	subs	r7, #1
 8004ef0:	2f16      	cmp	r7, #22
 8004ef2:	d851      	bhi.n	8004f98 <_dtoa_r+0x210>
 8004ef4:	4b5b      	ldr	r3, [pc, #364]	@ (8005064 <_dtoa_r+0x2dc>)
 8004ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f02:	f7fb fe13 	bl	8000b2c <__aeabi_dcmplt>
 8004f06:	2800      	cmp	r0, #0
 8004f08:	d048      	beq.n	8004f9c <_dtoa_r+0x214>
 8004f0a:	3f01      	subs	r7, #1
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8004f10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004f12:	1b9b      	subs	r3, r3, r6
 8004f14:	1e5a      	subs	r2, r3, #1
 8004f16:	bf44      	itt	mi
 8004f18:	f1c3 0801 	rsbmi	r8, r3, #1
 8004f1c:	2300      	movmi	r3, #0
 8004f1e:	9208      	str	r2, [sp, #32]
 8004f20:	bf54      	ite	pl
 8004f22:	f04f 0800 	movpl.w	r8, #0
 8004f26:	9308      	strmi	r3, [sp, #32]
 8004f28:	2f00      	cmp	r7, #0
 8004f2a:	db39      	blt.n	8004fa0 <_dtoa_r+0x218>
 8004f2c:	9b08      	ldr	r3, [sp, #32]
 8004f2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004f30:	443b      	add	r3, r7
 8004f32:	9308      	str	r3, [sp, #32]
 8004f34:	2300      	movs	r3, #0
 8004f36:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3a:	2b09      	cmp	r3, #9
 8004f3c:	d864      	bhi.n	8005008 <_dtoa_r+0x280>
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	bfc4      	itt	gt
 8004f42:	3b04      	subgt	r3, #4
 8004f44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004f46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f48:	f1a3 0302 	sub.w	r3, r3, #2
 8004f4c:	bfcc      	ite	gt
 8004f4e:	2400      	movgt	r4, #0
 8004f50:	2401      	movle	r4, #1
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d863      	bhi.n	800501e <_dtoa_r+0x296>
 8004f56:	e8df f003 	tbb	[pc, r3]
 8004f5a:	372a      	.short	0x372a
 8004f5c:	5535      	.short	0x5535
 8004f5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004f62:	441e      	add	r6, r3
 8004f64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	bfc1      	itttt	gt
 8004f6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004f70:	409f      	lslgt	r7, r3
 8004f72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004f76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004f7a:	bfd6      	itet	le
 8004f7c:	f1c3 0320 	rsble	r3, r3, #32
 8004f80:	ea47 0003 	orrgt.w	r0, r7, r3
 8004f84:	fa04 f003 	lslle.w	r0, r4, r3
 8004f88:	f7fb fae4 	bl	8000554 <__aeabi_ui2d>
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004f92:	3e01      	subs	r6, #1
 8004f94:	9214      	str	r2, [sp, #80]	@ 0x50
 8004f96:	e777      	b.n	8004e88 <_dtoa_r+0x100>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e7b8      	b.n	8004f0e <_dtoa_r+0x186>
 8004f9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8004f9e:	e7b7      	b.n	8004f10 <_dtoa_r+0x188>
 8004fa0:	427b      	negs	r3, r7
 8004fa2:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	eba8 0807 	sub.w	r8, r8, r7
 8004faa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004fac:	e7c4      	b.n	8004f38 <_dtoa_r+0x1b0>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dc35      	bgt.n	8005024 <_dtoa_r+0x29c>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	9307      	str	r3, [sp, #28]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8004fc2:	e00b      	b.n	8004fdc <_dtoa_r+0x254>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e7f3      	b.n	8004fb0 <_dtoa_r+0x228>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	9307      	str	r3, [sp, #28]
 8004fd8:	bfb8      	it	lt
 8004fda:	2301      	movlt	r3, #1
 8004fdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	2204      	movs	r2, #4
 8004fe4:	f102 0514 	add.w	r5, r2, #20
 8004fe8:	429d      	cmp	r5, r3
 8004fea:	d91f      	bls.n	800502c <_dtoa_r+0x2a4>
 8004fec:	6041      	str	r1, [r0, #4]
 8004fee:	4658      	mov	r0, fp
 8004ff0:	f000 fd8e 	bl	8005b10 <_Balloc>
 8004ff4:	4682      	mov	sl, r0
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d13c      	bne.n	8005074 <_dtoa_r+0x2ec>
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8005068 <_dtoa_r+0x2e0>)
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005002:	e6d8      	b.n	8004db6 <_dtoa_r+0x2e>
 8005004:	2301      	movs	r3, #1
 8005006:	e7e0      	b.n	8004fca <_dtoa_r+0x242>
 8005008:	2401      	movs	r4, #1
 800500a:	2300      	movs	r3, #0
 800500c:	9309      	str	r3, [sp, #36]	@ 0x24
 800500e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005010:	f04f 33ff 	mov.w	r3, #4294967295
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	9307      	str	r3, [sp, #28]
 8005018:	2200      	movs	r2, #0
 800501a:	2312      	movs	r3, #18
 800501c:	e7d0      	b.n	8004fc0 <_dtoa_r+0x238>
 800501e:	2301      	movs	r3, #1
 8005020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005022:	e7f5      	b.n	8005010 <_dtoa_r+0x288>
 8005024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	9307      	str	r3, [sp, #28]
 800502a:	e7d7      	b.n	8004fdc <_dtoa_r+0x254>
 800502c:	3101      	adds	r1, #1
 800502e:	0052      	lsls	r2, r2, #1
 8005030:	e7d8      	b.n	8004fe4 <_dtoa_r+0x25c>
 8005032:	bf00      	nop
 8005034:	f3af 8000 	nop.w
 8005038:	636f4361 	.word	0x636f4361
 800503c:	3fd287a7 	.word	0x3fd287a7
 8005040:	8b60c8b3 	.word	0x8b60c8b3
 8005044:	3fc68a28 	.word	0x3fc68a28
 8005048:	509f79fb 	.word	0x509f79fb
 800504c:	3fd34413 	.word	0x3fd34413
 8005050:	080069a9 	.word	0x080069a9
 8005054:	080069c0 	.word	0x080069c0
 8005058:	7ff00000 	.word	0x7ff00000
 800505c:	08006979 	.word	0x08006979
 8005060:	3ff80000 	.word	0x3ff80000
 8005064:	08006ab8 	.word	0x08006ab8
 8005068:	08006a18 	.word	0x08006a18
 800506c:	080069a5 	.word	0x080069a5
 8005070:	08006978 	.word	0x08006978
 8005074:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005078:	6018      	str	r0, [r3, #0]
 800507a:	9b07      	ldr	r3, [sp, #28]
 800507c:	2b0e      	cmp	r3, #14
 800507e:	f200 80a4 	bhi.w	80051ca <_dtoa_r+0x442>
 8005082:	2c00      	cmp	r4, #0
 8005084:	f000 80a1 	beq.w	80051ca <_dtoa_r+0x442>
 8005088:	2f00      	cmp	r7, #0
 800508a:	dd33      	ble.n	80050f4 <_dtoa_r+0x36c>
 800508c:	4bad      	ldr	r3, [pc, #692]	@ (8005344 <_dtoa_r+0x5bc>)
 800508e:	f007 020f 	and.w	r2, r7, #15
 8005092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005096:	ed93 7b00 	vldr	d7, [r3]
 800509a:	05f8      	lsls	r0, r7, #23
 800509c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80050a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80050a4:	d516      	bpl.n	80050d4 <_dtoa_r+0x34c>
 80050a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005348 <_dtoa_r+0x5c0>)
 80050a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050b0:	f7fb fbf4 	bl	800089c <__aeabi_ddiv>
 80050b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050b8:	f004 040f 	and.w	r4, r4, #15
 80050bc:	2603      	movs	r6, #3
 80050be:	4da2      	ldr	r5, [pc, #648]	@ (8005348 <_dtoa_r+0x5c0>)
 80050c0:	b954      	cbnz	r4, 80050d8 <_dtoa_r+0x350>
 80050c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050ca:	f7fb fbe7 	bl	800089c <__aeabi_ddiv>
 80050ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050d2:	e028      	b.n	8005126 <_dtoa_r+0x39e>
 80050d4:	2602      	movs	r6, #2
 80050d6:	e7f2      	b.n	80050be <_dtoa_r+0x336>
 80050d8:	07e1      	lsls	r1, r4, #31
 80050da:	d508      	bpl.n	80050ee <_dtoa_r+0x366>
 80050dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050e4:	f7fb fab0 	bl	8000648 <__aeabi_dmul>
 80050e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ec:	3601      	adds	r6, #1
 80050ee:	1064      	asrs	r4, r4, #1
 80050f0:	3508      	adds	r5, #8
 80050f2:	e7e5      	b.n	80050c0 <_dtoa_r+0x338>
 80050f4:	f000 80d2 	beq.w	800529c <_dtoa_r+0x514>
 80050f8:	427c      	negs	r4, r7
 80050fa:	4b92      	ldr	r3, [pc, #584]	@ (8005344 <_dtoa_r+0x5bc>)
 80050fc:	4d92      	ldr	r5, [pc, #584]	@ (8005348 <_dtoa_r+0x5c0>)
 80050fe:	f004 020f 	and.w	r2, r4, #15
 8005102:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800510e:	f7fb fa9b 	bl	8000648 <__aeabi_dmul>
 8005112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005116:	1124      	asrs	r4, r4, #4
 8005118:	2300      	movs	r3, #0
 800511a:	2602      	movs	r6, #2
 800511c:	2c00      	cmp	r4, #0
 800511e:	f040 80b2 	bne.w	8005286 <_dtoa_r+0x4fe>
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1d3      	bne.n	80050ce <_dtoa_r+0x346>
 8005126:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005128:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80b7 	beq.w	80052a0 <_dtoa_r+0x518>
 8005132:	4b86      	ldr	r3, [pc, #536]	@ (800534c <_dtoa_r+0x5c4>)
 8005134:	2200      	movs	r2, #0
 8005136:	4620      	mov	r0, r4
 8005138:	4629      	mov	r1, r5
 800513a:	f7fb fcf7 	bl	8000b2c <__aeabi_dcmplt>
 800513e:	2800      	cmp	r0, #0
 8005140:	f000 80ae 	beq.w	80052a0 <_dtoa_r+0x518>
 8005144:	9b07      	ldr	r3, [sp, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80aa 	beq.w	80052a0 <_dtoa_r+0x518>
 800514c:	9b00      	ldr	r3, [sp, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	dd37      	ble.n	80051c2 <_dtoa_r+0x43a>
 8005152:	1e7b      	subs	r3, r7, #1
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	4620      	mov	r0, r4
 8005158:	4b7d      	ldr	r3, [pc, #500]	@ (8005350 <_dtoa_r+0x5c8>)
 800515a:	2200      	movs	r2, #0
 800515c:	4629      	mov	r1, r5
 800515e:	f7fb fa73 	bl	8000648 <__aeabi_dmul>
 8005162:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005166:	9c00      	ldr	r4, [sp, #0]
 8005168:	3601      	adds	r6, #1
 800516a:	4630      	mov	r0, r6
 800516c:	f7fb fa02 	bl	8000574 <__aeabi_i2d>
 8005170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005174:	f7fb fa68 	bl	8000648 <__aeabi_dmul>
 8005178:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <_dtoa_r+0x5cc>)
 800517a:	2200      	movs	r2, #0
 800517c:	f7fb f8ae 	bl	80002dc <__adddf3>
 8005180:	4605      	mov	r5, r0
 8005182:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005186:	2c00      	cmp	r4, #0
 8005188:	f040 808d 	bne.w	80052a6 <_dtoa_r+0x51e>
 800518c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005190:	4b71      	ldr	r3, [pc, #452]	@ (8005358 <_dtoa_r+0x5d0>)
 8005192:	2200      	movs	r2, #0
 8005194:	f7fb f8a0 	bl	80002d8 <__aeabi_dsub>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80051a0:	462a      	mov	r2, r5
 80051a2:	4633      	mov	r3, r6
 80051a4:	f7fb fce0 	bl	8000b68 <__aeabi_dcmpgt>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	f040 828b 	bne.w	80056c4 <_dtoa_r+0x93c>
 80051ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051b2:	462a      	mov	r2, r5
 80051b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80051b8:	f7fb fcb8 	bl	8000b2c <__aeabi_dcmplt>
 80051bc:	2800      	cmp	r0, #0
 80051be:	f040 8128 	bne.w	8005412 <_dtoa_r+0x68a>
 80051c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80051c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80051ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f2c0 815a 	blt.w	8005486 <_dtoa_r+0x6fe>
 80051d2:	2f0e      	cmp	r7, #14
 80051d4:	f300 8157 	bgt.w	8005486 <_dtoa_r+0x6fe>
 80051d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005344 <_dtoa_r+0x5bc>)
 80051da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80051de:	ed93 7b00 	vldr	d7, [r3]
 80051e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	ed8d 7b00 	vstr	d7, [sp]
 80051ea:	da03      	bge.n	80051f4 <_dtoa_r+0x46c>
 80051ec:	9b07      	ldr	r3, [sp, #28]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f340 8101 	ble.w	80053f6 <_dtoa_r+0x66e>
 80051f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80051f8:	4656      	mov	r6, sl
 80051fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb fb4b 	bl	800089c <__aeabi_ddiv>
 8005206:	f7fb fccf 	bl	8000ba8 <__aeabi_d2iz>
 800520a:	4680      	mov	r8, r0
 800520c:	f7fb f9b2 	bl	8000574 <__aeabi_i2d>
 8005210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005214:	f7fb fa18 	bl	8000648 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4620      	mov	r0, r4
 800521e:	4629      	mov	r1, r5
 8005220:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005224:	f7fb f858 	bl	80002d8 <__aeabi_dsub>
 8005228:	f806 4b01 	strb.w	r4, [r6], #1
 800522c:	9d07      	ldr	r5, [sp, #28]
 800522e:	eba6 040a 	sub.w	r4, r6, sl
 8005232:	42a5      	cmp	r5, r4
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	f040 8117 	bne.w	800546a <_dtoa_r+0x6e2>
 800523c:	f7fb f84e 	bl	80002dc <__adddf3>
 8005240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005244:	4604      	mov	r4, r0
 8005246:	460d      	mov	r5, r1
 8005248:	f7fb fc8e 	bl	8000b68 <__aeabi_dcmpgt>
 800524c:	2800      	cmp	r0, #0
 800524e:	f040 80f9 	bne.w	8005444 <_dtoa_r+0x6bc>
 8005252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb fc5d 	bl	8000b18 <__aeabi_dcmpeq>
 800525e:	b118      	cbz	r0, 8005268 <_dtoa_r+0x4e0>
 8005260:	f018 0f01 	tst.w	r8, #1
 8005264:	f040 80ee 	bne.w	8005444 <_dtoa_r+0x6bc>
 8005268:	4649      	mov	r1, r9
 800526a:	4658      	mov	r0, fp
 800526c:	f000 fc90 	bl	8005b90 <_Bfree>
 8005270:	2300      	movs	r3, #0
 8005272:	7033      	strb	r3, [r6, #0]
 8005274:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005276:	3701      	adds	r7, #1
 8005278:	601f      	str	r7, [r3, #0]
 800527a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 831d 	beq.w	80058bc <_dtoa_r+0xb34>
 8005282:	601e      	str	r6, [r3, #0]
 8005284:	e31a      	b.n	80058bc <_dtoa_r+0xb34>
 8005286:	07e2      	lsls	r2, r4, #31
 8005288:	d505      	bpl.n	8005296 <_dtoa_r+0x50e>
 800528a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800528e:	f7fb f9db 	bl	8000648 <__aeabi_dmul>
 8005292:	3601      	adds	r6, #1
 8005294:	2301      	movs	r3, #1
 8005296:	1064      	asrs	r4, r4, #1
 8005298:	3508      	adds	r5, #8
 800529a:	e73f      	b.n	800511c <_dtoa_r+0x394>
 800529c:	2602      	movs	r6, #2
 800529e:	e742      	b.n	8005126 <_dtoa_r+0x39e>
 80052a0:	9c07      	ldr	r4, [sp, #28]
 80052a2:	9704      	str	r7, [sp, #16]
 80052a4:	e761      	b.n	800516a <_dtoa_r+0x3e2>
 80052a6:	4b27      	ldr	r3, [pc, #156]	@ (8005344 <_dtoa_r+0x5bc>)
 80052a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052b2:	4454      	add	r4, sl
 80052b4:	2900      	cmp	r1, #0
 80052b6:	d053      	beq.n	8005360 <_dtoa_r+0x5d8>
 80052b8:	4928      	ldr	r1, [pc, #160]	@ (800535c <_dtoa_r+0x5d4>)
 80052ba:	2000      	movs	r0, #0
 80052bc:	f7fb faee 	bl	800089c <__aeabi_ddiv>
 80052c0:	4633      	mov	r3, r6
 80052c2:	462a      	mov	r2, r5
 80052c4:	f7fb f808 	bl	80002d8 <__aeabi_dsub>
 80052c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80052cc:	4656      	mov	r6, sl
 80052ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052d2:	f7fb fc69 	bl	8000ba8 <__aeabi_d2iz>
 80052d6:	4605      	mov	r5, r0
 80052d8:	f7fb f94c 	bl	8000574 <__aeabi_i2d>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e4:	f7fa fff8 	bl	80002d8 <__aeabi_dsub>
 80052e8:	3530      	adds	r5, #48	@ 0x30
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052f2:	f806 5b01 	strb.w	r5, [r6], #1
 80052f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80052fa:	f7fb fc17 	bl	8000b2c <__aeabi_dcmplt>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d171      	bne.n	80053e6 <_dtoa_r+0x65e>
 8005302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005306:	4911      	ldr	r1, [pc, #68]	@ (800534c <_dtoa_r+0x5c4>)
 8005308:	2000      	movs	r0, #0
 800530a:	f7fa ffe5 	bl	80002d8 <__aeabi_dsub>
 800530e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005312:	f7fb fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f040 8095 	bne.w	8005446 <_dtoa_r+0x6be>
 800531c:	42a6      	cmp	r6, r4
 800531e:	f43f af50 	beq.w	80051c2 <_dtoa_r+0x43a>
 8005322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005326:	4b0a      	ldr	r3, [pc, #40]	@ (8005350 <_dtoa_r+0x5c8>)
 8005328:	2200      	movs	r2, #0
 800532a:	f7fb f98d 	bl	8000648 <__aeabi_dmul>
 800532e:	4b08      	ldr	r3, [pc, #32]	@ (8005350 <_dtoa_r+0x5c8>)
 8005330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005334:	2200      	movs	r2, #0
 8005336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800533a:	f7fb f985 	bl	8000648 <__aeabi_dmul>
 800533e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005342:	e7c4      	b.n	80052ce <_dtoa_r+0x546>
 8005344:	08006ab8 	.word	0x08006ab8
 8005348:	08006a90 	.word	0x08006a90
 800534c:	3ff00000 	.word	0x3ff00000
 8005350:	40240000 	.word	0x40240000
 8005354:	401c0000 	.word	0x401c0000
 8005358:	40140000 	.word	0x40140000
 800535c:	3fe00000 	.word	0x3fe00000
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	f7fb f970 	bl	8000648 <__aeabi_dmul>
 8005368:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800536c:	9415      	str	r4, [sp, #84]	@ 0x54
 800536e:	4656      	mov	r6, sl
 8005370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005374:	f7fb fc18 	bl	8000ba8 <__aeabi_d2iz>
 8005378:	4605      	mov	r5, r0
 800537a:	f7fb f8fb 	bl	8000574 <__aeabi_i2d>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005386:	f7fa ffa7 	bl	80002d8 <__aeabi_dsub>
 800538a:	3530      	adds	r5, #48	@ 0x30
 800538c:	f806 5b01 	strb.w	r5, [r6], #1
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	42a6      	cmp	r6, r4
 8005396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	d124      	bne.n	80053ea <_dtoa_r+0x662>
 80053a0:	4bac      	ldr	r3, [pc, #688]	@ (8005654 <_dtoa_r+0x8cc>)
 80053a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80053a6:	f7fa ff99 	bl	80002dc <__adddf3>
 80053aa:	4602      	mov	r2, r0
 80053ac:	460b      	mov	r3, r1
 80053ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053b2:	f7fb fbd9 	bl	8000b68 <__aeabi_dcmpgt>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d145      	bne.n	8005446 <_dtoa_r+0x6be>
 80053ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80053be:	49a5      	ldr	r1, [pc, #660]	@ (8005654 <_dtoa_r+0x8cc>)
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fa ff89 	bl	80002d8 <__aeabi_dsub>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053ce:	f7fb fbad 	bl	8000b2c <__aeabi_dcmplt>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	f43f aef5 	beq.w	80051c2 <_dtoa_r+0x43a>
 80053d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80053da:	1e73      	subs	r3, r6, #1
 80053dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80053de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80053e2:	2b30      	cmp	r3, #48	@ 0x30
 80053e4:	d0f8      	beq.n	80053d8 <_dtoa_r+0x650>
 80053e6:	9f04      	ldr	r7, [sp, #16]
 80053e8:	e73e      	b.n	8005268 <_dtoa_r+0x4e0>
 80053ea:	4b9b      	ldr	r3, [pc, #620]	@ (8005658 <_dtoa_r+0x8d0>)
 80053ec:	f7fb f92c 	bl	8000648 <__aeabi_dmul>
 80053f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053f4:	e7bc      	b.n	8005370 <_dtoa_r+0x5e8>
 80053f6:	d10c      	bne.n	8005412 <_dtoa_r+0x68a>
 80053f8:	4b98      	ldr	r3, [pc, #608]	@ (800565c <_dtoa_r+0x8d4>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005400:	f7fb f922 	bl	8000648 <__aeabi_dmul>
 8005404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005408:	f7fb fba4 	bl	8000b54 <__aeabi_dcmpge>
 800540c:	2800      	cmp	r0, #0
 800540e:	f000 8157 	beq.w	80056c0 <_dtoa_r+0x938>
 8005412:	2400      	movs	r4, #0
 8005414:	4625      	mov	r5, r4
 8005416:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005418:	43db      	mvns	r3, r3
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	4656      	mov	r6, sl
 800541e:	2700      	movs	r7, #0
 8005420:	4621      	mov	r1, r4
 8005422:	4658      	mov	r0, fp
 8005424:	f000 fbb4 	bl	8005b90 <_Bfree>
 8005428:	2d00      	cmp	r5, #0
 800542a:	d0dc      	beq.n	80053e6 <_dtoa_r+0x65e>
 800542c:	b12f      	cbz	r7, 800543a <_dtoa_r+0x6b2>
 800542e:	42af      	cmp	r7, r5
 8005430:	d003      	beq.n	800543a <_dtoa_r+0x6b2>
 8005432:	4639      	mov	r1, r7
 8005434:	4658      	mov	r0, fp
 8005436:	f000 fbab 	bl	8005b90 <_Bfree>
 800543a:	4629      	mov	r1, r5
 800543c:	4658      	mov	r0, fp
 800543e:	f000 fba7 	bl	8005b90 <_Bfree>
 8005442:	e7d0      	b.n	80053e6 <_dtoa_r+0x65e>
 8005444:	9704      	str	r7, [sp, #16]
 8005446:	4633      	mov	r3, r6
 8005448:	461e      	mov	r6, r3
 800544a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800544e:	2a39      	cmp	r2, #57	@ 0x39
 8005450:	d107      	bne.n	8005462 <_dtoa_r+0x6da>
 8005452:	459a      	cmp	sl, r3
 8005454:	d1f8      	bne.n	8005448 <_dtoa_r+0x6c0>
 8005456:	9a04      	ldr	r2, [sp, #16]
 8005458:	3201      	adds	r2, #1
 800545a:	9204      	str	r2, [sp, #16]
 800545c:	2230      	movs	r2, #48	@ 0x30
 800545e:	f88a 2000 	strb.w	r2, [sl]
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	3201      	adds	r2, #1
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	e7bd      	b.n	80053e6 <_dtoa_r+0x65e>
 800546a:	4b7b      	ldr	r3, [pc, #492]	@ (8005658 <_dtoa_r+0x8d0>)
 800546c:	2200      	movs	r2, #0
 800546e:	f7fb f8eb 	bl	8000648 <__aeabi_dmul>
 8005472:	2200      	movs	r2, #0
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	460d      	mov	r5, r1
 800547a:	f7fb fb4d 	bl	8000b18 <__aeabi_dcmpeq>
 800547e:	2800      	cmp	r0, #0
 8005480:	f43f aebb 	beq.w	80051fa <_dtoa_r+0x472>
 8005484:	e6f0      	b.n	8005268 <_dtoa_r+0x4e0>
 8005486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005488:	2a00      	cmp	r2, #0
 800548a:	f000 80db 	beq.w	8005644 <_dtoa_r+0x8bc>
 800548e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005490:	2a01      	cmp	r2, #1
 8005492:	f300 80bf 	bgt.w	8005614 <_dtoa_r+0x88c>
 8005496:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005498:	2a00      	cmp	r2, #0
 800549a:	f000 80b7 	beq.w	800560c <_dtoa_r+0x884>
 800549e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80054a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054a4:	4646      	mov	r6, r8
 80054a6:	9a08      	ldr	r2, [sp, #32]
 80054a8:	2101      	movs	r1, #1
 80054aa:	441a      	add	r2, r3
 80054ac:	4658      	mov	r0, fp
 80054ae:	4498      	add	r8, r3
 80054b0:	9208      	str	r2, [sp, #32]
 80054b2:	f000 fc21 	bl	8005cf8 <__i2b>
 80054b6:	4605      	mov	r5, r0
 80054b8:	b15e      	cbz	r6, 80054d2 <_dtoa_r+0x74a>
 80054ba:	9b08      	ldr	r3, [sp, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dd08      	ble.n	80054d2 <_dtoa_r+0x74a>
 80054c0:	42b3      	cmp	r3, r6
 80054c2:	9a08      	ldr	r2, [sp, #32]
 80054c4:	bfa8      	it	ge
 80054c6:	4633      	movge	r3, r6
 80054c8:	eba8 0803 	sub.w	r8, r8, r3
 80054cc:	1af6      	subs	r6, r6, r3
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	9308      	str	r3, [sp, #32]
 80054d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054d4:	b1f3      	cbz	r3, 8005514 <_dtoa_r+0x78c>
 80054d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80b7 	beq.w	800564c <_dtoa_r+0x8c4>
 80054de:	b18c      	cbz	r4, 8005504 <_dtoa_r+0x77c>
 80054e0:	4629      	mov	r1, r5
 80054e2:	4622      	mov	r2, r4
 80054e4:	4658      	mov	r0, fp
 80054e6:	f000 fcc7 	bl	8005e78 <__pow5mult>
 80054ea:	464a      	mov	r2, r9
 80054ec:	4601      	mov	r1, r0
 80054ee:	4605      	mov	r5, r0
 80054f0:	4658      	mov	r0, fp
 80054f2:	f000 fc17 	bl	8005d24 <__multiply>
 80054f6:	4649      	mov	r1, r9
 80054f8:	9004      	str	r0, [sp, #16]
 80054fa:	4658      	mov	r0, fp
 80054fc:	f000 fb48 	bl	8005b90 <_Bfree>
 8005500:	9b04      	ldr	r3, [sp, #16]
 8005502:	4699      	mov	r9, r3
 8005504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005506:	1b1a      	subs	r2, r3, r4
 8005508:	d004      	beq.n	8005514 <_dtoa_r+0x78c>
 800550a:	4649      	mov	r1, r9
 800550c:	4658      	mov	r0, fp
 800550e:	f000 fcb3 	bl	8005e78 <__pow5mult>
 8005512:	4681      	mov	r9, r0
 8005514:	2101      	movs	r1, #1
 8005516:	4658      	mov	r0, fp
 8005518:	f000 fbee 	bl	8005cf8 <__i2b>
 800551c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800551e:	4604      	mov	r4, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 81cf 	beq.w	80058c4 <_dtoa_r+0xb3c>
 8005526:	461a      	mov	r2, r3
 8005528:	4601      	mov	r1, r0
 800552a:	4658      	mov	r0, fp
 800552c:	f000 fca4 	bl	8005e78 <__pow5mult>
 8005530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005532:	2b01      	cmp	r3, #1
 8005534:	4604      	mov	r4, r0
 8005536:	f300 8095 	bgt.w	8005664 <_dtoa_r+0x8dc>
 800553a:	9b02      	ldr	r3, [sp, #8]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 8087 	bne.w	8005650 <_dtoa_r+0x8c8>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005548:	2b00      	cmp	r3, #0
 800554a:	f040 8089 	bne.w	8005660 <_dtoa_r+0x8d8>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005554:	0d1b      	lsrs	r3, r3, #20
 8005556:	051b      	lsls	r3, r3, #20
 8005558:	b12b      	cbz	r3, 8005566 <_dtoa_r+0x7de>
 800555a:	9b08      	ldr	r3, [sp, #32]
 800555c:	3301      	adds	r3, #1
 800555e:	9308      	str	r3, [sp, #32]
 8005560:	f108 0801 	add.w	r8, r8, #1
 8005564:	2301      	movs	r3, #1
 8005566:	930a      	str	r3, [sp, #40]	@ 0x28
 8005568:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 81b0 	beq.w	80058d0 <_dtoa_r+0xb48>
 8005570:	6923      	ldr	r3, [r4, #16]
 8005572:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005576:	6918      	ldr	r0, [r3, #16]
 8005578:	f000 fb72 	bl	8005c60 <__hi0bits>
 800557c:	f1c0 0020 	rsb	r0, r0, #32
 8005580:	9b08      	ldr	r3, [sp, #32]
 8005582:	4418      	add	r0, r3
 8005584:	f010 001f 	ands.w	r0, r0, #31
 8005588:	d077      	beq.n	800567a <_dtoa_r+0x8f2>
 800558a:	f1c0 0320 	rsb	r3, r0, #32
 800558e:	2b04      	cmp	r3, #4
 8005590:	dd6b      	ble.n	800566a <_dtoa_r+0x8e2>
 8005592:	9b08      	ldr	r3, [sp, #32]
 8005594:	f1c0 001c 	rsb	r0, r0, #28
 8005598:	4403      	add	r3, r0
 800559a:	4480      	add	r8, r0
 800559c:	4406      	add	r6, r0
 800559e:	9308      	str	r3, [sp, #32]
 80055a0:	f1b8 0f00 	cmp.w	r8, #0
 80055a4:	dd05      	ble.n	80055b2 <_dtoa_r+0x82a>
 80055a6:	4649      	mov	r1, r9
 80055a8:	4642      	mov	r2, r8
 80055aa:	4658      	mov	r0, fp
 80055ac:	f000 fcbe 	bl	8005f2c <__lshift>
 80055b0:	4681      	mov	r9, r0
 80055b2:	9b08      	ldr	r3, [sp, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dd05      	ble.n	80055c4 <_dtoa_r+0x83c>
 80055b8:	4621      	mov	r1, r4
 80055ba:	461a      	mov	r2, r3
 80055bc:	4658      	mov	r0, fp
 80055be:	f000 fcb5 	bl	8005f2c <__lshift>
 80055c2:	4604      	mov	r4, r0
 80055c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d059      	beq.n	800567e <_dtoa_r+0x8f6>
 80055ca:	4621      	mov	r1, r4
 80055cc:	4648      	mov	r0, r9
 80055ce:	f000 fd19 	bl	8006004 <__mcmp>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	da53      	bge.n	800567e <_dtoa_r+0x8f6>
 80055d6:	1e7b      	subs	r3, r7, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	4649      	mov	r1, r9
 80055dc:	2300      	movs	r3, #0
 80055de:	220a      	movs	r2, #10
 80055e0:	4658      	mov	r0, fp
 80055e2:	f000 faf7 	bl	8005bd4 <__multadd>
 80055e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055e8:	4681      	mov	r9, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f000 8172 	beq.w	80058d4 <_dtoa_r+0xb4c>
 80055f0:	2300      	movs	r3, #0
 80055f2:	4629      	mov	r1, r5
 80055f4:	220a      	movs	r2, #10
 80055f6:	4658      	mov	r0, fp
 80055f8:	f000 faec 	bl	8005bd4 <__multadd>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	4605      	mov	r5, r0
 8005602:	dc67      	bgt.n	80056d4 <_dtoa_r+0x94c>
 8005604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005606:	2b02      	cmp	r3, #2
 8005608:	dc41      	bgt.n	800568e <_dtoa_r+0x906>
 800560a:	e063      	b.n	80056d4 <_dtoa_r+0x94c>
 800560c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800560e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005612:	e746      	b.n	80054a2 <_dtoa_r+0x71a>
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	1e5c      	subs	r4, r3, #1
 8005618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800561a:	42a3      	cmp	r3, r4
 800561c:	bfbf      	itttt	lt
 800561e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005620:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005622:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005624:	1ae3      	sublt	r3, r4, r3
 8005626:	bfb4      	ite	lt
 8005628:	18d2      	addlt	r2, r2, r3
 800562a:	1b1c      	subge	r4, r3, r4
 800562c:	9b07      	ldr	r3, [sp, #28]
 800562e:	bfbc      	itt	lt
 8005630:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005632:	2400      	movlt	r4, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	bfb5      	itete	lt
 8005638:	eba8 0603 	sublt.w	r6, r8, r3
 800563c:	9b07      	ldrge	r3, [sp, #28]
 800563e:	2300      	movlt	r3, #0
 8005640:	4646      	movge	r6, r8
 8005642:	e730      	b.n	80054a6 <_dtoa_r+0x71e>
 8005644:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005646:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005648:	4646      	mov	r6, r8
 800564a:	e735      	b.n	80054b8 <_dtoa_r+0x730>
 800564c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800564e:	e75c      	b.n	800550a <_dtoa_r+0x782>
 8005650:	2300      	movs	r3, #0
 8005652:	e788      	b.n	8005566 <_dtoa_r+0x7de>
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	40240000 	.word	0x40240000
 800565c:	40140000 	.word	0x40140000
 8005660:	9b02      	ldr	r3, [sp, #8]
 8005662:	e780      	b.n	8005566 <_dtoa_r+0x7de>
 8005664:	2300      	movs	r3, #0
 8005666:	930a      	str	r3, [sp, #40]	@ 0x28
 8005668:	e782      	b.n	8005570 <_dtoa_r+0x7e8>
 800566a:	d099      	beq.n	80055a0 <_dtoa_r+0x818>
 800566c:	9a08      	ldr	r2, [sp, #32]
 800566e:	331c      	adds	r3, #28
 8005670:	441a      	add	r2, r3
 8005672:	4498      	add	r8, r3
 8005674:	441e      	add	r6, r3
 8005676:	9208      	str	r2, [sp, #32]
 8005678:	e792      	b.n	80055a0 <_dtoa_r+0x818>
 800567a:	4603      	mov	r3, r0
 800567c:	e7f6      	b.n	800566c <_dtoa_r+0x8e4>
 800567e:	9b07      	ldr	r3, [sp, #28]
 8005680:	9704      	str	r7, [sp, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dc20      	bgt.n	80056c8 <_dtoa_r+0x940>
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800568a:	2b02      	cmp	r3, #2
 800568c:	dd1e      	ble.n	80056cc <_dtoa_r+0x944>
 800568e:	9b00      	ldr	r3, [sp, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	f47f aec0 	bne.w	8005416 <_dtoa_r+0x68e>
 8005696:	4621      	mov	r1, r4
 8005698:	2205      	movs	r2, #5
 800569a:	4658      	mov	r0, fp
 800569c:	f000 fa9a 	bl	8005bd4 <__multadd>
 80056a0:	4601      	mov	r1, r0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4648      	mov	r0, r9
 80056a6:	f000 fcad 	bl	8006004 <__mcmp>
 80056aa:	2800      	cmp	r0, #0
 80056ac:	f77f aeb3 	ble.w	8005416 <_dtoa_r+0x68e>
 80056b0:	4656      	mov	r6, sl
 80056b2:	2331      	movs	r3, #49	@ 0x31
 80056b4:	f806 3b01 	strb.w	r3, [r6], #1
 80056b8:	9b04      	ldr	r3, [sp, #16]
 80056ba:	3301      	adds	r3, #1
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	e6ae      	b.n	800541e <_dtoa_r+0x696>
 80056c0:	9c07      	ldr	r4, [sp, #28]
 80056c2:	9704      	str	r7, [sp, #16]
 80056c4:	4625      	mov	r5, r4
 80056c6:	e7f3      	b.n	80056b0 <_dtoa_r+0x928>
 80056c8:	9b07      	ldr	r3, [sp, #28]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 8104 	beq.w	80058dc <_dtoa_r+0xb54>
 80056d4:	2e00      	cmp	r6, #0
 80056d6:	dd05      	ble.n	80056e4 <_dtoa_r+0x95c>
 80056d8:	4629      	mov	r1, r5
 80056da:	4632      	mov	r2, r6
 80056dc:	4658      	mov	r0, fp
 80056de:	f000 fc25 	bl	8005f2c <__lshift>
 80056e2:	4605      	mov	r5, r0
 80056e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d05a      	beq.n	80057a0 <_dtoa_r+0xa18>
 80056ea:	6869      	ldr	r1, [r5, #4]
 80056ec:	4658      	mov	r0, fp
 80056ee:	f000 fa0f 	bl	8005b10 <_Balloc>
 80056f2:	4606      	mov	r6, r0
 80056f4:	b928      	cbnz	r0, 8005702 <_dtoa_r+0x97a>
 80056f6:	4b84      	ldr	r3, [pc, #528]	@ (8005908 <_dtoa_r+0xb80>)
 80056f8:	4602      	mov	r2, r0
 80056fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80056fe:	f7ff bb5a 	b.w	8004db6 <_dtoa_r+0x2e>
 8005702:	692a      	ldr	r2, [r5, #16]
 8005704:	3202      	adds	r2, #2
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	f105 010c 	add.w	r1, r5, #12
 800570c:	300c      	adds	r0, #12
 800570e:	f001 f803 	bl	8006718 <memcpy>
 8005712:	2201      	movs	r2, #1
 8005714:	4631      	mov	r1, r6
 8005716:	4658      	mov	r0, fp
 8005718:	f000 fc08 	bl	8005f2c <__lshift>
 800571c:	f10a 0301 	add.w	r3, sl, #1
 8005720:	9307      	str	r3, [sp, #28]
 8005722:	9b00      	ldr	r3, [sp, #0]
 8005724:	4453      	add	r3, sl
 8005726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005728:	9b02      	ldr	r3, [sp, #8]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	462f      	mov	r7, r5
 8005730:	930a      	str	r3, [sp, #40]	@ 0x28
 8005732:	4605      	mov	r5, r0
 8005734:	9b07      	ldr	r3, [sp, #28]
 8005736:	4621      	mov	r1, r4
 8005738:	3b01      	subs	r3, #1
 800573a:	4648      	mov	r0, r9
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	f7ff fa9a 	bl	8004c76 <quorem>
 8005742:	4639      	mov	r1, r7
 8005744:	9002      	str	r0, [sp, #8]
 8005746:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800574a:	4648      	mov	r0, r9
 800574c:	f000 fc5a 	bl	8006004 <__mcmp>
 8005750:	462a      	mov	r2, r5
 8005752:	9008      	str	r0, [sp, #32]
 8005754:	4621      	mov	r1, r4
 8005756:	4658      	mov	r0, fp
 8005758:	f000 fc70 	bl	800603c <__mdiff>
 800575c:	68c2      	ldr	r2, [r0, #12]
 800575e:	4606      	mov	r6, r0
 8005760:	bb02      	cbnz	r2, 80057a4 <_dtoa_r+0xa1c>
 8005762:	4601      	mov	r1, r0
 8005764:	4648      	mov	r0, r9
 8005766:	f000 fc4d 	bl	8006004 <__mcmp>
 800576a:	4602      	mov	r2, r0
 800576c:	4631      	mov	r1, r6
 800576e:	4658      	mov	r0, fp
 8005770:	920e      	str	r2, [sp, #56]	@ 0x38
 8005772:	f000 fa0d 	bl	8005b90 <_Bfree>
 8005776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005778:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800577a:	9e07      	ldr	r6, [sp, #28]
 800577c:	ea43 0102 	orr.w	r1, r3, r2
 8005780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005782:	4319      	orrs	r1, r3
 8005784:	d110      	bne.n	80057a8 <_dtoa_r+0xa20>
 8005786:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800578a:	d029      	beq.n	80057e0 <_dtoa_r+0xa58>
 800578c:	9b08      	ldr	r3, [sp, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	dd02      	ble.n	8005798 <_dtoa_r+0xa10>
 8005792:	9b02      	ldr	r3, [sp, #8]
 8005794:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	f883 8000 	strb.w	r8, [r3]
 800579e:	e63f      	b.n	8005420 <_dtoa_r+0x698>
 80057a0:	4628      	mov	r0, r5
 80057a2:	e7bb      	b.n	800571c <_dtoa_r+0x994>
 80057a4:	2201      	movs	r2, #1
 80057a6:	e7e1      	b.n	800576c <_dtoa_r+0x9e4>
 80057a8:	9b08      	ldr	r3, [sp, #32]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	db04      	blt.n	80057b8 <_dtoa_r+0xa30>
 80057ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057b0:	430b      	orrs	r3, r1
 80057b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057b4:	430b      	orrs	r3, r1
 80057b6:	d120      	bne.n	80057fa <_dtoa_r+0xa72>
 80057b8:	2a00      	cmp	r2, #0
 80057ba:	dded      	ble.n	8005798 <_dtoa_r+0xa10>
 80057bc:	4649      	mov	r1, r9
 80057be:	2201      	movs	r2, #1
 80057c0:	4658      	mov	r0, fp
 80057c2:	f000 fbb3 	bl	8005f2c <__lshift>
 80057c6:	4621      	mov	r1, r4
 80057c8:	4681      	mov	r9, r0
 80057ca:	f000 fc1b 	bl	8006004 <__mcmp>
 80057ce:	2800      	cmp	r0, #0
 80057d0:	dc03      	bgt.n	80057da <_dtoa_r+0xa52>
 80057d2:	d1e1      	bne.n	8005798 <_dtoa_r+0xa10>
 80057d4:	f018 0f01 	tst.w	r8, #1
 80057d8:	d0de      	beq.n	8005798 <_dtoa_r+0xa10>
 80057da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80057de:	d1d8      	bne.n	8005792 <_dtoa_r+0xa0a>
 80057e0:	9a00      	ldr	r2, [sp, #0]
 80057e2:	2339      	movs	r3, #57	@ 0x39
 80057e4:	7013      	strb	r3, [r2, #0]
 80057e6:	4633      	mov	r3, r6
 80057e8:	461e      	mov	r6, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80057f0:	2a39      	cmp	r2, #57	@ 0x39
 80057f2:	d052      	beq.n	800589a <_dtoa_r+0xb12>
 80057f4:	3201      	adds	r2, #1
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	e612      	b.n	8005420 <_dtoa_r+0x698>
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	dd07      	ble.n	800580e <_dtoa_r+0xa86>
 80057fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005802:	d0ed      	beq.n	80057e0 <_dtoa_r+0xa58>
 8005804:	9a00      	ldr	r2, [sp, #0]
 8005806:	f108 0301 	add.w	r3, r8, #1
 800580a:	7013      	strb	r3, [r2, #0]
 800580c:	e608      	b.n	8005420 <_dtoa_r+0x698>
 800580e:	9b07      	ldr	r3, [sp, #28]
 8005810:	9a07      	ldr	r2, [sp, #28]
 8005812:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005818:	4293      	cmp	r3, r2
 800581a:	d028      	beq.n	800586e <_dtoa_r+0xae6>
 800581c:	4649      	mov	r1, r9
 800581e:	2300      	movs	r3, #0
 8005820:	220a      	movs	r2, #10
 8005822:	4658      	mov	r0, fp
 8005824:	f000 f9d6 	bl	8005bd4 <__multadd>
 8005828:	42af      	cmp	r7, r5
 800582a:	4681      	mov	r9, r0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	f04f 020a 	mov.w	r2, #10
 8005834:	4639      	mov	r1, r7
 8005836:	4658      	mov	r0, fp
 8005838:	d107      	bne.n	800584a <_dtoa_r+0xac2>
 800583a:	f000 f9cb 	bl	8005bd4 <__multadd>
 800583e:	4607      	mov	r7, r0
 8005840:	4605      	mov	r5, r0
 8005842:	9b07      	ldr	r3, [sp, #28]
 8005844:	3301      	adds	r3, #1
 8005846:	9307      	str	r3, [sp, #28]
 8005848:	e774      	b.n	8005734 <_dtoa_r+0x9ac>
 800584a:	f000 f9c3 	bl	8005bd4 <__multadd>
 800584e:	4629      	mov	r1, r5
 8005850:	4607      	mov	r7, r0
 8005852:	2300      	movs	r3, #0
 8005854:	220a      	movs	r2, #10
 8005856:	4658      	mov	r0, fp
 8005858:	f000 f9bc 	bl	8005bd4 <__multadd>
 800585c:	4605      	mov	r5, r0
 800585e:	e7f0      	b.n	8005842 <_dtoa_r+0xaba>
 8005860:	9b00      	ldr	r3, [sp, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	bfcc      	ite	gt
 8005866:	461e      	movgt	r6, r3
 8005868:	2601      	movle	r6, #1
 800586a:	4456      	add	r6, sl
 800586c:	2700      	movs	r7, #0
 800586e:	4649      	mov	r1, r9
 8005870:	2201      	movs	r2, #1
 8005872:	4658      	mov	r0, fp
 8005874:	f000 fb5a 	bl	8005f2c <__lshift>
 8005878:	4621      	mov	r1, r4
 800587a:	4681      	mov	r9, r0
 800587c:	f000 fbc2 	bl	8006004 <__mcmp>
 8005880:	2800      	cmp	r0, #0
 8005882:	dcb0      	bgt.n	80057e6 <_dtoa_r+0xa5e>
 8005884:	d102      	bne.n	800588c <_dtoa_r+0xb04>
 8005886:	f018 0f01 	tst.w	r8, #1
 800588a:	d1ac      	bne.n	80057e6 <_dtoa_r+0xa5e>
 800588c:	4633      	mov	r3, r6
 800588e:	461e      	mov	r6, r3
 8005890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005894:	2a30      	cmp	r2, #48	@ 0x30
 8005896:	d0fa      	beq.n	800588e <_dtoa_r+0xb06>
 8005898:	e5c2      	b.n	8005420 <_dtoa_r+0x698>
 800589a:	459a      	cmp	sl, r3
 800589c:	d1a4      	bne.n	80057e8 <_dtoa_r+0xa60>
 800589e:	9b04      	ldr	r3, [sp, #16]
 80058a0:	3301      	adds	r3, #1
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	2331      	movs	r3, #49	@ 0x31
 80058a6:	f88a 3000 	strb.w	r3, [sl]
 80058aa:	e5b9      	b.n	8005420 <_dtoa_r+0x698>
 80058ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800590c <_dtoa_r+0xb84>
 80058b2:	b11b      	cbz	r3, 80058bc <_dtoa_r+0xb34>
 80058b4:	f10a 0308 	add.w	r3, sl, #8
 80058b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	4650      	mov	r0, sl
 80058be:	b019      	add	sp, #100	@ 0x64
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	f77f ae37 	ble.w	800553a <_dtoa_r+0x7b2>
 80058cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d0:	2001      	movs	r0, #1
 80058d2:	e655      	b.n	8005580 <_dtoa_r+0x7f8>
 80058d4:	9b00      	ldr	r3, [sp, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f77f aed6 	ble.w	8005688 <_dtoa_r+0x900>
 80058dc:	4656      	mov	r6, sl
 80058de:	4621      	mov	r1, r4
 80058e0:	4648      	mov	r0, r9
 80058e2:	f7ff f9c8 	bl	8004c76 <quorem>
 80058e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80058ea:	f806 8b01 	strb.w	r8, [r6], #1
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	eba6 020a 	sub.w	r2, r6, sl
 80058f4:	4293      	cmp	r3, r2
 80058f6:	ddb3      	ble.n	8005860 <_dtoa_r+0xad8>
 80058f8:	4649      	mov	r1, r9
 80058fa:	2300      	movs	r3, #0
 80058fc:	220a      	movs	r2, #10
 80058fe:	4658      	mov	r0, fp
 8005900:	f000 f968 	bl	8005bd4 <__multadd>
 8005904:	4681      	mov	r9, r0
 8005906:	e7ea      	b.n	80058de <_dtoa_r+0xb56>
 8005908:	08006a18 	.word	0x08006a18
 800590c:	0800699c 	.word	0x0800699c

08005910 <_free_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4605      	mov	r5, r0
 8005914:	2900      	cmp	r1, #0
 8005916:	d041      	beq.n	800599c <_free_r+0x8c>
 8005918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591c:	1f0c      	subs	r4, r1, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	18e4      	addlt	r4, r4, r3
 8005924:	f000 f8e8 	bl	8005af8 <__malloc_lock>
 8005928:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <_free_r+0x90>)
 800592a:	6813      	ldr	r3, [r2, #0]
 800592c:	b933      	cbnz	r3, 800593c <_free_r+0x2c>
 800592e:	6063      	str	r3, [r4, #4]
 8005930:	6014      	str	r4, [r2, #0]
 8005932:	4628      	mov	r0, r5
 8005934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005938:	f000 b8e4 	b.w	8005b04 <__malloc_unlock>
 800593c:	42a3      	cmp	r3, r4
 800593e:	d908      	bls.n	8005952 <_free_r+0x42>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	1821      	adds	r1, r4, r0
 8005944:	428b      	cmp	r3, r1
 8005946:	bf01      	itttt	eq
 8005948:	6819      	ldreq	r1, [r3, #0]
 800594a:	685b      	ldreq	r3, [r3, #4]
 800594c:	1809      	addeq	r1, r1, r0
 800594e:	6021      	streq	r1, [r4, #0]
 8005950:	e7ed      	b.n	800592e <_free_r+0x1e>
 8005952:	461a      	mov	r2, r3
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	b10b      	cbz	r3, 800595c <_free_r+0x4c>
 8005958:	42a3      	cmp	r3, r4
 800595a:	d9fa      	bls.n	8005952 <_free_r+0x42>
 800595c:	6811      	ldr	r1, [r2, #0]
 800595e:	1850      	adds	r0, r2, r1
 8005960:	42a0      	cmp	r0, r4
 8005962:	d10b      	bne.n	800597c <_free_r+0x6c>
 8005964:	6820      	ldr	r0, [r4, #0]
 8005966:	4401      	add	r1, r0
 8005968:	1850      	adds	r0, r2, r1
 800596a:	4283      	cmp	r3, r0
 800596c:	6011      	str	r1, [r2, #0]
 800596e:	d1e0      	bne.n	8005932 <_free_r+0x22>
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	6053      	str	r3, [r2, #4]
 8005976:	4408      	add	r0, r1
 8005978:	6010      	str	r0, [r2, #0]
 800597a:	e7da      	b.n	8005932 <_free_r+0x22>
 800597c:	d902      	bls.n	8005984 <_free_r+0x74>
 800597e:	230c      	movs	r3, #12
 8005980:	602b      	str	r3, [r5, #0]
 8005982:	e7d6      	b.n	8005932 <_free_r+0x22>
 8005984:	6820      	ldr	r0, [r4, #0]
 8005986:	1821      	adds	r1, r4, r0
 8005988:	428b      	cmp	r3, r1
 800598a:	bf04      	itt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	bf04      	itt	eq
 8005994:	1809      	addeq	r1, r1, r0
 8005996:	6021      	streq	r1, [r4, #0]
 8005998:	6054      	str	r4, [r2, #4]
 800599a:	e7ca      	b.n	8005932 <_free_r+0x22>
 800599c:	bd38      	pop	{r3, r4, r5, pc}
 800599e:	bf00      	nop
 80059a0:	200003ac 	.word	0x200003ac

080059a4 <malloc>:
 80059a4:	4b02      	ldr	r3, [pc, #8]	@ (80059b0 <malloc+0xc>)
 80059a6:	4601      	mov	r1, r0
 80059a8:	6818      	ldr	r0, [r3, #0]
 80059aa:	f000 b825 	b.w	80059f8 <_malloc_r>
 80059ae:	bf00      	nop
 80059b0:	20000018 	.word	0x20000018

080059b4 <sbrk_aligned>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4e0f      	ldr	r6, [pc, #60]	@ (80059f4 <sbrk_aligned+0x40>)
 80059b8:	460c      	mov	r4, r1
 80059ba:	6831      	ldr	r1, [r6, #0]
 80059bc:	4605      	mov	r5, r0
 80059be:	b911      	cbnz	r1, 80059c6 <sbrk_aligned+0x12>
 80059c0:	f000 fe9a 	bl	80066f8 <_sbrk_r>
 80059c4:	6030      	str	r0, [r6, #0]
 80059c6:	4621      	mov	r1, r4
 80059c8:	4628      	mov	r0, r5
 80059ca:	f000 fe95 	bl	80066f8 <_sbrk_r>
 80059ce:	1c43      	adds	r3, r0, #1
 80059d0:	d103      	bne.n	80059da <sbrk_aligned+0x26>
 80059d2:	f04f 34ff 	mov.w	r4, #4294967295
 80059d6:	4620      	mov	r0, r4
 80059d8:	bd70      	pop	{r4, r5, r6, pc}
 80059da:	1cc4      	adds	r4, r0, #3
 80059dc:	f024 0403 	bic.w	r4, r4, #3
 80059e0:	42a0      	cmp	r0, r4
 80059e2:	d0f8      	beq.n	80059d6 <sbrk_aligned+0x22>
 80059e4:	1a21      	subs	r1, r4, r0
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fe86 	bl	80066f8 <_sbrk_r>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d1f2      	bne.n	80059d6 <sbrk_aligned+0x22>
 80059f0:	e7ef      	b.n	80059d2 <sbrk_aligned+0x1e>
 80059f2:	bf00      	nop
 80059f4:	200003a8 	.word	0x200003a8

080059f8 <_malloc_r>:
 80059f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059fc:	1ccd      	adds	r5, r1, #3
 80059fe:	f025 0503 	bic.w	r5, r5, #3
 8005a02:	3508      	adds	r5, #8
 8005a04:	2d0c      	cmp	r5, #12
 8005a06:	bf38      	it	cc
 8005a08:	250c      	movcc	r5, #12
 8005a0a:	2d00      	cmp	r5, #0
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	db01      	blt.n	8005a14 <_malloc_r+0x1c>
 8005a10:	42a9      	cmp	r1, r5
 8005a12:	d904      	bls.n	8005a1e <_malloc_r+0x26>
 8005a14:	230c      	movs	r3, #12
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	2000      	movs	r0, #0
 8005a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005af4 <_malloc_r+0xfc>
 8005a22:	f000 f869 	bl	8005af8 <__malloc_lock>
 8005a26:	f8d8 3000 	ldr.w	r3, [r8]
 8005a2a:	461c      	mov	r4, r3
 8005a2c:	bb44      	cbnz	r4, 8005a80 <_malloc_r+0x88>
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4630      	mov	r0, r6
 8005a32:	f7ff ffbf 	bl	80059b4 <sbrk_aligned>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	4604      	mov	r4, r0
 8005a3a:	d158      	bne.n	8005aee <_malloc_r+0xf6>
 8005a3c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a40:	4627      	mov	r7, r4
 8005a42:	2f00      	cmp	r7, #0
 8005a44:	d143      	bne.n	8005ace <_malloc_r+0xd6>
 8005a46:	2c00      	cmp	r4, #0
 8005a48:	d04b      	beq.n	8005ae2 <_malloc_r+0xea>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	4639      	mov	r1, r7
 8005a4e:	4630      	mov	r0, r6
 8005a50:	eb04 0903 	add.w	r9, r4, r3
 8005a54:	f000 fe50 	bl	80066f8 <_sbrk_r>
 8005a58:	4581      	cmp	r9, r0
 8005a5a:	d142      	bne.n	8005ae2 <_malloc_r+0xea>
 8005a5c:	6821      	ldr	r1, [r4, #0]
 8005a5e:	1a6d      	subs	r5, r5, r1
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ffa6 	bl	80059b4 <sbrk_aligned>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d03a      	beq.n	8005ae2 <_malloc_r+0xea>
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	442b      	add	r3, r5
 8005a70:	6023      	str	r3, [r4, #0]
 8005a72:	f8d8 3000 	ldr.w	r3, [r8]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	bb62      	cbnz	r2, 8005ad4 <_malloc_r+0xdc>
 8005a7a:	f8c8 7000 	str.w	r7, [r8]
 8005a7e:	e00f      	b.n	8005aa0 <_malloc_r+0xa8>
 8005a80:	6822      	ldr	r2, [r4, #0]
 8005a82:	1b52      	subs	r2, r2, r5
 8005a84:	d420      	bmi.n	8005ac8 <_malloc_r+0xd0>
 8005a86:	2a0b      	cmp	r2, #11
 8005a88:	d917      	bls.n	8005aba <_malloc_r+0xc2>
 8005a8a:	1961      	adds	r1, r4, r5
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	6025      	str	r5, [r4, #0]
 8005a90:	bf18      	it	ne
 8005a92:	6059      	strne	r1, [r3, #4]
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	bf08      	it	eq
 8005a98:	f8c8 1000 	streq.w	r1, [r8]
 8005a9c:	5162      	str	r2, [r4, r5]
 8005a9e:	604b      	str	r3, [r1, #4]
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	f000 f82f 	bl	8005b04 <__malloc_unlock>
 8005aa6:	f104 000b 	add.w	r0, r4, #11
 8005aaa:	1d23      	adds	r3, r4, #4
 8005aac:	f020 0007 	bic.w	r0, r0, #7
 8005ab0:	1ac2      	subs	r2, r0, r3
 8005ab2:	bf1c      	itt	ne
 8005ab4:	1a1b      	subne	r3, r3, r0
 8005ab6:	50a3      	strne	r3, [r4, r2]
 8005ab8:	e7af      	b.n	8005a1a <_malloc_r+0x22>
 8005aba:	6862      	ldr	r2, [r4, #4]
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	bf0c      	ite	eq
 8005ac0:	f8c8 2000 	streq.w	r2, [r8]
 8005ac4:	605a      	strne	r2, [r3, #4]
 8005ac6:	e7eb      	b.n	8005aa0 <_malloc_r+0xa8>
 8005ac8:	4623      	mov	r3, r4
 8005aca:	6864      	ldr	r4, [r4, #4]
 8005acc:	e7ae      	b.n	8005a2c <_malloc_r+0x34>
 8005ace:	463c      	mov	r4, r7
 8005ad0:	687f      	ldr	r7, [r7, #4]
 8005ad2:	e7b6      	b.n	8005a42 <_malloc_r+0x4a>
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	42a3      	cmp	r3, r4
 8005ada:	d1fb      	bne.n	8005ad4 <_malloc_r+0xdc>
 8005adc:	2300      	movs	r3, #0
 8005ade:	6053      	str	r3, [r2, #4]
 8005ae0:	e7de      	b.n	8005aa0 <_malloc_r+0xa8>
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	6033      	str	r3, [r6, #0]
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	f000 f80c 	bl	8005b04 <__malloc_unlock>
 8005aec:	e794      	b.n	8005a18 <_malloc_r+0x20>
 8005aee:	6005      	str	r5, [r0, #0]
 8005af0:	e7d6      	b.n	8005aa0 <_malloc_r+0xa8>
 8005af2:	bf00      	nop
 8005af4:	200003ac 	.word	0x200003ac

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	@ (8005b00 <__malloc_lock+0x8>)
 8005afa:	f7ff b8ba 	b.w	8004c72 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	200003a4 	.word	0x200003a4

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	@ (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f7ff b8b5 	b.w	8004c74 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200003a4 	.word	0x200003a4

08005b10 <_Balloc>:
 8005b10:	b570      	push	{r4, r5, r6, lr}
 8005b12:	69c6      	ldr	r6, [r0, #28]
 8005b14:	4604      	mov	r4, r0
 8005b16:	460d      	mov	r5, r1
 8005b18:	b976      	cbnz	r6, 8005b38 <_Balloc+0x28>
 8005b1a:	2010      	movs	r0, #16
 8005b1c:	f7ff ff42 	bl	80059a4 <malloc>
 8005b20:	4602      	mov	r2, r0
 8005b22:	61e0      	str	r0, [r4, #28]
 8005b24:	b920      	cbnz	r0, 8005b30 <_Balloc+0x20>
 8005b26:	4b18      	ldr	r3, [pc, #96]	@ (8005b88 <_Balloc+0x78>)
 8005b28:	4818      	ldr	r0, [pc, #96]	@ (8005b8c <_Balloc+0x7c>)
 8005b2a:	216b      	movs	r1, #107	@ 0x6b
 8005b2c:	f000 fe02 	bl	8006734 <__assert_func>
 8005b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b34:	6006      	str	r6, [r0, #0]
 8005b36:	60c6      	str	r6, [r0, #12]
 8005b38:	69e6      	ldr	r6, [r4, #28]
 8005b3a:	68f3      	ldr	r3, [r6, #12]
 8005b3c:	b183      	cbz	r3, 8005b60 <_Balloc+0x50>
 8005b3e:	69e3      	ldr	r3, [r4, #28]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b46:	b9b8      	cbnz	r0, 8005b78 <_Balloc+0x68>
 8005b48:	2101      	movs	r1, #1
 8005b4a:	fa01 f605 	lsl.w	r6, r1, r5
 8005b4e:	1d72      	adds	r2, r6, #5
 8005b50:	0092      	lsls	r2, r2, #2
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fe0c 	bl	8006770 <_calloc_r>
 8005b58:	b160      	cbz	r0, 8005b74 <_Balloc+0x64>
 8005b5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005b5e:	e00e      	b.n	8005b7e <_Balloc+0x6e>
 8005b60:	2221      	movs	r2, #33	@ 0x21
 8005b62:	2104      	movs	r1, #4
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fe03 	bl	8006770 <_calloc_r>
 8005b6a:	69e3      	ldr	r3, [r4, #28]
 8005b6c:	60f0      	str	r0, [r6, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e4      	bne.n	8005b3e <_Balloc+0x2e>
 8005b74:	2000      	movs	r0, #0
 8005b76:	bd70      	pop	{r4, r5, r6, pc}
 8005b78:	6802      	ldr	r2, [r0, #0]
 8005b7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b84:	e7f7      	b.n	8005b76 <_Balloc+0x66>
 8005b86:	bf00      	nop
 8005b88:	080069a9 	.word	0x080069a9
 8005b8c:	08006a29 	.word	0x08006a29

08005b90 <_Bfree>:
 8005b90:	b570      	push	{r4, r5, r6, lr}
 8005b92:	69c6      	ldr	r6, [r0, #28]
 8005b94:	4605      	mov	r5, r0
 8005b96:	460c      	mov	r4, r1
 8005b98:	b976      	cbnz	r6, 8005bb8 <_Bfree+0x28>
 8005b9a:	2010      	movs	r0, #16
 8005b9c:	f7ff ff02 	bl	80059a4 <malloc>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	61e8      	str	r0, [r5, #28]
 8005ba4:	b920      	cbnz	r0, 8005bb0 <_Bfree+0x20>
 8005ba6:	4b09      	ldr	r3, [pc, #36]	@ (8005bcc <_Bfree+0x3c>)
 8005ba8:	4809      	ldr	r0, [pc, #36]	@ (8005bd0 <_Bfree+0x40>)
 8005baa:	218f      	movs	r1, #143	@ 0x8f
 8005bac:	f000 fdc2 	bl	8006734 <__assert_func>
 8005bb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bb4:	6006      	str	r6, [r0, #0]
 8005bb6:	60c6      	str	r6, [r0, #12]
 8005bb8:	b13c      	cbz	r4, 8005bca <_Bfree+0x3a>
 8005bba:	69eb      	ldr	r3, [r5, #28]
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bc4:	6021      	str	r1, [r4, #0]
 8005bc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	080069a9 	.word	0x080069a9
 8005bd0:	08006a29 	.word	0x08006a29

08005bd4 <__multadd>:
 8005bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd8:	690d      	ldr	r5, [r1, #16]
 8005bda:	4607      	mov	r7, r0
 8005bdc:	460c      	mov	r4, r1
 8005bde:	461e      	mov	r6, r3
 8005be0:	f101 0c14 	add.w	ip, r1, #20
 8005be4:	2000      	movs	r0, #0
 8005be6:	f8dc 3000 	ldr.w	r3, [ip]
 8005bea:	b299      	uxth	r1, r3
 8005bec:	fb02 6101 	mla	r1, r2, r1, r6
 8005bf0:	0c1e      	lsrs	r6, r3, #16
 8005bf2:	0c0b      	lsrs	r3, r1, #16
 8005bf4:	fb02 3306 	mla	r3, r2, r6, r3
 8005bf8:	b289      	uxth	r1, r1
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005c00:	4285      	cmp	r5, r0
 8005c02:	f84c 1b04 	str.w	r1, [ip], #4
 8005c06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005c0a:	dcec      	bgt.n	8005be6 <__multadd+0x12>
 8005c0c:	b30e      	cbz	r6, 8005c52 <__multadd+0x7e>
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	42ab      	cmp	r3, r5
 8005c12:	dc19      	bgt.n	8005c48 <__multadd+0x74>
 8005c14:	6861      	ldr	r1, [r4, #4]
 8005c16:	4638      	mov	r0, r7
 8005c18:	3101      	adds	r1, #1
 8005c1a:	f7ff ff79 	bl	8005b10 <_Balloc>
 8005c1e:	4680      	mov	r8, r0
 8005c20:	b928      	cbnz	r0, 8005c2e <__multadd+0x5a>
 8005c22:	4602      	mov	r2, r0
 8005c24:	4b0c      	ldr	r3, [pc, #48]	@ (8005c58 <__multadd+0x84>)
 8005c26:	480d      	ldr	r0, [pc, #52]	@ (8005c5c <__multadd+0x88>)
 8005c28:	21ba      	movs	r1, #186	@ 0xba
 8005c2a:	f000 fd83 	bl	8006734 <__assert_func>
 8005c2e:	6922      	ldr	r2, [r4, #16]
 8005c30:	3202      	adds	r2, #2
 8005c32:	f104 010c 	add.w	r1, r4, #12
 8005c36:	0092      	lsls	r2, r2, #2
 8005c38:	300c      	adds	r0, #12
 8005c3a:	f000 fd6d 	bl	8006718 <memcpy>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4638      	mov	r0, r7
 8005c42:	f7ff ffa5 	bl	8005b90 <_Bfree>
 8005c46:	4644      	mov	r4, r8
 8005c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	615e      	str	r6, [r3, #20]
 8005c50:	6125      	str	r5, [r4, #16]
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c58:	08006a18 	.word	0x08006a18
 8005c5c:	08006a29 	.word	0x08006a29

08005c60 <__hi0bits>:
 8005c60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005c64:	4603      	mov	r3, r0
 8005c66:	bf36      	itet	cc
 8005c68:	0403      	lslcc	r3, r0, #16
 8005c6a:	2000      	movcs	r0, #0
 8005c6c:	2010      	movcc	r0, #16
 8005c6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c72:	bf3c      	itt	cc
 8005c74:	021b      	lslcc	r3, r3, #8
 8005c76:	3008      	addcc	r0, #8
 8005c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c7c:	bf3c      	itt	cc
 8005c7e:	011b      	lslcc	r3, r3, #4
 8005c80:	3004      	addcc	r0, #4
 8005c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c86:	bf3c      	itt	cc
 8005c88:	009b      	lslcc	r3, r3, #2
 8005c8a:	3002      	addcc	r0, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	db05      	blt.n	8005c9c <__hi0bits+0x3c>
 8005c90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005c94:	f100 0001 	add.w	r0, r0, #1
 8005c98:	bf08      	it	eq
 8005c9a:	2020      	moveq	r0, #32
 8005c9c:	4770      	bx	lr

08005c9e <__lo0bits>:
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	f013 0007 	ands.w	r0, r3, #7
 8005ca6:	d00b      	beq.n	8005cc0 <__lo0bits+0x22>
 8005ca8:	07d9      	lsls	r1, r3, #31
 8005caa:	d421      	bmi.n	8005cf0 <__lo0bits+0x52>
 8005cac:	0798      	lsls	r0, r3, #30
 8005cae:	bf49      	itett	mi
 8005cb0:	085b      	lsrmi	r3, r3, #1
 8005cb2:	089b      	lsrpl	r3, r3, #2
 8005cb4:	2001      	movmi	r0, #1
 8005cb6:	6013      	strmi	r3, [r2, #0]
 8005cb8:	bf5c      	itt	pl
 8005cba:	6013      	strpl	r3, [r2, #0]
 8005cbc:	2002      	movpl	r0, #2
 8005cbe:	4770      	bx	lr
 8005cc0:	b299      	uxth	r1, r3
 8005cc2:	b909      	cbnz	r1, 8005cc8 <__lo0bits+0x2a>
 8005cc4:	0c1b      	lsrs	r3, r3, #16
 8005cc6:	2010      	movs	r0, #16
 8005cc8:	b2d9      	uxtb	r1, r3
 8005cca:	b909      	cbnz	r1, 8005cd0 <__lo0bits+0x32>
 8005ccc:	3008      	adds	r0, #8
 8005cce:	0a1b      	lsrs	r3, r3, #8
 8005cd0:	0719      	lsls	r1, r3, #28
 8005cd2:	bf04      	itt	eq
 8005cd4:	091b      	lsreq	r3, r3, #4
 8005cd6:	3004      	addeq	r0, #4
 8005cd8:	0799      	lsls	r1, r3, #30
 8005cda:	bf04      	itt	eq
 8005cdc:	089b      	lsreq	r3, r3, #2
 8005cde:	3002      	addeq	r0, #2
 8005ce0:	07d9      	lsls	r1, r3, #31
 8005ce2:	d403      	bmi.n	8005cec <__lo0bits+0x4e>
 8005ce4:	085b      	lsrs	r3, r3, #1
 8005ce6:	f100 0001 	add.w	r0, r0, #1
 8005cea:	d003      	beq.n	8005cf4 <__lo0bits+0x56>
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	4770      	bx	lr
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	4770      	bx	lr
 8005cf4:	2020      	movs	r0, #32
 8005cf6:	4770      	bx	lr

08005cf8 <__i2b>:
 8005cf8:	b510      	push	{r4, lr}
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	f7ff ff07 	bl	8005b10 <_Balloc>
 8005d02:	4602      	mov	r2, r0
 8005d04:	b928      	cbnz	r0, 8005d12 <__i2b+0x1a>
 8005d06:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <__i2b+0x24>)
 8005d08:	4805      	ldr	r0, [pc, #20]	@ (8005d20 <__i2b+0x28>)
 8005d0a:	f240 1145 	movw	r1, #325	@ 0x145
 8005d0e:	f000 fd11 	bl	8006734 <__assert_func>
 8005d12:	2301      	movs	r3, #1
 8005d14:	6144      	str	r4, [r0, #20]
 8005d16:	6103      	str	r3, [r0, #16]
 8005d18:	bd10      	pop	{r4, pc}
 8005d1a:	bf00      	nop
 8005d1c:	08006a18 	.word	0x08006a18
 8005d20:	08006a29 	.word	0x08006a29

08005d24 <__multiply>:
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	4614      	mov	r4, r2
 8005d2a:	690a      	ldr	r2, [r1, #16]
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	bfa8      	it	ge
 8005d32:	4623      	movge	r3, r4
 8005d34:	460f      	mov	r7, r1
 8005d36:	bfa4      	itt	ge
 8005d38:	460c      	movge	r4, r1
 8005d3a:	461f      	movge	r7, r3
 8005d3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005d40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005d44:	68a3      	ldr	r3, [r4, #8]
 8005d46:	6861      	ldr	r1, [r4, #4]
 8005d48:	eb0a 0609 	add.w	r6, sl, r9
 8005d4c:	42b3      	cmp	r3, r6
 8005d4e:	b085      	sub	sp, #20
 8005d50:	bfb8      	it	lt
 8005d52:	3101      	addlt	r1, #1
 8005d54:	f7ff fedc 	bl	8005b10 <_Balloc>
 8005d58:	b930      	cbnz	r0, 8005d68 <__multiply+0x44>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	4b44      	ldr	r3, [pc, #272]	@ (8005e70 <__multiply+0x14c>)
 8005d5e:	4845      	ldr	r0, [pc, #276]	@ (8005e74 <__multiply+0x150>)
 8005d60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005d64:	f000 fce6 	bl	8006734 <__assert_func>
 8005d68:	f100 0514 	add.w	r5, r0, #20
 8005d6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d70:	462b      	mov	r3, r5
 8005d72:	2200      	movs	r2, #0
 8005d74:	4543      	cmp	r3, r8
 8005d76:	d321      	bcc.n	8005dbc <__multiply+0x98>
 8005d78:	f107 0114 	add.w	r1, r7, #20
 8005d7c:	f104 0214 	add.w	r2, r4, #20
 8005d80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005d84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005d88:	9302      	str	r3, [sp, #8]
 8005d8a:	1b13      	subs	r3, r2, r4
 8005d8c:	3b15      	subs	r3, #21
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	3304      	adds	r3, #4
 8005d94:	f104 0715 	add.w	r7, r4, #21
 8005d98:	42ba      	cmp	r2, r7
 8005d9a:	bf38      	it	cc
 8005d9c:	2304      	movcc	r3, #4
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	9b02      	ldr	r3, [sp, #8]
 8005da2:	9103      	str	r1, [sp, #12]
 8005da4:	428b      	cmp	r3, r1
 8005da6:	d80c      	bhi.n	8005dc2 <__multiply+0x9e>
 8005da8:	2e00      	cmp	r6, #0
 8005daa:	dd03      	ble.n	8005db4 <__multiply+0x90>
 8005dac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d05b      	beq.n	8005e6c <__multiply+0x148>
 8005db4:	6106      	str	r6, [r0, #16]
 8005db6:	b005      	add	sp, #20
 8005db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dbc:	f843 2b04 	str.w	r2, [r3], #4
 8005dc0:	e7d8      	b.n	8005d74 <__multiply+0x50>
 8005dc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8005dc6:	f1ba 0f00 	cmp.w	sl, #0
 8005dca:	d024      	beq.n	8005e16 <__multiply+0xf2>
 8005dcc:	f104 0e14 	add.w	lr, r4, #20
 8005dd0:	46a9      	mov	r9, r5
 8005dd2:	f04f 0c00 	mov.w	ip, #0
 8005dd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005dda:	f8d9 3000 	ldr.w	r3, [r9]
 8005dde:	fa1f fb87 	uxth.w	fp, r7
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	fb0a 330b 	mla	r3, sl, fp, r3
 8005de8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005dec:	f8d9 7000 	ldr.w	r7, [r9]
 8005df0:	4463      	add	r3, ip
 8005df2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005df6:	fb0a c70b 	mla	r7, sl, fp, ip
 8005dfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e04:	4572      	cmp	r2, lr
 8005e06:	f849 3b04 	str.w	r3, [r9], #4
 8005e0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005e0e:	d8e2      	bhi.n	8005dd6 <__multiply+0xb2>
 8005e10:	9b01      	ldr	r3, [sp, #4]
 8005e12:	f845 c003 	str.w	ip, [r5, r3]
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005e1c:	3104      	adds	r1, #4
 8005e1e:	f1b9 0f00 	cmp.w	r9, #0
 8005e22:	d021      	beq.n	8005e68 <__multiply+0x144>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	f104 0c14 	add.w	ip, r4, #20
 8005e2a:	46ae      	mov	lr, r5
 8005e2c:	f04f 0a00 	mov.w	sl, #0
 8005e30:	f8bc b000 	ldrh.w	fp, [ip]
 8005e34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005e38:	fb09 770b 	mla	r7, r9, fp, r7
 8005e3c:	4457      	add	r7, sl
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005e44:	f84e 3b04 	str.w	r3, [lr], #4
 8005e48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e50:	f8be 3000 	ldrh.w	r3, [lr]
 8005e54:	fb09 330a 	mla	r3, r9, sl, r3
 8005e58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005e5c:	4562      	cmp	r2, ip
 8005e5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005e62:	d8e5      	bhi.n	8005e30 <__multiply+0x10c>
 8005e64:	9f01      	ldr	r7, [sp, #4]
 8005e66:	51eb      	str	r3, [r5, r7]
 8005e68:	3504      	adds	r5, #4
 8005e6a:	e799      	b.n	8005da0 <__multiply+0x7c>
 8005e6c:	3e01      	subs	r6, #1
 8005e6e:	e79b      	b.n	8005da8 <__multiply+0x84>
 8005e70:	08006a18 	.word	0x08006a18
 8005e74:	08006a29 	.word	0x08006a29

08005e78 <__pow5mult>:
 8005e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e7c:	4615      	mov	r5, r2
 8005e7e:	f012 0203 	ands.w	r2, r2, #3
 8005e82:	4607      	mov	r7, r0
 8005e84:	460e      	mov	r6, r1
 8005e86:	d007      	beq.n	8005e98 <__pow5mult+0x20>
 8005e88:	4c25      	ldr	r4, [pc, #148]	@ (8005f20 <__pow5mult+0xa8>)
 8005e8a:	3a01      	subs	r2, #1
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e92:	f7ff fe9f 	bl	8005bd4 <__multadd>
 8005e96:	4606      	mov	r6, r0
 8005e98:	10ad      	asrs	r5, r5, #2
 8005e9a:	d03d      	beq.n	8005f18 <__pow5mult+0xa0>
 8005e9c:	69fc      	ldr	r4, [r7, #28]
 8005e9e:	b97c      	cbnz	r4, 8005ec0 <__pow5mult+0x48>
 8005ea0:	2010      	movs	r0, #16
 8005ea2:	f7ff fd7f 	bl	80059a4 <malloc>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	61f8      	str	r0, [r7, #28]
 8005eaa:	b928      	cbnz	r0, 8005eb8 <__pow5mult+0x40>
 8005eac:	4b1d      	ldr	r3, [pc, #116]	@ (8005f24 <__pow5mult+0xac>)
 8005eae:	481e      	ldr	r0, [pc, #120]	@ (8005f28 <__pow5mult+0xb0>)
 8005eb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005eb4:	f000 fc3e 	bl	8006734 <__assert_func>
 8005eb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ebc:	6004      	str	r4, [r0, #0]
 8005ebe:	60c4      	str	r4, [r0, #12]
 8005ec0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005ec4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ec8:	b94c      	cbnz	r4, 8005ede <__pow5mult+0x66>
 8005eca:	f240 2171 	movw	r1, #625	@ 0x271
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ff12 	bl	8005cf8 <__i2b>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005eda:	4604      	mov	r4, r0
 8005edc:	6003      	str	r3, [r0, #0]
 8005ede:	f04f 0900 	mov.w	r9, #0
 8005ee2:	07eb      	lsls	r3, r5, #31
 8005ee4:	d50a      	bpl.n	8005efc <__pow5mult+0x84>
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4622      	mov	r2, r4
 8005eea:	4638      	mov	r0, r7
 8005eec:	f7ff ff1a 	bl	8005d24 <__multiply>
 8005ef0:	4631      	mov	r1, r6
 8005ef2:	4680      	mov	r8, r0
 8005ef4:	4638      	mov	r0, r7
 8005ef6:	f7ff fe4b 	bl	8005b90 <_Bfree>
 8005efa:	4646      	mov	r6, r8
 8005efc:	106d      	asrs	r5, r5, #1
 8005efe:	d00b      	beq.n	8005f18 <__pow5mult+0xa0>
 8005f00:	6820      	ldr	r0, [r4, #0]
 8005f02:	b938      	cbnz	r0, 8005f14 <__pow5mult+0x9c>
 8005f04:	4622      	mov	r2, r4
 8005f06:	4621      	mov	r1, r4
 8005f08:	4638      	mov	r0, r7
 8005f0a:	f7ff ff0b 	bl	8005d24 <__multiply>
 8005f0e:	6020      	str	r0, [r4, #0]
 8005f10:	f8c0 9000 	str.w	r9, [r0]
 8005f14:	4604      	mov	r4, r0
 8005f16:	e7e4      	b.n	8005ee2 <__pow5mult+0x6a>
 8005f18:	4630      	mov	r0, r6
 8005f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1e:	bf00      	nop
 8005f20:	08006a84 	.word	0x08006a84
 8005f24:	080069a9 	.word	0x080069a9
 8005f28:	08006a29 	.word	0x08006a29

08005f2c <__lshift>:
 8005f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f30:	460c      	mov	r4, r1
 8005f32:	6849      	ldr	r1, [r1, #4]
 8005f34:	6923      	ldr	r3, [r4, #16]
 8005f36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	4691      	mov	r9, r2
 8005f40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f44:	f108 0601 	add.w	r6, r8, #1
 8005f48:	42b3      	cmp	r3, r6
 8005f4a:	db0b      	blt.n	8005f64 <__lshift+0x38>
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	f7ff fddf 	bl	8005b10 <_Balloc>
 8005f52:	4605      	mov	r5, r0
 8005f54:	b948      	cbnz	r0, 8005f6a <__lshift+0x3e>
 8005f56:	4602      	mov	r2, r0
 8005f58:	4b28      	ldr	r3, [pc, #160]	@ (8005ffc <__lshift+0xd0>)
 8005f5a:	4829      	ldr	r0, [pc, #164]	@ (8006000 <__lshift+0xd4>)
 8005f5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005f60:	f000 fbe8 	bl	8006734 <__assert_func>
 8005f64:	3101      	adds	r1, #1
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	e7ee      	b.n	8005f48 <__lshift+0x1c>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f100 0114 	add.w	r1, r0, #20
 8005f70:	f100 0210 	add.w	r2, r0, #16
 8005f74:	4618      	mov	r0, r3
 8005f76:	4553      	cmp	r3, sl
 8005f78:	db33      	blt.n	8005fe2 <__lshift+0xb6>
 8005f7a:	6920      	ldr	r0, [r4, #16]
 8005f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f80:	f104 0314 	add.w	r3, r4, #20
 8005f84:	f019 091f 	ands.w	r9, r9, #31
 8005f88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f90:	d02b      	beq.n	8005fea <__lshift+0xbe>
 8005f92:	f1c9 0e20 	rsb	lr, r9, #32
 8005f96:	468a      	mov	sl, r1
 8005f98:	2200      	movs	r2, #0
 8005f9a:	6818      	ldr	r0, [r3, #0]
 8005f9c:	fa00 f009 	lsl.w	r0, r0, r9
 8005fa0:	4310      	orrs	r0, r2
 8005fa2:	f84a 0b04 	str.w	r0, [sl], #4
 8005fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005faa:	459c      	cmp	ip, r3
 8005fac:	fa22 f20e 	lsr.w	r2, r2, lr
 8005fb0:	d8f3      	bhi.n	8005f9a <__lshift+0x6e>
 8005fb2:	ebac 0304 	sub.w	r3, ip, r4
 8005fb6:	3b15      	subs	r3, #21
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	f104 0015 	add.w	r0, r4, #21
 8005fc2:	4584      	cmp	ip, r0
 8005fc4:	bf38      	it	cc
 8005fc6:	2304      	movcc	r3, #4
 8005fc8:	50ca      	str	r2, [r1, r3]
 8005fca:	b10a      	cbz	r2, 8005fd0 <__lshift+0xa4>
 8005fcc:	f108 0602 	add.w	r6, r8, #2
 8005fd0:	3e01      	subs	r6, #1
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	612e      	str	r6, [r5, #16]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	f7ff fdda 	bl	8005b90 <_Bfree>
 8005fdc:	4628      	mov	r0, r5
 8005fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	e7c5      	b.n	8005f76 <__lshift+0x4a>
 8005fea:	3904      	subs	r1, #4
 8005fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ff4:	459c      	cmp	ip, r3
 8005ff6:	d8f9      	bhi.n	8005fec <__lshift+0xc0>
 8005ff8:	e7ea      	b.n	8005fd0 <__lshift+0xa4>
 8005ffa:	bf00      	nop
 8005ffc:	08006a18 	.word	0x08006a18
 8006000:	08006a29 	.word	0x08006a29

08006004 <__mcmp>:
 8006004:	690a      	ldr	r2, [r1, #16]
 8006006:	4603      	mov	r3, r0
 8006008:	6900      	ldr	r0, [r0, #16]
 800600a:	1a80      	subs	r0, r0, r2
 800600c:	b530      	push	{r4, r5, lr}
 800600e:	d10e      	bne.n	800602e <__mcmp+0x2a>
 8006010:	3314      	adds	r3, #20
 8006012:	3114      	adds	r1, #20
 8006014:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006018:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800601c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006020:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006024:	4295      	cmp	r5, r2
 8006026:	d003      	beq.n	8006030 <__mcmp+0x2c>
 8006028:	d205      	bcs.n	8006036 <__mcmp+0x32>
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	bd30      	pop	{r4, r5, pc}
 8006030:	42a3      	cmp	r3, r4
 8006032:	d3f3      	bcc.n	800601c <__mcmp+0x18>
 8006034:	e7fb      	b.n	800602e <__mcmp+0x2a>
 8006036:	2001      	movs	r0, #1
 8006038:	e7f9      	b.n	800602e <__mcmp+0x2a>
	...

0800603c <__mdiff>:
 800603c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	4689      	mov	r9, r1
 8006042:	4606      	mov	r6, r0
 8006044:	4611      	mov	r1, r2
 8006046:	4648      	mov	r0, r9
 8006048:	4614      	mov	r4, r2
 800604a:	f7ff ffdb 	bl	8006004 <__mcmp>
 800604e:	1e05      	subs	r5, r0, #0
 8006050:	d112      	bne.n	8006078 <__mdiff+0x3c>
 8006052:	4629      	mov	r1, r5
 8006054:	4630      	mov	r0, r6
 8006056:	f7ff fd5b 	bl	8005b10 <_Balloc>
 800605a:	4602      	mov	r2, r0
 800605c:	b928      	cbnz	r0, 800606a <__mdiff+0x2e>
 800605e:	4b3f      	ldr	r3, [pc, #252]	@ (800615c <__mdiff+0x120>)
 8006060:	f240 2137 	movw	r1, #567	@ 0x237
 8006064:	483e      	ldr	r0, [pc, #248]	@ (8006160 <__mdiff+0x124>)
 8006066:	f000 fb65 	bl	8006734 <__assert_func>
 800606a:	2301      	movs	r3, #1
 800606c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006070:	4610      	mov	r0, r2
 8006072:	b003      	add	sp, #12
 8006074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006078:	bfbc      	itt	lt
 800607a:	464b      	movlt	r3, r9
 800607c:	46a1      	movlt	r9, r4
 800607e:	4630      	mov	r0, r6
 8006080:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006084:	bfba      	itte	lt
 8006086:	461c      	movlt	r4, r3
 8006088:	2501      	movlt	r5, #1
 800608a:	2500      	movge	r5, #0
 800608c:	f7ff fd40 	bl	8005b10 <_Balloc>
 8006090:	4602      	mov	r2, r0
 8006092:	b918      	cbnz	r0, 800609c <__mdiff+0x60>
 8006094:	4b31      	ldr	r3, [pc, #196]	@ (800615c <__mdiff+0x120>)
 8006096:	f240 2145 	movw	r1, #581	@ 0x245
 800609a:	e7e3      	b.n	8006064 <__mdiff+0x28>
 800609c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80060a0:	6926      	ldr	r6, [r4, #16]
 80060a2:	60c5      	str	r5, [r0, #12]
 80060a4:	f109 0310 	add.w	r3, r9, #16
 80060a8:	f109 0514 	add.w	r5, r9, #20
 80060ac:	f104 0e14 	add.w	lr, r4, #20
 80060b0:	f100 0b14 	add.w	fp, r0, #20
 80060b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80060b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	46d9      	mov	r9, fp
 80060c0:	f04f 0c00 	mov.w	ip, #0
 80060c4:	9b01      	ldr	r3, [sp, #4]
 80060c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80060ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80060ce:	9301      	str	r3, [sp, #4]
 80060d0:	fa1f f38a 	uxth.w	r3, sl
 80060d4:	4619      	mov	r1, r3
 80060d6:	b283      	uxth	r3, r0
 80060d8:	1acb      	subs	r3, r1, r3
 80060da:	0c00      	lsrs	r0, r0, #16
 80060dc:	4463      	add	r3, ip
 80060de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80060e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80060ec:	4576      	cmp	r6, lr
 80060ee:	f849 3b04 	str.w	r3, [r9], #4
 80060f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80060f6:	d8e5      	bhi.n	80060c4 <__mdiff+0x88>
 80060f8:	1b33      	subs	r3, r6, r4
 80060fa:	3b15      	subs	r3, #21
 80060fc:	f023 0303 	bic.w	r3, r3, #3
 8006100:	3415      	adds	r4, #21
 8006102:	3304      	adds	r3, #4
 8006104:	42a6      	cmp	r6, r4
 8006106:	bf38      	it	cc
 8006108:	2304      	movcc	r3, #4
 800610a:	441d      	add	r5, r3
 800610c:	445b      	add	r3, fp
 800610e:	461e      	mov	r6, r3
 8006110:	462c      	mov	r4, r5
 8006112:	4544      	cmp	r4, r8
 8006114:	d30e      	bcc.n	8006134 <__mdiff+0xf8>
 8006116:	f108 0103 	add.w	r1, r8, #3
 800611a:	1b49      	subs	r1, r1, r5
 800611c:	f021 0103 	bic.w	r1, r1, #3
 8006120:	3d03      	subs	r5, #3
 8006122:	45a8      	cmp	r8, r5
 8006124:	bf38      	it	cc
 8006126:	2100      	movcc	r1, #0
 8006128:	440b      	add	r3, r1
 800612a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800612e:	b191      	cbz	r1, 8006156 <__mdiff+0x11a>
 8006130:	6117      	str	r7, [r2, #16]
 8006132:	e79d      	b.n	8006070 <__mdiff+0x34>
 8006134:	f854 1b04 	ldr.w	r1, [r4], #4
 8006138:	46e6      	mov	lr, ip
 800613a:	0c08      	lsrs	r0, r1, #16
 800613c:	fa1c fc81 	uxtah	ip, ip, r1
 8006140:	4471      	add	r1, lr
 8006142:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006146:	b289      	uxth	r1, r1
 8006148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800614c:	f846 1b04 	str.w	r1, [r6], #4
 8006150:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006154:	e7dd      	b.n	8006112 <__mdiff+0xd6>
 8006156:	3f01      	subs	r7, #1
 8006158:	e7e7      	b.n	800612a <__mdiff+0xee>
 800615a:	bf00      	nop
 800615c:	08006a18 	.word	0x08006a18
 8006160:	08006a29 	.word	0x08006a29

08006164 <__d2b>:
 8006164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006168:	460f      	mov	r7, r1
 800616a:	2101      	movs	r1, #1
 800616c:	ec59 8b10 	vmov	r8, r9, d0
 8006170:	4616      	mov	r6, r2
 8006172:	f7ff fccd 	bl	8005b10 <_Balloc>
 8006176:	4604      	mov	r4, r0
 8006178:	b930      	cbnz	r0, 8006188 <__d2b+0x24>
 800617a:	4602      	mov	r2, r0
 800617c:	4b23      	ldr	r3, [pc, #140]	@ (800620c <__d2b+0xa8>)
 800617e:	4824      	ldr	r0, [pc, #144]	@ (8006210 <__d2b+0xac>)
 8006180:	f240 310f 	movw	r1, #783	@ 0x30f
 8006184:	f000 fad6 	bl	8006734 <__assert_func>
 8006188:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800618c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006190:	b10d      	cbz	r5, 8006196 <__d2b+0x32>
 8006192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	f1b8 0300 	subs.w	r3, r8, #0
 800619c:	d023      	beq.n	80061e6 <__d2b+0x82>
 800619e:	4668      	mov	r0, sp
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f7ff fd7c 	bl	8005c9e <__lo0bits>
 80061a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061aa:	b1d0      	cbz	r0, 80061e2 <__d2b+0x7e>
 80061ac:	f1c0 0320 	rsb	r3, r0, #32
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	430b      	orrs	r3, r1
 80061b6:	40c2      	lsrs	r2, r0
 80061b8:	6163      	str	r3, [r4, #20]
 80061ba:	9201      	str	r2, [sp, #4]
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	61a3      	str	r3, [r4, #24]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	bf0c      	ite	eq
 80061c4:	2201      	moveq	r2, #1
 80061c6:	2202      	movne	r2, #2
 80061c8:	6122      	str	r2, [r4, #16]
 80061ca:	b1a5      	cbz	r5, 80061f6 <__d2b+0x92>
 80061cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061d0:	4405      	add	r5, r0
 80061d2:	603d      	str	r5, [r7, #0]
 80061d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80061d8:	6030      	str	r0, [r6, #0]
 80061da:	4620      	mov	r0, r4
 80061dc:	b003      	add	sp, #12
 80061de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e2:	6161      	str	r1, [r4, #20]
 80061e4:	e7ea      	b.n	80061bc <__d2b+0x58>
 80061e6:	a801      	add	r0, sp, #4
 80061e8:	f7ff fd59 	bl	8005c9e <__lo0bits>
 80061ec:	9b01      	ldr	r3, [sp, #4]
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	3020      	adds	r0, #32
 80061f2:	2201      	movs	r2, #1
 80061f4:	e7e8      	b.n	80061c8 <__d2b+0x64>
 80061f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80061fe:	6038      	str	r0, [r7, #0]
 8006200:	6918      	ldr	r0, [r3, #16]
 8006202:	f7ff fd2d 	bl	8005c60 <__hi0bits>
 8006206:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800620a:	e7e5      	b.n	80061d8 <__d2b+0x74>
 800620c:	08006a18 	.word	0x08006a18
 8006210:	08006a29 	.word	0x08006a29

08006214 <__sfputc_r>:
 8006214:	6893      	ldr	r3, [r2, #8]
 8006216:	3b01      	subs	r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	b410      	push	{r4}
 800621c:	6093      	str	r3, [r2, #8]
 800621e:	da08      	bge.n	8006232 <__sfputc_r+0x1e>
 8006220:	6994      	ldr	r4, [r2, #24]
 8006222:	42a3      	cmp	r3, r4
 8006224:	db01      	blt.n	800622a <__sfputc_r+0x16>
 8006226:	290a      	cmp	r1, #10
 8006228:	d103      	bne.n	8006232 <__sfputc_r+0x1e>
 800622a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800622e:	f7fe bc0e 	b.w	8004a4e <__swbuf_r>
 8006232:	6813      	ldr	r3, [r2, #0]
 8006234:	1c58      	adds	r0, r3, #1
 8006236:	6010      	str	r0, [r2, #0]
 8006238:	7019      	strb	r1, [r3, #0]
 800623a:	4608      	mov	r0, r1
 800623c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006240:	4770      	bx	lr

08006242 <__sfputs_r>:
 8006242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006244:	4606      	mov	r6, r0
 8006246:	460f      	mov	r7, r1
 8006248:	4614      	mov	r4, r2
 800624a:	18d5      	adds	r5, r2, r3
 800624c:	42ac      	cmp	r4, r5
 800624e:	d101      	bne.n	8006254 <__sfputs_r+0x12>
 8006250:	2000      	movs	r0, #0
 8006252:	e007      	b.n	8006264 <__sfputs_r+0x22>
 8006254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006258:	463a      	mov	r2, r7
 800625a:	4630      	mov	r0, r6
 800625c:	f7ff ffda 	bl	8006214 <__sfputc_r>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d1f3      	bne.n	800624c <__sfputs_r+0xa>
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006268 <_vfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	460d      	mov	r5, r1
 800626e:	b09d      	sub	sp, #116	@ 0x74
 8006270:	4614      	mov	r4, r2
 8006272:	4698      	mov	r8, r3
 8006274:	4606      	mov	r6, r0
 8006276:	b118      	cbz	r0, 8006280 <_vfiprintf_r+0x18>
 8006278:	6a03      	ldr	r3, [r0, #32]
 800627a:	b90b      	cbnz	r3, 8006280 <_vfiprintf_r+0x18>
 800627c:	f7fe fafe 	bl	800487c <__sinit>
 8006280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006282:	07d9      	lsls	r1, r3, #31
 8006284:	d405      	bmi.n	8006292 <_vfiprintf_r+0x2a>
 8006286:	89ab      	ldrh	r3, [r5, #12]
 8006288:	059a      	lsls	r2, r3, #22
 800628a:	d402      	bmi.n	8006292 <_vfiprintf_r+0x2a>
 800628c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800628e:	f7fe fcf0 	bl	8004c72 <__retarget_lock_acquire_recursive>
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	071b      	lsls	r3, r3, #28
 8006296:	d501      	bpl.n	800629c <_vfiprintf_r+0x34>
 8006298:	692b      	ldr	r3, [r5, #16]
 800629a:	b99b      	cbnz	r3, 80062c4 <_vfiprintf_r+0x5c>
 800629c:	4629      	mov	r1, r5
 800629e:	4630      	mov	r0, r6
 80062a0:	f7fe fc14 	bl	8004acc <__swsetup_r>
 80062a4:	b170      	cbz	r0, 80062c4 <_vfiprintf_r+0x5c>
 80062a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062a8:	07dc      	lsls	r4, r3, #31
 80062aa:	d504      	bpl.n	80062b6 <_vfiprintf_r+0x4e>
 80062ac:	f04f 30ff 	mov.w	r0, #4294967295
 80062b0:	b01d      	add	sp, #116	@ 0x74
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	89ab      	ldrh	r3, [r5, #12]
 80062b8:	0598      	lsls	r0, r3, #22
 80062ba:	d4f7      	bmi.n	80062ac <_vfiprintf_r+0x44>
 80062bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062be:	f7fe fcd9 	bl	8004c74 <__retarget_lock_release_recursive>
 80062c2:	e7f3      	b.n	80062ac <_vfiprintf_r+0x44>
 80062c4:	2300      	movs	r3, #0
 80062c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062c8:	2320      	movs	r3, #32
 80062ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80062d2:	2330      	movs	r3, #48	@ 0x30
 80062d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006484 <_vfiprintf_r+0x21c>
 80062d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062dc:	f04f 0901 	mov.w	r9, #1
 80062e0:	4623      	mov	r3, r4
 80062e2:	469a      	mov	sl, r3
 80062e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062e8:	b10a      	cbz	r2, 80062ee <_vfiprintf_r+0x86>
 80062ea:	2a25      	cmp	r2, #37	@ 0x25
 80062ec:	d1f9      	bne.n	80062e2 <_vfiprintf_r+0x7a>
 80062ee:	ebba 0b04 	subs.w	fp, sl, r4
 80062f2:	d00b      	beq.n	800630c <_vfiprintf_r+0xa4>
 80062f4:	465b      	mov	r3, fp
 80062f6:	4622      	mov	r2, r4
 80062f8:	4629      	mov	r1, r5
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ffa1 	bl	8006242 <__sfputs_r>
 8006300:	3001      	adds	r0, #1
 8006302:	f000 80a7 	beq.w	8006454 <_vfiprintf_r+0x1ec>
 8006306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006308:	445a      	add	r2, fp
 800630a:	9209      	str	r2, [sp, #36]	@ 0x24
 800630c:	f89a 3000 	ldrb.w	r3, [sl]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 809f 	beq.w	8006454 <_vfiprintf_r+0x1ec>
 8006316:	2300      	movs	r3, #0
 8006318:	f04f 32ff 	mov.w	r2, #4294967295
 800631c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006320:	f10a 0a01 	add.w	sl, sl, #1
 8006324:	9304      	str	r3, [sp, #16]
 8006326:	9307      	str	r3, [sp, #28]
 8006328:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800632c:	931a      	str	r3, [sp, #104]	@ 0x68
 800632e:	4654      	mov	r4, sl
 8006330:	2205      	movs	r2, #5
 8006332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006336:	4853      	ldr	r0, [pc, #332]	@ (8006484 <_vfiprintf_r+0x21c>)
 8006338:	f7f9 ff72 	bl	8000220 <memchr>
 800633c:	9a04      	ldr	r2, [sp, #16]
 800633e:	b9d8      	cbnz	r0, 8006378 <_vfiprintf_r+0x110>
 8006340:	06d1      	lsls	r1, r2, #27
 8006342:	bf44      	itt	mi
 8006344:	2320      	movmi	r3, #32
 8006346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800634a:	0713      	lsls	r3, r2, #28
 800634c:	bf44      	itt	mi
 800634e:	232b      	movmi	r3, #43	@ 0x2b
 8006350:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006354:	f89a 3000 	ldrb.w	r3, [sl]
 8006358:	2b2a      	cmp	r3, #42	@ 0x2a
 800635a:	d015      	beq.n	8006388 <_vfiprintf_r+0x120>
 800635c:	9a07      	ldr	r2, [sp, #28]
 800635e:	4654      	mov	r4, sl
 8006360:	2000      	movs	r0, #0
 8006362:	f04f 0c0a 	mov.w	ip, #10
 8006366:	4621      	mov	r1, r4
 8006368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800636c:	3b30      	subs	r3, #48	@ 0x30
 800636e:	2b09      	cmp	r3, #9
 8006370:	d94b      	bls.n	800640a <_vfiprintf_r+0x1a2>
 8006372:	b1b0      	cbz	r0, 80063a2 <_vfiprintf_r+0x13a>
 8006374:	9207      	str	r2, [sp, #28]
 8006376:	e014      	b.n	80063a2 <_vfiprintf_r+0x13a>
 8006378:	eba0 0308 	sub.w	r3, r0, r8
 800637c:	fa09 f303 	lsl.w	r3, r9, r3
 8006380:	4313      	orrs	r3, r2
 8006382:	9304      	str	r3, [sp, #16]
 8006384:	46a2      	mov	sl, r4
 8006386:	e7d2      	b.n	800632e <_vfiprintf_r+0xc6>
 8006388:	9b03      	ldr	r3, [sp, #12]
 800638a:	1d19      	adds	r1, r3, #4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	9103      	str	r1, [sp, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	bfbb      	ittet	lt
 8006394:	425b      	neglt	r3, r3
 8006396:	f042 0202 	orrlt.w	r2, r2, #2
 800639a:	9307      	strge	r3, [sp, #28]
 800639c:	9307      	strlt	r3, [sp, #28]
 800639e:	bfb8      	it	lt
 80063a0:	9204      	strlt	r2, [sp, #16]
 80063a2:	7823      	ldrb	r3, [r4, #0]
 80063a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80063a6:	d10a      	bne.n	80063be <_vfiprintf_r+0x156>
 80063a8:	7863      	ldrb	r3, [r4, #1]
 80063aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80063ac:	d132      	bne.n	8006414 <_vfiprintf_r+0x1ac>
 80063ae:	9b03      	ldr	r3, [sp, #12]
 80063b0:	1d1a      	adds	r2, r3, #4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	9203      	str	r2, [sp, #12]
 80063b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063ba:	3402      	adds	r4, #2
 80063bc:	9305      	str	r3, [sp, #20]
 80063be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006494 <_vfiprintf_r+0x22c>
 80063c2:	7821      	ldrb	r1, [r4, #0]
 80063c4:	2203      	movs	r2, #3
 80063c6:	4650      	mov	r0, sl
 80063c8:	f7f9 ff2a 	bl	8000220 <memchr>
 80063cc:	b138      	cbz	r0, 80063de <_vfiprintf_r+0x176>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	eba0 000a 	sub.w	r0, r0, sl
 80063d4:	2240      	movs	r2, #64	@ 0x40
 80063d6:	4082      	lsls	r2, r0
 80063d8:	4313      	orrs	r3, r2
 80063da:	3401      	adds	r4, #1
 80063dc:	9304      	str	r3, [sp, #16]
 80063de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e2:	4829      	ldr	r0, [pc, #164]	@ (8006488 <_vfiprintf_r+0x220>)
 80063e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063e8:	2206      	movs	r2, #6
 80063ea:	f7f9 ff19 	bl	8000220 <memchr>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d03f      	beq.n	8006472 <_vfiprintf_r+0x20a>
 80063f2:	4b26      	ldr	r3, [pc, #152]	@ (800648c <_vfiprintf_r+0x224>)
 80063f4:	bb1b      	cbnz	r3, 800643e <_vfiprintf_r+0x1d6>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	3307      	adds	r3, #7
 80063fa:	f023 0307 	bic.w	r3, r3, #7
 80063fe:	3308      	adds	r3, #8
 8006400:	9303      	str	r3, [sp, #12]
 8006402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006404:	443b      	add	r3, r7
 8006406:	9309      	str	r3, [sp, #36]	@ 0x24
 8006408:	e76a      	b.n	80062e0 <_vfiprintf_r+0x78>
 800640a:	fb0c 3202 	mla	r2, ip, r2, r3
 800640e:	460c      	mov	r4, r1
 8006410:	2001      	movs	r0, #1
 8006412:	e7a8      	b.n	8006366 <_vfiprintf_r+0xfe>
 8006414:	2300      	movs	r3, #0
 8006416:	3401      	adds	r4, #1
 8006418:	9305      	str	r3, [sp, #20]
 800641a:	4619      	mov	r1, r3
 800641c:	f04f 0c0a 	mov.w	ip, #10
 8006420:	4620      	mov	r0, r4
 8006422:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006426:	3a30      	subs	r2, #48	@ 0x30
 8006428:	2a09      	cmp	r2, #9
 800642a:	d903      	bls.n	8006434 <_vfiprintf_r+0x1cc>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0c6      	beq.n	80063be <_vfiprintf_r+0x156>
 8006430:	9105      	str	r1, [sp, #20]
 8006432:	e7c4      	b.n	80063be <_vfiprintf_r+0x156>
 8006434:	fb0c 2101 	mla	r1, ip, r1, r2
 8006438:	4604      	mov	r4, r0
 800643a:	2301      	movs	r3, #1
 800643c:	e7f0      	b.n	8006420 <_vfiprintf_r+0x1b8>
 800643e:	ab03      	add	r3, sp, #12
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	462a      	mov	r2, r5
 8006444:	4b12      	ldr	r3, [pc, #72]	@ (8006490 <_vfiprintf_r+0x228>)
 8006446:	a904      	add	r1, sp, #16
 8006448:	4630      	mov	r0, r6
 800644a:	f7fd fdd3 	bl	8003ff4 <_printf_float>
 800644e:	4607      	mov	r7, r0
 8006450:	1c78      	adds	r0, r7, #1
 8006452:	d1d6      	bne.n	8006402 <_vfiprintf_r+0x19a>
 8006454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006456:	07d9      	lsls	r1, r3, #31
 8006458:	d405      	bmi.n	8006466 <_vfiprintf_r+0x1fe>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	059a      	lsls	r2, r3, #22
 800645e:	d402      	bmi.n	8006466 <_vfiprintf_r+0x1fe>
 8006460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006462:	f7fe fc07 	bl	8004c74 <__retarget_lock_release_recursive>
 8006466:	89ab      	ldrh	r3, [r5, #12]
 8006468:	065b      	lsls	r3, r3, #25
 800646a:	f53f af1f 	bmi.w	80062ac <_vfiprintf_r+0x44>
 800646e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006470:	e71e      	b.n	80062b0 <_vfiprintf_r+0x48>
 8006472:	ab03      	add	r3, sp, #12
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	462a      	mov	r2, r5
 8006478:	4b05      	ldr	r3, [pc, #20]	@ (8006490 <_vfiprintf_r+0x228>)
 800647a:	a904      	add	r1, sp, #16
 800647c:	4630      	mov	r0, r6
 800647e:	f7fe f851 	bl	8004524 <_printf_i>
 8006482:	e7e4      	b.n	800644e <_vfiprintf_r+0x1e6>
 8006484:	08006b80 	.word	0x08006b80
 8006488:	08006b8a 	.word	0x08006b8a
 800648c:	08003ff5 	.word	0x08003ff5
 8006490:	08006243 	.word	0x08006243
 8006494:	08006b86 	.word	0x08006b86

08006498 <__sflush_r>:
 8006498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	0716      	lsls	r6, r2, #28
 80064a2:	4605      	mov	r5, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	d454      	bmi.n	8006552 <__sflush_r+0xba>
 80064a8:	684b      	ldr	r3, [r1, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	dc02      	bgt.n	80064b4 <__sflush_r+0x1c>
 80064ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	dd48      	ble.n	8006546 <__sflush_r+0xae>
 80064b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d045      	beq.n	8006546 <__sflush_r+0xae>
 80064ba:	2300      	movs	r3, #0
 80064bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064c0:	682f      	ldr	r7, [r5, #0]
 80064c2:	6a21      	ldr	r1, [r4, #32]
 80064c4:	602b      	str	r3, [r5, #0]
 80064c6:	d030      	beq.n	800652a <__sflush_r+0x92>
 80064c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	0759      	lsls	r1, r3, #29
 80064ce:	d505      	bpl.n	80064dc <__sflush_r+0x44>
 80064d0:	6863      	ldr	r3, [r4, #4]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064d6:	b10b      	cbz	r3, 80064dc <__sflush_r+0x44>
 80064d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	2300      	movs	r3, #0
 80064de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b0      	blx	r6
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	d106      	bne.n	80064fa <__sflush_r+0x62>
 80064ec:	6829      	ldr	r1, [r5, #0]
 80064ee:	291d      	cmp	r1, #29
 80064f0:	d82b      	bhi.n	800654a <__sflush_r+0xb2>
 80064f2:	4a2a      	ldr	r2, [pc, #168]	@ (800659c <__sflush_r+0x104>)
 80064f4:	410a      	asrs	r2, r1
 80064f6:	07d6      	lsls	r6, r2, #31
 80064f8:	d427      	bmi.n	800654a <__sflush_r+0xb2>
 80064fa:	2200      	movs	r2, #0
 80064fc:	6062      	str	r2, [r4, #4]
 80064fe:	04d9      	lsls	r1, r3, #19
 8006500:	6922      	ldr	r2, [r4, #16]
 8006502:	6022      	str	r2, [r4, #0]
 8006504:	d504      	bpl.n	8006510 <__sflush_r+0x78>
 8006506:	1c42      	adds	r2, r0, #1
 8006508:	d101      	bne.n	800650e <__sflush_r+0x76>
 800650a:	682b      	ldr	r3, [r5, #0]
 800650c:	b903      	cbnz	r3, 8006510 <__sflush_r+0x78>
 800650e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006512:	602f      	str	r7, [r5, #0]
 8006514:	b1b9      	cbz	r1, 8006546 <__sflush_r+0xae>
 8006516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800651a:	4299      	cmp	r1, r3
 800651c:	d002      	beq.n	8006524 <__sflush_r+0x8c>
 800651e:	4628      	mov	r0, r5
 8006520:	f7ff f9f6 	bl	8005910 <_free_r>
 8006524:	2300      	movs	r3, #0
 8006526:	6363      	str	r3, [r4, #52]	@ 0x34
 8006528:	e00d      	b.n	8006546 <__sflush_r+0xae>
 800652a:	2301      	movs	r3, #1
 800652c:	4628      	mov	r0, r5
 800652e:	47b0      	blx	r6
 8006530:	4602      	mov	r2, r0
 8006532:	1c50      	adds	r0, r2, #1
 8006534:	d1c9      	bne.n	80064ca <__sflush_r+0x32>
 8006536:	682b      	ldr	r3, [r5, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0c6      	beq.n	80064ca <__sflush_r+0x32>
 800653c:	2b1d      	cmp	r3, #29
 800653e:	d001      	beq.n	8006544 <__sflush_r+0xac>
 8006540:	2b16      	cmp	r3, #22
 8006542:	d11e      	bne.n	8006582 <__sflush_r+0xea>
 8006544:	602f      	str	r7, [r5, #0]
 8006546:	2000      	movs	r0, #0
 8006548:	e022      	b.n	8006590 <__sflush_r+0xf8>
 800654a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800654e:	b21b      	sxth	r3, r3
 8006550:	e01b      	b.n	800658a <__sflush_r+0xf2>
 8006552:	690f      	ldr	r7, [r1, #16]
 8006554:	2f00      	cmp	r7, #0
 8006556:	d0f6      	beq.n	8006546 <__sflush_r+0xae>
 8006558:	0793      	lsls	r3, r2, #30
 800655a:	680e      	ldr	r6, [r1, #0]
 800655c:	bf08      	it	eq
 800655e:	694b      	ldreq	r3, [r1, #20]
 8006560:	600f      	str	r7, [r1, #0]
 8006562:	bf18      	it	ne
 8006564:	2300      	movne	r3, #0
 8006566:	eba6 0807 	sub.w	r8, r6, r7
 800656a:	608b      	str	r3, [r1, #8]
 800656c:	f1b8 0f00 	cmp.w	r8, #0
 8006570:	dde9      	ble.n	8006546 <__sflush_r+0xae>
 8006572:	6a21      	ldr	r1, [r4, #32]
 8006574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006576:	4643      	mov	r3, r8
 8006578:	463a      	mov	r2, r7
 800657a:	4628      	mov	r0, r5
 800657c:	47b0      	blx	r6
 800657e:	2800      	cmp	r0, #0
 8006580:	dc08      	bgt.n	8006594 <__sflush_r+0xfc>
 8006582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	f04f 30ff 	mov.w	r0, #4294967295
 8006590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006594:	4407      	add	r7, r0
 8006596:	eba8 0800 	sub.w	r8, r8, r0
 800659a:	e7e7      	b.n	800656c <__sflush_r+0xd4>
 800659c:	dfbffffe 	.word	0xdfbffffe

080065a0 <_fflush_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	690b      	ldr	r3, [r1, #16]
 80065a4:	4605      	mov	r5, r0
 80065a6:	460c      	mov	r4, r1
 80065a8:	b913      	cbnz	r3, 80065b0 <_fflush_r+0x10>
 80065aa:	2500      	movs	r5, #0
 80065ac:	4628      	mov	r0, r5
 80065ae:	bd38      	pop	{r3, r4, r5, pc}
 80065b0:	b118      	cbz	r0, 80065ba <_fflush_r+0x1a>
 80065b2:	6a03      	ldr	r3, [r0, #32]
 80065b4:	b90b      	cbnz	r3, 80065ba <_fflush_r+0x1a>
 80065b6:	f7fe f961 	bl	800487c <__sinit>
 80065ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f3      	beq.n	80065aa <_fflush_r+0xa>
 80065c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065c4:	07d0      	lsls	r0, r2, #31
 80065c6:	d404      	bmi.n	80065d2 <_fflush_r+0x32>
 80065c8:	0599      	lsls	r1, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_fflush_r+0x32>
 80065cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ce:	f7fe fb50 	bl	8004c72 <__retarget_lock_acquire_recursive>
 80065d2:	4628      	mov	r0, r5
 80065d4:	4621      	mov	r1, r4
 80065d6:	f7ff ff5f 	bl	8006498 <__sflush_r>
 80065da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065dc:	07da      	lsls	r2, r3, #31
 80065de:	4605      	mov	r5, r0
 80065e0:	d4e4      	bmi.n	80065ac <_fflush_r+0xc>
 80065e2:	89a3      	ldrh	r3, [r4, #12]
 80065e4:	059b      	lsls	r3, r3, #22
 80065e6:	d4e1      	bmi.n	80065ac <_fflush_r+0xc>
 80065e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ea:	f7fe fb43 	bl	8004c74 <__retarget_lock_release_recursive>
 80065ee:	e7dd      	b.n	80065ac <_fflush_r+0xc>

080065f0 <__swhatbuf_r>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	460c      	mov	r4, r1
 80065f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065f8:	2900      	cmp	r1, #0
 80065fa:	b096      	sub	sp, #88	@ 0x58
 80065fc:	4615      	mov	r5, r2
 80065fe:	461e      	mov	r6, r3
 8006600:	da0d      	bge.n	800661e <__swhatbuf_r+0x2e>
 8006602:	89a3      	ldrh	r3, [r4, #12]
 8006604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	bf14      	ite	ne
 800660e:	2340      	movne	r3, #64	@ 0x40
 8006610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006614:	2000      	movs	r0, #0
 8006616:	6031      	str	r1, [r6, #0]
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	b016      	add	sp, #88	@ 0x58
 800661c:	bd70      	pop	{r4, r5, r6, pc}
 800661e:	466a      	mov	r2, sp
 8006620:	f000 f848 	bl	80066b4 <_fstat_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	dbec      	blt.n	8006602 <__swhatbuf_r+0x12>
 8006628:	9901      	ldr	r1, [sp, #4]
 800662a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800662e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006632:	4259      	negs	r1, r3
 8006634:	4159      	adcs	r1, r3
 8006636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800663a:	e7eb      	b.n	8006614 <__swhatbuf_r+0x24>

0800663c <__smakebuf_r>:
 800663c:	898b      	ldrh	r3, [r1, #12]
 800663e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006640:	079d      	lsls	r5, r3, #30
 8006642:	4606      	mov	r6, r0
 8006644:	460c      	mov	r4, r1
 8006646:	d507      	bpl.n	8006658 <__smakebuf_r+0x1c>
 8006648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800664c:	6023      	str	r3, [r4, #0]
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	2301      	movs	r3, #1
 8006652:	6163      	str	r3, [r4, #20]
 8006654:	b003      	add	sp, #12
 8006656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006658:	ab01      	add	r3, sp, #4
 800665a:	466a      	mov	r2, sp
 800665c:	f7ff ffc8 	bl	80065f0 <__swhatbuf_r>
 8006660:	9f00      	ldr	r7, [sp, #0]
 8006662:	4605      	mov	r5, r0
 8006664:	4639      	mov	r1, r7
 8006666:	4630      	mov	r0, r6
 8006668:	f7ff f9c6 	bl	80059f8 <_malloc_r>
 800666c:	b948      	cbnz	r0, 8006682 <__smakebuf_r+0x46>
 800666e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006672:	059a      	lsls	r2, r3, #22
 8006674:	d4ee      	bmi.n	8006654 <__smakebuf_r+0x18>
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	f043 0302 	orr.w	r3, r3, #2
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	e7e2      	b.n	8006648 <__smakebuf_r+0xc>
 8006682:	89a3      	ldrh	r3, [r4, #12]
 8006684:	6020      	str	r0, [r4, #0]
 8006686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006692:	b15b      	cbz	r3, 80066ac <__smakebuf_r+0x70>
 8006694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006698:	4630      	mov	r0, r6
 800669a:	f000 f81d 	bl	80066d8 <_isatty_r>
 800669e:	b128      	cbz	r0, 80066ac <__smakebuf_r+0x70>
 80066a0:	89a3      	ldrh	r3, [r4, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	81a3      	strh	r3, [r4, #12]
 80066ac:	89a3      	ldrh	r3, [r4, #12]
 80066ae:	431d      	orrs	r5, r3
 80066b0:	81a5      	strh	r5, [r4, #12]
 80066b2:	e7cf      	b.n	8006654 <__smakebuf_r+0x18>

080066b4 <_fstat_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d07      	ldr	r5, [pc, #28]	@ (80066d4 <_fstat_r+0x20>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	602b      	str	r3, [r5, #0]
 80066c2:	f7fa fd8f 	bl	80011e4 <_fstat>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d102      	bne.n	80066d0 <_fstat_r+0x1c>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	b103      	cbz	r3, 80066d0 <_fstat_r+0x1c>
 80066ce:	6023      	str	r3, [r4, #0]
 80066d0:	bd38      	pop	{r3, r4, r5, pc}
 80066d2:	bf00      	nop
 80066d4:	200003a0 	.word	0x200003a0

080066d8 <_isatty_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d06      	ldr	r5, [pc, #24]	@ (80066f4 <_isatty_r+0x1c>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	602b      	str	r3, [r5, #0]
 80066e4:	f7fa fd8e 	bl	8001204 <_isatty>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d102      	bne.n	80066f2 <_isatty_r+0x1a>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	b103      	cbz	r3, 80066f2 <_isatty_r+0x1a>
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	200003a0 	.word	0x200003a0

080066f8 <_sbrk_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_sbrk_r+0x1c>)
 80066fc:	2300      	movs	r3, #0
 80066fe:	4604      	mov	r4, r0
 8006700:	4608      	mov	r0, r1
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fa fd96 	bl	8001234 <_sbrk>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d102      	bne.n	8006712 <_sbrk_r+0x1a>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	b103      	cbz	r3, 8006712 <_sbrk_r+0x1a>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	bd38      	pop	{r3, r4, r5, pc}
 8006714:	200003a0 	.word	0x200003a0

08006718 <memcpy>:
 8006718:	440a      	add	r2, r1
 800671a:	4291      	cmp	r1, r2
 800671c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006720:	d100      	bne.n	8006724 <memcpy+0xc>
 8006722:	4770      	bx	lr
 8006724:	b510      	push	{r4, lr}
 8006726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800672e:	4291      	cmp	r1, r2
 8006730:	d1f9      	bne.n	8006726 <memcpy+0xe>
 8006732:	bd10      	pop	{r4, pc}

08006734 <__assert_func>:
 8006734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006736:	4614      	mov	r4, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4b09      	ldr	r3, [pc, #36]	@ (8006760 <__assert_func+0x2c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4605      	mov	r5, r0
 8006740:	68d8      	ldr	r0, [r3, #12]
 8006742:	b954      	cbnz	r4, 800675a <__assert_func+0x26>
 8006744:	4b07      	ldr	r3, [pc, #28]	@ (8006764 <__assert_func+0x30>)
 8006746:	461c      	mov	r4, r3
 8006748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800674c:	9100      	str	r1, [sp, #0]
 800674e:	462b      	mov	r3, r5
 8006750:	4905      	ldr	r1, [pc, #20]	@ (8006768 <__assert_func+0x34>)
 8006752:	f000 f841 	bl	80067d8 <fiprintf>
 8006756:	f000 f851 	bl	80067fc <abort>
 800675a:	4b04      	ldr	r3, [pc, #16]	@ (800676c <__assert_func+0x38>)
 800675c:	e7f4      	b.n	8006748 <__assert_func+0x14>
 800675e:	bf00      	nop
 8006760:	20000018 	.word	0x20000018
 8006764:	08006bd6 	.word	0x08006bd6
 8006768:	08006ba8 	.word	0x08006ba8
 800676c:	08006b9b 	.word	0x08006b9b

08006770 <_calloc_r>:
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	fba1 5402 	umull	r5, r4, r1, r2
 8006776:	b93c      	cbnz	r4, 8006788 <_calloc_r+0x18>
 8006778:	4629      	mov	r1, r5
 800677a:	f7ff f93d 	bl	80059f8 <_malloc_r>
 800677e:	4606      	mov	r6, r0
 8006780:	b928      	cbnz	r0, 800678e <_calloc_r+0x1e>
 8006782:	2600      	movs	r6, #0
 8006784:	4630      	mov	r0, r6
 8006786:	bd70      	pop	{r4, r5, r6, pc}
 8006788:	220c      	movs	r2, #12
 800678a:	6002      	str	r2, [r0, #0]
 800678c:	e7f9      	b.n	8006782 <_calloc_r+0x12>
 800678e:	462a      	mov	r2, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7fe f9f1 	bl	8004b78 <memset>
 8006796:	e7f5      	b.n	8006784 <_calloc_r+0x14>

08006798 <__ascii_mbtowc>:
 8006798:	b082      	sub	sp, #8
 800679a:	b901      	cbnz	r1, 800679e <__ascii_mbtowc+0x6>
 800679c:	a901      	add	r1, sp, #4
 800679e:	b142      	cbz	r2, 80067b2 <__ascii_mbtowc+0x1a>
 80067a0:	b14b      	cbz	r3, 80067b6 <__ascii_mbtowc+0x1e>
 80067a2:	7813      	ldrb	r3, [r2, #0]
 80067a4:	600b      	str	r3, [r1, #0]
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	1e10      	subs	r0, r2, #0
 80067aa:	bf18      	it	ne
 80067ac:	2001      	movne	r0, #1
 80067ae:	b002      	add	sp, #8
 80067b0:	4770      	bx	lr
 80067b2:	4610      	mov	r0, r2
 80067b4:	e7fb      	b.n	80067ae <__ascii_mbtowc+0x16>
 80067b6:	f06f 0001 	mvn.w	r0, #1
 80067ba:	e7f8      	b.n	80067ae <__ascii_mbtowc+0x16>

080067bc <__ascii_wctomb>:
 80067bc:	4603      	mov	r3, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	b141      	cbz	r1, 80067d4 <__ascii_wctomb+0x18>
 80067c2:	2aff      	cmp	r2, #255	@ 0xff
 80067c4:	d904      	bls.n	80067d0 <__ascii_wctomb+0x14>
 80067c6:	228a      	movs	r2, #138	@ 0x8a
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f04f 30ff 	mov.w	r0, #4294967295
 80067ce:	4770      	bx	lr
 80067d0:	700a      	strb	r2, [r1, #0]
 80067d2:	2001      	movs	r0, #1
 80067d4:	4770      	bx	lr
	...

080067d8 <fiprintf>:
 80067d8:	b40e      	push	{r1, r2, r3}
 80067da:	b503      	push	{r0, r1, lr}
 80067dc:	4601      	mov	r1, r0
 80067de:	ab03      	add	r3, sp, #12
 80067e0:	4805      	ldr	r0, [pc, #20]	@ (80067f8 <fiprintf+0x20>)
 80067e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067e6:	6800      	ldr	r0, [r0, #0]
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	f7ff fd3d 	bl	8006268 <_vfiprintf_r>
 80067ee:	b002      	add	sp, #8
 80067f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80067f4:	b003      	add	sp, #12
 80067f6:	4770      	bx	lr
 80067f8:	20000018 	.word	0x20000018

080067fc <abort>:
 80067fc:	b508      	push	{r3, lr}
 80067fe:	2006      	movs	r0, #6
 8006800:	f000 f82c 	bl	800685c <raise>
 8006804:	2001      	movs	r0, #1
 8006806:	f7fa fc9d 	bl	8001144 <_exit>

0800680a <_raise_r>:
 800680a:	291f      	cmp	r1, #31
 800680c:	b538      	push	{r3, r4, r5, lr}
 800680e:	4605      	mov	r5, r0
 8006810:	460c      	mov	r4, r1
 8006812:	d904      	bls.n	800681e <_raise_r+0x14>
 8006814:	2316      	movs	r3, #22
 8006816:	6003      	str	r3, [r0, #0]
 8006818:	f04f 30ff 	mov.w	r0, #4294967295
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006820:	b112      	cbz	r2, 8006828 <_raise_r+0x1e>
 8006822:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006826:	b94b      	cbnz	r3, 800683c <_raise_r+0x32>
 8006828:	4628      	mov	r0, r5
 800682a:	f000 f831 	bl	8006890 <_getpid_r>
 800682e:	4622      	mov	r2, r4
 8006830:	4601      	mov	r1, r0
 8006832:	4628      	mov	r0, r5
 8006834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006838:	f000 b818 	b.w	800686c <_kill_r>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d00a      	beq.n	8006856 <_raise_r+0x4c>
 8006840:	1c59      	adds	r1, r3, #1
 8006842:	d103      	bne.n	800684c <_raise_r+0x42>
 8006844:	2316      	movs	r3, #22
 8006846:	6003      	str	r3, [r0, #0]
 8006848:	2001      	movs	r0, #1
 800684a:	e7e7      	b.n	800681c <_raise_r+0x12>
 800684c:	2100      	movs	r1, #0
 800684e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006852:	4620      	mov	r0, r4
 8006854:	4798      	blx	r3
 8006856:	2000      	movs	r0, #0
 8006858:	e7e0      	b.n	800681c <_raise_r+0x12>
	...

0800685c <raise>:
 800685c:	4b02      	ldr	r3, [pc, #8]	@ (8006868 <raise+0xc>)
 800685e:	4601      	mov	r1, r0
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	f7ff bfd2 	b.w	800680a <_raise_r>
 8006866:	bf00      	nop
 8006868:	20000018 	.word	0x20000018

0800686c <_kill_r>:
 800686c:	b538      	push	{r3, r4, r5, lr}
 800686e:	4d07      	ldr	r5, [pc, #28]	@ (800688c <_kill_r+0x20>)
 8006870:	2300      	movs	r3, #0
 8006872:	4604      	mov	r4, r0
 8006874:	4608      	mov	r0, r1
 8006876:	4611      	mov	r1, r2
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	f7fa fc53 	bl	8001124 <_kill>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	d102      	bne.n	8006888 <_kill_r+0x1c>
 8006882:	682b      	ldr	r3, [r5, #0]
 8006884:	b103      	cbz	r3, 8006888 <_kill_r+0x1c>
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	bd38      	pop	{r3, r4, r5, pc}
 800688a:	bf00      	nop
 800688c:	200003a0 	.word	0x200003a0

08006890 <_getpid_r>:
 8006890:	f7fa bc40 	b.w	8001114 <_getpid>

08006894 <_init>:
 8006894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006896:	bf00      	nop
 8006898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800689a:	bc08      	pop	{r3}
 800689c:	469e      	mov	lr, r3
 800689e:	4770      	bx	lr

080068a0 <_fini>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr
