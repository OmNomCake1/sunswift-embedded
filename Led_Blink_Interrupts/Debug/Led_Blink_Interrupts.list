
Led_Blink_Interrupts.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002024  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080021fc  080021fc  000031fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800220c  0800220c  0000320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002210  08002210  00003210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002214  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002220  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002220  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8a3  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001925  00000000  00000000  0000e8df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf0  00000000  00000000  00010208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000931  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c765  00000000  00000000  00011729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf28  00000000  00000000  0002de8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bb9a8  00000000  00000000  00039db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f575e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003204  00000000  00000000  000f57a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f89a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080021e4 	.word	0x080021e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080021e4 	.word	0x080021e4

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9a3 	bl	8000566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f898 	bl	8000358 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000228:	f000 f848 	bl	80002bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 800022c:	4802      	ldr	r0, [pc, #8]	@ (8000238 <main+0x20>)
 800022e:	f001 fad1 	bl	80017d4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000232:	bf00      	nop
 8000234:	e7fd      	b.n	8000232 <main+0x1a>
 8000236:	bf00      	nop
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	@ 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2238      	movs	r2, #56	@ 0x38
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f001 ff9e 	bl	800218c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800025e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000262:	f000 fcb5 	bl	8000bd0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000266:	2302      	movs	r3, #2
 8000268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800026a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800026e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000270:	2340      	movs	r3, #64	@ 0x40
 8000272:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000274:	2300      	movs	r3, #0
 8000276:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fd5b 	bl	8000d38 <HAL_RCC_OscConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000288:	f000 f8aa 	bl	80003e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028c:	230f      	movs	r3, #15
 800028e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000290:	2301      	movs	r3, #1
 8000292:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 f859 	bl	800135c <HAL_RCC_ClockConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002b0:	f000 f896 	bl	80003e0 <Error_Handler>
  }
}
 80002b4:	bf00      	nop
 80002b6:	3750      	adds	r7, #80	@ 0x50
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}

080002bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002c2:	f107 0310 	add.w	r3, r7, #16
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002e4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80002e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80002f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <MX_TIM2_Init+0x98>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000300:	2280      	movs	r2, #128	@ 0x80
 8000302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000304:	4813      	ldr	r0, [pc, #76]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000306:	f001 fa0d 	bl	8001724 <HAL_TIM_Base_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000310:	f000 f866 	bl	80003e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800031a:	f107 0310 	add.w	r3, r7, #16
 800031e:	4619      	mov	r1, r3
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <MX_TIM2_Init+0x98>)
 8000322:	f001 fc11 	bl	8001b48 <HAL_TIM_ConfigClockSource>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800032c:	f000 f858 	bl	80003e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000330:	2300      	movs	r3, #0
 8000332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	@ (8000354 <MX_TIM2_Init+0x98>)
 800033e:	f001 fe5d 	bl	8001ffc <HAL_TIMEx_MasterConfigSynchronization>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000348:	f000 f84a 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b086      	sub	sp, #24
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b10      	ldr	r3, [pc, #64]	@ (80003b0 <MX_GPIO_Init+0x58>)
 800036e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000370:	4a0f      	ldr	r2, [pc, #60]	@ (80003b0 <MX_GPIO_Init+0x58>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000378:	4b0d      	ldr	r3, [pc, #52]	@ (80003b0 <MX_GPIO_Init+0x58>)
 800037a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037c:	f003 0302 	and.w	r3, r3, #2
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	480a      	ldr	r0, [pc, #40]	@ (80003b4 <MX_GPIO_Init+0x5c>)
 800038a:	f000 fbef 	bl	8000b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800038e:	2320      	movs	r3, #32
 8000390:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	4619      	mov	r1, r3
 80003a2:	4804      	ldr	r0, [pc, #16]	@ (80003b4 <MX_GPIO_Init+0x5c>)
 80003a4:	f000 fa60 	bl	8000868 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a8:	bf00      	nop
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40021000 	.word	0x40021000
 80003b4:	48000400 	.word	0x48000400

080003b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80003c8:	d103      	bne.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x1a>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80003ca:	2120      	movs	r1, #32
 80003cc:	4803      	ldr	r0, [pc, #12]	@ (80003dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80003ce:	f000 fbe5 	bl	8000b9c <HAL_GPIO_TogglePin>
	}
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	48000400 	.word	0x48000400

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x44>)
 80003f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000430 <HAL_MspInit+0x44>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80003fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000430 <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b09      	ldr	r3, [pc, #36]	@ (8000430 <HAL_MspInit+0x44>)
 800040c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800040e:	4a08      	ldr	r2, [pc, #32]	@ (8000430 <HAL_MspInit+0x44>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000414:	6593      	str	r3, [r2, #88]	@ 0x58
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041e:	603b      	str	r3, [r7, #0]
 8000420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000422:	f000 fc79 	bl	8000d18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000

08000434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000444:	d113      	bne.n	800046e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <HAL_TIM_Base_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044a:	4a0b      	ldr	r2, [pc, #44]	@ (8000478 <HAL_TIM_Base_MspInit+0x44>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6593      	str	r3, [r2, #88]	@ 0x58
 8000452:	4b09      	ldr	r3, [pc, #36]	@ (8000478 <HAL_TIM_Base_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800045e:	2200      	movs	r2, #0
 8000460:	2100      	movs	r1, #0
 8000462:	201c      	movs	r0, #28
 8000464:	f000 f9cb 	bl	80007fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000468:	201c      	movs	r0, #28
 800046a:	f000 f9e2 	bl	8000832 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <NMI_Handler+0x4>

08000484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <HardFault_Handler+0x4>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <MemManage_Handler+0x4>

08000494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d2:	f000 f89b 	bl	800060c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80004e0:	4802      	ldr	r0, [pc, #8]	@ (80004ec <TIM2_IRQHandler+0x10>)
 80004e2:	f001 f9e1 	bl	80018a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	20000028 	.word	0x20000028

080004f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <SystemInit+0x20>)
 80004f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <SystemInit+0x20>)
 80004fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	e000ed00 	.word	0xe000ed00

08000514 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000514:	480d      	ldr	r0, [pc, #52]	@ (800054c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000516:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000518:	f7ff ffea 	bl	80004f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480c      	ldr	r0, [pc, #48]	@ (8000550 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490d      	ldr	r1, [pc, #52]	@ (8000554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0a      	ldr	r2, [pc, #40]	@ (800055c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0a      	ldr	r4, [pc, #40]	@ (8000560 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000542:	f001 fe2b 	bl	800219c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000546:	f7ff fe67 	bl	8000218 <main>

0800054a <LoopForever>:

LoopForever:
    b LoopForever
 800054a:	e7fe      	b.n	800054a <LoopForever>
  ldr   r0, =_estack
 800054c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000554:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000558:	08002214 	.word	0x08002214
  ldr r2, =_sbss
 800055c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000560:	20000078 	.word	0x20000078

08000564 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000564:	e7fe      	b.n	8000564 <ADC1_2_IRQHandler>

08000566 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b082      	sub	sp, #8
 800056a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800056c:	2300      	movs	r3, #0
 800056e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f939 	bl	80007e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000576:	200f      	movs	r0, #15
 8000578:	f000 f80e 	bl	8000598 <HAL_InitTick>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d002      	beq.n	8000588 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	71fb      	strb	r3, [r7, #7]
 8000586:	e001      	b.n	800058c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000588:	f7ff ff30 	bl	80003ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800058c:	79fb      	ldrb	r3, [r7, #7]

}
 800058e:	4618      	mov	r0, r3
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005a4:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <HAL_InitTick+0x68>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d022      	beq.n	80005f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_InitTick+0x6c>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <HAL_InitTick+0x68>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80005bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 f944 	bl	800084e <HAL_SYSTICK_Config>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10f      	bne.n	80005ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b0f      	cmp	r3, #15
 80005d0:	d809      	bhi.n	80005e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d2:	2200      	movs	r2, #0
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	f04f 30ff 	mov.w	r0, #4294967295
 80005da:	f000 f910 	bl	80007fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005de:	4a0a      	ldr	r2, [pc, #40]	@ (8000608 <HAL_InitTick+0x70>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	e007      	b.n	80005f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	73fb      	strb	r3, [r7, #15]
 80005ea:	e004      	b.n	80005f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005ec:	2301      	movs	r3, #1
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	e001      	b.n	80005f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000008 	.word	0x20000008
 8000604:	20000000 	.word	0x20000000
 8000608:	20000004 	.word	0x20000004

0800060c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_IncTick+0x1c>)
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_IncTick+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4413      	add	r3, r2
 800061a:	4a03      	ldr	r2, [pc, #12]	@ (8000628 <HAL_IncTick+0x1c>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr
 8000628:	20000074 	.word	0x20000074
 800062c:	20000008 	.word	0x20000008

08000630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000074 	.word	0x20000074

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	db0b      	blt.n	80006d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	f003 021f 	and.w	r2, r3, #31
 80006c4:	4907      	ldr	r1, [pc, #28]	@ (80006e4 <__NVIC_EnableIRQ+0x38>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	095b      	lsrs	r3, r3, #5
 80006cc:	2001      	movs	r0, #1
 80006ce:	fa00 f202 	lsl.w	r2, r0, r2
 80006d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	db0a      	blt.n	8000712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	490c      	ldr	r1, [pc, #48]	@ (8000734 <__NVIC_SetPriority+0x4c>)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	0112      	lsls	r2, r2, #4
 8000708:	b2d2      	uxtb	r2, r2
 800070a:	440b      	add	r3, r1
 800070c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000710:	e00a      	b.n	8000728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4908      	ldr	r1, [pc, #32]	@ (8000738 <__NVIC_SetPriority+0x50>)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	f003 030f 	and.w	r3, r3, #15
 800071e:	3b04      	subs	r3, #4
 8000720:	0112      	lsls	r2, r2, #4
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	440b      	add	r3, r1
 8000726:	761a      	strb	r2, [r3, #24]
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800073c:	b480      	push	{r7}
 800073e:	b089      	sub	sp, #36	@ 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	2b04      	cmp	r3, #4
 8000758:	bf28      	it	cs
 800075a:	2304      	movcs	r3, #4
 800075c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3304      	adds	r3, #4
 8000762:	2b06      	cmp	r3, #6
 8000764:	d902      	bls.n	800076c <NVIC_EncodePriority+0x30>
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	3b03      	subs	r3, #3
 800076a:	e000      	b.n	800076e <NVIC_EncodePriority+0x32>
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	f04f 32ff 	mov.w	r2, #4294967295
 8000774:	69bb      	ldr	r3, [r7, #24]
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	43da      	mvns	r2, r3
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	401a      	ands	r2, r3
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000784:	f04f 31ff 	mov.w	r1, #4294967295
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43d9      	mvns	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	4313      	orrs	r3, r2
         );
}
 8000796:	4618      	mov	r0, r3
 8000798:	3724      	adds	r7, #36	@ 0x24
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
	...

080007a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007b4:	d301      	bcc.n	80007ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007b6:	2301      	movs	r3, #1
 80007b8:	e00f      	b.n	80007da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ba:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <SysTick_Config+0x40>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c2:	210f      	movs	r1, #15
 80007c4:	f04f 30ff 	mov.w	r0, #4294967295
 80007c8:	f7ff ff8e 	bl	80006e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <SysTick_Config+0x40>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <SysTick_Config+0x40>)
 80007d4:	2207      	movs	r2, #7
 80007d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	e000e010 	.word	0xe000e010

080007e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff29 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	4603      	mov	r3, r0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800080c:	f7ff ff40 	bl	8000690 <__NVIC_GetPriorityGrouping>
 8000810:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	68b9      	ldr	r1, [r7, #8]
 8000816:	6978      	ldr	r0, [r7, #20]
 8000818:	f7ff ff90 	bl	800073c <NVIC_EncodePriority>
 800081c:	4602      	mov	r2, r0
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff5f 	bl	80006e8 <__NVIC_SetPriority>
}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff33 	bl	80006ac <__NVIC_EnableIRQ>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b082      	sub	sp, #8
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa4 	bl	80007a4 <SysTick_Config>
 800085c:	4603      	mov	r3, r0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b480      	push	{r7}
 800086a:	b087      	sub	sp, #28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000876:	e15a      	b.n	8000b2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	2101      	movs	r1, #1
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	fa01 f303 	lsl.w	r3, r1, r3
 8000884:	4013      	ands	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	2b00      	cmp	r3, #0
 800088c:	f000 814c 	beq.w	8000b28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f003 0303 	and.w	r3, r3, #3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d005      	beq.n	80008a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b03      	cmp	r3, #3
 8000914:	d017      	beq.n	8000946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	68db      	ldr	r3, [r3, #12]
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	2203      	movs	r2, #3
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	693a      	ldr	r2, [r7, #16]
 800093c:	4313      	orrs	r3, r2
 800093e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	2b02      	cmp	r3, #2
 8000950:	d123      	bne.n	800099a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	220f      	movs	r2, #15
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	43db      	mvns	r3, r3
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4013      	ands	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	691a      	ldr	r2, [r3, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	f003 0307 	and.w	r3, r3, #7
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	08da      	lsrs	r2, r3, #3
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3208      	adds	r2, #8
 8000994:	6939      	ldr	r1, [r7, #16]
 8000996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	2203      	movs	r2, #3
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4013      	ands	r3, r2
 80009b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f003 0203 	and.w	r2, r3, #3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 80a6 	beq.w	8000b28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	4b5b      	ldr	r3, [pc, #364]	@ (8000b4c <HAL_GPIO_Init+0x2e4>)
 80009de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009e0:	4a5a      	ldr	r2, [pc, #360]	@ (8000b4c <HAL_GPIO_Init+0x2e4>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80009e8:	4b58      	ldr	r3, [pc, #352]	@ (8000b4c <HAL_GPIO_Init+0x2e4>)
 80009ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009f4:	4a56      	ldr	r2, [pc, #344]	@ (8000b50 <HAL_GPIO_Init+0x2e8>)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	f003 0303 	and.w	r3, r3, #3
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	220f      	movs	r2, #15
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a1e:	d01f      	beq.n	8000a60 <HAL_GPIO_Init+0x1f8>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a4c      	ldr	r2, [pc, #304]	@ (8000b54 <HAL_GPIO_Init+0x2ec>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d019      	beq.n	8000a5c <HAL_GPIO_Init+0x1f4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a4b      	ldr	r2, [pc, #300]	@ (8000b58 <HAL_GPIO_Init+0x2f0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d013      	beq.n	8000a58 <HAL_GPIO_Init+0x1f0>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a4a      	ldr	r2, [pc, #296]	@ (8000b5c <HAL_GPIO_Init+0x2f4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d00d      	beq.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a49      	ldr	r2, [pc, #292]	@ (8000b60 <HAL_GPIO_Init+0x2f8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d007      	beq.n	8000a50 <HAL_GPIO_Init+0x1e8>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a48      	ldr	r2, [pc, #288]	@ (8000b64 <HAL_GPIO_Init+0x2fc>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d101      	bne.n	8000a4c <HAL_GPIO_Init+0x1e4>
 8000a48:	2305      	movs	r3, #5
 8000a4a:	e00a      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a4c:	2306      	movs	r3, #6
 8000a4e:	e008      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a50:	2304      	movs	r3, #4
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1fa>
 8000a60:	2300      	movs	r3, #0
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a72:	4937      	ldr	r1, [pc, #220]	@ (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a80:	4b39      	ldr	r3, [pc, #228]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa4:	4a30      	ldr	r2, [pc, #192]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ace:	4a26      	ldr	r2, [pc, #152]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b22:	4a11      	ldr	r2, [pc, #68]	@ (8000b68 <HAL_GPIO_Init+0x300>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	fa22 f303 	lsr.w	r3, r2, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f47f ae9d 	bne.w	8000878 <HAL_GPIO_Init+0x10>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	371c      	adds	r7, #28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40010000 	.word	0x40010000
 8000b54:	48000400 	.word	0x48000400
 8000b58:	48000800 	.word	0x48000800
 8000b5c:	48000c00 	.word	0x48000c00
 8000b60:	48001000 	.word	0x48001000
 8000b64:	48001400 	.word	0x48001400
 8000b68:	40010400 	.word	0x40010400

08000b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	807b      	strh	r3, [r7, #2]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b7c:	787b      	ldrb	r3, [r7, #1]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d003      	beq.n	8000b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b82:	887a      	ldrh	r2, [r7, #2]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43d9      	mvns	r1, r3
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	400b      	ands	r3, r1
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d141      	bne.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bde:	4b4b      	ldr	r3, [pc, #300]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bea:	d131      	bne.n	8000c50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bec:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bf2:	4a46      	ldr	r2, [pc, #280]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c04:	4a41      	ldr	r2, [pc, #260]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c0c:	4b40      	ldr	r3, [pc, #256]	@ (8000d10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2232      	movs	r2, #50	@ 0x32
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	4a3f      	ldr	r2, [pc, #252]	@ (8000d14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	3301      	adds	r3, #1
 8000c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c22:	e002      	b.n	8000c2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c2a:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c36:	d102      	bne.n	8000c3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d1f2      	bne.n	8000c24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c3e:	4b33      	ldr	r3, [pc, #204]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c4a:	d158      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	e057      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c50:	4b2e      	ldr	r3, [pc, #184]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c56:	4a2d      	ldr	r2, [pc, #180]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c5c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c60:	e04d      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c68:	d141      	bne.n	8000cee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c6a:	4b28      	ldr	r3, [pc, #160]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c76:	d131      	bne.n	8000cdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c7e:	4a23      	ldr	r2, [pc, #140]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c90:	4a1e      	ldr	r2, [pc, #120]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c98:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2232      	movs	r2, #50	@ 0x32
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9b      	lsrs	r3, r3, #18
 8000caa:	3301      	adds	r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cae:	e002      	b.n	8000cb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cc2:	d102      	bne.n	8000cca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f2      	bne.n	8000cb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cd6:	d112      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	e011      	b.n	8000d00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000cec:	e007      	b.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cf8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cfc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40007000 	.word	0x40007000
 8000d10:	20000000 	.word	0x20000000
 8000d14:	431bde83 	.word	0x431bde83

08000d18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a04      	ldr	r2, [pc, #16]	@ (8000d34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d26:	6093      	str	r3, [r2, #8]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40007000 	.word	0x40007000

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e2fe      	b.n	8001348 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d075      	beq.n	8000e42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d56:	4b97      	ldr	r3, [pc, #604]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f003 030c 	and.w	r3, r3, #12
 8000d5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d60:	4b94      	ldr	r3, [pc, #592]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2b0c      	cmp	r3, #12
 8000d6e:	d102      	bne.n	8000d76 <HAL_RCC_OscConfig+0x3e>
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d002      	beq.n	8000d7c <HAL_RCC_OscConfig+0x44>
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d10b      	bne.n	8000d94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d7c:	4b8d      	ldr	r3, [pc, #564]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d05b      	beq.n	8000e40 <HAL_RCC_OscConfig+0x108>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d157      	bne.n	8000e40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e2d9      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d9c:	d106      	bne.n	8000dac <HAL_RCC_OscConfig+0x74>
 8000d9e:	4b85      	ldr	r3, [pc, #532]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a84      	ldr	r2, [pc, #528]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01d      	b.n	8000de8 <HAL_RCC_OscConfig+0xb0>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x98>
 8000db6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a7e      	ldr	r2, [pc, #504]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b7c      	ldr	r3, [pc, #496]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7b      	ldr	r2, [pc, #492]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0xb0>
 8000dd0:	4b78      	ldr	r3, [pc, #480]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a77      	ldr	r2, [pc, #476]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b75      	ldr	r3, [pc, #468]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a74      	ldr	r2, [pc, #464]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df0:	f7ff fc1e 	bl	8000630 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fc1a 	bl	8000630 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	@ 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e29e      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0xc0>
 8000e16:	e014      	b.n	8000e42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e18:	f7ff fc0a 	bl	8000630 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fc06 	bl	8000630 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	@ 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e28a      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e32:	4b60      	ldr	r3, [pc, #384]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0xe8>
 8000e3e:	e000      	b.n	8000e42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d075      	beq.n	8000f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4e:	4b59      	ldr	r3, [pc, #356]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e58:	4b56      	ldr	r3, [pc, #344]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2b0c      	cmp	r3, #12
 8000e66:	d102      	bne.n	8000e6e <HAL_RCC_OscConfig+0x136>
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d002      	beq.n	8000e74 <HAL_RCC_OscConfig+0x13c>
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	d11f      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e74:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <HAL_RCC_OscConfig+0x154>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e25d      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	4b49      	ldr	r3, [pc, #292]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	061b      	lsls	r3, r3, #24
 8000e9a:	4946      	ldr	r1, [pc, #280]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000ea0:	4b45      	ldr	r3, [pc, #276]	@ (8000fb8 <HAL_RCC_OscConfig+0x280>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb77 	bl	8000598 <HAL_InitTick>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d043      	beq.n	8000f38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e249      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d023      	beq.n	8000f04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbb2 	bl	8000630 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed0:	f7ff fbae 	bl	8000630 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e232      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f0      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	061b      	lsls	r3, r3, #24
 8000efc:	492d      	ldr	r1, [pc, #180]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000efe:	4313      	orrs	r3, r2
 8000f00:	604b      	str	r3, [r1, #4]
 8000f02:	e01a      	b.n	8000f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f04:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2a      	ldr	r2, [pc, #168]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f10:	f7ff fb8e 	bl	8000630 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f18:	f7ff fb8a 	bl	8000630 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e20e      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f2a:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x1e0>
 8000f36:	e000      	b.n	8000f3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d041      	beq.n	8000fca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01c      	beq.n	8000f88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f54:	4a17      	ldr	r2, [pc, #92]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f5e:	f7ff fb67 	bl	8000630 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f66:	f7ff fb63 	bl	8000630 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e1e7      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0ef      	beq.n	8000f66 <HAL_RCC_OscConfig+0x22e>
 8000f86:	e020      	b.n	8000fca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f8e:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_RCC_OscConfig+0x27c>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f98:	f7ff fb4a 	bl	8000630 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f9e:	e00d      	b.n	8000fbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fb46 	bl	8000630 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d906      	bls.n	8000fbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e1ca      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
 8000fb2:	bf00      	nop
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8000fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ea      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80a6 	beq.w	8001124 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fdc:	4b84      	ldr	r3, [pc, #528]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8000fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d101      	bne.n	8000fec <HAL_RCC_OscConfig+0x2b4>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <HAL_RCC_OscConfig+0x2b6>
 8000fec:	2300      	movs	r3, #0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800100e:	4b79      	ldr	r3, [pc, #484]	@ (80011f4 <HAL_RCC_OscConfig+0x4bc>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800101a:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <HAL_RCC_OscConfig+0x4bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <HAL_RCC_OscConfig+0x4bc>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb03 	bl	8000630 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff faff 	bl	8000630 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e183      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001040:	4b6c      	ldr	r3, [pc, #432]	@ (80011f4 <HAL_RCC_OscConfig+0x4bc>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_RCC_OscConfig+0x32e>
 8001054:	4b66      	ldr	r3, [pc, #408]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800105a:	4a65      	ldr	r2, [pc, #404]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001064:	e024      	b.n	80010b0 <HAL_RCC_OscConfig+0x378>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	2b05      	cmp	r3, #5
 800106c:	d110      	bne.n	8001090 <HAL_RCC_OscConfig+0x358>
 800106e:	4b60      	ldr	r3, [pc, #384]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001074:	4a5e      	ldr	r2, [pc, #376]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800107e:	4b5c      	ldr	r3, [pc, #368]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001084:	4a5a      	ldr	r2, [pc, #360]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800108e:	e00f      	b.n	80010b0 <HAL_RCC_OscConfig+0x378>
 8001090:	4b57      	ldr	r3, [pc, #348]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001096:	4a56      	ldr	r2, [pc, #344]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80010a0:	4b53      	ldr	r3, [pc, #332]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80010a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010a6:	4a52      	ldr	r2, [pc, #328]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d016      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b8:	f7ff faba 	bl	8000630 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c0:	f7ff fab6 	bl	8000630 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e138      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010d6:	4b46      	ldr	r3, [pc, #280]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ed      	beq.n	80010c0 <HAL_RCC_OscConfig+0x388>
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e6:	f7ff faa3 	bl	8000630 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fa9f 	bl	8000630 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e121      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001104:	4b3a      	ldr	r3, [pc, #232]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1ed      	bne.n	80010ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001112:	7ffb      	ldrb	r3, [r7, #31]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001118:	4b35      	ldr	r3, [pc, #212]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800111c:	4a34      	ldr	r2, [pc, #208]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800111e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001122:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0320 	and.w	r3, r3, #32
 800112c:	2b00      	cmp	r3, #0
 800112e:	d03c      	beq.n	80011aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d01c      	beq.n	8001172 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001138:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800113e:	4a2c      	ldr	r2, [pc, #176]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001148:	f7ff fa72 	bl	8000630 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001150:	f7ff fa6e 	bl	8000630 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e0f2      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001164:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0ef      	beq.n	8001150 <HAL_RCC_OscConfig+0x418>
 8001170:	e01b      	b.n	80011aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001172:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 8001174:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001178:	4a1d      	ldr	r2, [pc, #116]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001182:	f7ff fa55 	bl	8000630 <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800118a:	f7ff fa51 	bl	8000630 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e0d5      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800119c:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 800119e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1ef      	bne.n	800118a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80c9 	beq.w	8001346 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011b4:	4b0e      	ldr	r3, [pc, #56]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f003 030c 	and.w	r3, r3, #12
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	f000 8083 	beq.w	80012c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d15e      	bne.n	8001288 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_RCC_OscConfig+0x4b8>)
 80011d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fa2b 	bl	8000630 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011dc:	e00c      	b.n	80011f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011de:	f7ff fa27 	bl	8000630 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d905      	bls.n	80011f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e0ab      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011f8:	4b55      	ldr	r3, [pc, #340]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ec      	bne.n	80011de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001204:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	4b52      	ldr	r3, [pc, #328]	@ (8001354 <HAL_RCC_OscConfig+0x61c>)
 800120a:	4013      	ands	r3, r2
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6a11      	ldr	r1, [r2, #32]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001214:	3a01      	subs	r2, #1
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	4311      	orrs	r1, r2
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800121e:	0212      	lsls	r2, r2, #8
 8001220:	4311      	orrs	r1, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001226:	0852      	lsrs	r2, r2, #1
 8001228:	3a01      	subs	r2, #1
 800122a:	0552      	lsls	r2, r2, #21
 800122c:	4311      	orrs	r1, r2
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001232:	0852      	lsrs	r2, r2, #1
 8001234:	3a01      	subs	r2, #1
 8001236:	0652      	lsls	r2, r2, #25
 8001238:	4311      	orrs	r1, r2
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800123e:	06d2      	lsls	r2, r2, #27
 8001240:	430a      	orrs	r2, r1
 8001242:	4943      	ldr	r1, [pc, #268]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 8001244:	4313      	orrs	r3, r2
 8001246:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a40      	ldr	r2, [pc, #256]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800124e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001252:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001254:	4b3e      	ldr	r3, [pc, #248]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a3d      	ldr	r2, [pc, #244]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800125a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800125e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001260:	f7ff f9e6 	bl	8000630 <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff f9e2 	bl	8000630 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e066      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127a:	4b35      	ldr	r3, [pc, #212]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x530>
 8001286:	e05e      	b.n	8001346 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a30      	ldr	r2, [pc, #192]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 800128e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff f9cc 	bl	8000630 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129a:	e008      	b.n	80012ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129c:	f7ff f9c8 	bl	8000630 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e04c      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f0      	bne.n	800129c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	4924      	ldr	r1, [pc, #144]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 80012c0:	4b25      	ldr	r3, [pc, #148]	@ (8001358 <HAL_RCC_OscConfig+0x620>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	60cb      	str	r3, [r1, #12]
 80012c6:	e03e      	b.n	8001346 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e039      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80012d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_RCC_OscConfig+0x618>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f003 0203 	and.w	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d12c      	bne.n	8001342 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	3b01      	subs	r3, #1
 80012f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d123      	bne.n	8001342 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001304:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001306:	429a      	cmp	r2, r3
 8001308:	d11b      	bne.n	8001342 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001316:	429a      	cmp	r2, r3
 8001318:	d113      	bne.n	8001342 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	3b01      	subs	r3, #1
 8001328:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d109      	bne.n	8001342 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001338:	085b      	lsrs	r3, r3, #1
 800133a:	3b01      	subs	r3, #1
 800133c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800133e:	429a      	cmp	r2, r3
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40021000 	.word	0x40021000
 8001354:	019f800c 	.word	0x019f800c
 8001358:	feeefffc 	.word	0xfeeefffc

0800135c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e11e      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001374:	4b91      	ldr	r3, [pc, #580]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d910      	bls.n	80013a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b8e      	ldr	r3, [pc, #568]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 020f 	bic.w	r2, r3, #15
 800138a:	498c      	ldr	r1, [pc, #560]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b8a      	ldr	r3, [pc, #552]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e106      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d073      	beq.n	8001498 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d129      	bne.n	800140c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013b8:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0f4      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80013c8:	f000 f966 	bl	8001698 <RCC_GetSysClockFreqFromPLLSource>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4a7c      	ldr	r2, [pc, #496]	@ (80015c4 <HAL_RCC_ClockConfig+0x268>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d93f      	bls.n	8001456 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013d6:	4b7a      	ldr	r3, [pc, #488]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d009      	beq.n	80013f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d033      	beq.n	8001456 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d12f      	bne.n	8001456 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013f6:	4b72      	ldr	r3, [pc, #456]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013fe:	4a70      	ldr	r2, [pc, #448]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e024      	b.n	8001456 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d107      	bne.n	8001424 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001414:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e0c6      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001424:	4b66      	ldr	r3, [pc, #408]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e0be      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001434:	f000 f8ce 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 8001438:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4a61      	ldr	r2, [pc, #388]	@ (80015c4 <HAL_RCC_ClockConfig+0x268>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d909      	bls.n	8001456 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001442:	4b5f      	ldr	r3, [pc, #380]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800144a:	4a5d      	ldr	r2, [pc, #372]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001450:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b5a      	ldr	r3, [pc, #360]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4957      	ldr	r1, [pc, #348]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001468:	f7ff f8e2 	bl	8000630 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff f8de 	bl	8000630 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e095      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b4e      	ldr	r3, [pc, #312]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d023      	beq.n	80014ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b0:	4b43      	ldr	r3, [pc, #268]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	4a42      	ldr	r2, [pc, #264]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80014c8:	4b3d      	ldr	r3, [pc, #244]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80014d0:	4a3b      	ldr	r2, [pc, #236]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4936      	ldr	r1, [pc, #216]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	608b      	str	r3, [r1, #8]
 80014ea:	e008      	b.n	80014fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b80      	cmp	r3, #128	@ 0x80
 80014f0:	d105      	bne.n	80014fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014f2:	4b33      	ldr	r3, [pc, #204]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 80014f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d21d      	bcs.n	8001548 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150c:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f023 020f 	bic.w	r2, r3, #15
 8001514:	4929      	ldr	r1, [pc, #164]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4313      	orrs	r3, r2
 800151a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800151c:	f7ff f888 	bl	8000630 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff f884 	bl	8000630 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e03b      	b.n	80015b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_RCC_ClockConfig+0x260>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	429a      	cmp	r2, r3
 8001546:	d1ed      	bne.n	8001524 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001554:	4b1a      	ldr	r3, [pc, #104]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	4917      	ldr	r1, [pc, #92]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	490f      	ldr	r1, [pc, #60]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001586:	f000 f825 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 800158a:	4602      	mov	r2, r0
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <HAL_RCC_ClockConfig+0x264>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <HAL_RCC_ClockConfig+0x26c>)
 8001598:	5ccb      	ldrb	r3, [r1, r3]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_RCC_ClockConfig+0x270>)
 80015a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_RCC_ClockConfig+0x274>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <HAL_InitTick>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40022000 	.word	0x40022000
 80015c0:	40021000 	.word	0x40021000
 80015c4:	04c4b400 	.word	0x04c4b400
 80015c8:	080021fc 	.word	0x080021fc
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b087      	sub	sp, #28
 80015d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015da:	4b2c      	ldr	r3, [pc, #176]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	e047      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015ec:	4b27      	ldr	r3, [pc, #156]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d102      	bne.n	80015fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015f8:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	e03e      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015fe:	4b23      	ldr	r3, [pc, #140]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d136      	bne.n	8001678 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	091b      	lsrs	r3, r3, #4
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3301      	adds	r3, #1
 8001620:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001628:	4a1a      	ldr	r2, [pc, #104]	@ (8001694 <HAL_RCC_GetSysClockFreq+0xc0>)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001632:	68d2      	ldr	r2, [r2, #12]
 8001634:	0a12      	lsrs	r2, r2, #8
 8001636:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	617b      	str	r3, [r7, #20]
      break;
 8001640:	e00c      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001642:	4a13      	ldr	r2, [pc, #76]	@ (8001690 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4a10      	ldr	r2, [pc, #64]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	0a12      	lsrs	r2, r2, #8
 8001650:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001654:	fb02 f303 	mul.w	r3, r2, r3
 8001658:	617b      	str	r3, [r7, #20]
      break;
 800165a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_RCC_GetSysClockFreq+0xb8>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	0e5b      	lsrs	r3, r3, #25
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	3301      	adds	r3, #1
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	fbb2 f3f3 	udiv	r3, r2, r3
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	e001      	b.n	800167c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001678:	2300      	movs	r3, #0
 800167a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800167c:	693b      	ldr	r3, [r7, #16]
}
 800167e:	4618      	mov	r0, r3
 8001680:	371c      	adds	r7, #28
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	00f42400 	.word	0x00f42400
 8001694:	007a1200 	.word	0x007a1200

08001698 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3301      	adds	r3, #1
 80016b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b03      	cmp	r3, #3
 80016ba:	d10c      	bne.n	80016d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016bc:	4a17      	ldr	r2, [pc, #92]	@ (800171c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c4:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016c6:	68d2      	ldr	r2, [r2, #12]
 80016c8:	0a12      	lsrs	r2, r2, #8
 80016ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
    break;
 80016d4:	e00c      	b.n	80016f0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016d6:	4a12      	ldr	r2, [pc, #72]	@ (8001720 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016e0:	68d2      	ldr	r2, [r2, #12]
 80016e2:	0a12      	lsrs	r2, r2, #8
 80016e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016e8:	fb02 f303 	mul.w	r3, r2, r3
 80016ec:	617b      	str	r3, [r7, #20]
    break;
 80016ee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0e5b      	lsrs	r3, r3, #25
 80016f6:	f003 0303 	and.w	r3, r3, #3
 80016fa:	3301      	adds	r3, #1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	00f42400 	.word	0x00f42400

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e049      	b.n	80017ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe fe72 	bl	8000434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fb12 	bl	8001d8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d001      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e04a      	b.n	8001882 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a21      	ldr	r2, [pc, #132]	@ (8001890 <HAL_TIM_Base_Start_IT+0xbc>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d018      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x6c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001816:	d013      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x6c>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1d      	ldr	r2, [pc, #116]	@ (8001894 <HAL_TIM_Base_Start_IT+0xc0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00e      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x6c>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1c      	ldr	r2, [pc, #112]	@ (8001898 <HAL_TIM_Base_Start_IT+0xc4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d009      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x6c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <HAL_TIM_Base_Start_IT+0xc8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d004      	beq.n	8001840 <HAL_TIM_Base_Start_IT+0x6c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d115      	bne.n	800186c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b06      	cmp	r3, #6
 8001850:	d015      	beq.n	800187e <HAL_TIM_Base_Start_IT+0xaa>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001858:	d011      	beq.n	800187e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f042 0201 	orr.w	r2, r2, #1
 8001868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800186a:	e008      	b.n	800187e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 0201 	orr.w	r2, r2, #1
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e000      	b.n	8001880 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40012c00 	.word	0x40012c00
 8001894:	40000400 	.word	0x40000400
 8001898:	40000800 	.word	0x40000800
 800189c:	40013400 	.word	0x40013400
 80018a0:	40014000 	.word	0x40014000
 80018a4:	00010007 	.word	0x00010007

080018a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d020      	beq.n	800190c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0202 	mvn.w	r2, #2
 80018dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fa2c 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 80018f8:	e005      	b.n	8001906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fa1e 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fa2f 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d020      	beq.n	8001958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d01b      	beq.n	8001958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0204 	mvn.w	r2, #4
 8001928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2202      	movs	r2, #2
 800192e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 fa06 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001944:	e005      	b.n	8001952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f9f8 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa09 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d020      	beq.n	80019a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01b      	beq.n	80019a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f06f 0208 	mvn.w	r2, #8
 8001974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2204      	movs	r2, #4
 800197a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f000 f9e0 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 8001990:	e005      	b.n	800199e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f9d2 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f9e3 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d020      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01b      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0210 	mvn.w	r2, #16
 80019c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2208      	movs	r2, #8
 80019c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	69db      	ldr	r3, [r3, #28]
 80019ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f9ba 	bl	8001d50 <HAL_TIM_IC_CaptureCallback>
 80019dc:	e005      	b.n	80019ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f9ac 	bl	8001d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9bd 	bl	8001d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0201 	mvn.w	r2, #1
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fcd2 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00c      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d007      	beq.n	8001a42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 fb69 	bl	8002114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00c      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fb61 	bl	8002128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f977 	bl	8001d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00c      	beq.n	8001aae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0220 	mvn.w	r2, #32
 8001aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fb29 	bl	8002100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00c      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8001aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fb35 	bl	800213c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00c      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8001aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 fb2d 	bl	8002150 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d007      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8001b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fb25 	bl	8002164 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00c      	beq.n	8001b3e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8001b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f000 fb1d 	bl	8002178 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_TIM_ConfigClockSource+0x1c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e0de      	b.n	8001d22 <HAL_TIM_ConfigClockSource+0x1da>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8001b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a63      	ldr	r2, [pc, #396]	@ (8001d2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	f000 80a9 	beq.w	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001ba4:	4a61      	ldr	r2, [pc, #388]	@ (8001d2c <HAL_TIM_ConfigClockSource+0x1e4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f200 80ae 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bac:	4a60      	ldr	r2, [pc, #384]	@ (8001d30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	f000 80a1 	beq.w	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8001d30 <HAL_TIM_ConfigClockSource+0x1e8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f200 80a6 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f000 8099 	beq.w	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001bc4:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <HAL_TIM_ConfigClockSource+0x1ec>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	f200 809e 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bcc:	4a5a      	ldr	r2, [pc, #360]	@ (8001d38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f000 8091 	beq.w	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_TIM_ConfigClockSource+0x1f0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	f200 8096 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bdc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001be0:	f000 8089 	beq.w	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001be4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8001be8:	f200 808e 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bf0:	d03e      	beq.n	8001c70 <HAL_TIM_ConfigClockSource+0x128>
 8001bf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bf6:	f200 8087 	bhi.w	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001bfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bfe:	f000 8086 	beq.w	8001d0e <HAL_TIM_ConfigClockSource+0x1c6>
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c06:	d87f      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c08:	2b70      	cmp	r3, #112	@ 0x70
 8001c0a:	d01a      	beq.n	8001c42 <HAL_TIM_ConfigClockSource+0xfa>
 8001c0c:	2b70      	cmp	r3, #112	@ 0x70
 8001c0e:	d87b      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c10:	2b60      	cmp	r3, #96	@ 0x60
 8001c12:	d050      	beq.n	8001cb6 <HAL_TIM_ConfigClockSource+0x16e>
 8001c14:	2b60      	cmp	r3, #96	@ 0x60
 8001c16:	d877      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c18:	2b50      	cmp	r3, #80	@ 0x50
 8001c1a:	d03c      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x14e>
 8001c1c:	2b50      	cmp	r3, #80	@ 0x50
 8001c1e:	d873      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c20:	2b40      	cmp	r3, #64	@ 0x40
 8001c22:	d058      	beq.n	8001cd6 <HAL_TIM_ConfigClockSource+0x18e>
 8001c24:	2b40      	cmp	r3, #64	@ 0x40
 8001c26:	d86f      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c28:	2b30      	cmp	r3, #48	@ 0x30
 8001c2a:	d064      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001c2c:	2b30      	cmp	r3, #48	@ 0x30
 8001c2e:	d86b      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d060      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001c34:	2b20      	cmp	r3, #32
 8001c36:	d867      	bhi.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d05c      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d05a      	beq.n	8001cf6 <HAL_TIM_ConfigClockSource+0x1ae>
 8001c40:	e062      	b.n	8001d08 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c52:	f000 f9b3 	bl	8001fbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	609a      	str	r2, [r3, #8]
      break;
 8001c6e:	e04f      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	f000 f99c 	bl	8001fbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c92:	609a      	str	r2, [r3, #8]
      break;
 8001c94:	e03c      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	f000 f90e 	bl	8001ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2150      	movs	r1, #80	@ 0x50
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f967 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 8001cb4:	e02c      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	f000 f92d 	bl	8001f22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2160      	movs	r1, #96	@ 0x60
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 f957 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 8001cd4:	e01c      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	f000 f8ee 	bl	8001ec4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2140      	movs	r1, #64	@ 0x40
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f947 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 8001cf4:	e00c      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f000 f93e 	bl	8001f82 <TIM_ITRx_SetConfig>
      break;
 8001d06:	e003      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d0c:	e000      	b.n	8001d10 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8001d0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	00100070 	.word	0x00100070
 8001d30:	00100040 	.word	0x00100040
 8001d34:	00100030 	.word	0x00100030
 8001d38:	00100020 	.word	0x00100020

08001d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <TIM_Base_SetConfig+0x11c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00f      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001daa:	d00b      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <TIM_Base_SetConfig+0x120>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3e      	ldr	r2, [pc, #248]	@ (8001eb0 <TIM_Base_SetConfig+0x124>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <TIM_Base_SetConfig+0x38>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001eb4 <TIM_Base_SetConfig+0x128>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a33      	ldr	r2, [pc, #204]	@ (8001ea8 <TIM_Base_SetConfig+0x11c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d01b      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de4:	d017      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a30      	ldr	r2, [pc, #192]	@ (8001eac <TIM_Base_SetConfig+0x120>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d013      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a2f      	ldr	r2, [pc, #188]	@ (8001eb0 <TIM_Base_SetConfig+0x124>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00f      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a2e      	ldr	r2, [pc, #184]	@ (8001eb4 <TIM_Base_SetConfig+0x128>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00b      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb8 <TIM_Base_SetConfig+0x12c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a2c      	ldr	r2, [pc, #176]	@ (8001ebc <TIM_Base_SetConfig+0x130>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d003      	beq.n	8001e16 <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec0 <TIM_Base_SetConfig+0x134>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d108      	bne.n	8001e28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695b      	ldr	r3, [r3, #20]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a16      	ldr	r2, [pc, #88]	@ (8001ea8 <TIM_Base_SetConfig+0x11c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00f      	beq.n	8001e74 <TIM_Base_SetConfig+0xe8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <TIM_Base_SetConfig+0x128>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d00b      	beq.n	8001e74 <TIM_Base_SetConfig+0xe8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a16      	ldr	r2, [pc, #88]	@ (8001eb8 <TIM_Base_SetConfig+0x12c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d007      	beq.n	8001e74 <TIM_Base_SetConfig+0xe8>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <TIM_Base_SetConfig+0x130>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d003      	beq.n	8001e74 <TIM_Base_SetConfig+0xe8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ec0 <TIM_Base_SetConfig+0x134>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f023 0201 	bic.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40013400 	.word	0x40013400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40014800 	.word	0x40014800

08001ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	f023 0201 	bic.w	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f023 030a 	bic.w	r3, r3, #10
 8001f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	621a      	str	r2, [r3, #32]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b087      	sub	sp, #28
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 0210 	bic.w	r2, r3, #16
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	031b      	lsls	r3, r3, #12
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	621a      	str	r2, [r3, #32]
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b085      	sub	sp, #20
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
 8001f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f043 0307 	orr.w	r3, r3, #7
 8001fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001fd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	021a      	lsls	r2, r3, #8
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002010:	2302      	movs	r3, #2
 8002012:	e065      	b.n	80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a2c      	ldr	r2, [pc, #176]	@ (80020ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a2b      	ldr	r2, [pc, #172]	@ (80020f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d108      	bne.n	800205a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800204e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1b      	ldr	r2, [pc, #108]	@ (80020ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208a:	d013      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10c      	bne.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40012c00 	.word	0x40012c00
 80020f0:	40013400 	.word	0x40013400
 80020f4:	40000400 	.word	0x40000400
 80020f8:	40000800 	.word	0x40000800
 80020fc:	40014000 	.word	0x40014000

08002100 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <memset>:
 800218c:	4402      	add	r2, r0
 800218e:	4603      	mov	r3, r0
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <memset+0xa>
 8002194:	4770      	bx	lr
 8002196:	f803 1b01 	strb.w	r1, [r3], #1
 800219a:	e7f9      	b.n	8002190 <memset+0x4>

0800219c <__libc_init_array>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	4d0d      	ldr	r5, [pc, #52]	@ (80021d4 <__libc_init_array+0x38>)
 80021a0:	4c0d      	ldr	r4, [pc, #52]	@ (80021d8 <__libc_init_array+0x3c>)
 80021a2:	1b64      	subs	r4, r4, r5
 80021a4:	10a4      	asrs	r4, r4, #2
 80021a6:	2600      	movs	r6, #0
 80021a8:	42a6      	cmp	r6, r4
 80021aa:	d109      	bne.n	80021c0 <__libc_init_array+0x24>
 80021ac:	4d0b      	ldr	r5, [pc, #44]	@ (80021dc <__libc_init_array+0x40>)
 80021ae:	4c0c      	ldr	r4, [pc, #48]	@ (80021e0 <__libc_init_array+0x44>)
 80021b0:	f000 f818 	bl	80021e4 <_init>
 80021b4:	1b64      	subs	r4, r4, r5
 80021b6:	10a4      	asrs	r4, r4, #2
 80021b8:	2600      	movs	r6, #0
 80021ba:	42a6      	cmp	r6, r4
 80021bc:	d105      	bne.n	80021ca <__libc_init_array+0x2e>
 80021be:	bd70      	pop	{r4, r5, r6, pc}
 80021c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021c4:	4798      	blx	r3
 80021c6:	3601      	adds	r6, #1
 80021c8:	e7ee      	b.n	80021a8 <__libc_init_array+0xc>
 80021ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ce:	4798      	blx	r3
 80021d0:	3601      	adds	r6, #1
 80021d2:	e7f2      	b.n	80021ba <__libc_init_array+0x1e>
 80021d4:	0800220c 	.word	0x0800220c
 80021d8:	0800220c 	.word	0x0800220c
 80021dc:	0800220c 	.word	0x0800220c
 80021e0:	08002210 	.word	0x08002210

080021e4 <_init>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	bf00      	nop
 80021e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ea:	bc08      	pop	{r3}
 80021ec:	469e      	mov	lr, r3
 80021ee:	4770      	bx	lr

080021f0 <_fini>:
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	bf00      	nop
 80021f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f6:	bc08      	pop	{r3}
 80021f8:	469e      	mov	lr, r3
 80021fa:	4770      	bx	lr
