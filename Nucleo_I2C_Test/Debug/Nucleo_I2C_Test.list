
Nucleo_I2C_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a8  08006ab0  08006ab0  00007ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f58  08006f58  000081d4  2**0
                  CONTENTS
  4 .ARM          00000008  08006f58  08006f58  00007f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f60  08006f60  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f60  08006f60  00007f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f64  08006f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006f68  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d4  0800713c  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  0800713c  000083e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b594  00000000  00000000  000081fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6e  00000000  00000000  00013792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  00015200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007f8  00000000  00000000  00015c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000221d6  00000000  00000000  00016430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db1a  00000000  00000000  00038606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccc7d  00000000  00000000  00046120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112d9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  00112de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001168a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a94 	.word	0x08006a94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08006a94 	.word	0x08006a94

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	@ 0x40
 8000edc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f000 fccd 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f96b 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fa2f 	bl	8001348 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eea:	f000 fa03 	bl	80012f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eee:	f000 f9d3 	bl	8001298 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Test I2C connection
  uint8_t who_am_i_val;
  HAL_StatusTypeDef ret;
  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_WHO_AM_I, 1, &who_am_i_val, 1, I2C_TIMEOUT);
 8000ef2:	233b      	movs	r3, #59	@ 0x3b
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	230d      	movs	r3, #13
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2332      	movs	r3, #50	@ 0x32
 8000efc:	9302      	str	r3, [sp, #8]
 8000efe:	2301      	movs	r3, #1
 8000f00:	9301      	str	r3, [sp, #4]
 8000f02:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	48a0      	ldr	r0, [pc, #640]	@ (800118c <main+0x2b4>)
 8000f0c:	f001 fa14 	bl	8002338 <HAL_I2C_Mem_Read>
 8000f10:	4603      	mov	r3, r0
 8000f12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  I2C_error_handler(ret, "Failed I2C Connection");
 8000f16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f1a:	499d      	ldr	r1, [pc, #628]	@ (8001190 <main+0x2b8>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fa81 	bl	8001424 <I2C_error_handler>
  printf("WHO_AM_I: 0x%x\n", who_am_i_val);
 8000f22:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000f26:	4619      	mov	r1, r3
 8000f28:	489a      	ldr	r0, [pc, #616]	@ (8001194 <main+0x2bc>)
 8000f2a:	f003 fe89 	bl	8004c40 <iprintf>
  printf("---------------------\n");
 8000f2e:	489a      	ldr	r0, [pc, #616]	@ (8001198 <main+0x2c0>)
 8000f30:	f003 feee 	bl	8004d10 <puts>
  fflush(stdout);
 8000f34:	4b99      	ldr	r3, [pc, #612]	@ (800119c <main+0x2c4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 fdaa 	bl	8004a94 <fflush>

  // Enable standby mode
  uint8_t ctrl_reg1_val;
  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_CTRL_REG1, 1, &ctrl_reg1_val, 1, I2C_TIMEOUT);
 8000f40:	233b      	movs	r3, #59	@ 0x3b
 8000f42:	4619      	mov	r1, r3
 8000f44:	232a      	movs	r3, #42	@ 0x2a
 8000f46:	461a      	mov	r2, r3
 8000f48:	2332      	movs	r3, #50	@ 0x32
 8000f4a:	9302      	str	r3, [sp, #8]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9301      	str	r3, [sp, #4]
 8000f50:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	488c      	ldr	r0, [pc, #560]	@ (800118c <main+0x2b4>)
 8000f5a:	f001 f9ed 	bl	8002338 <HAL_I2C_Mem_Read>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  I2C_error_handler(ret, "Error reading from CTRL_REG1");
 8000f64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f68:	498d      	ldr	r1, [pc, #564]	@ (80011a0 <main+0x2c8>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 fa5a 	bl	8001424 <I2C_error_handler>
  ctrl_reg1_val &= ~0x01;
 8000f70:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f74:	f023 0301 	bic.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR_WRITE, (uint8_t)ADDR_CTRL_REG1, 1, &ctrl_reg1_val, 1, I2C_TIMEOUT);
 8000f7e:	233a      	movs	r3, #58	@ 0x3a
 8000f80:	4619      	mov	r1, r3
 8000f82:	232a      	movs	r3, #42	@ 0x2a
 8000f84:	461a      	mov	r2, r3
 8000f86:	2332      	movs	r3, #50	@ 0x32
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	487d      	ldr	r0, [pc, #500]	@ (800118c <main+0x2b4>)
 8000f98:	f001 f8d4 	bl	8002144 <HAL_I2C_Mem_Write>

  // Set 2g dynamic range
  uint8_t xyz_data_cfg_val;
  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_XYZ_DATA_CFG, 1, &xyz_data_cfg_val, 1, I2C_TIMEOUT);
 8000f9c:	233b      	movs	r3, #59	@ 0x3b
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	230e      	movs	r3, #14
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2332      	movs	r3, #50	@ 0x32
 8000fa6:	9302      	str	r3, [sp, #8]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4875      	ldr	r0, [pc, #468]	@ (800118c <main+0x2b4>)
 8000fb6:	f001 f9bf 	bl	8002338 <HAL_I2C_Mem_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  I2C_error_handler(ret, "Error reading from XYZ_DATA_CFG");
 8000fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fc4:	4977      	ldr	r1, [pc, #476]	@ (80011a4 <main+0x2cc>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 fa2c 	bl	8001424 <I2C_error_handler>
  xyz_data_cfg_val &= ~0x03;
 8000fcc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000fd0:	f023 0303 	bic.w	r3, r3, #3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR_WRITE, (uint8_t)ADDR_XYZ_DATA_CFG, 1, &xyz_data_cfg_val, 1, I2C_TIMEOUT);
 8000fda:	233a      	movs	r3, #58	@ 0x3a
 8000fdc:	4619      	mov	r1, r3
 8000fde:	230e      	movs	r3, #14
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	2332      	movs	r3, #50	@ 0x32
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	4866      	ldr	r0, [pc, #408]	@ (800118c <main+0x2b4>)
 8000ff4:	f001 f8a6 	bl	8002144 <HAL_I2C_Mem_Write>

  // Enable active mode
  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_CTRL_REG1, 1, &ctrl_reg1_val, 1, I2C_TIMEOUT);
 8000ff8:	233b      	movs	r3, #59	@ 0x3b
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	232a      	movs	r3, #42	@ 0x2a
 8000ffe:	461a      	mov	r2, r3
 8001000:	2332      	movs	r3, #50	@ 0x32
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2301      	movs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	485e      	ldr	r0, [pc, #376]	@ (800118c <main+0x2b4>)
 8001012:	f001 f991 	bl	8002338 <HAL_I2C_Mem_Read>
 8001016:	4603      	mov	r3, r0
 8001018:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  I2C_error_handler(ret, "Error reading from CTRL_REG1");
 800101c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001020:	495f      	ldr	r1, [pc, #380]	@ (80011a0 <main+0x2c8>)
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f9fe 	bl	8001424 <I2C_error_handler>
  ctrl_reg1_val |= 0x01;
 8001028:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR_WRITE, (uint8_t)ADDR_CTRL_REG1, 1, &ctrl_reg1_val, 1, I2C_TIMEOUT);
 8001036:	233a      	movs	r3, #58	@ 0x3a
 8001038:	4619      	mov	r1, r3
 800103a:	232a      	movs	r3, #42	@ 0x2a
 800103c:	461a      	mov	r2, r3
 800103e:	2332      	movs	r3, #50	@ 0x32
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2301      	movs	r3, #1
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2301      	movs	r3, #1
 800104e:	484f      	ldr	r0, [pc, #316]	@ (800118c <main+0x2b4>)
 8001050:	f001 f878 	bl	8002144 <HAL_I2C_Mem_Write>
  HAL_Delay(5000);
 8001054:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001058:	f000 fc7e 	bl	8001958 <HAL_Delay>

	  /* USER CODE BEGIN 3 */

	  // poll the status register
	  uint8_t status_reg_val;
	  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_STATUS, 1, &status_reg_val, 1, I2C_TIMEOUT);
 800105c:	233b      	movs	r3, #59	@ 0x3b
 800105e:	4619      	mov	r1, r3
 8001060:	2300      	movs	r3, #0
 8001062:	461a      	mov	r2, r3
 8001064:	2332      	movs	r3, #50	@ 0x32
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2301      	movs	r3, #1
 8001074:	4845      	ldr	r0, [pc, #276]	@ (800118c <main+0x2b4>)
 8001076:	f001 f95f 	bl	8002338 <HAL_I2C_Mem_Read>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	  I2C_error_handler(ret, "Error reading from status register\n");
 8001080:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001084:	4948      	ldr	r1, [pc, #288]	@ (80011a8 <main+0x2d0>)
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f9cc 	bl	8001424 <I2C_error_handler>
	  // check if 4th LSB ZYXDR is set (counting from 1)
	  if (status_reg_val & (1 << 3)) {
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0e1      	beq.n	800105c <main+0x184>
		  // new data available
		  uint8_t xyz_raw_data[6];
		  int16_t xyz_stitched_data[3];
		  ret = HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR_READ, (uint8_t)ADDR_OUT_X_MSB, 1, xyz_raw_data, 6, I2C_TIMEOUT);
 8001098:	233b      	movs	r3, #59	@ 0x3b
 800109a:	4619      	mov	r1, r3
 800109c:	2301      	movs	r3, #1
 800109e:	461a      	mov	r2, r3
 80010a0:	2332      	movs	r3, #50	@ 0x32
 80010a2:	9302      	str	r3, [sp, #8]
 80010a4:	2306      	movs	r3, #6
 80010a6:	9301      	str	r3, [sp, #4]
 80010a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2301      	movs	r3, #1
 80010b0:	4836      	ldr	r0, [pc, #216]	@ (800118c <main+0x2b4>)
 80010b2:	f001 f941 	bl	8002338 <HAL_I2C_Mem_Read>
 80010b6:	4603      	mov	r3, r0
 80010b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  I2C_error_handler(ret, "Error reading from XYZ acceleration registers");
 80010bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c0:	493a      	ldr	r1, [pc, #232]	@ (80011ac <main+0x2d4>)
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f9ae 	bl	8001424 <I2C_error_handler>
		  xyz_stitched_data[0] = ((int16_t)xyz_raw_data[0] << 8) | xyz_raw_data[1];
 80010c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	83bb      	strh	r3, [r7, #28]
		  xyz_stitched_data[1] = ((int16_t)xyz_raw_data[2] << 8) | xyz_raw_data[3];
 80010dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	83fb      	strh	r3, [r7, #30]
		  xyz_stitched_data[2] = ((int16_t)xyz_raw_data[4] << 8) | xyz_raw_data[5];
 80010f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	843b      	strh	r3, [r7, #32]
//				  }
//			  }
//			  fraction /= 10000;
//			  xyz_final_g[j] = sign * (int_val + fraction);
//		  }
		  xyz_final_g[0] = xyz_stitched_data[0] / 1024;
 8001104:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001108:	2b00      	cmp	r3, #0
 800110a:	da01      	bge.n	8001110 <main+0x238>
 800110c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8001110:	129b      	asrs	r3, r3, #10
 8001112:	b21b      	sxth	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fa25 	bl	8000564 <__aeabi_i2d>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	e9c7 2300 	strd	r2, r3, [r7]
		  xyz_final_g[1] = xyz_stitched_data[1] / 1024;
 8001122:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001126:	2b00      	cmp	r3, #0
 8001128:	da01      	bge.n	800112e <main+0x256>
 800112a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800112e:	129b      	asrs	r3, r3, #10
 8001130:	b21b      	sxth	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fa16 	bl	8000564 <__aeabi_i2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  xyz_final_g[2] = xyz_stitched_data[2] / 1024;
 8001140:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001144:	2b00      	cmp	r3, #0
 8001146:	da01      	bge.n	800114c <main+0x274>
 8001148:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800114c:	129b      	asrs	r3, r3, #10
 800114e:	b21b      	sxth	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fa07 	bl	8000564 <__aeabi_i2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	e9c7 2304 	strd	r2, r3, [r7, #16]

		  printf("X: %lf\n", xyz_final_g[0]);
 800115e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001162:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <main+0x2d8>)
 8001164:	f003 fd6c 	bl	8004c40 <iprintf>
		  printf("Y: %lf\n", xyz_final_g[1]);
 8001168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800116c:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <main+0x2dc>)
 800116e:	f003 fd67 	bl	8004c40 <iprintf>
		  printf("Z: %lf\n", xyz_final_g[2]);
 8001172:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001176:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <main+0x2e0>)
 8001178:	f003 fd62 	bl	8004c40 <iprintf>
		  printf("---------------------\n");
 800117c:	4806      	ldr	r0, [pc, #24]	@ (8001198 <main+0x2c0>)
 800117e:	f003 fdc7 	bl	8004d10 <puts>
		  HAL_Delay(500);
 8001182:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001186:	f000 fbe7 	bl	8001958 <HAL_Delay>
  {
 800118a:	e767      	b.n	800105c <main+0x184>
 800118c:	200001f0 	.word	0x200001f0
 8001190:	08006ab0 	.word	0x08006ab0
 8001194:	08006ac8 	.word	0x08006ac8
 8001198:	08006ad8 	.word	0x08006ad8
 800119c:	20000018 	.word	0x20000018
 80011a0:	08006af0 	.word	0x08006af0
 80011a4:	08006b10 	.word	0x08006b10
 80011a8:	08006b30 	.word	0x08006b30
 80011ac:	08006b54 	.word	0x08006b54
 80011b0:	08006b84 	.word	0x08006b84
 80011b4:	08006b8c 	.word	0x08006b8c
 80011b8:	08006b94 	.word	0x08006b94

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b094      	sub	sp, #80	@ 0x50
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	2234      	movs	r2, #52	@ 0x34
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 fe80 	bl	8004ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d0:	f107 0308 	add.w	r3, r7, #8
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <SystemClock_Config+0xd4>)
 80011e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e8:	4a29      	ldr	r2, [pc, #164]	@ (8001290 <SystemClock_Config+0xd4>)
 80011ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <SystemClock_Config+0xd4>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <SystemClock_Config+0xd8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001208:	4a22      	ldr	r2, [pc, #136]	@ (8001294 <SystemClock_Config+0xd8>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <SystemClock_Config+0xd8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001230:	2310      	movs	r3, #16
 8001232:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001234:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001238:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800123a:	2304      	movs	r3, #4
 800123c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800123e:	2302      	movs	r3, #2
 8001240:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4618      	mov	r0, r3
 800124c:	f002 f9b8 	bl	80035c0 <HAL_RCC_OscConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001256:	f000 f90f 	bl	8001478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800125a:	230f      	movs	r3, #15
 800125c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	2302      	movs	r3, #2
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001266:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	2102      	movs	r1, #2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 fe50 	bl	8002f1c <HAL_RCC_ClockConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001282:	f000 f8f9 	bl	8001478 <Error_Handler>
  }
}
 8001286:	bf00      	nop
 8001288:	3750      	adds	r7, #80	@ 0x50
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40007000 	.word	0x40007000

08001298 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_I2C1_Init+0x50>)
 800129e:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <MX_I2C1_Init+0x54>)
 80012a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x58>)
 80012a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012d6:	f000 fdf1 	bl	8001ebc <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e0:	f000 f8ca 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001f0 	.word	0x200001f0
 80012ec:	40005400 	.word	0x40005400
 80012f0:	000186a0 	.word	0x000186a0

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f002 fbe6 	bl	8003afc <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 f89f 	bl	8001478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000244 	.word	0x20000244
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	@ 0x28
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a2c      	ldr	r2, [pc, #176]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <MX_GPIO_Init+0xd0>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a17      	ldr	r2, [pc, #92]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	4812      	ldr	r0, [pc, #72]	@ (800141c <MX_GPIO_Init+0xd4>)
 80013d4:	f000 fd5a 	bl	8001e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_GPIO_Init+0xd8>)
 80013f0:	f000 fbba 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013f4:	2320      	movs	r3, #32
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	2301      	movs	r3, #1
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_GPIO_Init+0xd4>)
 800140c:	f000 fbac 	bl	8001b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001410:	bf00      	nop
 8001412:	3728      	adds	r7, #40	@ 0x28
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020800 	.word	0x40020800

08001424 <I2C_error_handler>:

/* USER CODE BEGIN 4 */
void I2C_error_handler(HAL_StatusTypeDef ret, const char* msg) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
	if (ret != HAL_OK) {
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d013      	beq.n	800145e <I2C_error_handler+0x3a>
	  printf("%s\n", msg);
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f003 fc6a 	bl	8004d10 <puts>
	  printf("I2C Error: 0x%lx\n", HAL_I2C_GetError(&hi2c1));
 800143c:	480a      	ldr	r0, [pc, #40]	@ (8001468 <I2C_error_handler+0x44>)
 800143e:	f001 f9ad 	bl	800279c <HAL_I2C_GetError>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	4809      	ldr	r0, [pc, #36]	@ (800146c <I2C_error_handler+0x48>)
 8001448:	f003 fbfa 	bl	8004c40 <iprintf>
	  printf("---------------------------\n");
 800144c:	4808      	ldr	r0, [pc, #32]	@ (8001470 <I2C_error_handler+0x4c>)
 800144e:	f003 fc5f 	bl	8004d10 <puts>
	  fflush(stdout);
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <I2C_error_handler+0x50>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fb1b 	bl	8004a94 <fflush>
	}
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200001f0 	.word	0x200001f0
 800146c:	08006b9c 	.word	0x08006b9c
 8001470:	08006bb0 	.word	0x08006bb0
 8001474:	20000018 	.word	0x20000018

08001478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800147c:	b672      	cpsid	i
}
 800147e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <Error_Handler+0x8>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	4a0f      	ldr	r2, [pc, #60]	@ (80014d0 <HAL_MspInit+0x4c>)
 8001494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001498:	6453      	str	r3, [r2, #68]	@ 0x44
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_MspInit+0x4c>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
 80014aa:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a08      	ldr	r2, [pc, #32]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_MspInit+0x4c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c2:	2007      	movs	r0, #7
 80014c4:	f000 fb1c 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	@ 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_I2C_MspInit+0x84>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d12b      	bne.n	800154e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b18      	ldr	r3, [pc, #96]	@ (800155c <HAL_I2C_MspInit+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_I2C_MspInit+0x88>)
 8001500:	f043 0302 	orr.w	r3, r3, #2
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_I2C_MspInit+0x88>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c0      	movs	r3, #192	@ 0xc0
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001522:	2304      	movs	r3, #4
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	480c      	ldr	r0, [pc, #48]	@ (8001560 <HAL_I2C_MspInit+0x8c>)
 800152e:	f000 fb1b 	bl	8001b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b09      	ldr	r3, [pc, #36]	@ (800155c <HAL_I2C_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a08      	ldr	r2, [pc, #32]	@ (800155c <HAL_I2C_MspInit+0x88>)
 800153c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_I2C_MspInit+0x88>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020400 	.word	0x40020400

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	@ (80015e8 <HAL_UART_MspInit+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_UART_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_UART_MspInit+0x88>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b15      	ldr	r3, [pc, #84]	@ (80015ec <HAL_UART_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <HAL_UART_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	@ (80015ec <HAL_UART_MspInit+0x88>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_UART_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015be:	230c      	movs	r3, #12
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <HAL_UART_MspInit+0x8c>)
 80015da:	f000 fac5 	bl	8001b68 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	@ 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <NMI_Handler+0x4>

080015fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <MemManage_Handler+0x4>

0800160c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <UsageFault_Handler+0x4>

0800161c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 f96c 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <ITM_SendChar+0x44>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a0d      	ldr	r2, [pc, #52]	@ (8001690 <ITM_SendChar+0x44>)
 800165c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001660:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <ITM_SendChar+0x48>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <ITM_SendChar+0x48>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800166e:	bf00      	nop
 8001670:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f8      	beq.n	8001670 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800167e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	6013      	str	r3, [r2, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	e000edfc 	.word	0xe000edfc
 8001694:	e0000e00 	.word	0xe0000e00

08001698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr

080016a6 <_kill>:

int _kill(int pid, int sig)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b0:	f003 fc60 	bl	8004f74 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2216      	movs	r2, #22
 80016b8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <_exit>:

void _exit (int status)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ce:	f04f 31ff 	mov.w	r1, #4294967295
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ffe7 	bl	80016a6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <_exit+0x12>

080016dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	e00a      	b.n	8001704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ee:	f3af 8000 	nop.w
 80016f2:	4601      	mov	r1, r0
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	60ba      	str	r2, [r7, #8]
 80016fa:	b2ca      	uxtb	r2, r1
 80016fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	429a      	cmp	r2, r3
 800170a:	dbf0      	blt.n	80016ee <_read+0x12>
  }

  return len;
 800170c:	687b      	ldr	r3, [r7, #4]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b086      	sub	sp, #24
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	e009      	b.n	800173c <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff8b 	bl	800164c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	dbf1      	blt.n	8001728 <_write+0x12>
  }
  return len;
 8001744:	687b      	ldr	r3, [r7, #4]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_close>:

int _close(int file)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001774:	605a      	str	r2, [r3, #4]
  return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <_isatty>:

int _isatty(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr

08001796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f003 fbc8 	bl	8004f74 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20020000 	.word	0x20020000
 8001810:	00000400 	.word	0x00000400
 8001814:	2000028c 	.word	0x2000028c
 8001818:	200003e0 	.word	0x200003e0

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001860 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800182c:	f7ff fff6 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480c      	ldr	r0, [pc, #48]	@ (8001864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001832:	490d      	ldr	r1, [pc, #52]	@ (8001868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001834:	4a0d      	ldr	r2, [pc, #52]	@ (800186c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001848:	4c0a      	ldr	r4, [pc, #40]	@ (8001874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001856:	f003 fb93 	bl	8004f80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff fb3d 	bl	8000ed8 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800186c:	08006f68 	.word	0x08006f68
  ldr r2, =_sbss
 8001870:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001874:	200003e0 	.word	0x200003e0

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	@ (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	@ (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f92b 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fde8 	bl	8001484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	@ (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f935 	bl	8001b4e <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f000 f90b 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	@ (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000000 	.word	0x20000000
 8001918:	20000008 	.word	0x20000008
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b05      	ldr	r3, [pc, #20]	@ (800193c <HAL_IncTick+0x1c>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b05      	ldr	r3, [pc, #20]	@ (8001940 <HAL_IncTick+0x20>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a03      	ldr	r2, [pc, #12]	@ (8001940 <HAL_IncTick+0x20>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	20000008 	.word	0x20000008
 8001940:	20000290 	.word	0x20000290

08001944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return uwTick;
 8001948:	4b02      	ldr	r3, [pc, #8]	@ (8001954 <HAL_GetTick+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000290 	.word	0x20000290

08001958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff fff0 	bl	8001944 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d005      	beq.n	800197e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001972:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <HAL_Delay+0x44>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4413      	add	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800197e:	bf00      	nop
 8001980:	f7ff ffe0 	bl	8001944 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	429a      	cmp	r2, r3
 800198e:	d8f7      	bhi.n	8001980 <HAL_Delay+0x28>
  {
  }
}
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000008 	.word	0x20000008

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019d2:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	60d3      	str	r3, [r2, #12]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	@ (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	@ (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	@ 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff90 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	@ (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff49 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff5e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff90 	bl	8001a58 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5f 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffb0 	bl	8001abc <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	@ 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e165      	b.n	8001e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8154 	bne.w	8001e4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d005      	beq.n	8001bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d130      	bne.n	8001c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0201 	and.w	r2, r3, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d017      	beq.n	8001c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	2203      	movs	r2, #3
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d123      	bne.n	8001cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80ae 	beq.w	8001e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_GPIO_Init+0x2fc>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a57      	ldr	r2, [pc, #348]	@ (8001e68 <HAL_GPIO_Init+0x300>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a4e      	ldr	r2, [pc, #312]	@ (8001e6c <HAL_GPIO_Init+0x304>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d025      	beq.n	8001d82 <HAL_GPIO_Init+0x21a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4d      	ldr	r2, [pc, #308]	@ (8001e70 <HAL_GPIO_Init+0x308>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01f      	beq.n	8001d7e <HAL_GPIO_Init+0x216>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4c      	ldr	r2, [pc, #304]	@ (8001e74 <HAL_GPIO_Init+0x30c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d019      	beq.n	8001d7a <HAL_GPIO_Init+0x212>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4b      	ldr	r2, [pc, #300]	@ (8001e78 <HAL_GPIO_Init+0x310>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0x20e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4a      	ldr	r2, [pc, #296]	@ (8001e7c <HAL_GPIO_Init+0x314>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00d      	beq.n	8001d72 <HAL_GPIO_Init+0x20a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a49      	ldr	r2, [pc, #292]	@ (8001e80 <HAL_GPIO_Init+0x318>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d007      	beq.n	8001d6e <HAL_GPIO_Init+0x206>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a48      	ldr	r2, [pc, #288]	@ (8001e84 <HAL_GPIO_Init+0x31c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d101      	bne.n	8001d6a <HAL_GPIO_Init+0x202>
 8001d66:	2306      	movs	r3, #6
 8001d68:	e00c      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00a      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d6e:	2305      	movs	r3, #5
 8001d70:	e008      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d72:	2304      	movs	r3, #4
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d76:	2303      	movs	r3, #3
 8001d78:	e004      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x21c>
 8001d82:	2300      	movs	r3, #0
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f002 0203 	and.w	r2, r2, #3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4093      	lsls	r3, r2
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d94:	4934      	ldr	r1, [pc, #208]	@ (8001e68 <HAL_GPIO_Init+0x300>)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b39      	ldr	r3, [pc, #228]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a30      	ldr	r2, [pc, #192]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a25      	ldr	r2, [pc, #148]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df6:	4b24      	ldr	r3, [pc, #144]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e20:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e44:	4a10      	ldr	r2, [pc, #64]	@ (8001e88 <HAL_GPIO_Init+0x320>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b0f      	cmp	r3, #15
 8001e54:	f67f ae96 	bls.w	8001b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3724      	adds	r7, #36	@ 0x24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40021400 	.word	0x40021400
 8001e84:	40021800 	.word	0x40021800
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e9c:	787b      	ldrb	r3, [r7, #1]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea8:	e003      	b.n	8001eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eaa:	887b      	ldrh	r3, [r7, #2]
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	619a      	str	r2, [r3, #24]
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e12b      	b.n	8002126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d106      	bne.n	8001ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff faf6 	bl	80014d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	@ 0x24
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f20:	f001 f8ec 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4a81      	ldr	r2, [pc, #516]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d807      	bhi.n	8001f40 <HAL_I2C_Init+0x84>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a80      	ldr	r2, [pc, #512]	@ (8002134 <HAL_I2C_Init+0x278>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	e006      	b.n	8001f4e <HAL_I2C_Init+0x92>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a7d      	ldr	r2, [pc, #500]	@ (8002138 <HAL_I2C_Init+0x27c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0e7      	b.n	8002126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a78      	ldr	r2, [pc, #480]	@ (800213c <HAL_I2C_Init+0x280>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0c9b      	lsrs	r3, r3, #18
 8001f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d802      	bhi.n	8001f90 <HAL_I2C_Init+0xd4>
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	e009      	b.n	8001fa4 <HAL_I2C_Init+0xe8>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	4a69      	ldr	r2, [pc, #420]	@ (8002140 <HAL_I2C_Init+0x284>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	495c      	ldr	r1, [pc, #368]	@ (8002130 <HAL_I2C_Init+0x274>)
 8001fc0:	428b      	cmp	r3, r1
 8001fc2:	d819      	bhi.n	8001ff8 <HAL_I2C_Init+0x13c>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1e59      	subs	r1, r3, #1
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fd2:	1c59      	adds	r1, r3, #1
 8001fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fd8:	400b      	ands	r3, r1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_I2C_Init+0x138>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e59      	subs	r1, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fec:	3301      	adds	r3, #1
 8001fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff2:	e051      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	e04f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Init+0x168>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1e58      	subs	r0, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	e012      	b.n	800204a <HAL_I2C_Init+0x18e>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	fbb0 f3f3 	udiv	r3, r0, r3
 800203a:	3301      	adds	r3, #1
 800203c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Init+0x196>
 800204e:	2301      	movs	r3, #1
 8002050:	e022      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10e      	bne.n	8002078 <HAL_I2C_Init+0x1bc>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e58      	subs	r0, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	440b      	add	r3, r1
 8002068:	fbb0 f3f3 	udiv	r3, r0, r3
 800206c:	3301      	adds	r3, #1
 800206e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002076:	e00f      	b.n	8002098 <HAL_I2C_Init+0x1dc>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1e58      	subs	r0, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6859      	ldr	r1, [r3, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	0099      	lsls	r1, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	6809      	ldr	r1, [r1, #0]
 800209c:	4313      	orrs	r3, r2
 800209e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69da      	ldr	r2, [r3, #28]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6911      	ldr	r1, [r2, #16]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68d2      	ldr	r2, [r2, #12]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	000186a0 	.word	0x000186a0
 8002134:	001e847f 	.word	0x001e847f
 8002138:	003d08ff 	.word	0x003d08ff
 800213c:	431bde83 	.word	0x431bde83
 8002140:	10624dd3 	.word	0x10624dd3

08002144 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4603      	mov	r3, r0
 8002154:	817b      	strh	r3, [r7, #10]
 8002156:	460b      	mov	r3, r1
 8002158:	813b      	strh	r3, [r7, #8]
 800215a:	4613      	mov	r3, r2
 800215c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800215e:	f7ff fbf1 	bl	8001944 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	f040 80d9 	bne.w	8002324 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2319      	movs	r3, #25
 8002178:	2201      	movs	r2, #1
 800217a:	496d      	ldr	r1, [pc, #436]	@ (8002330 <HAL_I2C_Mem_Write+0x1ec>)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fc97 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	e0cc      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_I2C_Mem_Write+0x56>
 8002196:	2302      	movs	r3, #2
 8002198:	e0c5      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d007      	beq.n	80021c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2221      	movs	r2, #33	@ 0x21
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2240      	movs	r2, #64	@ 0x40
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_I2C_Mem_Write+0x1f0>)
 8002200:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002202:	88f8      	ldrh	r0, [r7, #6]
 8002204:	893a      	ldrh	r2, [r7, #8]
 8002206:	8979      	ldrh	r1, [r7, #10]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4603      	mov	r3, r0
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 face 	bl	80027b4 <I2C_RequestMemoryWrite>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d052      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e081      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 fd5c 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00d      	beq.n	800224e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	2b04      	cmp	r3, #4
 8002238:	d107      	bne.n	800224a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002248:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e06b      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	781a      	ldrb	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	1c5a      	adds	r2, r3, #1
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b04      	cmp	r3, #4
 800228a:	d11b      	bne.n	80022c4 <HAL_I2C_Mem_Write+0x180>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	2b00      	cmp	r3, #0
 8002292:	d017      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	781a      	ldrb	r2, [r3, #0]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ae:	3b01      	subs	r3, #1
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1aa      	bne.n	8002222 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f000 fd4f 	bl	8002d74 <I2C_WaitOnBTFFlagUntilTimeout>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d107      	bne.n	80022f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e016      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2220      	movs	r2, #32
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002320:	2300      	movs	r3, #0
 8002322:	e000      	b.n	8002326 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002324:	2302      	movs	r3, #2
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	00100002 	.word	0x00100002
 8002334:	ffff0000 	.word	0xffff0000

08002338 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	@ 0x30
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	4608      	mov	r0, r1
 8002342:	4611      	mov	r1, r2
 8002344:	461a      	mov	r2, r3
 8002346:	4603      	mov	r3, r0
 8002348:	817b      	strh	r3, [r7, #10]
 800234a:	460b      	mov	r3, r1
 800234c:	813b      	strh	r3, [r7, #8]
 800234e:	4613      	mov	r3, r2
 8002350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002352:	f7ff faf7 	bl	8001944 <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b20      	cmp	r3, #32
 8002362:	f040 8214 	bne.w	800278e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2319      	movs	r3, #25
 800236c:	2201      	movs	r2, #1
 800236e:	497b      	ldr	r1, [pc, #492]	@ (800255c <HAL_I2C_Mem_Read+0x224>)
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fb9d 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
 800237e:	e207      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_I2C_Mem_Read+0x56>
 800238a:	2302      	movs	r3, #2
 800238c:	e200      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d007      	beq.n	80023b4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2222      	movs	r2, #34	@ 0x22
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2240      	movs	r2, #64	@ 0x40
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002560 <HAL_I2C_Mem_Read+0x228>)
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f6:	88f8      	ldrh	r0, [r7, #6]
 80023f8:	893a      	ldrh	r2, [r7, #8]
 80023fa:	8979      	ldrh	r1, [r7, #10]
 80023fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4603      	mov	r3, r0
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fa6a 	bl	80028e0 <I2C_RequestMemoryRead>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e1bc      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d113      	bne.n	8002446 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	623b      	str	r3, [r7, #32]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	623b      	str	r3, [r7, #32]
 8002432:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	e190      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	2b01      	cmp	r3, #1
 800244c:	d11b      	bne.n	8002486 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800245c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	61fb      	str	r3, [r7, #28]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e170      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800248a:	2b02      	cmp	r3, #2
 800248c:	d11b      	bne.n	80024c6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800249c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	61bb      	str	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	61bb      	str	r3, [r7, #24]
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	e150      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	617b      	str	r3, [r7, #20]
 80024da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024dc:	e144      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	f200 80f1 	bhi.w	80026ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d123      	bne.n	8002538 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fc85 	bl	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e145      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	1c5a      	adds	r2, r3, #1
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	3b01      	subs	r3, #1
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002536:	e117      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	2b02      	cmp	r3, #2
 800253e:	d14e      	bne.n	80025de <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002546:	2200      	movs	r2, #0
 8002548:	4906      	ldr	r1, [pc, #24]	@ (8002564 <HAL_I2C_Mem_Read+0x22c>)
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fab0 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e11a      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
 800255a:	bf00      	nop
 800255c:	00100002 	.word	0x00100002
 8002560:	ffff0000 	.word	0xffff0000
 8002564:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002576:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025dc:	e0c4      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	2200      	movs	r2, #0
 80025e6:	496c      	ldr	r1, [pc, #432]	@ (8002798 <HAL_I2C_Mem_Read+0x460>)
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 fa61 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0cb      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002606:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	1c5a      	adds	r2, r3, #1
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002640:	2200      	movs	r2, #0
 8002642:	4955      	ldr	r1, [pc, #340]	@ (8002798 <HAL_I2C_Mem_Read+0x460>)
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fa33 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e09d      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002662:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691a      	ldr	r2, [r3, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026c8:	e04e      	b.n	8002768 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fb98 	bl	8002e04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e058      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fa:	3b01      	subs	r3, #1
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d124      	bne.n	8002768 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002722:	2b03      	cmp	r3, #3
 8002724:	d107      	bne.n	8002736 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002734:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691a      	ldr	r2, [r3, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	f47f aeb6 	bne.w	80024de <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800278e:	2302      	movs	r3, #2
  }
}
 8002790:	4618      	mov	r0, r3
 8002792:	3728      	adds	r7, #40	@ 0x28
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00010004 	.word	0x00010004

0800279c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
	...

080027b4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f960 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002800:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002804:	d103      	bne.n	800280e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e05f      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002812:	897b      	ldrh	r3, [r7, #10]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	461a      	mov	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002820:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	6a3a      	ldr	r2, [r7, #32]
 8002826:	492d      	ldr	r1, [pc, #180]	@ (80028dc <I2C_RequestMemoryWrite+0x128>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 f9bb 	bl	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04c      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002850:	6a39      	ldr	r1, [r7, #32]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fa46 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00d      	beq.n	800287a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	2b04      	cmp	r3, #4
 8002864:	d107      	bne.n	8002876 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002874:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e02b      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d105      	bne.n	800288c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002880:	893b      	ldrh	r3, [r7, #8]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]
 800288a:	e021      	b.n	80028d0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	b29b      	uxth	r3, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	6a39      	ldr	r1, [r7, #32]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fa20 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d107      	bne.n	80028c2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e005      	b.n	80028d2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028c6:	893b      	ldrh	r3, [r7, #8]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00010002 	.word	0x00010002

080028e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	4608      	mov	r0, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	461a      	mov	r2, r3
 80028ee:	4603      	mov	r3, r0
 80028f0:	817b      	strh	r3, [r7, #10]
 80028f2:	460b      	mov	r3, r1
 80028f4:	813b      	strh	r3, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002908:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	2200      	movs	r2, #0
 8002922:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002926:	68f8      	ldr	r0, [r7, #12]
 8002928:	f000 f8c2 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00d      	beq.n	800294e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800293c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002940:	d103      	bne.n	800294a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e0aa      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800295c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	6a3a      	ldr	r2, [r7, #32]
 8002962:	4952      	ldr	r1, [pc, #328]	@ (8002aac <I2C_RequestMemoryRead+0x1cc>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f91d 	bl	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e097      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f9a8 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00d      	beq.n	80029b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d107      	bne.n	80029b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e076      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d105      	bne.n	80029c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029bc:	893b      	ldrh	r3, [r7, #8]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	e021      	b.n	8002a0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029c8:	893b      	ldrh	r3, [r7, #8]
 80029ca:	0a1b      	lsrs	r3, r3, #8
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	6a39      	ldr	r1, [r7, #32]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f982 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00d      	beq.n	8002a02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d107      	bne.n	80029fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e050      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a02:	893b      	ldrh	r3, [r7, #8]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a0e:	6a39      	ldr	r1, [r7, #32]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 f967 	bl	8002ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00d      	beq.n	8002a38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d107      	bne.n	8002a34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e035      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f82b 	bl	8002ab0 <I2C_WaitOnFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a6e:	d103      	bne.n	8002a78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e013      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a7c:	897b      	ldrh	r3, [r7, #10]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f043 0301 	orr.w	r3, r3, #1
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	4906      	ldr	r1, [pc, #24]	@ (8002aac <I2C_RequestMemoryRead+0x1cc>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f886 	bl	8002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	00010002 	.word	0x00010002

08002ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	4613      	mov	r3, r2
 8002abe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ac0:	e048      	b.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d044      	beq.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7fe ff3b 	bl	8001944 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d139      	bne.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	0c1b      	lsrs	r3, r3, #16
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10d      	bne.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	e00c      	b.n	8002b20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bf0c      	ite	eq
 8002b18:	2301      	moveq	r3, #1
 8002b1a:	2300      	movne	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	461a      	mov	r2, r3
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d116      	bne.n	8002b54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0220 	orr.w	r2, r3, #32
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e023      	b.n	8002b9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	0c1b      	lsrs	r3, r3, #16
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	43da      	mvns	r2, r3
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	e00c      	b.n	8002b94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	43da      	mvns	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4013      	ands	r3, r2
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	bf0c      	ite	eq
 8002b8c:	2301      	moveq	r3, #1
 8002b8e:	2300      	movne	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d093      	beq.n	8002ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
 8002bb0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bb2:	e071      	b.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bc2:	d123      	bne.n	8002c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bdc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e067      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c12:	d041      	beq.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c14:	f7fe fe96 	bl	8001944 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d302      	bcc.n	8002c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d136      	bne.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d10c      	bne.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	43da      	mvns	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	e00b      	b.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	43da      	mvns	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf14      	ite	ne
 8002c60:	2301      	movne	r3, #1
 8002c62:	2300      	moveq	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e021      	b.n	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10c      	bne.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4013      	ands	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e00b      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f47f af6d 	bne.w	8002bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 f8e3 	bl	8002ebe <I2C_IsAcknowledgeFailed>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e034      	b.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d08:	d028      	beq.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d0a:	f7fe fe1b 	bl	8001944 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d11d      	bne.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d2a:	2b80      	cmp	r3, #128	@ 0x80
 8002d2c:	d016      	beq.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f043 0220 	orr.w	r2, r3, #32
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e007      	b.n	8002d6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d66:	2b80      	cmp	r3, #128	@ 0x80
 8002d68:	d1c3      	bne.n	8002cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d80:	e034      	b.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f89b 	bl	8002ebe <I2C_IsAcknowledgeFailed>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e034      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d028      	beq.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe fdd3 	bl	8001944 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d11d      	bne.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d016      	beq.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd8:	f043 0220 	orr.w	r2, r3, #32
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e007      	b.n	8002dfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d1c3      	bne.n	8002d82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e10:	e049      	b.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d119      	bne.n	8002e54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0210 	mvn.w	r2, #16
 8002e28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e030      	b.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e54:	f7fe fd76 	bl	8001944 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d302      	bcc.n	8002e6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11d      	bne.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e74:	2b40      	cmp	r3, #64	@ 0x40
 8002e76:	d016      	beq.n	8002ea6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e007      	b.n	8002eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb0:	2b40      	cmp	r3, #64	@ 0x40
 8002eb2:	d1ae      	bne.n	8002e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed4:	d11b      	bne.n	8002f0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ede:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f043 0204 	orr.w	r2, r3, #4
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bc80      	pop	{r7}
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0cc      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b68      	ldr	r3, [pc, #416]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d90c      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3e:	4b65      	ldr	r3, [pc, #404]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a58      	ldr	r2, [pc, #352]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d044      	beq.n	800303c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d119      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fda:	4b3f      	ldr	r3, [pc, #252]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e06f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fea:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e067      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b37      	ldr	r3, [pc, #220]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4934      	ldr	r1, [pc, #208]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800300c:	f7fe fc9a 	bl	8001944 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe fc96 	bl	8001944 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e04f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b2b      	ldr	r3, [pc, #172]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b25      	ldr	r3, [pc, #148]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d20c      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b22      	ldr	r3, [pc, #136]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f853 	bl	800314c <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	@ (80030dc <HAL_RCC_ClockConfig+0x1c0>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1c4>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fbfc 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023c00 	.word	0x40023c00
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08006bcc 	.word	0x08006bcc
 80030e0:	20000000 	.word	0x20000000
 80030e4:	20000004 	.word	0x20000004

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b02      	ldr	r3, [pc, #8]	@ (80030f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000000 	.word	0x20000000

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	f7ff fff2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b05      	ldr	r3, [pc, #20]	@ (800311c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	0a9b      	lsrs	r3, r3, #10
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4903      	ldr	r1, [pc, #12]	@ (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40023800 	.word	0x40023800
 8003120:	08006bdc 	.word	0x08006bdc

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003128:	f7ff ffde 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0b5b      	lsrs	r3, r3, #13
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4903      	ldr	r1, [pc, #12]	@ (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800313a:	5ccb      	ldrb	r3, [r1, r3]
 800313c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003140:	4618      	mov	r0, r3
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40023800 	.word	0x40023800
 8003148:	08006bdc 	.word	0x08006bdc

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b0ae      	sub	sp, #184	@ 0xb8
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003172:	4bcf      	ldr	r3, [pc, #828]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b0c      	cmp	r3, #12
 800317c:	f200 8211 	bhi.w	80035a2 <HAL_RCC_GetSysClockFreq+0x456>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080035a3 	.word	0x080035a3
 8003190:	080035a3 	.word	0x080035a3
 8003194:	080035a3 	.word	0x080035a3
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080035a3 	.word	0x080035a3
 80031a0:	080035a3 	.word	0x080035a3
 80031a4:	080035a3 	.word	0x080035a3
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080035a3 	.word	0x080035a3
 80031b0:	080035a3 	.word	0x080035a3
 80031b4:	080035a3 	.word	0x080035a3
 80031b8:	080033c9 	.word	0x080033c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031bc:	4bbd      	ldr	r3, [pc, #756]	@ (80034b4 <HAL_RCC_GetSysClockFreq+0x368>)
 80031be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031c2:	e1f2      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031c4:	4bbc      	ldr	r3, [pc, #752]	@ (80034b8 <HAL_RCC_GetSysClockFreq+0x36c>)
 80031c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031ca:	e1ee      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031cc:	4bb8      	ldr	r3, [pc, #736]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031d8:	4bb5      	ldr	r3, [pc, #724]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d075      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0x184>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e4:	4bb2      	ldr	r3, [pc, #712]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	099b      	lsrs	r3, r3, #6
 80031ea:	2200      	movs	r2, #0
 80031ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031f0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800320a:	4622      	mov	r2, r4
 800320c:	462b      	mov	r3, r5
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4621      	mov	r1, r4
 8003224:	1a51      	subs	r1, r2, r1
 8003226:	6439      	str	r1, [r7, #64]	@ 0x40
 8003228:	4629      	mov	r1, r5
 800322a:	eb63 0301 	sbc.w	r3, r3, r1
 800322e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800323c:	4649      	mov	r1, r9
 800323e:	018b      	lsls	r3, r1, #6
 8003240:	4641      	mov	r1, r8
 8003242:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003246:	4641      	mov	r1, r8
 8003248:	018a      	lsls	r2, r1, #6
 800324a:	46c4      	mov	ip, r8
 800324c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8003250:	f8c7 c038 	str.w	ip, [r7, #56]	@ 0x38
 8003254:	4649      	mov	r1, r9
 8003256:	eb63 0301 	sbc.w	r3, r3, r1
 800325a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003268:	4649      	mov	r1, r9
 800326a:	00cb      	lsls	r3, r1, #3
 800326c:	46c4      	mov	ip, r8
 800326e:	ea43 735c 	orr.w	r3, r3, ip, lsr #29
 8003272:	4641      	mov	r1, r8
 8003274:	00ca      	lsls	r2, r1, #3
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	4603      	mov	r3, r0
 800327c:	4622      	mov	r2, r4
 800327e:	189b      	adds	r3, r3, r2
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	462b      	mov	r3, r5
 8003284:	460a      	mov	r2, r1
 8003286:	eb42 0303 	adc.w	r3, r2, r3
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003298:	4629      	mov	r1, r5
 800329a:	024b      	lsls	r3, r1, #9
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	4604      	mov	r4, r0
 80032a2:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80032a6:	4601      	mov	r1, r0
 80032a8:	024a      	lsls	r2, r1, #9
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032c0:	f7fd fc92 	bl	8000be8 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032ce:	e069      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x258>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d0:	4b77      	ldr	r3, [pc, #476]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	099b      	lsrs	r3, r3, #6
 80032d6:	2200      	movs	r2, #0
 80032d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80032e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80032e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032ea:	2300      	movs	r3, #0
 80032ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80032f2:	4622      	mov	r2, r4
 80032f4:	462b      	mov	r3, r5
 80032f6:	f04f 0000 	mov.w	r0, #0
 80032fa:	f04f 0100 	mov.w	r1, #0
 80032fe:	0159      	lsls	r1, r3, #5
 8003300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003304:	0150      	lsls	r0, r2, #5
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4621      	mov	r1, r4
 800330c:	1a51      	subs	r1, r2, r1
 800330e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003310:	4629      	mov	r1, r5
 8003312:	eb63 0301 	sbc.w	r3, r3, r1
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003324:	4649      	mov	r1, r9
 8003326:	018b      	lsls	r3, r1, #6
 8003328:	4641      	mov	r1, r8
 800332a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800332e:	4641      	mov	r1, r8
 8003330:	018a      	lsls	r2, r1, #6
 8003332:	46c4      	mov	ip, r8
 8003334:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003338:	4649      	mov	r1, r9
 800333a:	eb63 0b01 	sbc.w	fp, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800334a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800334e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003352:	4692      	mov	sl, r2
 8003354:	469b      	mov	fp, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb1a 0303 	adds.w	r3, sl, r3
 800335c:	623b      	str	r3, [r7, #32]
 800335e:	462b      	mov	r3, r5
 8003360:	eb4b 0303 	adc.w	r3, fp, r3
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003372:	4629      	mov	r1, r5
 8003374:	028b      	lsls	r3, r1, #10
 8003376:	4620      	mov	r0, r4
 8003378:	4629      	mov	r1, r5
 800337a:	4604      	mov	r4, r0
 800337c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003380:	4601      	mov	r1, r0
 8003382:	028a      	lsls	r2, r1, #10
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800338c:	2200      	movs	r2, #0
 800338e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003390:	677a      	str	r2, [r7, #116]	@ 0x74
 8003392:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003396:	f7fd fc27 	bl	8000be8 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4613      	mov	r3, r2
 80033a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a4:	4b42      	ldr	r3, [pc, #264]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80033b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033c6:	e0f0      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x45e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033c8:	4b39      	ldr	r3, [pc, #228]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033d4:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d06d      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x370>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033e0:	4b33      	ldr	r3, [pc, #204]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0x364>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	099b      	lsrs	r3, r3, #6
 80033e6:	2200      	movs	r2, #0
 80033e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80033ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80033f4:	2300      	movs	r3, #0
 80033f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80033f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80033fc:	4622      	mov	r2, r4
 80033fe:	462b      	mov	r3, r5
 8003400:	f04f 0000 	mov.w	r0, #0
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	0159      	lsls	r1, r3, #5
 800340a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800340e:	0150      	lsls	r0, r2, #5
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4621      	mov	r1, r4
 8003416:	1a51      	subs	r1, r2, r1
 8003418:	61b9      	str	r1, [r7, #24]
 800341a:	4629      	mov	r1, r5
 800341c:	eb63 0301 	sbc.w	r3, r3, r1
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800342e:	4659      	mov	r1, fp
 8003430:	018b      	lsls	r3, r1, #6
 8003432:	4651      	mov	r1, sl
 8003434:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003438:	4651      	mov	r1, sl
 800343a:	018a      	lsls	r2, r1, #6
 800343c:	46d4      	mov	ip, sl
 800343e:	ebb2 080c 	subs.w	r8, r2, ip
 8003442:	4659      	mov	r1, fp
 8003444:	eb63 0901 	sbc.w	r9, r3, r1
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003454:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003458:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800345c:	4690      	mov	r8, r2
 800345e:	4699      	mov	r9, r3
 8003460:	4623      	mov	r3, r4
 8003462:	eb18 0303 	adds.w	r3, r8, r3
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	462b      	mov	r3, r5
 800346a:	eb49 0303 	adc.w	r3, r9, r3
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800347c:	4629      	mov	r1, r5
 800347e:	024b      	lsls	r3, r1, #9
 8003480:	4620      	mov	r0, r4
 8003482:	4629      	mov	r1, r5
 8003484:	4604      	mov	r4, r0
 8003486:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800348a:	4601      	mov	r1, r0
 800348c:	024a      	lsls	r2, r1, #9
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003496:	2200      	movs	r2, #0
 8003498:	65bb      	str	r3, [r7, #88]	@ 0x58
 800349a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800349c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034a0:	f7fd fba2 	bl	8000be8 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4613      	mov	r3, r2
 80034aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ae:	e068      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0x436>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	00f42400 	.word	0x00f42400
 80034b8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034bc:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x46c>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	2200      	movs	r2, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	4611      	mov	r1, r2
 80034c8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80034ce:	2300      	movs	r3, #0
 80034d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80034d2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80034d6:	4642      	mov	r2, r8
 80034d8:	464b      	mov	r3, r9
 80034da:	f04f 0000 	mov.w	r0, #0
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	0159      	lsls	r1, r3, #5
 80034e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e8:	0150      	lsls	r0, r2, #5
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4641      	mov	r1, r8
 80034f0:	1a51      	subs	r1, r2, r1
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	4649      	mov	r1, r9
 80034f6:	eb63 0301 	sbc.w	r3, r3, r1
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003508:	4659      	mov	r1, fp
 800350a:	018b      	lsls	r3, r1, #6
 800350c:	4651      	mov	r1, sl
 800350e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003512:	4651      	mov	r1, sl
 8003514:	018a      	lsls	r2, r1, #6
 8003516:	46d4      	mov	ip, sl
 8003518:	ebb2 040c 	subs.w	r4, r2, ip
 800351c:	4659      	mov	r1, fp
 800351e:	eb63 0501 	sbc.w	r5, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	00eb      	lsls	r3, r5, #3
 800352c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003530:	00e2      	lsls	r2, r4, #3
 8003532:	4614      	mov	r4, r2
 8003534:	461d      	mov	r5, r3
 8003536:	4643      	mov	r3, r8
 8003538:	18e3      	adds	r3, r4, r3
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	464b      	mov	r3, r9
 800353e:	eb45 0303 	adc.w	r3, r5, r3
 8003542:	607b      	str	r3, [r7, #4]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003550:	4629      	mov	r1, r5
 8003552:	028b      	lsls	r3, r1, #10
 8003554:	4620      	mov	r0, r4
 8003556:	4629      	mov	r1, r5
 8003558:	4604      	mov	r4, r0
 800355a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800355e:	4601      	mov	r1, r0
 8003560:	028a      	lsls	r2, r1, #10
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800356a:	2200      	movs	r2, #0
 800356c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800356e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003574:	f7fd fb38 	bl	8000be8 <__aeabi_uldivmod>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4613      	mov	r3, r2
 800357e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x46c>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	0f1b      	lsrs	r3, r3, #28
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003590:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003594:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035a0:	e003      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x45e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x470>)
 80035a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	37b8      	adds	r7, #184	@ 0xb8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b8:	40023800 	.word	0x40023800
 80035bc:	00f42400 	.word	0x00f42400

080035c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e28d      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8083 	beq.w	80036e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035e0:	4b94      	ldr	r3, [pc, #592]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d019      	beq.n	8003620 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035ec:	4b91      	ldr	r3, [pc, #580]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
        || \
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d106      	bne.n	8003606 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80035f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003604:	d00c      	beq.n	8003620 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b8b      	ldr	r3, [pc, #556]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d112      	bne.n	8003638 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b88      	ldr	r3, [pc, #544]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800361e:	d10b      	bne.n	8003638 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003620:	4b84      	ldr	r3, [pc, #528]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05b      	beq.n	80036e4 <HAL_RCC_OscConfig+0x124>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d157      	bne.n	80036e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e25a      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003640:	d106      	bne.n	8003650 <HAL_RCC_OscConfig+0x90>
 8003642:	4b7c      	ldr	r3, [pc, #496]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a7b      	ldr	r2, [pc, #492]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	e01d      	b.n	800368c <HAL_RCC_OscConfig+0xcc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0xb4>
 800365a:	4b76      	ldr	r3, [pc, #472]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a75      	ldr	r2, [pc, #468]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b73      	ldr	r3, [pc, #460]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a72      	ldr	r2, [pc, #456]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 800366c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	e00b      	b.n	800368c <HAL_RCC_OscConfig+0xcc>
 8003674:	4b6f      	ldr	r3, [pc, #444]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a6e      	ldr	r2, [pc, #440]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 800367a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b6c      	ldr	r3, [pc, #432]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a6b      	ldr	r2, [pc, #428]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800368a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d013      	beq.n	80036bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fe f956 	bl	8001944 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800369c:	f7fe f952 	bl	8001944 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b64      	cmp	r3, #100	@ 0x64
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e21f      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ae:	4b61      	ldr	r3, [pc, #388]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0xdc>
 80036ba:	e014      	b.n	80036e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe f942 	bl	8001944 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe f93e 	bl	8001944 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	@ 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e20b      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d6:	4b57      	ldr	r3, [pc, #348]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f0      	bne.n	80036c4 <HAL_RCC_OscConfig+0x104>
 80036e2:	e000      	b.n	80036e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06f      	beq.n	80037d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036f2:	4b50      	ldr	r3, [pc, #320]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d017      	beq.n	800372e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80036fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
        || \
 8003706:	2b08      	cmp	r3, #8
 8003708:	d105      	bne.n	8003716 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800370a:	4b4a      	ldr	r3, [pc, #296]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d11c      	bne.n	800375c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003722:	4b44      	ldr	r3, [pc, #272]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d116      	bne.n	800375c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	4b41      	ldr	r3, [pc, #260]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d005      	beq.n	8003746 <HAL_RCC_OscConfig+0x186>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e1d3      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003746:	4b3b      	ldr	r3, [pc, #236]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4937      	ldr	r1, [pc, #220]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800375a:	e03a      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003764:	4b34      	ldr	r3, [pc, #208]	@ (8003838 <HAL_RCC_OscConfig+0x278>)
 8003766:	2201      	movs	r2, #1
 8003768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376a:	f7fe f8eb 	bl	8001944 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003772:	f7fe f8e7 	bl	8001944 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e1b4      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003784:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003790:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4925      	ldr	r1, [pc, #148]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]
 80037a4:	e015      	b.n	80037d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a6:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <HAL_RCC_OscConfig+0x278>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f8ca 	bl	8001944 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b4:	f7fe f8c6 	bl	8001944 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e193      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d036      	beq.n	800384c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d016      	beq.n	8003814 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b15      	ldr	r3, [pc, #84]	@ (800383c <HAL_RCC_OscConfig+0x27c>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe f8aa 	bl	8001944 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fe f8a6 	bl	8001944 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e173      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003806:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <HAL_RCC_OscConfig+0x274>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0x234>
 8003812:	e01b      	b.n	800384c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003814:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_OscConfig+0x27c>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fe f893 	bl	8001944 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	e00e      	b.n	8003840 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003822:	f7fe f88f 	bl	8001944 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d907      	bls.n	8003840 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e15c      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
 8003834:	40023800 	.word	0x40023800
 8003838:	42470000 	.word	0x42470000
 800383c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	4b8a      	ldr	r3, [pc, #552]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ea      	bne.n	8003822 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8097 	beq.w	8003988 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b83      	ldr	r3, [pc, #524]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10f      	bne.n	800388a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	4a7e      	ldr	r2, [pc, #504]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	@ 0x40
 800387a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	4b79      	ldr	r3, [pc, #484]	@ (8003a70 <HAL_RCC_OscConfig+0x4b0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003896:	4b76      	ldr	r3, [pc, #472]	@ (8003a70 <HAL_RCC_OscConfig+0x4b0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a75      	ldr	r2, [pc, #468]	@ (8003a70 <HAL_RCC_OscConfig+0x4b0>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a2:	f7fe f84f 	bl	8001944 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fe f84b 	bl	8001944 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e118      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a70 <HAL_RCC_OscConfig+0x4b0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x31e>
 80038d0:	4b66      	ldr	r3, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d4:	4a65      	ldr	r2, [pc, #404]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	@ 0x70
 80038dc:	e01c      	b.n	8003918 <HAL_RCC_OscConfig+0x358>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b05      	cmp	r3, #5
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x340>
 80038e6:	4b61      	ldr	r3, [pc, #388]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	4a60      	ldr	r2, [pc, #384]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038ec:	f043 0304 	orr.w	r3, r3, #4
 80038f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f2:	4b5e      	ldr	r3, [pc, #376]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	4a5d      	ldr	r2, [pc, #372]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0x358>
 8003900:	4b5a      	ldr	r3, [pc, #360]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003904:	4a59      	ldr	r2, [pc, #356]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003906:	f023 0301 	bic.w	r3, r3, #1
 800390a:	6713      	str	r3, [r2, #112]	@ 0x70
 800390c:	4b57      	ldr	r3, [pc, #348]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003910:	4a56      	ldr	r2, [pc, #344]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003912:	f023 0304 	bic.w	r3, r3, #4
 8003916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d015      	beq.n	800394c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fe f810 	bl	8001944 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003928:	f7fe f80c 	bl	8001944 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e0d7      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0ee      	beq.n	8003928 <HAL_RCC_OscConfig+0x368>
 800394a:	e014      	b.n	8003976 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fd fffa 	bl	8001944 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003952:	e00a      	b.n	800396a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003954:	f7fd fff6 	bl	8001944 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003962:	4293      	cmp	r3, r2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e0c1      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800396a:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1ee      	bne.n	8003954 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d105      	bne.n	8003988 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	4a3a      	ldr	r2, [pc, #232]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 80ad 	beq.w	8003aec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003992:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	2b08      	cmp	r3, #8
 800399c:	d060      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d145      	bne.n	8003a32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <HAL_RCC_OscConfig+0x4b4>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fd ffca 	bl	8001944 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd ffc6 	bl	8001944 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e093      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b29      	ldr	r3, [pc, #164]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	491b      	ldr	r1, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_OscConfig+0x4b4>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0a:	f7fd ff9b 	bl	8001944 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fd ff97 	bl	8001944 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e064      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a24:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x452>
 8003a30:	e05c      	b.n	8003aec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b10      	ldr	r3, [pc, #64]	@ (8003a74 <HAL_RCC_OscConfig+0x4b4>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd ff84 	bl	8001944 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd ff80 	bl	8001944 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e04d      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <HAL_RCC_OscConfig+0x4ac>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x480>
 8003a5e:	e045      	b.n	8003aec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e040      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a78:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <HAL_RCC_OscConfig+0x538>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d030      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d129      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d122      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d119      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d10f      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023800 	.word	0x40023800

08003afc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e042      	b.n	8003b94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fd fd1e 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2224      	movs	r2, #36	@ 0x24
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f82b 	bl	8003b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba0:	b0c0      	sub	sp, #256	@ 0x100
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb8:	68d9      	ldr	r1, [r3, #12]
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	ea40 0301 	orr.w	r3, r0, r1
 8003bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	431a      	orrs	r2, r3
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bf4:	f021 010c 	bic.w	r1, r1, #12
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c02:	430b      	orrs	r3, r1
 8003c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c16:	6999      	ldr	r1, [r3, #24]
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	ea40 0301 	orr.w	r3, r0, r1
 8003c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b91      	ldr	r3, [pc, #580]	@ (8003e70 <UART_SetConfig+0x2d4>)
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d005      	beq.n	8003c3c <UART_SetConfig+0xa0>
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b8f      	ldr	r3, [pc, #572]	@ (8003e74 <UART_SetConfig+0x2d8>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d104      	bne.n	8003c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c3c:	f7ff fa72 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8003c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c44:	e003      	b.n	8003c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c46:	f7ff fa59 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8003c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c58:	f040 8110 	bne.w	8003e7c <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c6e:	4622      	mov	r2, r4
 8003c70:	462b      	mov	r3, r5
 8003c72:	1891      	adds	r1, r2, r2
 8003c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c76:	415b      	adcs	r3, r3
 8003c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c7e:	4620      	mov	r0, r4
 8003c80:	4629      	mov	r1, r5
 8003c82:	4604      	mov	r4, r0
 8003c84:	eb12 0804 	adds.w	r8, r2, r4
 8003c88:	460c      	mov	r4, r1
 8003c8a:	eb43 0904 	adc.w	r9, r3, r4
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca2:	4690      	mov	r8, r2
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	eb18 0303 	adds.w	r3, r8, r3
 8003cac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	eb49 0303 	adc.w	r3, r9, r3
 8003cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003cca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003cce:	460b      	mov	r3, r1
 8003cd0:	18db      	adds	r3, r3, r3
 8003cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cdc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ce0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ce4:	f7fc ff80 	bl	8000be8 <__aeabi_uldivmod>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4b62      	ldr	r3, [pc, #392]	@ (8003e78 <UART_SetConfig+0x2dc>)
 8003cee:	fba3 2302 	umull	r2, r3, r3, r2
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	011c      	lsls	r4, r3, #4
 8003cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d08:	4642      	mov	r2, r8
 8003d0a:	464b      	mov	r3, r9
 8003d0c:	1891      	adds	r1, r2, r2
 8003d0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d10:	415b      	adcs	r3, r3
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d18:	4645      	mov	r5, r8
 8003d1a:	eb12 0a05 	adds.w	sl, r2, r5
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	460d      	mov	r5, r1
 8003d24:	eb43 0b05 	adc.w	fp, r3, r5
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3c:	4692      	mov	sl, r2
 8003d3e:	469b      	mov	fp, r3
 8003d40:	4603      	mov	r3, r0
 8003d42:	eb1a 0303 	adds.w	r3, sl, r3
 8003d46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	18db      	adds	r3, r3, r3
 8003d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d6e:	4613      	mov	r3, r2
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d7e:	f7fc ff33 	bl	8000be8 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	4b3b      	ldr	r3, [pc, #236]	@ (8003e78 <UART_SetConfig+0x2dc>)
 8003d8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d8e:	095b      	lsrs	r3, r3, #5
 8003d90:	2264      	movs	r2, #100	@ 0x64
 8003d92:	fb02 f303 	mul.w	r3, r2, r3
 8003d96:	1acb      	subs	r3, r1, r3
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d9e:	4b36      	ldr	r3, [pc, #216]	@ (8003e78 <UART_SetConfig+0x2dc>)
 8003da0:	fba3 2302 	umull	r2, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003dac:	441c      	add	r4, r3
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003db8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003dbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	1851      	adds	r1, r2, r1
 8003dd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	414b      	adcs	r3, r1
 8003dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003de8:	4659      	mov	r1, fp
 8003dea:	00cb      	lsls	r3, r1, #3
 8003dec:	4655      	mov	r5, sl
 8003dee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003df2:	4651      	mov	r1, sl
 8003df4:	00ca      	lsls	r2, r1, #3
 8003df6:	4610      	mov	r0, r2
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	4642      	mov	r2, r8
 8003dfe:	189b      	adds	r3, r3, r2
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e04:	464b      	mov	r3, r9
 8003e06:	460a      	mov	r2, r1
 8003e08:	eb42 0303 	adc.w	r3, r2, r3
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e24:	460b      	mov	r3, r1
 8003e26:	18db      	adds	r3, r3, r3
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e3a:	f7fc fed5 	bl	8000be8 <__aeabi_uldivmod>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <UART_SetConfig+0x2dc>)
 8003e44:	fba3 1302 	umull	r1, r3, r3, r2
 8003e48:	095b      	lsrs	r3, r3, #5
 8003e4a:	2164      	movs	r1, #100	@ 0x64
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	3332      	adds	r3, #50	@ 0x32
 8003e56:	4a08      	ldr	r2, [pc, #32]	@ (8003e78 <UART_SetConfig+0x2dc>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	f003 0207 	and.w	r2, r3, #7
 8003e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4422      	add	r2, r4
 8003e6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e6c:	e10a      	b.n	8004084 <UART_SetConfig+0x4e8>
 8003e6e:	bf00      	nop
 8003e70:	40011000 	.word	0x40011000
 8003e74:	40011400 	.word	0x40011400
 8003e78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e80:	2200      	movs	r2, #0
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e8e:	4642      	mov	r2, r8
 8003e90:	464b      	mov	r3, r9
 8003e92:	1891      	adds	r1, r2, r2
 8003e94:	6239      	str	r1, [r7, #32]
 8003e96:	415b      	adcs	r3, r3
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	1854      	adds	r4, r2, r1
 8003ea2:	46cc      	mov	ip, r9
 8003ea4:	eb43 050c 	adc.w	r5, r3, ip
 8003ea8:	f04f 0200 	mov.w	r2, #0
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	00eb      	lsls	r3, r5, #3
 8003eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003eb6:	00e2      	lsls	r2, r4, #3
 8003eb8:	4614      	mov	r4, r2
 8003eba:	461d      	mov	r5, r3
 8003ebc:	4640      	mov	r0, r8
 8003ebe:	4649      	mov	r1, r9
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	18e3      	adds	r3, r4, r3
 8003ec4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ec8:	460b      	mov	r3, r1
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eee:	4629      	mov	r1, r5
 8003ef0:	008b      	lsls	r3, r1, #2
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003efc:	4601      	mov	r1, r0
 8003efe:	008a      	lsls	r2, r1, #2
 8003f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f04:	f7fc fe70 	bl	8000be8 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <UART_SetConfig+0x4f4>)
 8003f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	011c      	lsls	r4, r3, #4
 8003f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f28:	4642      	mov	r2, r8
 8003f2a:	464b      	mov	r3, r9
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	61b9      	str	r1, [r7, #24]
 8003f30:	415b      	adcs	r3, r3
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f38:	4641      	mov	r1, r8
 8003f3a:	1851      	adds	r1, r2, r1
 8003f3c:	6139      	str	r1, [r7, #16]
 8003f3e:	4649      	mov	r1, r9
 8003f40:	414b      	adcs	r3, r1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f50:	4659      	mov	r1, fp
 8003f52:	00cb      	lsls	r3, r1, #3
 8003f54:	4655      	mov	r5, sl
 8003f56:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	00ca      	lsls	r2, r1, #3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	4619      	mov	r1, r3
 8003f62:	4603      	mov	r3, r0
 8003f64:	4642      	mov	r2, r8
 8003f66:	189b      	adds	r3, r3, r2
 8003f68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f6c:	464b      	mov	r3, r9
 8003f6e:	460a      	mov	r2, r1
 8003f70:	eb42 0303 	adc.w	r3, r2, r3
 8003f74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f84:	f04f 0200 	mov.w	r2, #0
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f90:	4649      	mov	r1, r9
 8003f92:	008b      	lsls	r3, r1, #2
 8003f94:	4645      	mov	r5, r8
 8003f96:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8003f9a:	4641      	mov	r1, r8
 8003f9c:	008a      	lsls	r2, r1, #2
 8003f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fa2:	f7fc fe21 	bl	8000be8 <__aeabi_uldivmod>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	4b38      	ldr	r3, [pc, #224]	@ (8004090 <UART_SetConfig+0x4f4>)
 8003fae:	fba3 2301 	umull	r2, r3, r3, r1
 8003fb2:	095b      	lsrs	r3, r3, #5
 8003fb4:	2264      	movs	r2, #100	@ 0x64
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	1acb      	subs	r3, r1, r3
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	3332      	adds	r3, #50	@ 0x32
 8003fc0:	4a33      	ldr	r2, [pc, #204]	@ (8004090 <UART_SetConfig+0x4f4>)
 8003fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fcc:	441c      	add	r4, r3
 8003fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fdc:	4642      	mov	r2, r8
 8003fde:	464b      	mov	r3, r9
 8003fe0:	1891      	adds	r1, r2, r2
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	415b      	adcs	r3, r3
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fec:	4641      	mov	r1, r8
 8003fee:	1851      	adds	r1, r2, r1
 8003ff0:	6039      	str	r1, [r7, #0]
 8003ff2:	4649      	mov	r1, r9
 8003ff4:	414b      	adcs	r3, r1
 8003ff6:	607b      	str	r3, [r7, #4]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004004:	4659      	mov	r1, fp
 8004006:	00cb      	lsls	r3, r1, #3
 8004008:	4655      	mov	r5, sl
 800400a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800400e:	4651      	mov	r1, sl
 8004010:	00ca      	lsls	r2, r1, #3
 8004012:	4610      	mov	r0, r2
 8004014:	4619      	mov	r1, r3
 8004016:	4603      	mov	r3, r0
 8004018:	4642      	mov	r2, r8
 800401a:	189b      	adds	r3, r3, r2
 800401c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800401e:	464b      	mov	r3, r9
 8004020:	460a      	mov	r2, r1
 8004022:	eb42 0303 	adc.w	r3, r2, r3
 8004026:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	663b      	str	r3, [r7, #96]	@ 0x60
 8004032:	667a      	str	r2, [r7, #100]	@ 0x64
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004040:	4649      	mov	r1, r9
 8004042:	008b      	lsls	r3, r1, #2
 8004044:	4645      	mov	r5, r8
 8004046:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 800404a:	4641      	mov	r1, r8
 800404c:	008a      	lsls	r2, r1, #2
 800404e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004052:	f7fc fdc9 	bl	8000be8 <__aeabi_uldivmod>
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <UART_SetConfig+0x4f4>)
 800405c:	fba3 1302 	umull	r1, r3, r3, r2
 8004060:	095b      	lsrs	r3, r3, #5
 8004062:	2164      	movs	r1, #100	@ 0x64
 8004064:	fb01 f303 	mul.w	r3, r1, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	3332      	adds	r3, #50	@ 0x32
 800406e:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <UART_SetConfig+0x4f4>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4422      	add	r2, r4
 8004082:	609a      	str	r2, [r3, #8]
}
 8004084:	bf00      	nop
 8004086:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004090:	51eb851f 	.word	0x51eb851f

08004094 <__cvt>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	461d      	mov	r5, r3
 800409e:	4614      	mov	r4, r2
 80040a0:	bfbc      	itt	lt
 80040a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80040a6:	4614      	movlt	r4, r2
 80040a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80040aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80040ac:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80040b0:	bfb6      	itet	lt
 80040b2:	461d      	movlt	r5, r3
 80040b4:	2300      	movge	r3, #0
 80040b6:	232d      	movlt	r3, #45	@ 0x2d
 80040b8:	7013      	strb	r3, [r2, #0]
 80040ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80040bc:	f023 0820 	bic.w	r8, r3, #32
 80040c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80040c4:	d005      	beq.n	80040d2 <__cvt+0x3e>
 80040c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80040ca:	d100      	bne.n	80040ce <__cvt+0x3a>
 80040cc:	3601      	adds	r6, #1
 80040ce:	2302      	movs	r3, #2
 80040d0:	e000      	b.n	80040d4 <__cvt+0x40>
 80040d2:	2303      	movs	r3, #3
 80040d4:	aa07      	add	r2, sp, #28
 80040d6:	9204      	str	r2, [sp, #16]
 80040d8:	aa06      	add	r2, sp, #24
 80040da:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040de:	e9cd 3600 	strd	r3, r6, [sp]
 80040e2:	4622      	mov	r2, r4
 80040e4:	462b      	mov	r3, r5
 80040e6:	f000 fffb 	bl	80050e0 <_dtoa_r>
 80040ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80040ee:	4607      	mov	r7, r0
 80040f0:	d119      	bne.n	8004126 <__cvt+0x92>
 80040f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80040f4:	07db      	lsls	r3, r3, #31
 80040f6:	d50e      	bpl.n	8004116 <__cvt+0x82>
 80040f8:	eb00 0906 	add.w	r9, r0, r6
 80040fc:	2200      	movs	r2, #0
 80040fe:	2300      	movs	r3, #0
 8004100:	4620      	mov	r0, r4
 8004102:	4629      	mov	r1, r5
 8004104:	f7fc fd00 	bl	8000b08 <__aeabi_dcmpeq>
 8004108:	b108      	cbz	r0, 800410e <__cvt+0x7a>
 800410a:	f8cd 901c 	str.w	r9, [sp, #28]
 800410e:	2230      	movs	r2, #48	@ 0x30
 8004110:	9b07      	ldr	r3, [sp, #28]
 8004112:	454b      	cmp	r3, r9
 8004114:	d31e      	bcc.n	8004154 <__cvt+0xc0>
 8004116:	9b07      	ldr	r3, [sp, #28]
 8004118:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800411a:	1bdb      	subs	r3, r3, r7
 800411c:	4638      	mov	r0, r7
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	b008      	add	sp, #32
 8004122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004126:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800412a:	eb00 0906 	add.w	r9, r0, r6
 800412e:	d1e5      	bne.n	80040fc <__cvt+0x68>
 8004130:	7803      	ldrb	r3, [r0, #0]
 8004132:	2b30      	cmp	r3, #48	@ 0x30
 8004134:	d10a      	bne.n	800414c <__cvt+0xb8>
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc fce3 	bl	8000b08 <__aeabi_dcmpeq>
 8004142:	b918      	cbnz	r0, 800414c <__cvt+0xb8>
 8004144:	f1c6 0601 	rsb	r6, r6, #1
 8004148:	f8ca 6000 	str.w	r6, [sl]
 800414c:	f8da 3000 	ldr.w	r3, [sl]
 8004150:	4499      	add	r9, r3
 8004152:	e7d3      	b.n	80040fc <__cvt+0x68>
 8004154:	1c59      	adds	r1, r3, #1
 8004156:	9107      	str	r1, [sp, #28]
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e7d9      	b.n	8004110 <__cvt+0x7c>

0800415c <__exponent>:
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	2900      	cmp	r1, #0
 8004160:	bfba      	itte	lt
 8004162:	4249      	neglt	r1, r1
 8004164:	232d      	movlt	r3, #45	@ 0x2d
 8004166:	232b      	movge	r3, #43	@ 0x2b
 8004168:	2909      	cmp	r1, #9
 800416a:	7002      	strb	r2, [r0, #0]
 800416c:	7043      	strb	r3, [r0, #1]
 800416e:	dd29      	ble.n	80041c4 <__exponent+0x68>
 8004170:	f10d 0307 	add.w	r3, sp, #7
 8004174:	461d      	mov	r5, r3
 8004176:	270a      	movs	r7, #10
 8004178:	461a      	mov	r2, r3
 800417a:	fbb1 f6f7 	udiv	r6, r1, r7
 800417e:	fb07 1416 	mls	r4, r7, r6, r1
 8004182:	3430      	adds	r4, #48	@ 0x30
 8004184:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004188:	460c      	mov	r4, r1
 800418a:	2c63      	cmp	r4, #99	@ 0x63
 800418c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004190:	4631      	mov	r1, r6
 8004192:	dcf1      	bgt.n	8004178 <__exponent+0x1c>
 8004194:	3130      	adds	r1, #48	@ 0x30
 8004196:	1e94      	subs	r4, r2, #2
 8004198:	f803 1c01 	strb.w	r1, [r3, #-1]
 800419c:	1c41      	adds	r1, r0, #1
 800419e:	4623      	mov	r3, r4
 80041a0:	42ab      	cmp	r3, r5
 80041a2:	d30a      	bcc.n	80041ba <__exponent+0x5e>
 80041a4:	f10d 0309 	add.w	r3, sp, #9
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	42ac      	cmp	r4, r5
 80041ac:	bf88      	it	hi
 80041ae:	2300      	movhi	r3, #0
 80041b0:	3302      	adds	r3, #2
 80041b2:	4403      	add	r3, r0
 80041b4:	1a18      	subs	r0, r3, r0
 80041b6:	b003      	add	sp, #12
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80041be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80041c2:	e7ed      	b.n	80041a0 <__exponent+0x44>
 80041c4:	2330      	movs	r3, #48	@ 0x30
 80041c6:	3130      	adds	r1, #48	@ 0x30
 80041c8:	7083      	strb	r3, [r0, #2]
 80041ca:	70c1      	strb	r1, [r0, #3]
 80041cc:	1d03      	adds	r3, r0, #4
 80041ce:	e7f1      	b.n	80041b4 <__exponent+0x58>

080041d0 <_printf_float>:
 80041d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d4:	b091      	sub	sp, #68	@ 0x44
 80041d6:	460c      	mov	r4, r1
 80041d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80041dc:	4616      	mov	r6, r2
 80041de:	461f      	mov	r7, r3
 80041e0:	4605      	mov	r5, r0
 80041e2:	f000 fe7d 	bl	8004ee0 <_localeconv_r>
 80041e6:	6803      	ldr	r3, [r0, #0]
 80041e8:	9308      	str	r3, [sp, #32]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc f860 	bl	80002b0 <strlen>
 80041f0:	2300      	movs	r3, #0
 80041f2:	930e      	str	r3, [sp, #56]	@ 0x38
 80041f4:	f8d8 3000 	ldr.w	r3, [r8]
 80041f8:	9009      	str	r0, [sp, #36]	@ 0x24
 80041fa:	3307      	adds	r3, #7
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	f103 0208 	add.w	r2, r3, #8
 8004204:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004208:	f8d4 b000 	ldr.w	fp, [r4]
 800420c:	f8c8 2000 	str.w	r2, [r8]
 8004210:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004214:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004218:	930b      	str	r3, [sp, #44]	@ 0x2c
 800421a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800421e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004226:	4b9d      	ldr	r3, [pc, #628]	@ (800449c <_printf_float+0x2cc>)
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	f7fc fc9e 	bl	8000b6c <__aeabi_dcmpun>
 8004230:	bb70      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004236:	4b99      	ldr	r3, [pc, #612]	@ (800449c <_printf_float+0x2cc>)
 8004238:	f04f 32ff 	mov.w	r2, #4294967295
 800423c:	f7fc fc78 	bl	8000b30 <__aeabi_dcmple>
 8004240:	bb30      	cbnz	r0, 8004290 <_printf_float+0xc0>
 8004242:	2200      	movs	r2, #0
 8004244:	2300      	movs	r3, #0
 8004246:	4640      	mov	r0, r8
 8004248:	4649      	mov	r1, r9
 800424a:	f7fc fc67 	bl	8000b1c <__aeabi_dcmplt>
 800424e:	b110      	cbz	r0, 8004256 <_printf_float+0x86>
 8004250:	232d      	movs	r3, #45	@ 0x2d
 8004252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004256:	4a92      	ldr	r2, [pc, #584]	@ (80044a0 <_printf_float+0x2d0>)
 8004258:	4b92      	ldr	r3, [pc, #584]	@ (80044a4 <_printf_float+0x2d4>)
 800425a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800425e:	bf94      	ite	ls
 8004260:	4690      	movls	r8, r2
 8004262:	4698      	movhi	r8, r3
 8004264:	2303      	movs	r3, #3
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	f02b 0304 	bic.w	r3, fp, #4
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	f04f 0900 	mov.w	r9, #0
 8004272:	9700      	str	r7, [sp, #0]
 8004274:	4633      	mov	r3, r6
 8004276:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004278:	4621      	mov	r1, r4
 800427a:	4628      	mov	r0, r5
 800427c:	f000 f9d4 	bl	8004628 <_printf_common>
 8004280:	3001      	adds	r0, #1
 8004282:	f040 808f 	bne.w	80043a4 <_printf_float+0x1d4>
 8004286:	f04f 30ff 	mov.w	r0, #4294967295
 800428a:	b011      	add	sp, #68	@ 0x44
 800428c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	4640      	mov	r0, r8
 8004296:	4649      	mov	r1, r9
 8004298:	f7fc fc68 	bl	8000b6c <__aeabi_dcmpun>
 800429c:	b140      	cbz	r0, 80042b0 <_printf_float+0xe0>
 800429e:	464b      	mov	r3, r9
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	bfbc      	itt	lt
 80042a4:	232d      	movlt	r3, #45	@ 0x2d
 80042a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80042aa:	4a7f      	ldr	r2, [pc, #508]	@ (80044a8 <_printf_float+0x2d8>)
 80042ac:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <_printf_float+0x2dc>)
 80042ae:	e7d4      	b.n	800425a <_printf_float+0x8a>
 80042b0:	6863      	ldr	r3, [r4, #4]
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80042b8:	d13f      	bne.n	800433a <_printf_float+0x16a>
 80042ba:	2306      	movs	r3, #6
 80042bc:	6063      	str	r3, [r4, #4]
 80042be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80042c2:	2200      	movs	r2, #0
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	9206      	str	r2, [sp, #24]
 80042c8:	aa0e      	add	r2, sp, #56	@ 0x38
 80042ca:	e9cd a204 	strd	sl, r2, [sp, #16]
 80042ce:	aa0d      	add	r2, sp, #52	@ 0x34
 80042d0:	9203      	str	r2, [sp, #12]
 80042d2:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80042d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4642      	mov	r2, r8
 80042e0:	464b      	mov	r3, r9
 80042e2:	4628      	mov	r0, r5
 80042e4:	910a      	str	r1, [sp, #40]	@ 0x28
 80042e6:	f7ff fed5 	bl	8004094 <__cvt>
 80042ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80042ec:	2947      	cmp	r1, #71	@ 0x47
 80042ee:	4680      	mov	r8, r0
 80042f0:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80042f2:	d128      	bne.n	8004346 <_printf_float+0x176>
 80042f4:	1cc8      	adds	r0, r1, #3
 80042f6:	db02      	blt.n	80042fe <_printf_float+0x12e>
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	4299      	cmp	r1, r3
 80042fc:	dd40      	ble.n	8004380 <_printf_float+0x1b0>
 80042fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8004302:	fa5f fa8a 	uxtb.w	sl, sl
 8004306:	3901      	subs	r1, #1
 8004308:	4652      	mov	r2, sl
 800430a:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800430e:	910d      	str	r1, [sp, #52]	@ 0x34
 8004310:	f7ff ff24 	bl	800415c <__exponent>
 8004314:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004316:	1813      	adds	r3, r2, r0
 8004318:	2a01      	cmp	r2, #1
 800431a:	4681      	mov	r9, r0
 800431c:	6123      	str	r3, [r4, #16]
 800431e:	dc02      	bgt.n	8004326 <_printf_float+0x156>
 8004320:	6822      	ldr	r2, [r4, #0]
 8004322:	07d2      	lsls	r2, r2, #31
 8004324:	d501      	bpl.n	800432a <_printf_float+0x15a>
 8004326:	3301      	adds	r3, #1
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800432e:	2b00      	cmp	r3, #0
 8004330:	d09f      	beq.n	8004272 <_printf_float+0xa2>
 8004332:	232d      	movs	r3, #45	@ 0x2d
 8004334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004338:	e79b      	b.n	8004272 <_printf_float+0xa2>
 800433a:	2947      	cmp	r1, #71	@ 0x47
 800433c:	d1bf      	bne.n	80042be <_printf_float+0xee>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1bd      	bne.n	80042be <_printf_float+0xee>
 8004342:	2301      	movs	r3, #1
 8004344:	e7ba      	b.n	80042bc <_printf_float+0xec>
 8004346:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800434a:	d9dc      	bls.n	8004306 <_printf_float+0x136>
 800434c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004350:	d118      	bne.n	8004384 <_printf_float+0x1b4>
 8004352:	2900      	cmp	r1, #0
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	dd0b      	ble.n	8004370 <_printf_float+0x1a0>
 8004358:	6121      	str	r1, [r4, #16]
 800435a:	b913      	cbnz	r3, 8004362 <_printf_float+0x192>
 800435c:	6822      	ldr	r2, [r4, #0]
 800435e:	07d0      	lsls	r0, r2, #31
 8004360:	d502      	bpl.n	8004368 <_printf_float+0x198>
 8004362:	3301      	adds	r3, #1
 8004364:	440b      	add	r3, r1
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	65a1      	str	r1, [r4, #88]	@ 0x58
 800436a:	f04f 0900 	mov.w	r9, #0
 800436e:	e7dc      	b.n	800432a <_printf_float+0x15a>
 8004370:	b913      	cbnz	r3, 8004378 <_printf_float+0x1a8>
 8004372:	6822      	ldr	r2, [r4, #0]
 8004374:	07d2      	lsls	r2, r2, #31
 8004376:	d501      	bpl.n	800437c <_printf_float+0x1ac>
 8004378:	3302      	adds	r3, #2
 800437a:	e7f4      	b.n	8004366 <_printf_float+0x196>
 800437c:	2301      	movs	r3, #1
 800437e:	e7f2      	b.n	8004366 <_printf_float+0x196>
 8004380:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004386:	4299      	cmp	r1, r3
 8004388:	db05      	blt.n	8004396 <_printf_float+0x1c6>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6121      	str	r1, [r4, #16]
 800438e:	07d8      	lsls	r0, r3, #31
 8004390:	d5ea      	bpl.n	8004368 <_printf_float+0x198>
 8004392:	1c4b      	adds	r3, r1, #1
 8004394:	e7e7      	b.n	8004366 <_printf_float+0x196>
 8004396:	2900      	cmp	r1, #0
 8004398:	bfd4      	ite	le
 800439a:	f1c1 0202 	rsble	r2, r1, #2
 800439e:	2201      	movgt	r2, #1
 80043a0:	4413      	add	r3, r2
 80043a2:	e7e0      	b.n	8004366 <_printf_float+0x196>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	055a      	lsls	r2, r3, #21
 80043a8:	d407      	bmi.n	80043ba <_printf_float+0x1ea>
 80043aa:	6923      	ldr	r3, [r4, #16]
 80043ac:	4642      	mov	r2, r8
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	d12b      	bne.n	8004410 <_printf_float+0x240>
 80043b8:	e765      	b.n	8004286 <_printf_float+0xb6>
 80043ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80043be:	f240 80dd 	bls.w	800457c <_printf_float+0x3ac>
 80043c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043c6:	2200      	movs	r2, #0
 80043c8:	2300      	movs	r3, #0
 80043ca:	f7fc fb9d 	bl	8000b08 <__aeabi_dcmpeq>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	d033      	beq.n	800443a <_printf_float+0x26a>
 80043d2:	4a37      	ldr	r2, [pc, #220]	@ (80044b0 <_printf_float+0x2e0>)
 80043d4:	2301      	movs	r3, #1
 80043d6:	4631      	mov	r1, r6
 80043d8:	4628      	mov	r0, r5
 80043da:	47b8      	blx	r7
 80043dc:	3001      	adds	r0, #1
 80043de:	f43f af52 	beq.w	8004286 <_printf_float+0xb6>
 80043e2:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80043e6:	4543      	cmp	r3, r8
 80043e8:	db02      	blt.n	80043f0 <_printf_float+0x220>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	07d8      	lsls	r0, r3, #31
 80043ee:	d50f      	bpl.n	8004410 <_printf_float+0x240>
 80043f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80043f4:	4631      	mov	r1, r6
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	f43f af43 	beq.w	8004286 <_printf_float+0xb6>
 8004400:	f04f 0900 	mov.w	r9, #0
 8004404:	f108 38ff 	add.w	r8, r8, #4294967295
 8004408:	f104 0a1a 	add.w	sl, r4, #26
 800440c:	45c8      	cmp	r8, r9
 800440e:	dc09      	bgt.n	8004424 <_printf_float+0x254>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	079b      	lsls	r3, r3, #30
 8004414:	f100 8103 	bmi.w	800461e <_printf_float+0x44e>
 8004418:	68e0      	ldr	r0, [r4, #12]
 800441a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800441c:	4298      	cmp	r0, r3
 800441e:	bfb8      	it	lt
 8004420:	4618      	movlt	r0, r3
 8004422:	e732      	b.n	800428a <_printf_float+0xba>
 8004424:	2301      	movs	r3, #1
 8004426:	4652      	mov	r2, sl
 8004428:	4631      	mov	r1, r6
 800442a:	4628      	mov	r0, r5
 800442c:	47b8      	blx	r7
 800442e:	3001      	adds	r0, #1
 8004430:	f43f af29 	beq.w	8004286 <_printf_float+0xb6>
 8004434:	f109 0901 	add.w	r9, r9, #1
 8004438:	e7e8      	b.n	800440c <_printf_float+0x23c>
 800443a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800443c:	2b00      	cmp	r3, #0
 800443e:	dc39      	bgt.n	80044b4 <_printf_float+0x2e4>
 8004440:	4a1b      	ldr	r2, [pc, #108]	@ (80044b0 <_printf_float+0x2e0>)
 8004442:	2301      	movs	r3, #1
 8004444:	4631      	mov	r1, r6
 8004446:	4628      	mov	r0, r5
 8004448:	47b8      	blx	r7
 800444a:	3001      	adds	r0, #1
 800444c:	f43f af1b 	beq.w	8004286 <_printf_float+0xb6>
 8004450:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004454:	ea59 0303 	orrs.w	r3, r9, r3
 8004458:	d102      	bne.n	8004460 <_printf_float+0x290>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	07d9      	lsls	r1, r3, #31
 800445e:	d5d7      	bpl.n	8004410 <_printf_float+0x240>
 8004460:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004464:	4631      	mov	r1, r6
 8004466:	4628      	mov	r0, r5
 8004468:	47b8      	blx	r7
 800446a:	3001      	adds	r0, #1
 800446c:	f43f af0b 	beq.w	8004286 <_printf_float+0xb6>
 8004470:	f04f 0a00 	mov.w	sl, #0
 8004474:	f104 0b1a 	add.w	fp, r4, #26
 8004478:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800447a:	425b      	negs	r3, r3
 800447c:	4553      	cmp	r3, sl
 800447e:	dc01      	bgt.n	8004484 <_printf_float+0x2b4>
 8004480:	464b      	mov	r3, r9
 8004482:	e793      	b.n	80043ac <_printf_float+0x1dc>
 8004484:	2301      	movs	r3, #1
 8004486:	465a      	mov	r2, fp
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	f43f aef9 	beq.w	8004286 <_printf_float+0xb6>
 8004494:	f10a 0a01 	add.w	sl, sl, #1
 8004498:	e7ee      	b.n	8004478 <_printf_float+0x2a8>
 800449a:	bf00      	nop
 800449c:	7fefffff 	.word	0x7fefffff
 80044a0:	08006be4 	.word	0x08006be4
 80044a4:	08006be8 	.word	0x08006be8
 80044a8:	08006bec 	.word	0x08006bec
 80044ac:	08006bf0 	.word	0x08006bf0
 80044b0:	08006bf4 	.word	0x08006bf4
 80044b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044b6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80044ba:	4553      	cmp	r3, sl
 80044bc:	bfa8      	it	ge
 80044be:	4653      	movge	r3, sl
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	4699      	mov	r9, r3
 80044c4:	dc36      	bgt.n	8004534 <_printf_float+0x364>
 80044c6:	f04f 0b00 	mov.w	fp, #0
 80044ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044ce:	f104 021a 	add.w	r2, r4, #26
 80044d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80044d6:	eba3 0309 	sub.w	r3, r3, r9
 80044da:	455b      	cmp	r3, fp
 80044dc:	dc31      	bgt.n	8004542 <_printf_float+0x372>
 80044de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044e0:	459a      	cmp	sl, r3
 80044e2:	dc3a      	bgt.n	800455a <_printf_float+0x38a>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	d437      	bmi.n	800455a <_printf_float+0x38a>
 80044ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80044ec:	ebaa 0903 	sub.w	r9, sl, r3
 80044f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044f2:	ebaa 0303 	sub.w	r3, sl, r3
 80044f6:	4599      	cmp	r9, r3
 80044f8:	bfa8      	it	ge
 80044fa:	4699      	movge	r9, r3
 80044fc:	f1b9 0f00 	cmp.w	r9, #0
 8004500:	dc33      	bgt.n	800456a <_printf_float+0x39a>
 8004502:	f04f 0800 	mov.w	r8, #0
 8004506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800450a:	f104 0b1a 	add.w	fp, r4, #26
 800450e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004510:	ebaa 0303 	sub.w	r3, sl, r3
 8004514:	eba3 0309 	sub.w	r3, r3, r9
 8004518:	4543      	cmp	r3, r8
 800451a:	f77f af79 	ble.w	8004410 <_printf_float+0x240>
 800451e:	2301      	movs	r3, #1
 8004520:	465a      	mov	r2, fp
 8004522:	4631      	mov	r1, r6
 8004524:	4628      	mov	r0, r5
 8004526:	47b8      	blx	r7
 8004528:	3001      	adds	r0, #1
 800452a:	f43f aeac 	beq.w	8004286 <_printf_float+0xb6>
 800452e:	f108 0801 	add.w	r8, r8, #1
 8004532:	e7ec      	b.n	800450e <_printf_float+0x33e>
 8004534:	4642      	mov	r2, r8
 8004536:	4631      	mov	r1, r6
 8004538:	4628      	mov	r0, r5
 800453a:	47b8      	blx	r7
 800453c:	3001      	adds	r0, #1
 800453e:	d1c2      	bne.n	80044c6 <_printf_float+0x2f6>
 8004540:	e6a1      	b.n	8004286 <_printf_float+0xb6>
 8004542:	2301      	movs	r3, #1
 8004544:	4631      	mov	r1, r6
 8004546:	4628      	mov	r0, r5
 8004548:	920a      	str	r2, [sp, #40]	@ 0x28
 800454a:	47b8      	blx	r7
 800454c:	3001      	adds	r0, #1
 800454e:	f43f ae9a 	beq.w	8004286 <_printf_float+0xb6>
 8004552:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004554:	f10b 0b01 	add.w	fp, fp, #1
 8004558:	e7bb      	b.n	80044d2 <_printf_float+0x302>
 800455a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800455e:	4631      	mov	r1, r6
 8004560:	4628      	mov	r0, r5
 8004562:	47b8      	blx	r7
 8004564:	3001      	adds	r0, #1
 8004566:	d1c0      	bne.n	80044ea <_printf_float+0x31a>
 8004568:	e68d      	b.n	8004286 <_printf_float+0xb6>
 800456a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800456c:	464b      	mov	r3, r9
 800456e:	4442      	add	r2, r8
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	d1c3      	bne.n	8004502 <_printf_float+0x332>
 800457a:	e684      	b.n	8004286 <_printf_float+0xb6>
 800457c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004580:	f1ba 0f01 	cmp.w	sl, #1
 8004584:	dc01      	bgt.n	800458a <_printf_float+0x3ba>
 8004586:	07db      	lsls	r3, r3, #31
 8004588:	d536      	bpl.n	80045f8 <_printf_float+0x428>
 800458a:	2301      	movs	r3, #1
 800458c:	4642      	mov	r2, r8
 800458e:	4631      	mov	r1, r6
 8004590:	4628      	mov	r0, r5
 8004592:	47b8      	blx	r7
 8004594:	3001      	adds	r0, #1
 8004596:	f43f ae76 	beq.w	8004286 <_printf_float+0xb6>
 800459a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800459e:	4631      	mov	r1, r6
 80045a0:	4628      	mov	r0, r5
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	f43f ae6e 	beq.w	8004286 <_printf_float+0xb6>
 80045aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045b6:	f7fc faa7 	bl	8000b08 <__aeabi_dcmpeq>
 80045ba:	b9c0      	cbnz	r0, 80045ee <_printf_float+0x41e>
 80045bc:	4653      	mov	r3, sl
 80045be:	f108 0201 	add.w	r2, r8, #1
 80045c2:	4631      	mov	r1, r6
 80045c4:	4628      	mov	r0, r5
 80045c6:	47b8      	blx	r7
 80045c8:	3001      	adds	r0, #1
 80045ca:	d10c      	bne.n	80045e6 <_printf_float+0x416>
 80045cc:	e65b      	b.n	8004286 <_printf_float+0xb6>
 80045ce:	2301      	movs	r3, #1
 80045d0:	465a      	mov	r2, fp
 80045d2:	4631      	mov	r1, r6
 80045d4:	4628      	mov	r0, r5
 80045d6:	47b8      	blx	r7
 80045d8:	3001      	adds	r0, #1
 80045da:	f43f ae54 	beq.w	8004286 <_printf_float+0xb6>
 80045de:	f108 0801 	add.w	r8, r8, #1
 80045e2:	45d0      	cmp	r8, sl
 80045e4:	dbf3      	blt.n	80045ce <_printf_float+0x3fe>
 80045e6:	464b      	mov	r3, r9
 80045e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80045ec:	e6df      	b.n	80043ae <_printf_float+0x1de>
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	f104 0b1a 	add.w	fp, r4, #26
 80045f6:	e7f4      	b.n	80045e2 <_printf_float+0x412>
 80045f8:	2301      	movs	r3, #1
 80045fa:	4642      	mov	r2, r8
 80045fc:	e7e1      	b.n	80045c2 <_printf_float+0x3f2>
 80045fe:	2301      	movs	r3, #1
 8004600:	464a      	mov	r2, r9
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	f43f ae3c 	beq.w	8004286 <_printf_float+0xb6>
 800460e:	f108 0801 	add.w	r8, r8, #1
 8004612:	68e3      	ldr	r3, [r4, #12]
 8004614:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004616:	1a5b      	subs	r3, r3, r1
 8004618:	4543      	cmp	r3, r8
 800461a:	dcf0      	bgt.n	80045fe <_printf_float+0x42e>
 800461c:	e6fc      	b.n	8004418 <_printf_float+0x248>
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	f104 0919 	add.w	r9, r4, #25
 8004626:	e7f4      	b.n	8004612 <_printf_float+0x442>

08004628 <_printf_common>:
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800462c:	4616      	mov	r6, r2
 800462e:	4698      	mov	r8, r3
 8004630:	688a      	ldr	r2, [r1, #8]
 8004632:	690b      	ldr	r3, [r1, #16]
 8004634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004638:	4293      	cmp	r3, r2
 800463a:	bfb8      	it	lt
 800463c:	4613      	movlt	r3, r2
 800463e:	6033      	str	r3, [r6, #0]
 8004640:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004644:	4607      	mov	r7, r0
 8004646:	460c      	mov	r4, r1
 8004648:	b10a      	cbz	r2, 800464e <_printf_common+0x26>
 800464a:	3301      	adds	r3, #1
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	0699      	lsls	r1, r3, #26
 8004652:	bf42      	ittt	mi
 8004654:	6833      	ldrmi	r3, [r6, #0]
 8004656:	3302      	addmi	r3, #2
 8004658:	6033      	strmi	r3, [r6, #0]
 800465a:	6825      	ldr	r5, [r4, #0]
 800465c:	f015 0506 	ands.w	r5, r5, #6
 8004660:	d106      	bne.n	8004670 <_printf_common+0x48>
 8004662:	f104 0a19 	add.w	sl, r4, #25
 8004666:	68e3      	ldr	r3, [r4, #12]
 8004668:	6832      	ldr	r2, [r6, #0]
 800466a:	1a9b      	subs	r3, r3, r2
 800466c:	42ab      	cmp	r3, r5
 800466e:	dc26      	bgt.n	80046be <_printf_common+0x96>
 8004670:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004674:	6822      	ldr	r2, [r4, #0]
 8004676:	3b00      	subs	r3, #0
 8004678:	bf18      	it	ne
 800467a:	2301      	movne	r3, #1
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d42b      	bmi.n	80046d8 <_printf_common+0xb0>
 8004680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004684:	4641      	mov	r1, r8
 8004686:	4638      	mov	r0, r7
 8004688:	47c8      	blx	r9
 800468a:	3001      	adds	r0, #1
 800468c:	d01e      	beq.n	80046cc <_printf_common+0xa4>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	6922      	ldr	r2, [r4, #16]
 8004692:	f003 0306 	and.w	r3, r3, #6
 8004696:	2b04      	cmp	r3, #4
 8004698:	bf02      	ittt	eq
 800469a:	68e5      	ldreq	r5, [r4, #12]
 800469c:	6833      	ldreq	r3, [r6, #0]
 800469e:	1aed      	subeq	r5, r5, r3
 80046a0:	68a3      	ldr	r3, [r4, #8]
 80046a2:	bf0c      	ite	eq
 80046a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046a8:	2500      	movne	r5, #0
 80046aa:	4293      	cmp	r3, r2
 80046ac:	bfc4      	itt	gt
 80046ae:	1a9b      	subgt	r3, r3, r2
 80046b0:	18ed      	addgt	r5, r5, r3
 80046b2:	2600      	movs	r6, #0
 80046b4:	341a      	adds	r4, #26
 80046b6:	42b5      	cmp	r5, r6
 80046b8:	d11a      	bne.n	80046f0 <_printf_common+0xc8>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e008      	b.n	80046d0 <_printf_common+0xa8>
 80046be:	2301      	movs	r3, #1
 80046c0:	4652      	mov	r2, sl
 80046c2:	4641      	mov	r1, r8
 80046c4:	4638      	mov	r0, r7
 80046c6:	47c8      	blx	r9
 80046c8:	3001      	adds	r0, #1
 80046ca:	d103      	bne.n	80046d4 <_printf_common+0xac>
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d4:	3501      	adds	r5, #1
 80046d6:	e7c6      	b.n	8004666 <_printf_common+0x3e>
 80046d8:	18e1      	adds	r1, r4, r3
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	2030      	movs	r0, #48	@ 0x30
 80046de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046e2:	4422      	add	r2, r4
 80046e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046ec:	3302      	adds	r3, #2
 80046ee:	e7c7      	b.n	8004680 <_printf_common+0x58>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4622      	mov	r2, r4
 80046f4:	4641      	mov	r1, r8
 80046f6:	4638      	mov	r0, r7
 80046f8:	47c8      	blx	r9
 80046fa:	3001      	adds	r0, #1
 80046fc:	d0e6      	beq.n	80046cc <_printf_common+0xa4>
 80046fe:	3601      	adds	r6, #1
 8004700:	e7d9      	b.n	80046b6 <_printf_common+0x8e>
	...

08004704 <_printf_i>:
 8004704:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004708:	7e0f      	ldrb	r7, [r1, #24]
 800470a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800470c:	2f78      	cmp	r7, #120	@ 0x78
 800470e:	4691      	mov	r9, r2
 8004710:	4680      	mov	r8, r0
 8004712:	460c      	mov	r4, r1
 8004714:	469a      	mov	sl, r3
 8004716:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800471a:	d807      	bhi.n	800472c <_printf_i+0x28>
 800471c:	2f62      	cmp	r7, #98	@ 0x62
 800471e:	d80a      	bhi.n	8004736 <_printf_i+0x32>
 8004720:	2f00      	cmp	r7, #0
 8004722:	f000 80d2 	beq.w	80048ca <_printf_i+0x1c6>
 8004726:	2f58      	cmp	r7, #88	@ 0x58
 8004728:	f000 80b9 	beq.w	800489e <_printf_i+0x19a>
 800472c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004730:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004734:	e03a      	b.n	80047ac <_printf_i+0xa8>
 8004736:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800473a:	2b15      	cmp	r3, #21
 800473c:	d8f6      	bhi.n	800472c <_printf_i+0x28>
 800473e:	a101      	add	r1, pc, #4	@ (adr r1, 8004744 <_printf_i+0x40>)
 8004740:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004744:	0800479d 	.word	0x0800479d
 8004748:	080047b1 	.word	0x080047b1
 800474c:	0800472d 	.word	0x0800472d
 8004750:	0800472d 	.word	0x0800472d
 8004754:	0800472d 	.word	0x0800472d
 8004758:	0800472d 	.word	0x0800472d
 800475c:	080047b1 	.word	0x080047b1
 8004760:	0800472d 	.word	0x0800472d
 8004764:	0800472d 	.word	0x0800472d
 8004768:	0800472d 	.word	0x0800472d
 800476c:	0800472d 	.word	0x0800472d
 8004770:	080048b1 	.word	0x080048b1
 8004774:	080047db 	.word	0x080047db
 8004778:	0800486b 	.word	0x0800486b
 800477c:	0800472d 	.word	0x0800472d
 8004780:	0800472d 	.word	0x0800472d
 8004784:	080048d3 	.word	0x080048d3
 8004788:	0800472d 	.word	0x0800472d
 800478c:	080047db 	.word	0x080047db
 8004790:	0800472d 	.word	0x0800472d
 8004794:	0800472d 	.word	0x0800472d
 8004798:	08004873 	.word	0x08004873
 800479c:	6833      	ldr	r3, [r6, #0]
 800479e:	1d1a      	adds	r2, r3, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6032      	str	r2, [r6, #0]
 80047a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047ac:	2301      	movs	r3, #1
 80047ae:	e09d      	b.n	80048ec <_printf_i+0x1e8>
 80047b0:	6833      	ldr	r3, [r6, #0]
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	1d19      	adds	r1, r3, #4
 80047b6:	6031      	str	r1, [r6, #0]
 80047b8:	0606      	lsls	r6, r0, #24
 80047ba:	d501      	bpl.n	80047c0 <_printf_i+0xbc>
 80047bc:	681d      	ldr	r5, [r3, #0]
 80047be:	e003      	b.n	80047c8 <_printf_i+0xc4>
 80047c0:	0645      	lsls	r5, r0, #25
 80047c2:	d5fb      	bpl.n	80047bc <_printf_i+0xb8>
 80047c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047c8:	2d00      	cmp	r5, #0
 80047ca:	da03      	bge.n	80047d4 <_printf_i+0xd0>
 80047cc:	232d      	movs	r3, #45	@ 0x2d
 80047ce:	426d      	negs	r5, r5
 80047d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047d4:	4859      	ldr	r0, [pc, #356]	@ (800493c <_printf_i+0x238>)
 80047d6:	230a      	movs	r3, #10
 80047d8:	e011      	b.n	80047fe <_printf_i+0xfa>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	0608      	lsls	r0, r1, #24
 80047e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80047e4:	d402      	bmi.n	80047ec <_printf_i+0xe8>
 80047e6:	0649      	lsls	r1, r1, #25
 80047e8:	bf48      	it	mi
 80047ea:	b2ad      	uxthmi	r5, r5
 80047ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80047ee:	4853      	ldr	r0, [pc, #332]	@ (800493c <_printf_i+0x238>)
 80047f0:	6033      	str	r3, [r6, #0]
 80047f2:	bf14      	ite	ne
 80047f4:	230a      	movne	r3, #10
 80047f6:	2308      	moveq	r3, #8
 80047f8:	2100      	movs	r1, #0
 80047fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047fe:	6866      	ldr	r6, [r4, #4]
 8004800:	60a6      	str	r6, [r4, #8]
 8004802:	2e00      	cmp	r6, #0
 8004804:	bfa2      	ittt	ge
 8004806:	6821      	ldrge	r1, [r4, #0]
 8004808:	f021 0104 	bicge.w	r1, r1, #4
 800480c:	6021      	strge	r1, [r4, #0]
 800480e:	b90d      	cbnz	r5, 8004814 <_printf_i+0x110>
 8004810:	2e00      	cmp	r6, #0
 8004812:	d04b      	beq.n	80048ac <_printf_i+0x1a8>
 8004814:	4616      	mov	r6, r2
 8004816:	fbb5 f1f3 	udiv	r1, r5, r3
 800481a:	fb03 5711 	mls	r7, r3, r1, r5
 800481e:	5dc7      	ldrb	r7, [r0, r7]
 8004820:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004824:	462f      	mov	r7, r5
 8004826:	42bb      	cmp	r3, r7
 8004828:	460d      	mov	r5, r1
 800482a:	d9f4      	bls.n	8004816 <_printf_i+0x112>
 800482c:	2b08      	cmp	r3, #8
 800482e:	d10b      	bne.n	8004848 <_printf_i+0x144>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	07df      	lsls	r7, r3, #31
 8004834:	d508      	bpl.n	8004848 <_printf_i+0x144>
 8004836:	6923      	ldr	r3, [r4, #16]
 8004838:	6861      	ldr	r1, [r4, #4]
 800483a:	4299      	cmp	r1, r3
 800483c:	bfde      	ittt	le
 800483e:	2330      	movle	r3, #48	@ 0x30
 8004840:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004844:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004848:	1b92      	subs	r2, r2, r6
 800484a:	6122      	str	r2, [r4, #16]
 800484c:	f8cd a000 	str.w	sl, [sp]
 8004850:	464b      	mov	r3, r9
 8004852:	aa03      	add	r2, sp, #12
 8004854:	4621      	mov	r1, r4
 8004856:	4640      	mov	r0, r8
 8004858:	f7ff fee6 	bl	8004628 <_printf_common>
 800485c:	3001      	adds	r0, #1
 800485e:	d14a      	bne.n	80048f6 <_printf_i+0x1f2>
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	b004      	add	sp, #16
 8004866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	f043 0320 	orr.w	r3, r3, #32
 8004870:	6023      	str	r3, [r4, #0]
 8004872:	4833      	ldr	r0, [pc, #204]	@ (8004940 <_printf_i+0x23c>)
 8004874:	2778      	movs	r7, #120	@ 0x78
 8004876:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	6831      	ldr	r1, [r6, #0]
 800487e:	061f      	lsls	r7, r3, #24
 8004880:	f851 5b04 	ldr.w	r5, [r1], #4
 8004884:	d402      	bmi.n	800488c <_printf_i+0x188>
 8004886:	065f      	lsls	r7, r3, #25
 8004888:	bf48      	it	mi
 800488a:	b2ad      	uxthmi	r5, r5
 800488c:	6031      	str	r1, [r6, #0]
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	bf44      	itt	mi
 8004892:	f043 0320 	orrmi.w	r3, r3, #32
 8004896:	6023      	strmi	r3, [r4, #0]
 8004898:	b11d      	cbz	r5, 80048a2 <_printf_i+0x19e>
 800489a:	2310      	movs	r3, #16
 800489c:	e7ac      	b.n	80047f8 <_printf_i+0xf4>
 800489e:	4827      	ldr	r0, [pc, #156]	@ (800493c <_printf_i+0x238>)
 80048a0:	e7e9      	b.n	8004876 <_printf_i+0x172>
 80048a2:	6823      	ldr	r3, [r4, #0]
 80048a4:	f023 0320 	bic.w	r3, r3, #32
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	e7f6      	b.n	800489a <_printf_i+0x196>
 80048ac:	4616      	mov	r6, r2
 80048ae:	e7bd      	b.n	800482c <_printf_i+0x128>
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	6825      	ldr	r5, [r4, #0]
 80048b4:	6961      	ldr	r1, [r4, #20]
 80048b6:	1d18      	adds	r0, r3, #4
 80048b8:	6030      	str	r0, [r6, #0]
 80048ba:	062e      	lsls	r6, r5, #24
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	d501      	bpl.n	80048c4 <_printf_i+0x1c0>
 80048c0:	6019      	str	r1, [r3, #0]
 80048c2:	e002      	b.n	80048ca <_printf_i+0x1c6>
 80048c4:	0668      	lsls	r0, r5, #25
 80048c6:	d5fb      	bpl.n	80048c0 <_printf_i+0x1bc>
 80048c8:	8019      	strh	r1, [r3, #0]
 80048ca:	2300      	movs	r3, #0
 80048cc:	6123      	str	r3, [r4, #16]
 80048ce:	4616      	mov	r6, r2
 80048d0:	e7bc      	b.n	800484c <_printf_i+0x148>
 80048d2:	6833      	ldr	r3, [r6, #0]
 80048d4:	1d1a      	adds	r2, r3, #4
 80048d6:	6032      	str	r2, [r6, #0]
 80048d8:	681e      	ldr	r6, [r3, #0]
 80048da:	6862      	ldr	r2, [r4, #4]
 80048dc:	2100      	movs	r1, #0
 80048de:	4630      	mov	r0, r6
 80048e0:	f7fb fc96 	bl	8000210 <memchr>
 80048e4:	b108      	cbz	r0, 80048ea <_printf_i+0x1e6>
 80048e6:	1b80      	subs	r0, r0, r6
 80048e8:	6060      	str	r0, [r4, #4]
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	6123      	str	r3, [r4, #16]
 80048ee:	2300      	movs	r3, #0
 80048f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048f4:	e7aa      	b.n	800484c <_printf_i+0x148>
 80048f6:	6923      	ldr	r3, [r4, #16]
 80048f8:	4632      	mov	r2, r6
 80048fa:	4649      	mov	r1, r9
 80048fc:	4640      	mov	r0, r8
 80048fe:	47d0      	blx	sl
 8004900:	3001      	adds	r0, #1
 8004902:	d0ad      	beq.n	8004860 <_printf_i+0x15c>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	079b      	lsls	r3, r3, #30
 8004908:	d413      	bmi.n	8004932 <_printf_i+0x22e>
 800490a:	68e0      	ldr	r0, [r4, #12]
 800490c:	9b03      	ldr	r3, [sp, #12]
 800490e:	4298      	cmp	r0, r3
 8004910:	bfb8      	it	lt
 8004912:	4618      	movlt	r0, r3
 8004914:	e7a6      	b.n	8004864 <_printf_i+0x160>
 8004916:	2301      	movs	r3, #1
 8004918:	4632      	mov	r2, r6
 800491a:	4649      	mov	r1, r9
 800491c:	4640      	mov	r0, r8
 800491e:	47d0      	blx	sl
 8004920:	3001      	adds	r0, #1
 8004922:	d09d      	beq.n	8004860 <_printf_i+0x15c>
 8004924:	3501      	adds	r5, #1
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	9903      	ldr	r1, [sp, #12]
 800492a:	1a5b      	subs	r3, r3, r1
 800492c:	42ab      	cmp	r3, r5
 800492e:	dcf2      	bgt.n	8004916 <_printf_i+0x212>
 8004930:	e7eb      	b.n	800490a <_printf_i+0x206>
 8004932:	2500      	movs	r5, #0
 8004934:	f104 0619 	add.w	r6, r4, #25
 8004938:	e7f5      	b.n	8004926 <_printf_i+0x222>
 800493a:	bf00      	nop
 800493c:	08006bf6 	.word	0x08006bf6
 8004940:	08006c07 	.word	0x08006c07

08004944 <__sflush_r>:
 8004944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	0716      	lsls	r6, r2, #28
 800494c:	4605      	mov	r5, r0
 800494e:	460c      	mov	r4, r1
 8004950:	d454      	bmi.n	80049fc <__sflush_r+0xb8>
 8004952:	684b      	ldr	r3, [r1, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	dc02      	bgt.n	800495e <__sflush_r+0x1a>
 8004958:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	dd48      	ble.n	80049f0 <__sflush_r+0xac>
 800495e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004960:	2e00      	cmp	r6, #0
 8004962:	d045      	beq.n	80049f0 <__sflush_r+0xac>
 8004964:	2300      	movs	r3, #0
 8004966:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800496a:	682f      	ldr	r7, [r5, #0]
 800496c:	6a21      	ldr	r1, [r4, #32]
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	d030      	beq.n	80049d4 <__sflush_r+0x90>
 8004972:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004974:	89a3      	ldrh	r3, [r4, #12]
 8004976:	0759      	lsls	r1, r3, #29
 8004978:	d505      	bpl.n	8004986 <__sflush_r+0x42>
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	1ad2      	subs	r2, r2, r3
 800497e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004980:	b10b      	cbz	r3, 8004986 <__sflush_r+0x42>
 8004982:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004984:	1ad2      	subs	r2, r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800498a:	6a21      	ldr	r1, [r4, #32]
 800498c:	4628      	mov	r0, r5
 800498e:	47b0      	blx	r6
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	d106      	bne.n	80049a4 <__sflush_r+0x60>
 8004996:	6829      	ldr	r1, [r5, #0]
 8004998:	291d      	cmp	r1, #29
 800499a:	d82b      	bhi.n	80049f4 <__sflush_r+0xb0>
 800499c:	4a28      	ldr	r2, [pc, #160]	@ (8004a40 <__sflush_r+0xfc>)
 800499e:	410a      	asrs	r2, r1
 80049a0:	07d6      	lsls	r6, r2, #31
 80049a2:	d427      	bmi.n	80049f4 <__sflush_r+0xb0>
 80049a4:	2200      	movs	r2, #0
 80049a6:	6062      	str	r2, [r4, #4]
 80049a8:	04d9      	lsls	r1, r3, #19
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	6022      	str	r2, [r4, #0]
 80049ae:	d504      	bpl.n	80049ba <__sflush_r+0x76>
 80049b0:	1c42      	adds	r2, r0, #1
 80049b2:	d101      	bne.n	80049b8 <__sflush_r+0x74>
 80049b4:	682b      	ldr	r3, [r5, #0]
 80049b6:	b903      	cbnz	r3, 80049ba <__sflush_r+0x76>
 80049b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049bc:	602f      	str	r7, [r5, #0]
 80049be:	b1b9      	cbz	r1, 80049f0 <__sflush_r+0xac>
 80049c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049c4:	4299      	cmp	r1, r3
 80049c6:	d002      	beq.n	80049ce <__sflush_r+0x8a>
 80049c8:	4628      	mov	r0, r5
 80049ca:	f001 f951 	bl	8005c70 <_free_r>
 80049ce:	2300      	movs	r3, #0
 80049d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80049d2:	e00d      	b.n	80049f0 <__sflush_r+0xac>
 80049d4:	2301      	movs	r3, #1
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b0      	blx	r6
 80049da:	4602      	mov	r2, r0
 80049dc:	1c50      	adds	r0, r2, #1
 80049de:	d1c9      	bne.n	8004974 <__sflush_r+0x30>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0c6      	beq.n	8004974 <__sflush_r+0x30>
 80049e6:	2b1d      	cmp	r3, #29
 80049e8:	d001      	beq.n	80049ee <__sflush_r+0xaa>
 80049ea:	2b16      	cmp	r3, #22
 80049ec:	d11d      	bne.n	8004a2a <__sflush_r+0xe6>
 80049ee:	602f      	str	r7, [r5, #0]
 80049f0:	2000      	movs	r0, #0
 80049f2:	e021      	b.n	8004a38 <__sflush_r+0xf4>
 80049f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049f8:	b21b      	sxth	r3, r3
 80049fa:	e01a      	b.n	8004a32 <__sflush_r+0xee>
 80049fc:	690f      	ldr	r7, [r1, #16]
 80049fe:	2f00      	cmp	r7, #0
 8004a00:	d0f6      	beq.n	80049f0 <__sflush_r+0xac>
 8004a02:	0793      	lsls	r3, r2, #30
 8004a04:	680e      	ldr	r6, [r1, #0]
 8004a06:	bf08      	it	eq
 8004a08:	694b      	ldreq	r3, [r1, #20]
 8004a0a:	600f      	str	r7, [r1, #0]
 8004a0c:	bf18      	it	ne
 8004a0e:	2300      	movne	r3, #0
 8004a10:	1bf6      	subs	r6, r6, r7
 8004a12:	608b      	str	r3, [r1, #8]
 8004a14:	2e00      	cmp	r6, #0
 8004a16:	ddeb      	ble.n	80049f0 <__sflush_r+0xac>
 8004a18:	6a21      	ldr	r1, [r4, #32]
 8004a1a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004a1e:	4633      	mov	r3, r6
 8004a20:	463a      	mov	r2, r7
 8004a22:	4628      	mov	r0, r5
 8004a24:	47e0      	blx	ip
 8004a26:	2800      	cmp	r0, #0
 8004a28:	dc07      	bgt.n	8004a3a <__sflush_r+0xf6>
 8004a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	f04f 30ff 	mov.w	r0, #4294967295
 8004a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3a:	4407      	add	r7, r0
 8004a3c:	1a36      	subs	r6, r6, r0
 8004a3e:	e7e9      	b.n	8004a14 <__sflush_r+0xd0>
 8004a40:	dfbffffe 	.word	0xdfbffffe

08004a44 <_fflush_r>:
 8004a44:	b538      	push	{r3, r4, r5, lr}
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	4605      	mov	r5, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	b913      	cbnz	r3, 8004a54 <_fflush_r+0x10>
 8004a4e:	2500      	movs	r5, #0
 8004a50:	4628      	mov	r0, r5
 8004a52:	bd38      	pop	{r3, r4, r5, pc}
 8004a54:	b118      	cbz	r0, 8004a5e <_fflush_r+0x1a>
 8004a56:	6a03      	ldr	r3, [r0, #32]
 8004a58:	b90b      	cbnz	r3, 8004a5e <_fflush_r+0x1a>
 8004a5a:	f000 f8bb 	bl	8004bd4 <__sinit>
 8004a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f3      	beq.n	8004a4e <_fflush_r+0xa>
 8004a66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a68:	07d0      	lsls	r0, r2, #31
 8004a6a:	d404      	bmi.n	8004a76 <_fflush_r+0x32>
 8004a6c:	0599      	lsls	r1, r3, #22
 8004a6e:	d402      	bmi.n	8004a76 <_fflush_r+0x32>
 8004a70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a72:	f000 faaa 	bl	8004fca <__retarget_lock_acquire_recursive>
 8004a76:	4628      	mov	r0, r5
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f7ff ff63 	bl	8004944 <__sflush_r>
 8004a7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a80:	07da      	lsls	r2, r3, #31
 8004a82:	4605      	mov	r5, r0
 8004a84:	d4e4      	bmi.n	8004a50 <_fflush_r+0xc>
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	059b      	lsls	r3, r3, #22
 8004a8a:	d4e1      	bmi.n	8004a50 <_fflush_r+0xc>
 8004a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a8e:	f000 fa9d 	bl	8004fcc <__retarget_lock_release_recursive>
 8004a92:	e7dd      	b.n	8004a50 <_fflush_r+0xc>

08004a94 <fflush>:
 8004a94:	4601      	mov	r1, r0
 8004a96:	b920      	cbnz	r0, 8004aa2 <fflush+0xe>
 8004a98:	4a04      	ldr	r2, [pc, #16]	@ (8004aac <fflush+0x18>)
 8004a9a:	4905      	ldr	r1, [pc, #20]	@ (8004ab0 <fflush+0x1c>)
 8004a9c:	4805      	ldr	r0, [pc, #20]	@ (8004ab4 <fflush+0x20>)
 8004a9e:	f000 b8b1 	b.w	8004c04 <_fwalk_sglue>
 8004aa2:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <fflush+0x24>)
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	f7ff bfcd 	b.w	8004a44 <_fflush_r>
 8004aaa:	bf00      	nop
 8004aac:	2000000c 	.word	0x2000000c
 8004ab0:	08004a45 	.word	0x08004a45
 8004ab4:	2000001c 	.word	0x2000001c
 8004ab8:	20000018 	.word	0x20000018

08004abc <std>:
 8004abc:	2300      	movs	r3, #0
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aca:	6083      	str	r3, [r0, #8]
 8004acc:	8181      	strh	r1, [r0, #12]
 8004ace:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ad0:	81c2      	strh	r2, [r0, #14]
 8004ad2:	6183      	str	r3, [r0, #24]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	305c      	adds	r0, #92	@ 0x5c
 8004ada:	f000 f9f9 	bl	8004ed0 <memset>
 8004ade:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <std+0x58>)
 8004ae0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <std+0x5c>)
 8004ae4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <std+0x60>)
 8004ae8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x64>)
 8004aec:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aee:	4b0d      	ldr	r3, [pc, #52]	@ (8004b24 <std+0x68>)
 8004af0:	6224      	str	r4, [r4, #32]
 8004af2:	429c      	cmp	r4, r3
 8004af4:	d006      	beq.n	8004b04 <std+0x48>
 8004af6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004afa:	4294      	cmp	r4, r2
 8004afc:	d002      	beq.n	8004b04 <std+0x48>
 8004afe:	33d0      	adds	r3, #208	@ 0xd0
 8004b00:	429c      	cmp	r4, r3
 8004b02:	d105      	bne.n	8004b10 <std+0x54>
 8004b04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0c:	f000 ba5c 	b.w	8004fc8 <__retarget_lock_init_recursive>
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	bf00      	nop
 8004b14:	08004d21 	.word	0x08004d21
 8004b18:	08004d43 	.word	0x08004d43
 8004b1c:	08004d7b 	.word	0x08004d7b
 8004b20:	08004d9f 	.word	0x08004d9f
 8004b24:	20000294 	.word	0x20000294

08004b28 <stdio_exit_handler>:
 8004b28:	4a02      	ldr	r2, [pc, #8]	@ (8004b34 <stdio_exit_handler+0xc>)
 8004b2a:	4903      	ldr	r1, [pc, #12]	@ (8004b38 <stdio_exit_handler+0x10>)
 8004b2c:	4803      	ldr	r0, [pc, #12]	@ (8004b3c <stdio_exit_handler+0x14>)
 8004b2e:	f000 b869 	b.w	8004c04 <_fwalk_sglue>
 8004b32:	bf00      	nop
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	08004a45 	.word	0x08004a45
 8004b3c:	2000001c 	.word	0x2000001c

08004b40 <cleanup_stdio>:
 8004b40:	6841      	ldr	r1, [r0, #4]
 8004b42:	4b0c      	ldr	r3, [pc, #48]	@ (8004b74 <cleanup_stdio+0x34>)
 8004b44:	4299      	cmp	r1, r3
 8004b46:	b510      	push	{r4, lr}
 8004b48:	4604      	mov	r4, r0
 8004b4a:	d001      	beq.n	8004b50 <cleanup_stdio+0x10>
 8004b4c:	f7ff ff7a 	bl	8004a44 <_fflush_r>
 8004b50:	68a1      	ldr	r1, [r4, #8]
 8004b52:	4b09      	ldr	r3, [pc, #36]	@ (8004b78 <cleanup_stdio+0x38>)
 8004b54:	4299      	cmp	r1, r3
 8004b56:	d002      	beq.n	8004b5e <cleanup_stdio+0x1e>
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff ff73 	bl	8004a44 <_fflush_r>
 8004b5e:	68e1      	ldr	r1, [r4, #12]
 8004b60:	4b06      	ldr	r3, [pc, #24]	@ (8004b7c <cleanup_stdio+0x3c>)
 8004b62:	4299      	cmp	r1, r3
 8004b64:	d004      	beq.n	8004b70 <cleanup_stdio+0x30>
 8004b66:	4620      	mov	r0, r4
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f7ff bf6a 	b.w	8004a44 <_fflush_r>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	20000294 	.word	0x20000294
 8004b78:	200002fc 	.word	0x200002fc
 8004b7c:	20000364 	.word	0x20000364

08004b80 <global_stdio_init.part.0>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4b0b      	ldr	r3, [pc, #44]	@ (8004bb0 <global_stdio_init.part.0+0x30>)
 8004b84:	4c0b      	ldr	r4, [pc, #44]	@ (8004bb4 <global_stdio_init.part.0+0x34>)
 8004b86:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb8 <global_stdio_init.part.0+0x38>)
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2104      	movs	r1, #4
 8004b90:	f7ff ff94 	bl	8004abc <std>
 8004b94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2109      	movs	r1, #9
 8004b9c:	f7ff ff8e 	bl	8004abc <std>
 8004ba0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004baa:	2112      	movs	r1, #18
 8004bac:	f7ff bf86 	b.w	8004abc <std>
 8004bb0:	200003cc 	.word	0x200003cc
 8004bb4:	20000294 	.word	0x20000294
 8004bb8:	08004b29 	.word	0x08004b29

08004bbc <__sfp_lock_acquire>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	@ (8004bc4 <__sfp_lock_acquire+0x8>)
 8004bbe:	f000 ba04 	b.w	8004fca <__retarget_lock_acquire_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	200003d5 	.word	0x200003d5

08004bc8 <__sfp_lock_release>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	@ (8004bd0 <__sfp_lock_release+0x8>)
 8004bca:	f000 b9ff 	b.w	8004fcc <__retarget_lock_release_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200003d5 	.word	0x200003d5

08004bd4 <__sinit>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	f7ff fff0 	bl	8004bbc <__sfp_lock_acquire>
 8004bdc:	6a23      	ldr	r3, [r4, #32]
 8004bde:	b11b      	cbz	r3, 8004be8 <__sinit+0x14>
 8004be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be4:	f7ff bff0 	b.w	8004bc8 <__sfp_lock_release>
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <__sinit+0x28>)
 8004bea:	6223      	str	r3, [r4, #32]
 8004bec:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <__sinit+0x2c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f5      	bne.n	8004be0 <__sinit+0xc>
 8004bf4:	f7ff ffc4 	bl	8004b80 <global_stdio_init.part.0>
 8004bf8:	e7f2      	b.n	8004be0 <__sinit+0xc>
 8004bfa:	bf00      	nop
 8004bfc:	08004b41 	.word	0x08004b41
 8004c00:	200003cc 	.word	0x200003cc

08004c04 <_fwalk_sglue>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	4607      	mov	r7, r0
 8004c0a:	4688      	mov	r8, r1
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	2600      	movs	r6, #0
 8004c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c14:	f1b9 0901 	subs.w	r9, r9, #1
 8004c18:	d505      	bpl.n	8004c26 <_fwalk_sglue+0x22>
 8004c1a:	6824      	ldr	r4, [r4, #0]
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d1f7      	bne.n	8004c10 <_fwalk_sglue+0xc>
 8004c20:	4630      	mov	r0, r6
 8004c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d907      	bls.n	8004c3c <_fwalk_sglue+0x38>
 8004c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c30:	3301      	adds	r3, #1
 8004c32:	d003      	beq.n	8004c3c <_fwalk_sglue+0x38>
 8004c34:	4629      	mov	r1, r5
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c0      	blx	r8
 8004c3a:	4306      	orrs	r6, r0
 8004c3c:	3568      	adds	r5, #104	@ 0x68
 8004c3e:	e7e9      	b.n	8004c14 <_fwalk_sglue+0x10>

08004c40 <iprintf>:
 8004c40:	b40f      	push	{r0, r1, r2, r3}
 8004c42:	b507      	push	{r0, r1, r2, lr}
 8004c44:	4906      	ldr	r1, [pc, #24]	@ (8004c60 <iprintf+0x20>)
 8004c46:	ab04      	add	r3, sp, #16
 8004c48:	6808      	ldr	r0, [r1, #0]
 8004c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4e:	6881      	ldr	r1, [r0, #8]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	f001 fcb5 	bl	80065c0 <_vfiprintf_r>
 8004c56:	b003      	add	sp, #12
 8004c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c5c:	b004      	add	sp, #16
 8004c5e:	4770      	bx	lr
 8004c60:	20000018 	.word	0x20000018

08004c64 <_puts_r>:
 8004c64:	6a03      	ldr	r3, [r0, #32]
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	6884      	ldr	r4, [r0, #8]
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	b90b      	cbnz	r3, 8004c74 <_puts_r+0x10>
 8004c70:	f7ff ffb0 	bl	8004bd4 <__sinit>
 8004c74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c76:	07db      	lsls	r3, r3, #31
 8004c78:	d405      	bmi.n	8004c86 <_puts_r+0x22>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	0598      	lsls	r0, r3, #22
 8004c7e:	d402      	bmi.n	8004c86 <_puts_r+0x22>
 8004c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c82:	f000 f9a2 	bl	8004fca <__retarget_lock_acquire_recursive>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	0719      	lsls	r1, r3, #28
 8004c8a:	d502      	bpl.n	8004c92 <_puts_r+0x2e>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d135      	bne.n	8004cfe <_puts_r+0x9a>
 8004c92:	4621      	mov	r1, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	f000 f8c5 	bl	8004e24 <__swsetup_r>
 8004c9a:	b380      	cbz	r0, 8004cfe <_puts_r+0x9a>
 8004c9c:	f04f 35ff 	mov.w	r5, #4294967295
 8004ca0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ca2:	07da      	lsls	r2, r3, #31
 8004ca4:	d405      	bmi.n	8004cb2 <_puts_r+0x4e>
 8004ca6:	89a3      	ldrh	r3, [r4, #12]
 8004ca8:	059b      	lsls	r3, r3, #22
 8004caa:	d402      	bmi.n	8004cb2 <_puts_r+0x4e>
 8004cac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cae:	f000 f98d 	bl	8004fcc <__retarget_lock_release_recursive>
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	da04      	bge.n	8004cc4 <_puts_r+0x60>
 8004cba:	69a2      	ldr	r2, [r4, #24]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	dc17      	bgt.n	8004cf0 <_puts_r+0x8c>
 8004cc0:	290a      	cmp	r1, #10
 8004cc2:	d015      	beq.n	8004cf0 <_puts_r+0x8c>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	6022      	str	r2, [r4, #0]
 8004cca:	7019      	strb	r1, [r3, #0]
 8004ccc:	68a3      	ldr	r3, [r4, #8]
 8004cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	60a3      	str	r3, [r4, #8]
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	d1ed      	bne.n	8004cb6 <_puts_r+0x52>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da11      	bge.n	8004d02 <_puts_r+0x9e>
 8004cde:	4622      	mov	r2, r4
 8004ce0:	210a      	movs	r1, #10
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f85f 	bl	8004da6 <__swbuf_r>
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d0d7      	beq.n	8004c9c <_puts_r+0x38>
 8004cec:	250a      	movs	r5, #10
 8004cee:	e7d7      	b.n	8004ca0 <_puts_r+0x3c>
 8004cf0:	4622      	mov	r2, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f857 	bl	8004da6 <__swbuf_r>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d1e7      	bne.n	8004ccc <_puts_r+0x68>
 8004cfc:	e7ce      	b.n	8004c9c <_puts_r+0x38>
 8004cfe:	3e01      	subs	r6, #1
 8004d00:	e7e4      	b.n	8004ccc <_puts_r+0x68>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	6022      	str	r2, [r4, #0]
 8004d08:	220a      	movs	r2, #10
 8004d0a:	701a      	strb	r2, [r3, #0]
 8004d0c:	e7ee      	b.n	8004cec <_puts_r+0x88>
	...

08004d10 <puts>:
 8004d10:	4b02      	ldr	r3, [pc, #8]	@ (8004d1c <puts+0xc>)
 8004d12:	4601      	mov	r1, r0
 8004d14:	6818      	ldr	r0, [r3, #0]
 8004d16:	f7ff bfa5 	b.w	8004c64 <_puts_r>
 8004d1a:	bf00      	nop
 8004d1c:	20000018 	.word	0x20000018

08004d20 <__sread>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	460c      	mov	r4, r1
 8004d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d28:	f000 f900 	bl	8004f2c <_read_r>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	bfab      	itete	ge
 8004d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d32:	89a3      	ldrhlt	r3, [r4, #12]
 8004d34:	181b      	addge	r3, r3, r0
 8004d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d3a:	bfac      	ite	ge
 8004d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d3e:	81a3      	strhlt	r3, [r4, #12]
 8004d40:	bd10      	pop	{r4, pc}

08004d42 <__swrite>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	461f      	mov	r7, r3
 8004d48:	898b      	ldrh	r3, [r1, #12]
 8004d4a:	05db      	lsls	r3, r3, #23
 8004d4c:	4605      	mov	r5, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4616      	mov	r6, r2
 8004d52:	d505      	bpl.n	8004d60 <__swrite+0x1e>
 8004d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d58:	2302      	movs	r3, #2
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f000 f8d4 	bl	8004f08 <_lseek_r>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	4632      	mov	r2, r6
 8004d6e:	463b      	mov	r3, r7
 8004d70:	4628      	mov	r0, r5
 8004d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d76:	f000 b8eb 	b.w	8004f50 <_write_r>

08004d7a <__sseek>:
 8004d7a:	b510      	push	{r4, lr}
 8004d7c:	460c      	mov	r4, r1
 8004d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d82:	f000 f8c1 	bl	8004f08 <_lseek_r>
 8004d86:	1c43      	adds	r3, r0, #1
 8004d88:	89a3      	ldrh	r3, [r4, #12]
 8004d8a:	bf15      	itete	ne
 8004d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d96:	81a3      	strheq	r3, [r4, #12]
 8004d98:	bf18      	it	ne
 8004d9a:	81a3      	strhne	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__sclose>:
 8004d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da2:	f000 b8a1 	b.w	8004ee8 <_close_r>

08004da6 <__swbuf_r>:
 8004da6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da8:	460e      	mov	r6, r1
 8004daa:	4614      	mov	r4, r2
 8004dac:	4605      	mov	r5, r0
 8004dae:	b118      	cbz	r0, 8004db8 <__swbuf_r+0x12>
 8004db0:	6a03      	ldr	r3, [r0, #32]
 8004db2:	b90b      	cbnz	r3, 8004db8 <__swbuf_r+0x12>
 8004db4:	f7ff ff0e 	bl	8004bd4 <__sinit>
 8004db8:	69a3      	ldr	r3, [r4, #24]
 8004dba:	60a3      	str	r3, [r4, #8]
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	071a      	lsls	r2, r3, #28
 8004dc0:	d501      	bpl.n	8004dc6 <__swbuf_r+0x20>
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	b943      	cbnz	r3, 8004dd8 <__swbuf_r+0x32>
 8004dc6:	4621      	mov	r1, r4
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 f82b 	bl	8004e24 <__swsetup_r>
 8004dce:	b118      	cbz	r0, 8004dd8 <__swbuf_r+0x32>
 8004dd0:	f04f 37ff 	mov.w	r7, #4294967295
 8004dd4:	4638      	mov	r0, r7
 8004dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	6922      	ldr	r2, [r4, #16]
 8004ddc:	1a98      	subs	r0, r3, r2
 8004dde:	6963      	ldr	r3, [r4, #20]
 8004de0:	b2f6      	uxtb	r6, r6
 8004de2:	4283      	cmp	r3, r0
 8004de4:	4637      	mov	r7, r6
 8004de6:	dc05      	bgt.n	8004df4 <__swbuf_r+0x4e>
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7ff fe2a 	bl	8004a44 <_fflush_r>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d1ed      	bne.n	8004dd0 <__swbuf_r+0x2a>
 8004df4:	68a3      	ldr	r3, [r4, #8]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	6022      	str	r2, [r4, #0]
 8004e00:	701e      	strb	r6, [r3, #0]
 8004e02:	6962      	ldr	r2, [r4, #20]
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d004      	beq.n	8004e14 <__swbuf_r+0x6e>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	07db      	lsls	r3, r3, #31
 8004e0e:	d5e1      	bpl.n	8004dd4 <__swbuf_r+0x2e>
 8004e10:	2e0a      	cmp	r6, #10
 8004e12:	d1df      	bne.n	8004dd4 <__swbuf_r+0x2e>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7ff fe14 	bl	8004a44 <_fflush_r>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d0d9      	beq.n	8004dd4 <__swbuf_r+0x2e>
 8004e20:	e7d6      	b.n	8004dd0 <__swbuf_r+0x2a>
	...

08004e24 <__swsetup_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4b29      	ldr	r3, [pc, #164]	@ (8004ecc <__swsetup_r+0xa8>)
 8004e28:	4605      	mov	r5, r0
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	b118      	cbz	r0, 8004e38 <__swsetup_r+0x14>
 8004e30:	6a03      	ldr	r3, [r0, #32]
 8004e32:	b90b      	cbnz	r3, 8004e38 <__swsetup_r+0x14>
 8004e34:	f7ff fece 	bl	8004bd4 <__sinit>
 8004e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e3c:	0719      	lsls	r1, r3, #28
 8004e3e:	d422      	bmi.n	8004e86 <__swsetup_r+0x62>
 8004e40:	06da      	lsls	r2, r3, #27
 8004e42:	d407      	bmi.n	8004e54 <__swsetup_r+0x30>
 8004e44:	2209      	movs	r2, #9
 8004e46:	602a      	str	r2, [r5, #0]
 8004e48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e52:	e033      	b.n	8004ebc <__swsetup_r+0x98>
 8004e54:	0758      	lsls	r0, r3, #29
 8004e56:	d512      	bpl.n	8004e7e <__swsetup_r+0x5a>
 8004e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e5a:	b141      	cbz	r1, 8004e6e <__swsetup_r+0x4a>
 8004e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e60:	4299      	cmp	r1, r3
 8004e62:	d002      	beq.n	8004e6a <__swsetup_r+0x46>
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 ff03 	bl	8005c70 <_free_r>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e74:	81a3      	strh	r3, [r4, #12]
 8004e76:	2300      	movs	r3, #0
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	6923      	ldr	r3, [r4, #16]
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	f043 0308 	orr.w	r3, r3, #8
 8004e84:	81a3      	strh	r3, [r4, #12]
 8004e86:	6923      	ldr	r3, [r4, #16]
 8004e88:	b94b      	cbnz	r3, 8004e9e <__swsetup_r+0x7a>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e94:	d003      	beq.n	8004e9e <__swsetup_r+0x7a>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f001 fccf 	bl	800683c <__smakebuf_r>
 8004e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ea2:	f013 0201 	ands.w	r2, r3, #1
 8004ea6:	d00a      	beq.n	8004ebe <__swsetup_r+0x9a>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	60a2      	str	r2, [r4, #8]
 8004eac:	6962      	ldr	r2, [r4, #20]
 8004eae:	4252      	negs	r2, r2
 8004eb0:	61a2      	str	r2, [r4, #24]
 8004eb2:	6922      	ldr	r2, [r4, #16]
 8004eb4:	b942      	cbnz	r2, 8004ec8 <__swsetup_r+0xa4>
 8004eb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004eba:	d1c5      	bne.n	8004e48 <__swsetup_r+0x24>
 8004ebc:	bd38      	pop	{r3, r4, r5, pc}
 8004ebe:	0799      	lsls	r1, r3, #30
 8004ec0:	bf58      	it	pl
 8004ec2:	6962      	ldrpl	r2, [r4, #20]
 8004ec4:	60a2      	str	r2, [r4, #8]
 8004ec6:	e7f4      	b.n	8004eb2 <__swsetup_r+0x8e>
 8004ec8:	2000      	movs	r0, #0
 8004eca:	e7f7      	b.n	8004ebc <__swsetup_r+0x98>
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <memset>:
 8004ed0:	4402      	add	r2, r0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d100      	bne.n	8004eda <memset+0xa>
 8004ed8:	4770      	bx	lr
 8004eda:	f803 1b01 	strb.w	r1, [r3], #1
 8004ede:	e7f9      	b.n	8004ed4 <memset+0x4>

08004ee0 <_localeconv_r>:
 8004ee0:	4800      	ldr	r0, [pc, #0]	@ (8004ee4 <_localeconv_r+0x4>)
 8004ee2:	4770      	bx	lr
 8004ee4:	20000158 	.word	0x20000158

08004ee8 <_close_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d06      	ldr	r5, [pc, #24]	@ (8004f04 <_close_r+0x1c>)
 8004eec:	2300      	movs	r3, #0
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	f7fc fc2b 	bl	800174e <_close>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d102      	bne.n	8004f02 <_close_r+0x1a>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	b103      	cbz	r3, 8004f02 <_close_r+0x1a>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	200003d0 	.word	0x200003d0

08004f08 <_lseek_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d07      	ldr	r5, [pc, #28]	@ (8004f28 <_lseek_r+0x20>)
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fc fc3d 	bl	8001796 <_lseek>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_lseek_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_lseek_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	200003d0 	.word	0x200003d0

08004f2c <_read_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	@ (8004f4c <_read_r+0x20>)
 8004f30:	4604      	mov	r4, r0
 8004f32:	4608      	mov	r0, r1
 8004f34:	4611      	mov	r1, r2
 8004f36:	2200      	movs	r2, #0
 8004f38:	602a      	str	r2, [r5, #0]
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f7fc fbce 	bl	80016dc <_read>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_read_r+0x1e>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_read_r+0x1e>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	200003d0 	.word	0x200003d0

08004f50 <_write_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d07      	ldr	r5, [pc, #28]	@ (8004f70 <_write_r+0x20>)
 8004f54:	4604      	mov	r4, r0
 8004f56:	4608      	mov	r0, r1
 8004f58:	4611      	mov	r1, r2
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	602a      	str	r2, [r5, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7fc fbd9 	bl	8001716 <_write>
 8004f64:	1c43      	adds	r3, r0, #1
 8004f66:	d102      	bne.n	8004f6e <_write_r+0x1e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	b103      	cbz	r3, 8004f6e <_write_r+0x1e>
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	200003d0 	.word	0x200003d0

08004f74 <__errno>:
 8004f74:	4b01      	ldr	r3, [pc, #4]	@ (8004f7c <__errno+0x8>)
 8004f76:	6818      	ldr	r0, [r3, #0]
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	20000018 	.word	0x20000018

08004f80 <__libc_init_array>:
 8004f80:	b570      	push	{r4, r5, r6, lr}
 8004f82:	4d0d      	ldr	r5, [pc, #52]	@ (8004fb8 <__libc_init_array+0x38>)
 8004f84:	4c0d      	ldr	r4, [pc, #52]	@ (8004fbc <__libc_init_array+0x3c>)
 8004f86:	1b64      	subs	r4, r4, r5
 8004f88:	10a4      	asrs	r4, r4, #2
 8004f8a:	2600      	movs	r6, #0
 8004f8c:	42a6      	cmp	r6, r4
 8004f8e:	d109      	bne.n	8004fa4 <__libc_init_array+0x24>
 8004f90:	4d0b      	ldr	r5, [pc, #44]	@ (8004fc0 <__libc_init_array+0x40>)
 8004f92:	4c0c      	ldr	r4, [pc, #48]	@ (8004fc4 <__libc_init_array+0x44>)
 8004f94:	f001 fd7e 	bl	8006a94 <_init>
 8004f98:	1b64      	subs	r4, r4, r5
 8004f9a:	10a4      	asrs	r4, r4, #2
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	42a6      	cmp	r6, r4
 8004fa0:	d105      	bne.n	8004fae <__libc_init_array+0x2e>
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fa8:	4798      	blx	r3
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7ee      	b.n	8004f8c <__libc_init_array+0xc>
 8004fae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fb2:	4798      	blx	r3
 8004fb4:	3601      	adds	r6, #1
 8004fb6:	e7f2      	b.n	8004f9e <__libc_init_array+0x1e>
 8004fb8:	08006f60 	.word	0x08006f60
 8004fbc:	08006f60 	.word	0x08006f60
 8004fc0:	08006f60 	.word	0x08006f60
 8004fc4:	08006f64 	.word	0x08006f64

08004fc8 <__retarget_lock_init_recursive>:
 8004fc8:	4770      	bx	lr

08004fca <__retarget_lock_acquire_recursive>:
 8004fca:	4770      	bx	lr

08004fcc <__retarget_lock_release_recursive>:
 8004fcc:	4770      	bx	lr

08004fce <quorem>:
 8004fce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd2:	6903      	ldr	r3, [r0, #16]
 8004fd4:	690c      	ldr	r4, [r1, #16]
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	4607      	mov	r7, r0
 8004fda:	db7e      	blt.n	80050da <quorem+0x10c>
 8004fdc:	3c01      	subs	r4, #1
 8004fde:	f101 0814 	add.w	r8, r1, #20
 8004fe2:	00a3      	lsls	r3, r4, #2
 8004fe4:	f100 0514 	add.w	r5, r0, #20
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fee:	9301      	str	r3, [sp, #4]
 8004ff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005000:	fbb2 f6f3 	udiv	r6, r2, r3
 8005004:	d32e      	bcc.n	8005064 <quorem+0x96>
 8005006:	f04f 0a00 	mov.w	sl, #0
 800500a:	46c4      	mov	ip, r8
 800500c:	46ae      	mov	lr, r5
 800500e:	46d3      	mov	fp, sl
 8005010:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005014:	b298      	uxth	r0, r3
 8005016:	fb06 a000 	mla	r0, r6, r0, sl
 800501a:	0c02      	lsrs	r2, r0, #16
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	fb06 2303 	mla	r3, r6, r3, r2
 8005022:	f8de 2000 	ldr.w	r2, [lr]
 8005026:	b280      	uxth	r0, r0
 8005028:	b292      	uxth	r2, r2
 800502a:	1a12      	subs	r2, r2, r0
 800502c:	445a      	add	r2, fp
 800502e:	f8de 0000 	ldr.w	r0, [lr]
 8005032:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005036:	b29b      	uxth	r3, r3
 8005038:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800503c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005040:	b292      	uxth	r2, r2
 8005042:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005046:	45e1      	cmp	r9, ip
 8005048:	f84e 2b04 	str.w	r2, [lr], #4
 800504c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005050:	d2de      	bcs.n	8005010 <quorem+0x42>
 8005052:	9b00      	ldr	r3, [sp, #0]
 8005054:	58eb      	ldr	r3, [r5, r3]
 8005056:	b92b      	cbnz	r3, 8005064 <quorem+0x96>
 8005058:	9b01      	ldr	r3, [sp, #4]
 800505a:	3b04      	subs	r3, #4
 800505c:	429d      	cmp	r5, r3
 800505e:	461a      	mov	r2, r3
 8005060:	d32f      	bcc.n	80050c2 <quorem+0xf4>
 8005062:	613c      	str	r4, [r7, #16]
 8005064:	4638      	mov	r0, r7
 8005066:	f001 f97d 	bl	8006364 <__mcmp>
 800506a:	2800      	cmp	r0, #0
 800506c:	db25      	blt.n	80050ba <quorem+0xec>
 800506e:	4629      	mov	r1, r5
 8005070:	2000      	movs	r0, #0
 8005072:	f858 2b04 	ldr.w	r2, [r8], #4
 8005076:	f8d1 c000 	ldr.w	ip, [r1]
 800507a:	fa1f fe82 	uxth.w	lr, r2
 800507e:	fa1f f38c 	uxth.w	r3, ip
 8005082:	eba3 030e 	sub.w	r3, r3, lr
 8005086:	4403      	add	r3, r0
 8005088:	0c12      	lsrs	r2, r2, #16
 800508a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800508e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005098:	45c1      	cmp	r9, r8
 800509a:	f841 3b04 	str.w	r3, [r1], #4
 800509e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050a2:	d2e6      	bcs.n	8005072 <quorem+0xa4>
 80050a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ac:	b922      	cbnz	r2, 80050b8 <quorem+0xea>
 80050ae:	3b04      	subs	r3, #4
 80050b0:	429d      	cmp	r5, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	d30b      	bcc.n	80050ce <quorem+0x100>
 80050b6:	613c      	str	r4, [r7, #16]
 80050b8:	3601      	adds	r6, #1
 80050ba:	4630      	mov	r0, r6
 80050bc:	b003      	add	sp, #12
 80050be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050c2:	6812      	ldr	r2, [r2, #0]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	2a00      	cmp	r2, #0
 80050c8:	d1cb      	bne.n	8005062 <quorem+0x94>
 80050ca:	3c01      	subs	r4, #1
 80050cc:	e7c6      	b.n	800505c <quorem+0x8e>
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	2a00      	cmp	r2, #0
 80050d4:	d1ef      	bne.n	80050b6 <quorem+0xe8>
 80050d6:	3c01      	subs	r4, #1
 80050d8:	e7ea      	b.n	80050b0 <quorem+0xe2>
 80050da:	2000      	movs	r0, #0
 80050dc:	e7ee      	b.n	80050bc <quorem+0xee>
	...

080050e0 <_dtoa_r>:
 80050e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e4:	69c7      	ldr	r7, [r0, #28]
 80050e6:	b097      	sub	sp, #92	@ 0x5c
 80050e8:	4614      	mov	r4, r2
 80050ea:	461d      	mov	r5, r3
 80050ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80050f0:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80050f2:	4683      	mov	fp, r0
 80050f4:	b97f      	cbnz	r7, 8005116 <_dtoa_r+0x36>
 80050f6:	2010      	movs	r0, #16
 80050f8:	f000 fe04 	bl	8005d04 <malloc>
 80050fc:	4602      	mov	r2, r0
 80050fe:	f8cb 001c 	str.w	r0, [fp, #28]
 8005102:	b920      	cbnz	r0, 800510e <_dtoa_r+0x2e>
 8005104:	4ba8      	ldr	r3, [pc, #672]	@ (80053a8 <_dtoa_r+0x2c8>)
 8005106:	21ef      	movs	r1, #239	@ 0xef
 8005108:	48a8      	ldr	r0, [pc, #672]	@ (80053ac <_dtoa_r+0x2cc>)
 800510a:	f001 fc13 	bl	8006934 <__assert_func>
 800510e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005112:	6007      	str	r7, [r0, #0]
 8005114:	60c7      	str	r7, [r0, #12]
 8005116:	f8db 301c 	ldr.w	r3, [fp, #28]
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	b159      	cbz	r1, 8005136 <_dtoa_r+0x56>
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	604a      	str	r2, [r1, #4]
 8005122:	2301      	movs	r3, #1
 8005124:	4093      	lsls	r3, r2
 8005126:	608b      	str	r3, [r1, #8]
 8005128:	4658      	mov	r0, fp
 800512a:	f000 fee1 	bl	8005ef0 <_Bfree>
 800512e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	1e2b      	subs	r3, r5, #0
 8005138:	bfb9      	ittee	lt
 800513a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800513e:	9303      	strlt	r3, [sp, #12]
 8005140:	2300      	movge	r3, #0
 8005142:	6033      	strge	r3, [r6, #0]
 8005144:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005148:	4b99      	ldr	r3, [pc, #612]	@ (80053b0 <_dtoa_r+0x2d0>)
 800514a:	bfbc      	itt	lt
 800514c:	2201      	movlt	r2, #1
 800514e:	6032      	strlt	r2, [r6, #0]
 8005150:	ea33 0308 	bics.w	r3, r3, r8
 8005154:	d112      	bne.n	800517c <_dtoa_r+0x9c>
 8005156:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005158:	f242 730f 	movw	r3, #9999	@ 0x270f
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005162:	4323      	orrs	r3, r4
 8005164:	f000 8551 	beq.w	8005c0a <_dtoa_r+0xb2a>
 8005168:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800516a:	f8df a248 	ldr.w	sl, [pc, #584]	@ 80053b4 <_dtoa_r+0x2d4>
 800516e:	2b00      	cmp	r3, #0
 8005170:	f000 8553 	beq.w	8005c1a <_dtoa_r+0xb3a>
 8005174:	f10a 0303 	add.w	r3, sl, #3
 8005178:	f000 bd4d 	b.w	8005c16 <_dtoa_r+0xb36>
 800517c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005180:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005184:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005188:	2200      	movs	r2, #0
 800518a:	2300      	movs	r3, #0
 800518c:	f7fb fcbc 	bl	8000b08 <__aeabi_dcmpeq>
 8005190:	4607      	mov	r7, r0
 8005192:	b158      	cbz	r0, 80051ac <_dtoa_r+0xcc>
 8005194:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005196:	2301      	movs	r3, #1
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800519c:	b113      	cbz	r3, 80051a4 <_dtoa_r+0xc4>
 800519e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80051a0:	4b85      	ldr	r3, [pc, #532]	@ (80053b8 <_dtoa_r+0x2d8>)
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80053bc <_dtoa_r+0x2dc>
 80051a8:	f000 bd37 	b.w	8005c1a <_dtoa_r+0xb3a>
 80051ac:	ab14      	add	r3, sp, #80	@ 0x50
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	ab15      	add	r3, sp, #84	@ 0x54
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4658      	mov	r0, fp
 80051b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80051ba:	f001 f981 	bl	80064c0 <__d2b>
 80051be:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80051c2:	4681      	mov	r9, r0
 80051c4:	2e00      	cmp	r6, #0
 80051c6:	d076      	beq.n	80052b6 <_dtoa_r+0x1d6>
 80051c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051ca:	9712      	str	r7, [sp, #72]	@ 0x48
 80051cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80051d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80051d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80051dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80051e0:	4619      	mov	r1, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	4b76      	ldr	r3, [pc, #472]	@ (80053c0 <_dtoa_r+0x2e0>)
 80051e6:	f7fb f86f 	bl	80002c8 <__aeabi_dsub>
 80051ea:	a369      	add	r3, pc, #420	@ (adr r3, 8005390 <_dtoa_r+0x2b0>)
 80051ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f0:	f7fb fa22 	bl	8000638 <__aeabi_dmul>
 80051f4:	a368      	add	r3, pc, #416	@ (adr r3, 8005398 <_dtoa_r+0x2b8>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fb f867 	bl	80002cc <__adddf3>
 80051fe:	4604      	mov	r4, r0
 8005200:	4630      	mov	r0, r6
 8005202:	460d      	mov	r5, r1
 8005204:	f7fb f9ae 	bl	8000564 <__aeabi_i2d>
 8005208:	a365      	add	r3, pc, #404	@ (adr r3, 80053a0 <_dtoa_r+0x2c0>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb fa13 	bl	8000638 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fb f857 	bl	80002cc <__adddf3>
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	f7fb fcb9 	bl	8000b98 <__aeabi_d2iz>
 8005226:	2200      	movs	r2, #0
 8005228:	4607      	mov	r7, r0
 800522a:	2300      	movs	r3, #0
 800522c:	4620      	mov	r0, r4
 800522e:	4629      	mov	r1, r5
 8005230:	f7fb fc74 	bl	8000b1c <__aeabi_dcmplt>
 8005234:	b140      	cbz	r0, 8005248 <_dtoa_r+0x168>
 8005236:	4638      	mov	r0, r7
 8005238:	f7fb f994 	bl	8000564 <__aeabi_i2d>
 800523c:	4622      	mov	r2, r4
 800523e:	462b      	mov	r3, r5
 8005240:	f7fb fc62 	bl	8000b08 <__aeabi_dcmpeq>
 8005244:	b900      	cbnz	r0, 8005248 <_dtoa_r+0x168>
 8005246:	3f01      	subs	r7, #1
 8005248:	2f16      	cmp	r7, #22
 800524a:	d852      	bhi.n	80052f2 <_dtoa_r+0x212>
 800524c:	4b5d      	ldr	r3, [pc, #372]	@ (80053c4 <_dtoa_r+0x2e4>)
 800524e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800525a:	f7fb fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800525e:	2800      	cmp	r0, #0
 8005260:	d049      	beq.n	80052f6 <_dtoa_r+0x216>
 8005262:	3f01      	subs	r7, #1
 8005264:	2300      	movs	r3, #0
 8005266:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005268:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800526a:	1b9b      	subs	r3, r3, r6
 800526c:	1e5a      	subs	r2, r3, #1
 800526e:	bf44      	itt	mi
 8005270:	f1c3 0801 	rsbmi	r8, r3, #1
 8005274:	2300      	movmi	r3, #0
 8005276:	9209      	str	r2, [sp, #36]	@ 0x24
 8005278:	bf54      	ite	pl
 800527a:	f04f 0800 	movpl.w	r8, #0
 800527e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005280:	2f00      	cmp	r7, #0
 8005282:	db3a      	blt.n	80052fa <_dtoa_r+0x21a>
 8005284:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005286:	970e      	str	r7, [sp, #56]	@ 0x38
 8005288:	443b      	add	r3, r7
 800528a:	9309      	str	r3, [sp, #36]	@ 0x24
 800528c:	2300      	movs	r3, #0
 800528e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005290:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005292:	2b09      	cmp	r3, #9
 8005294:	d865      	bhi.n	8005362 <_dtoa_r+0x282>
 8005296:	2b05      	cmp	r3, #5
 8005298:	bfc4      	itt	gt
 800529a:	3b04      	subgt	r3, #4
 800529c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800529e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80052a0:	f1a3 0302 	sub.w	r3, r3, #2
 80052a4:	bfcc      	ite	gt
 80052a6:	2400      	movgt	r4, #0
 80052a8:	2401      	movle	r4, #1
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d864      	bhi.n	8005378 <_dtoa_r+0x298>
 80052ae:	e8df f003 	tbb	[pc, r3]
 80052b2:	382b      	.short	0x382b
 80052b4:	5636      	.short	0x5636
 80052b6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80052ba:	441e      	add	r6, r3
 80052bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	bfc1      	itttt	gt
 80052c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80052c8:	fa08 f803 	lslgt.w	r8, r8, r3
 80052cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80052d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80052d4:	bfd6      	itet	le
 80052d6:	f1c3 0320 	rsble	r3, r3, #32
 80052da:	ea48 0003 	orrgt.w	r0, r8, r3
 80052de:	fa04 f003 	lslle.w	r0, r4, r3
 80052e2:	f7fb f92f 	bl	8000544 <__aeabi_ui2d>
 80052e6:	2201      	movs	r2, #1
 80052e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80052ec:	3e01      	subs	r6, #1
 80052ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80052f0:	e776      	b.n	80051e0 <_dtoa_r+0x100>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e7b7      	b.n	8005266 <_dtoa_r+0x186>
 80052f6:	900f      	str	r0, [sp, #60]	@ 0x3c
 80052f8:	e7b6      	b.n	8005268 <_dtoa_r+0x188>
 80052fa:	427b      	negs	r3, r7
 80052fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80052fe:	2300      	movs	r3, #0
 8005300:	eba8 0807 	sub.w	r8, r8, r7
 8005304:	930e      	str	r3, [sp, #56]	@ 0x38
 8005306:	e7c3      	b.n	8005290 <_dtoa_r+0x1b0>
 8005308:	2300      	movs	r3, #0
 800530a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800530c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800530e:	2b00      	cmp	r3, #0
 8005310:	dc35      	bgt.n	800537e <_dtoa_r+0x29e>
 8005312:	2301      	movs	r3, #1
 8005314:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005318:	461a      	mov	r2, r3
 800531a:	9221      	str	r2, [sp, #132]	@ 0x84
 800531c:	e00b      	b.n	8005336 <_dtoa_r+0x256>
 800531e:	2301      	movs	r3, #1
 8005320:	e7f3      	b.n	800530a <_dtoa_r+0x22a>
 8005322:	2300      	movs	r3, #0
 8005324:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005326:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	9308      	str	r3, [sp, #32]
 800532c:	3301      	adds	r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	bfb8      	it	lt
 8005334:	2301      	movlt	r3, #1
 8005336:	f8db 001c 	ldr.w	r0, [fp, #28]
 800533a:	2100      	movs	r1, #0
 800533c:	2204      	movs	r2, #4
 800533e:	f102 0514 	add.w	r5, r2, #20
 8005342:	429d      	cmp	r5, r3
 8005344:	d91f      	bls.n	8005386 <_dtoa_r+0x2a6>
 8005346:	6041      	str	r1, [r0, #4]
 8005348:	4658      	mov	r0, fp
 800534a:	f000 fd91 	bl	8005e70 <_Balloc>
 800534e:	4682      	mov	sl, r0
 8005350:	2800      	cmp	r0, #0
 8005352:	d13b      	bne.n	80053cc <_dtoa_r+0x2ec>
 8005354:	4b1c      	ldr	r3, [pc, #112]	@ (80053c8 <_dtoa_r+0x2e8>)
 8005356:	4602      	mov	r2, r0
 8005358:	f240 11af 	movw	r1, #431	@ 0x1af
 800535c:	e6d4      	b.n	8005108 <_dtoa_r+0x28>
 800535e:	2301      	movs	r3, #1
 8005360:	e7e0      	b.n	8005324 <_dtoa_r+0x244>
 8005362:	2401      	movs	r4, #1
 8005364:	2300      	movs	r3, #0
 8005366:	9320      	str	r3, [sp, #128]	@ 0x80
 8005368:	940b      	str	r4, [sp, #44]	@ 0x2c
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005372:	2200      	movs	r2, #0
 8005374:	2312      	movs	r3, #18
 8005376:	e7d0      	b.n	800531a <_dtoa_r+0x23a>
 8005378:	2301      	movs	r3, #1
 800537a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800537c:	e7f5      	b.n	800536a <_dtoa_r+0x28a>
 800537e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005380:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005384:	e7d7      	b.n	8005336 <_dtoa_r+0x256>
 8005386:	3101      	adds	r1, #1
 8005388:	0052      	lsls	r2, r2, #1
 800538a:	e7d8      	b.n	800533e <_dtoa_r+0x25e>
 800538c:	f3af 8000 	nop.w
 8005390:	636f4361 	.word	0x636f4361
 8005394:	3fd287a7 	.word	0x3fd287a7
 8005398:	8b60c8b3 	.word	0x8b60c8b3
 800539c:	3fc68a28 	.word	0x3fc68a28
 80053a0:	509f79fb 	.word	0x509f79fb
 80053a4:	3fd34413 	.word	0x3fd34413
 80053a8:	08006c25 	.word	0x08006c25
 80053ac:	08006c3c 	.word	0x08006c3c
 80053b0:	7ff00000 	.word	0x7ff00000
 80053b4:	08006c21 	.word	0x08006c21
 80053b8:	08006bf5 	.word	0x08006bf5
 80053bc:	08006bf4 	.word	0x08006bf4
 80053c0:	3ff80000 	.word	0x3ff80000
 80053c4:	08006d38 	.word	0x08006d38
 80053c8:	08006c94 	.word	0x08006c94
 80053cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80053d0:	6018      	str	r0, [r3, #0]
 80053d2:	9b07      	ldr	r3, [sp, #28]
 80053d4:	2b0e      	cmp	r3, #14
 80053d6:	f200 80a4 	bhi.w	8005522 <_dtoa_r+0x442>
 80053da:	2c00      	cmp	r4, #0
 80053dc:	f000 80a1 	beq.w	8005522 <_dtoa_r+0x442>
 80053e0:	2f00      	cmp	r7, #0
 80053e2:	dd33      	ble.n	800544c <_dtoa_r+0x36c>
 80053e4:	4b86      	ldr	r3, [pc, #536]	@ (8005600 <_dtoa_r+0x520>)
 80053e6:	f007 020f 	and.w	r2, r7, #15
 80053ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053f2:	05f8      	lsls	r0, r7, #23
 80053f4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80053fc:	d516      	bpl.n	800542c <_dtoa_r+0x34c>
 80053fe:	4b81      	ldr	r3, [pc, #516]	@ (8005604 <_dtoa_r+0x524>)
 8005400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005408:	f7fb fa40 	bl	800088c <__aeabi_ddiv>
 800540c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005410:	f004 040f 	and.w	r4, r4, #15
 8005414:	2603      	movs	r6, #3
 8005416:	4d7b      	ldr	r5, [pc, #492]	@ (8005604 <_dtoa_r+0x524>)
 8005418:	b954      	cbnz	r4, 8005430 <_dtoa_r+0x350>
 800541a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800541e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005422:	f7fb fa33 	bl	800088c <__aeabi_ddiv>
 8005426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800542a:	e028      	b.n	800547e <_dtoa_r+0x39e>
 800542c:	2602      	movs	r6, #2
 800542e:	e7f2      	b.n	8005416 <_dtoa_r+0x336>
 8005430:	07e1      	lsls	r1, r4, #31
 8005432:	d508      	bpl.n	8005446 <_dtoa_r+0x366>
 8005434:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005438:	e9d5 2300 	ldrd	r2, r3, [r5]
 800543c:	f7fb f8fc 	bl	8000638 <__aeabi_dmul>
 8005440:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005444:	3601      	adds	r6, #1
 8005446:	1064      	asrs	r4, r4, #1
 8005448:	3508      	adds	r5, #8
 800544a:	e7e5      	b.n	8005418 <_dtoa_r+0x338>
 800544c:	f000 80d2 	beq.w	80055f4 <_dtoa_r+0x514>
 8005450:	427c      	negs	r4, r7
 8005452:	4b6b      	ldr	r3, [pc, #428]	@ (8005600 <_dtoa_r+0x520>)
 8005454:	4d6b      	ldr	r5, [pc, #428]	@ (8005604 <_dtoa_r+0x524>)
 8005456:	f004 020f 	and.w	r2, r4, #15
 800545a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005466:	f7fb f8e7 	bl	8000638 <__aeabi_dmul>
 800546a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800546e:	1124      	asrs	r4, r4, #4
 8005470:	2300      	movs	r3, #0
 8005472:	2602      	movs	r6, #2
 8005474:	2c00      	cmp	r4, #0
 8005476:	f040 80b2 	bne.w	80055de <_dtoa_r+0x4fe>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d3      	bne.n	8005426 <_dtoa_r+0x346>
 800547e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005480:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80b7 	beq.w	80055f8 <_dtoa_r+0x518>
 800548a:	4b5f      	ldr	r3, [pc, #380]	@ (8005608 <_dtoa_r+0x528>)
 800548c:	2200      	movs	r2, #0
 800548e:	4620      	mov	r0, r4
 8005490:	4629      	mov	r1, r5
 8005492:	f7fb fb43 	bl	8000b1c <__aeabi_dcmplt>
 8005496:	2800      	cmp	r0, #0
 8005498:	f000 80ae 	beq.w	80055f8 <_dtoa_r+0x518>
 800549c:	9b07      	ldr	r3, [sp, #28]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 80aa 	beq.w	80055f8 <_dtoa_r+0x518>
 80054a4:	9b08      	ldr	r3, [sp, #32]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dd37      	ble.n	800551a <_dtoa_r+0x43a>
 80054aa:	1e7b      	subs	r3, r7, #1
 80054ac:	9304      	str	r3, [sp, #16]
 80054ae:	4620      	mov	r0, r4
 80054b0:	4b56      	ldr	r3, [pc, #344]	@ (800560c <_dtoa_r+0x52c>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7fb f8bf 	bl	8000638 <__aeabi_dmul>
 80054ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054be:	9c08      	ldr	r4, [sp, #32]
 80054c0:	3601      	adds	r6, #1
 80054c2:	4630      	mov	r0, r6
 80054c4:	f7fb f84e 	bl	8000564 <__aeabi_i2d>
 80054c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054cc:	f7fb f8b4 	bl	8000638 <__aeabi_dmul>
 80054d0:	4b4f      	ldr	r3, [pc, #316]	@ (8005610 <_dtoa_r+0x530>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	f7fa fefa 	bl	80002cc <__adddf3>
 80054d8:	4605      	mov	r5, r0
 80054da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80054de:	2c00      	cmp	r4, #0
 80054e0:	f040 809a 	bne.w	8005618 <_dtoa_r+0x538>
 80054e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e8:	4b4a      	ldr	r3, [pc, #296]	@ (8005614 <_dtoa_r+0x534>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	f7fa feec 	bl	80002c8 <__aeabi_dsub>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054f8:	462a      	mov	r2, r5
 80054fa:	4633      	mov	r3, r6
 80054fc:	f7fb fb2c 	bl	8000b58 <__aeabi_dcmpgt>
 8005500:	2800      	cmp	r0, #0
 8005502:	f040 828e 	bne.w	8005a22 <_dtoa_r+0x942>
 8005506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800550a:	462a      	mov	r2, r5
 800550c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005510:	f7fb fb04 	bl	8000b1c <__aeabi_dcmplt>
 8005514:	2800      	cmp	r0, #0
 8005516:	f040 8127 	bne.w	8005768 <_dtoa_r+0x688>
 800551a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800551e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005522:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005524:	2b00      	cmp	r3, #0
 8005526:	f2c0 8163 	blt.w	80057f0 <_dtoa_r+0x710>
 800552a:	2f0e      	cmp	r7, #14
 800552c:	f300 8160 	bgt.w	80057f0 <_dtoa_r+0x710>
 8005530:	4b33      	ldr	r3, [pc, #204]	@ (8005600 <_dtoa_r+0x520>)
 8005532:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005536:	e9d3 3400 	ldrd	r3, r4, [r3]
 800553a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800553e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005540:	2b00      	cmp	r3, #0
 8005542:	da03      	bge.n	800554c <_dtoa_r+0x46c>
 8005544:	9b07      	ldr	r3, [sp, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f340 8100 	ble.w	800574c <_dtoa_r+0x66c>
 800554c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005550:	4656      	mov	r6, sl
 8005552:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005556:	4620      	mov	r0, r4
 8005558:	4629      	mov	r1, r5
 800555a:	f7fb f997 	bl	800088c <__aeabi_ddiv>
 800555e:	f7fb fb1b 	bl	8000b98 <__aeabi_d2iz>
 8005562:	4680      	mov	r8, r0
 8005564:	f7fa fffe 	bl	8000564 <__aeabi_i2d>
 8005568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556c:	f7fb f864 	bl	8000638 <__aeabi_dmul>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4620      	mov	r0, r4
 8005576:	4629      	mov	r1, r5
 8005578:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800557c:	f7fa fea4 	bl	80002c8 <__aeabi_dsub>
 8005580:	f806 4b01 	strb.w	r4, [r6], #1
 8005584:	9d07      	ldr	r5, [sp, #28]
 8005586:	eba6 040a 	sub.w	r4, r6, sl
 800558a:	42a5      	cmp	r5, r4
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	f040 8116 	bne.w	80057c0 <_dtoa_r+0x6e0>
 8005594:	f7fa fe9a 	bl	80002cc <__adddf3>
 8005598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800559c:	4604      	mov	r4, r0
 800559e:	460d      	mov	r5, r1
 80055a0:	f7fb fada 	bl	8000b58 <__aeabi_dcmpgt>
 80055a4:	2800      	cmp	r0, #0
 80055a6:	f040 80f8 	bne.w	800579a <_dtoa_r+0x6ba>
 80055aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055ae:	4620      	mov	r0, r4
 80055b0:	4629      	mov	r1, r5
 80055b2:	f7fb faa9 	bl	8000b08 <__aeabi_dcmpeq>
 80055b6:	b118      	cbz	r0, 80055c0 <_dtoa_r+0x4e0>
 80055b8:	f018 0f01 	tst.w	r8, #1
 80055bc:	f040 80ed 	bne.w	800579a <_dtoa_r+0x6ba>
 80055c0:	4649      	mov	r1, r9
 80055c2:	4658      	mov	r0, fp
 80055c4:	f000 fc94 	bl	8005ef0 <_Bfree>
 80055c8:	2300      	movs	r3, #0
 80055ca:	7033      	strb	r3, [r6, #0]
 80055cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80055ce:	3701      	adds	r7, #1
 80055d0:	601f      	str	r7, [r3, #0]
 80055d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8320 	beq.w	8005c1a <_dtoa_r+0xb3a>
 80055da:	601e      	str	r6, [r3, #0]
 80055dc:	e31d      	b.n	8005c1a <_dtoa_r+0xb3a>
 80055de:	07e2      	lsls	r2, r4, #31
 80055e0:	d505      	bpl.n	80055ee <_dtoa_r+0x50e>
 80055e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055e6:	f7fb f827 	bl	8000638 <__aeabi_dmul>
 80055ea:	3601      	adds	r6, #1
 80055ec:	2301      	movs	r3, #1
 80055ee:	1064      	asrs	r4, r4, #1
 80055f0:	3508      	adds	r5, #8
 80055f2:	e73f      	b.n	8005474 <_dtoa_r+0x394>
 80055f4:	2602      	movs	r6, #2
 80055f6:	e742      	b.n	800547e <_dtoa_r+0x39e>
 80055f8:	9c07      	ldr	r4, [sp, #28]
 80055fa:	9704      	str	r7, [sp, #16]
 80055fc:	e761      	b.n	80054c2 <_dtoa_r+0x3e2>
 80055fe:	bf00      	nop
 8005600:	08006d38 	.word	0x08006d38
 8005604:	08006d10 	.word	0x08006d10
 8005608:	3ff00000 	.word	0x3ff00000
 800560c:	40240000 	.word	0x40240000
 8005610:	401c0000 	.word	0x401c0000
 8005614:	40140000 	.word	0x40140000
 8005618:	4b70      	ldr	r3, [pc, #448]	@ (80057dc <_dtoa_r+0x6fc>)
 800561a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800561c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005624:	4454      	add	r4, sl
 8005626:	2900      	cmp	r1, #0
 8005628:	d045      	beq.n	80056b6 <_dtoa_r+0x5d6>
 800562a:	496d      	ldr	r1, [pc, #436]	@ (80057e0 <_dtoa_r+0x700>)
 800562c:	2000      	movs	r0, #0
 800562e:	f7fb f92d 	bl	800088c <__aeabi_ddiv>
 8005632:	4633      	mov	r3, r6
 8005634:	462a      	mov	r2, r5
 8005636:	f7fa fe47 	bl	80002c8 <__aeabi_dsub>
 800563a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800563e:	4656      	mov	r6, sl
 8005640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005644:	f7fb faa8 	bl	8000b98 <__aeabi_d2iz>
 8005648:	4605      	mov	r5, r0
 800564a:	f7fa ff8b 	bl	8000564 <__aeabi_i2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005656:	f7fa fe37 	bl	80002c8 <__aeabi_dsub>
 800565a:	3530      	adds	r5, #48	@ 0x30
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005664:	f806 5b01 	strb.w	r5, [r6], #1
 8005668:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800566c:	f7fb fa56 	bl	8000b1c <__aeabi_dcmplt>
 8005670:	2800      	cmp	r0, #0
 8005672:	d163      	bne.n	800573c <_dtoa_r+0x65c>
 8005674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005678:	495a      	ldr	r1, [pc, #360]	@ (80057e4 <_dtoa_r+0x704>)
 800567a:	2000      	movs	r0, #0
 800567c:	f7fa fe24 	bl	80002c8 <__aeabi_dsub>
 8005680:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005684:	f7fb fa4a 	bl	8000b1c <__aeabi_dcmplt>
 8005688:	2800      	cmp	r0, #0
 800568a:	f040 8087 	bne.w	800579c <_dtoa_r+0x6bc>
 800568e:	42a6      	cmp	r6, r4
 8005690:	f43f af43 	beq.w	800551a <_dtoa_r+0x43a>
 8005694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005698:	4b53      	ldr	r3, [pc, #332]	@ (80057e8 <_dtoa_r+0x708>)
 800569a:	2200      	movs	r2, #0
 800569c:	f7fa ffcc 	bl	8000638 <__aeabi_dmul>
 80056a0:	4b51      	ldr	r3, [pc, #324]	@ (80057e8 <_dtoa_r+0x708>)
 80056a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056a6:	2200      	movs	r2, #0
 80056a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ac:	f7fa ffc4 	bl	8000638 <__aeabi_dmul>
 80056b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b4:	e7c4      	b.n	8005640 <_dtoa_r+0x560>
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	f7fa ffbd 	bl	8000638 <__aeabi_dmul>
 80056be:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056c2:	9413      	str	r4, [sp, #76]	@ 0x4c
 80056c4:	4656      	mov	r6, sl
 80056c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056ca:	f7fb fa65 	bl	8000b98 <__aeabi_d2iz>
 80056ce:	4605      	mov	r5, r0
 80056d0:	f7fa ff48 	bl	8000564 <__aeabi_i2d>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056dc:	f7fa fdf4 	bl	80002c8 <__aeabi_dsub>
 80056e0:	3530      	adds	r5, #48	@ 0x30
 80056e2:	f806 5b01 	strb.w	r5, [r6], #1
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	42a6      	cmp	r6, r4
 80056ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	d124      	bne.n	8005740 <_dtoa_r+0x660>
 80056f6:	4b3a      	ldr	r3, [pc, #232]	@ (80057e0 <_dtoa_r+0x700>)
 80056f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056fc:	f7fa fde6 	bl	80002cc <__adddf3>
 8005700:	4602      	mov	r2, r0
 8005702:	460b      	mov	r3, r1
 8005704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005708:	f7fb fa26 	bl	8000b58 <__aeabi_dcmpgt>
 800570c:	2800      	cmp	r0, #0
 800570e:	d145      	bne.n	800579c <_dtoa_r+0x6bc>
 8005710:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005714:	4932      	ldr	r1, [pc, #200]	@ (80057e0 <_dtoa_r+0x700>)
 8005716:	2000      	movs	r0, #0
 8005718:	f7fa fdd6 	bl	80002c8 <__aeabi_dsub>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005724:	f7fb f9fa 	bl	8000b1c <__aeabi_dcmplt>
 8005728:	2800      	cmp	r0, #0
 800572a:	f43f aef6 	beq.w	800551a <_dtoa_r+0x43a>
 800572e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005730:	1e73      	subs	r3, r6, #1
 8005732:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005734:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005738:	2b30      	cmp	r3, #48	@ 0x30
 800573a:	d0f8      	beq.n	800572e <_dtoa_r+0x64e>
 800573c:	9f04      	ldr	r7, [sp, #16]
 800573e:	e73f      	b.n	80055c0 <_dtoa_r+0x4e0>
 8005740:	4b29      	ldr	r3, [pc, #164]	@ (80057e8 <_dtoa_r+0x708>)
 8005742:	f7fa ff79 	bl	8000638 <__aeabi_dmul>
 8005746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574a:	e7bc      	b.n	80056c6 <_dtoa_r+0x5e6>
 800574c:	d10c      	bne.n	8005768 <_dtoa_r+0x688>
 800574e:	4b27      	ldr	r3, [pc, #156]	@ (80057ec <_dtoa_r+0x70c>)
 8005750:	2200      	movs	r2, #0
 8005752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005756:	f7fa ff6f 	bl	8000638 <__aeabi_dmul>
 800575a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800575e:	f7fb f9f1 	bl	8000b44 <__aeabi_dcmpge>
 8005762:	2800      	cmp	r0, #0
 8005764:	f000 815b 	beq.w	8005a1e <_dtoa_r+0x93e>
 8005768:	2400      	movs	r4, #0
 800576a:	4625      	mov	r5, r4
 800576c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800576e:	43db      	mvns	r3, r3
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	4656      	mov	r6, sl
 8005774:	2700      	movs	r7, #0
 8005776:	4621      	mov	r1, r4
 8005778:	4658      	mov	r0, fp
 800577a:	f000 fbb9 	bl	8005ef0 <_Bfree>
 800577e:	2d00      	cmp	r5, #0
 8005780:	d0dc      	beq.n	800573c <_dtoa_r+0x65c>
 8005782:	b12f      	cbz	r7, 8005790 <_dtoa_r+0x6b0>
 8005784:	42af      	cmp	r7, r5
 8005786:	d003      	beq.n	8005790 <_dtoa_r+0x6b0>
 8005788:	4639      	mov	r1, r7
 800578a:	4658      	mov	r0, fp
 800578c:	f000 fbb0 	bl	8005ef0 <_Bfree>
 8005790:	4629      	mov	r1, r5
 8005792:	4658      	mov	r0, fp
 8005794:	f000 fbac 	bl	8005ef0 <_Bfree>
 8005798:	e7d0      	b.n	800573c <_dtoa_r+0x65c>
 800579a:	9704      	str	r7, [sp, #16]
 800579c:	4633      	mov	r3, r6
 800579e:	461e      	mov	r6, r3
 80057a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057a4:	2a39      	cmp	r2, #57	@ 0x39
 80057a6:	d107      	bne.n	80057b8 <_dtoa_r+0x6d8>
 80057a8:	459a      	cmp	sl, r3
 80057aa:	d1f8      	bne.n	800579e <_dtoa_r+0x6be>
 80057ac:	9a04      	ldr	r2, [sp, #16]
 80057ae:	3201      	adds	r2, #1
 80057b0:	9204      	str	r2, [sp, #16]
 80057b2:	2230      	movs	r2, #48	@ 0x30
 80057b4:	f88a 2000 	strb.w	r2, [sl]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	3201      	adds	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e7bd      	b.n	800573c <_dtoa_r+0x65c>
 80057c0:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <_dtoa_r+0x708>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	f7fa ff38 	bl	8000638 <__aeabi_dmul>
 80057c8:	2200      	movs	r2, #0
 80057ca:	2300      	movs	r3, #0
 80057cc:	4604      	mov	r4, r0
 80057ce:	460d      	mov	r5, r1
 80057d0:	f7fb f99a 	bl	8000b08 <__aeabi_dcmpeq>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f43f aebc 	beq.w	8005552 <_dtoa_r+0x472>
 80057da:	e6f1      	b.n	80055c0 <_dtoa_r+0x4e0>
 80057dc:	08006d38 	.word	0x08006d38
 80057e0:	3fe00000 	.word	0x3fe00000
 80057e4:	3ff00000 	.word	0x3ff00000
 80057e8:	40240000 	.word	0x40240000
 80057ec:	40140000 	.word	0x40140000
 80057f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80057f2:	2a00      	cmp	r2, #0
 80057f4:	f000 80db 	beq.w	80059ae <_dtoa_r+0x8ce>
 80057f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057fa:	2a01      	cmp	r2, #1
 80057fc:	f300 80bf 	bgt.w	800597e <_dtoa_r+0x89e>
 8005800:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005802:	2a00      	cmp	r2, #0
 8005804:	f000 80b7 	beq.w	8005976 <_dtoa_r+0x896>
 8005808:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800580c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800580e:	4646      	mov	r6, r8
 8005810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005812:	2101      	movs	r1, #1
 8005814:	441a      	add	r2, r3
 8005816:	4658      	mov	r0, fp
 8005818:	4498      	add	r8, r3
 800581a:	9209      	str	r2, [sp, #36]	@ 0x24
 800581c:	f000 fc1c 	bl	8006058 <__i2b>
 8005820:	4605      	mov	r5, r0
 8005822:	b15e      	cbz	r6, 800583c <_dtoa_r+0x75c>
 8005824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd08      	ble.n	800583c <_dtoa_r+0x75c>
 800582a:	42b3      	cmp	r3, r6
 800582c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800582e:	bfa8      	it	ge
 8005830:	4633      	movge	r3, r6
 8005832:	eba8 0803 	sub.w	r8, r8, r3
 8005836:	1af6      	subs	r6, r6, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	9309      	str	r3, [sp, #36]	@ 0x24
 800583c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800583e:	b1f3      	cbz	r3, 800587e <_dtoa_r+0x79e>
 8005840:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80b7 	beq.w	80059b6 <_dtoa_r+0x8d6>
 8005848:	b18c      	cbz	r4, 800586e <_dtoa_r+0x78e>
 800584a:	4629      	mov	r1, r5
 800584c:	4622      	mov	r2, r4
 800584e:	4658      	mov	r0, fp
 8005850:	f000 fcc2 	bl	80061d8 <__pow5mult>
 8005854:	464a      	mov	r2, r9
 8005856:	4601      	mov	r1, r0
 8005858:	4605      	mov	r5, r0
 800585a:	4658      	mov	r0, fp
 800585c:	f000 fc12 	bl	8006084 <__multiply>
 8005860:	4649      	mov	r1, r9
 8005862:	9004      	str	r0, [sp, #16]
 8005864:	4658      	mov	r0, fp
 8005866:	f000 fb43 	bl	8005ef0 <_Bfree>
 800586a:	9b04      	ldr	r3, [sp, #16]
 800586c:	4699      	mov	r9, r3
 800586e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005870:	1b1a      	subs	r2, r3, r4
 8005872:	d004      	beq.n	800587e <_dtoa_r+0x79e>
 8005874:	4649      	mov	r1, r9
 8005876:	4658      	mov	r0, fp
 8005878:	f000 fcae 	bl	80061d8 <__pow5mult>
 800587c:	4681      	mov	r9, r0
 800587e:	2101      	movs	r1, #1
 8005880:	4658      	mov	r0, fp
 8005882:	f000 fbe9 	bl	8006058 <__i2b>
 8005886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005888:	4604      	mov	r4, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 81c9 	beq.w	8005c22 <_dtoa_r+0xb42>
 8005890:	461a      	mov	r2, r3
 8005892:	4601      	mov	r1, r0
 8005894:	4658      	mov	r0, fp
 8005896:	f000 fc9f 	bl	80061d8 <__pow5mult>
 800589a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800589c:	2b01      	cmp	r3, #1
 800589e:	4604      	mov	r4, r0
 80058a0:	f300 808f 	bgt.w	80059c2 <_dtoa_r+0x8e2>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f040 8087 	bne.w	80059ba <_dtoa_r+0x8da>
 80058ac:	9b03      	ldr	r3, [sp, #12]
 80058ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 8083 	bne.w	80059be <_dtoa_r+0x8de>
 80058b8:	9b03      	ldr	r3, [sp, #12]
 80058ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058be:	0d1b      	lsrs	r3, r3, #20
 80058c0:	051b      	lsls	r3, r3, #20
 80058c2:	b12b      	cbz	r3, 80058d0 <_dtoa_r+0x7f0>
 80058c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c6:	3301      	adds	r3, #1
 80058c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ca:	f108 0801 	add.w	r8, r8, #1
 80058ce:	2301      	movs	r3, #1
 80058d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f000 81aa 	beq.w	8005c2e <_dtoa_r+0xb4e>
 80058da:	6923      	ldr	r3, [r4, #16]
 80058dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80058e0:	6918      	ldr	r0, [r3, #16]
 80058e2:	f000 fb6d 	bl	8005fc0 <__hi0bits>
 80058e6:	f1c0 0020 	rsb	r0, r0, #32
 80058ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ec:	4418      	add	r0, r3
 80058ee:	f010 001f 	ands.w	r0, r0, #31
 80058f2:	d071      	beq.n	80059d8 <_dtoa_r+0x8f8>
 80058f4:	f1c0 0320 	rsb	r3, r0, #32
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	dd65      	ble.n	80059c8 <_dtoa_r+0x8e8>
 80058fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fe:	f1c0 001c 	rsb	r0, r0, #28
 8005902:	4403      	add	r3, r0
 8005904:	4480      	add	r8, r0
 8005906:	4406      	add	r6, r0
 8005908:	9309      	str	r3, [sp, #36]	@ 0x24
 800590a:	f1b8 0f00 	cmp.w	r8, #0
 800590e:	dd05      	ble.n	800591c <_dtoa_r+0x83c>
 8005910:	4649      	mov	r1, r9
 8005912:	4642      	mov	r2, r8
 8005914:	4658      	mov	r0, fp
 8005916:	f000 fcb9 	bl	800628c <__lshift>
 800591a:	4681      	mov	r9, r0
 800591c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	dd05      	ble.n	800592e <_dtoa_r+0x84e>
 8005922:	4621      	mov	r1, r4
 8005924:	461a      	mov	r2, r3
 8005926:	4658      	mov	r0, fp
 8005928:	f000 fcb0 	bl	800628c <__lshift>
 800592c:	4604      	mov	r4, r0
 800592e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d053      	beq.n	80059dc <_dtoa_r+0x8fc>
 8005934:	4621      	mov	r1, r4
 8005936:	4648      	mov	r0, r9
 8005938:	f000 fd14 	bl	8006364 <__mcmp>
 800593c:	2800      	cmp	r0, #0
 800593e:	da4d      	bge.n	80059dc <_dtoa_r+0x8fc>
 8005940:	1e7b      	subs	r3, r7, #1
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	4649      	mov	r1, r9
 8005946:	2300      	movs	r3, #0
 8005948:	220a      	movs	r2, #10
 800594a:	4658      	mov	r0, fp
 800594c:	f000 faf2 	bl	8005f34 <__multadd>
 8005950:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005952:	4681      	mov	r9, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 816c 	beq.w	8005c32 <_dtoa_r+0xb52>
 800595a:	2300      	movs	r3, #0
 800595c:	4629      	mov	r1, r5
 800595e:	220a      	movs	r2, #10
 8005960:	4658      	mov	r0, fp
 8005962:	f000 fae7 	bl	8005f34 <__multadd>
 8005966:	9b08      	ldr	r3, [sp, #32]
 8005968:	2b00      	cmp	r3, #0
 800596a:	4605      	mov	r5, r0
 800596c:	dc61      	bgt.n	8005a32 <_dtoa_r+0x952>
 800596e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005970:	2b02      	cmp	r3, #2
 8005972:	dc3b      	bgt.n	80059ec <_dtoa_r+0x90c>
 8005974:	e05d      	b.n	8005a32 <_dtoa_r+0x952>
 8005976:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005978:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800597c:	e746      	b.n	800580c <_dtoa_r+0x72c>
 800597e:	9b07      	ldr	r3, [sp, #28]
 8005980:	1e5c      	subs	r4, r3, #1
 8005982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005984:	42a3      	cmp	r3, r4
 8005986:	bfbf      	itttt	lt
 8005988:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800598a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800598c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800598e:	1ae3      	sublt	r3, r4, r3
 8005990:	bfb4      	ite	lt
 8005992:	18d2      	addlt	r2, r2, r3
 8005994:	1b1c      	subge	r4, r3, r4
 8005996:	9b07      	ldr	r3, [sp, #28]
 8005998:	bfbc      	itt	lt
 800599a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800599c:	2400      	movlt	r4, #0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfb5      	itete	lt
 80059a2:	eba8 0603 	sublt.w	r6, r8, r3
 80059a6:	9b07      	ldrge	r3, [sp, #28]
 80059a8:	2300      	movlt	r3, #0
 80059aa:	4646      	movge	r6, r8
 80059ac:	e730      	b.n	8005810 <_dtoa_r+0x730>
 80059ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059b0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80059b2:	4646      	mov	r6, r8
 80059b4:	e735      	b.n	8005822 <_dtoa_r+0x742>
 80059b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059b8:	e75c      	b.n	8005874 <_dtoa_r+0x794>
 80059ba:	2300      	movs	r3, #0
 80059bc:	e788      	b.n	80058d0 <_dtoa_r+0x7f0>
 80059be:	9b02      	ldr	r3, [sp, #8]
 80059c0:	e786      	b.n	80058d0 <_dtoa_r+0x7f0>
 80059c2:	2300      	movs	r3, #0
 80059c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80059c6:	e788      	b.n	80058da <_dtoa_r+0x7fa>
 80059c8:	d09f      	beq.n	800590a <_dtoa_r+0x82a>
 80059ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80059cc:	331c      	adds	r3, #28
 80059ce:	441a      	add	r2, r3
 80059d0:	4498      	add	r8, r3
 80059d2:	441e      	add	r6, r3
 80059d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80059d6:	e798      	b.n	800590a <_dtoa_r+0x82a>
 80059d8:	4603      	mov	r3, r0
 80059da:	e7f6      	b.n	80059ca <_dtoa_r+0x8ea>
 80059dc:	9b07      	ldr	r3, [sp, #28]
 80059de:	9704      	str	r7, [sp, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc20      	bgt.n	8005a26 <_dtoa_r+0x946>
 80059e4:	9308      	str	r3, [sp, #32]
 80059e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	dd1e      	ble.n	8005a2a <_dtoa_r+0x94a>
 80059ec:	9b08      	ldr	r3, [sp, #32]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f47f aebc 	bne.w	800576c <_dtoa_r+0x68c>
 80059f4:	4621      	mov	r1, r4
 80059f6:	2205      	movs	r2, #5
 80059f8:	4658      	mov	r0, fp
 80059fa:	f000 fa9b 	bl	8005f34 <__multadd>
 80059fe:	4601      	mov	r1, r0
 8005a00:	4604      	mov	r4, r0
 8005a02:	4648      	mov	r0, r9
 8005a04:	f000 fcae 	bl	8006364 <__mcmp>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	f77f aeaf 	ble.w	800576c <_dtoa_r+0x68c>
 8005a0e:	4656      	mov	r6, sl
 8005a10:	2331      	movs	r3, #49	@ 0x31
 8005a12:	f806 3b01 	strb.w	r3, [r6], #1
 8005a16:	9b04      	ldr	r3, [sp, #16]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	e6aa      	b.n	8005774 <_dtoa_r+0x694>
 8005a1e:	9c07      	ldr	r4, [sp, #28]
 8005a20:	9704      	str	r7, [sp, #16]
 8005a22:	4625      	mov	r5, r4
 8005a24:	e7f3      	b.n	8005a0e <_dtoa_r+0x92e>
 8005a26:	9b07      	ldr	r3, [sp, #28]
 8005a28:	9308      	str	r3, [sp, #32]
 8005a2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8104 	beq.w	8005c3a <_dtoa_r+0xb5a>
 8005a32:	2e00      	cmp	r6, #0
 8005a34:	dd05      	ble.n	8005a42 <_dtoa_r+0x962>
 8005a36:	4629      	mov	r1, r5
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4658      	mov	r0, fp
 8005a3c:	f000 fc26 	bl	800628c <__lshift>
 8005a40:	4605      	mov	r5, r0
 8005a42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d05a      	beq.n	8005afe <_dtoa_r+0xa1e>
 8005a48:	6869      	ldr	r1, [r5, #4]
 8005a4a:	4658      	mov	r0, fp
 8005a4c:	f000 fa10 	bl	8005e70 <_Balloc>
 8005a50:	4606      	mov	r6, r0
 8005a52:	b928      	cbnz	r0, 8005a60 <_dtoa_r+0x980>
 8005a54:	4b84      	ldr	r3, [pc, #528]	@ (8005c68 <_dtoa_r+0xb88>)
 8005a56:	4602      	mov	r2, r0
 8005a58:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a5c:	f7ff bb54 	b.w	8005108 <_dtoa_r+0x28>
 8005a60:	692a      	ldr	r2, [r5, #16]
 8005a62:	3202      	adds	r2, #2
 8005a64:	0092      	lsls	r2, r2, #2
 8005a66:	f105 010c 	add.w	r1, r5, #12
 8005a6a:	300c      	adds	r0, #12
 8005a6c:	f000 ff54 	bl	8006918 <memcpy>
 8005a70:	2201      	movs	r2, #1
 8005a72:	4631      	mov	r1, r6
 8005a74:	4658      	mov	r0, fp
 8005a76:	f000 fc09 	bl	800628c <__lshift>
 8005a7a:	f10a 0301 	add.w	r3, sl, #1
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	9b08      	ldr	r3, [sp, #32]
 8005a82:	4453      	add	r3, sl
 8005a84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	462f      	mov	r7, r5
 8005a8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a90:	4605      	mov	r5, r0
 8005a92:	9b07      	ldr	r3, [sp, #28]
 8005a94:	4621      	mov	r1, r4
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4648      	mov	r0, r9
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	f7ff fa97 	bl	8004fce <quorem>
 8005aa0:	4639      	mov	r1, r7
 8005aa2:	9008      	str	r0, [sp, #32]
 8005aa4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005aa8:	4648      	mov	r0, r9
 8005aaa:	f000 fc5b 	bl	8006364 <__mcmp>
 8005aae:	462a      	mov	r2, r5
 8005ab0:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ab2:	4621      	mov	r1, r4
 8005ab4:	4658      	mov	r0, fp
 8005ab6:	f000 fc71 	bl	800639c <__mdiff>
 8005aba:	68c2      	ldr	r2, [r0, #12]
 8005abc:	4606      	mov	r6, r0
 8005abe:	bb02      	cbnz	r2, 8005b02 <_dtoa_r+0xa22>
 8005ac0:	4601      	mov	r1, r0
 8005ac2:	4648      	mov	r0, r9
 8005ac4:	f000 fc4e 	bl	8006364 <__mcmp>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4631      	mov	r1, r6
 8005acc:	4658      	mov	r0, fp
 8005ace:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ad0:	f000 fa0e 	bl	8005ef0 <_Bfree>
 8005ad4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ad6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ad8:	9e07      	ldr	r6, [sp, #28]
 8005ada:	ea43 0102 	orr.w	r1, r3, r2
 8005ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae0:	4319      	orrs	r1, r3
 8005ae2:	d110      	bne.n	8005b06 <_dtoa_r+0xa26>
 8005ae4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005ae8:	d029      	beq.n	8005b3e <_dtoa_r+0xa5e>
 8005aea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	dd02      	ble.n	8005af6 <_dtoa_r+0xa16>
 8005af0:	9b08      	ldr	r3, [sp, #32]
 8005af2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005af6:	9b02      	ldr	r3, [sp, #8]
 8005af8:	f883 8000 	strb.w	r8, [r3]
 8005afc:	e63b      	b.n	8005776 <_dtoa_r+0x696>
 8005afe:	4628      	mov	r0, r5
 8005b00:	e7bb      	b.n	8005a7a <_dtoa_r+0x99a>
 8005b02:	2201      	movs	r2, #1
 8005b04:	e7e1      	b.n	8005aca <_dtoa_r+0x9ea>
 8005b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	db04      	blt.n	8005b16 <_dtoa_r+0xa36>
 8005b0c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8005b0e:	430b      	orrs	r3, r1
 8005b10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b12:	430b      	orrs	r3, r1
 8005b14:	d120      	bne.n	8005b58 <_dtoa_r+0xa78>
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	dded      	ble.n	8005af6 <_dtoa_r+0xa16>
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	4658      	mov	r0, fp
 8005b20:	f000 fbb4 	bl	800628c <__lshift>
 8005b24:	4621      	mov	r1, r4
 8005b26:	4681      	mov	r9, r0
 8005b28:	f000 fc1c 	bl	8006364 <__mcmp>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	dc03      	bgt.n	8005b38 <_dtoa_r+0xa58>
 8005b30:	d1e1      	bne.n	8005af6 <_dtoa_r+0xa16>
 8005b32:	f018 0f01 	tst.w	r8, #1
 8005b36:	d0de      	beq.n	8005af6 <_dtoa_r+0xa16>
 8005b38:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b3c:	d1d8      	bne.n	8005af0 <_dtoa_r+0xa10>
 8005b3e:	9a02      	ldr	r2, [sp, #8]
 8005b40:	2339      	movs	r3, #57	@ 0x39
 8005b42:	7013      	strb	r3, [r2, #0]
 8005b44:	4633      	mov	r3, r6
 8005b46:	461e      	mov	r6, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b4e:	2a39      	cmp	r2, #57	@ 0x39
 8005b50:	d052      	beq.n	8005bf8 <_dtoa_r+0xb18>
 8005b52:	3201      	adds	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e60e      	b.n	8005776 <_dtoa_r+0x696>
 8005b58:	2a00      	cmp	r2, #0
 8005b5a:	dd07      	ble.n	8005b6c <_dtoa_r+0xa8c>
 8005b5c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b60:	d0ed      	beq.n	8005b3e <_dtoa_r+0xa5e>
 8005b62:	9a02      	ldr	r2, [sp, #8]
 8005b64:	f108 0301 	add.w	r3, r8, #1
 8005b68:	7013      	strb	r3, [r2, #0]
 8005b6a:	e604      	b.n	8005776 <_dtoa_r+0x696>
 8005b6c:	9b07      	ldr	r3, [sp, #28]
 8005b6e:	9a07      	ldr	r2, [sp, #28]
 8005b70:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005b74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d028      	beq.n	8005bcc <_dtoa_r+0xaec>
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	220a      	movs	r2, #10
 8005b80:	4658      	mov	r0, fp
 8005b82:	f000 f9d7 	bl	8005f34 <__multadd>
 8005b86:	42af      	cmp	r7, r5
 8005b88:	4681      	mov	r9, r0
 8005b8a:	f04f 0300 	mov.w	r3, #0
 8005b8e:	f04f 020a 	mov.w	r2, #10
 8005b92:	4639      	mov	r1, r7
 8005b94:	4658      	mov	r0, fp
 8005b96:	d107      	bne.n	8005ba8 <_dtoa_r+0xac8>
 8005b98:	f000 f9cc 	bl	8005f34 <__multadd>
 8005b9c:	4607      	mov	r7, r0
 8005b9e:	4605      	mov	r5, r0
 8005ba0:	9b07      	ldr	r3, [sp, #28]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	9307      	str	r3, [sp, #28]
 8005ba6:	e774      	b.n	8005a92 <_dtoa_r+0x9b2>
 8005ba8:	f000 f9c4 	bl	8005f34 <__multadd>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4607      	mov	r7, r0
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	220a      	movs	r2, #10
 8005bb4:	4658      	mov	r0, fp
 8005bb6:	f000 f9bd 	bl	8005f34 <__multadd>
 8005bba:	4605      	mov	r5, r0
 8005bbc:	e7f0      	b.n	8005ba0 <_dtoa_r+0xac0>
 8005bbe:	9b08      	ldr	r3, [sp, #32]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	bfcc      	ite	gt
 8005bc4:	461e      	movgt	r6, r3
 8005bc6:	2601      	movle	r6, #1
 8005bc8:	4456      	add	r6, sl
 8005bca:	2700      	movs	r7, #0
 8005bcc:	4649      	mov	r1, r9
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	f000 fb5b 	bl	800628c <__lshift>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4681      	mov	r9, r0
 8005bda:	f000 fbc3 	bl	8006364 <__mcmp>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	dcb0      	bgt.n	8005b44 <_dtoa_r+0xa64>
 8005be2:	d102      	bne.n	8005bea <_dtoa_r+0xb0a>
 8005be4:	f018 0f01 	tst.w	r8, #1
 8005be8:	d1ac      	bne.n	8005b44 <_dtoa_r+0xa64>
 8005bea:	4633      	mov	r3, r6
 8005bec:	461e      	mov	r6, r3
 8005bee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bf2:	2a30      	cmp	r2, #48	@ 0x30
 8005bf4:	d0fa      	beq.n	8005bec <_dtoa_r+0xb0c>
 8005bf6:	e5be      	b.n	8005776 <_dtoa_r+0x696>
 8005bf8:	459a      	cmp	sl, r3
 8005bfa:	d1a4      	bne.n	8005b46 <_dtoa_r+0xa66>
 8005bfc:	9b04      	ldr	r3, [sp, #16]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	9304      	str	r3, [sp, #16]
 8005c02:	2331      	movs	r3, #49	@ 0x31
 8005c04:	f88a 3000 	strb.w	r3, [sl]
 8005c08:	e5b5      	b.n	8005776 <_dtoa_r+0x696>
 8005c0a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c0c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005c6c <_dtoa_r+0xb8c>
 8005c10:	b11b      	cbz	r3, 8005c1a <_dtoa_r+0xb3a>
 8005c12:	f10a 0308 	add.w	r3, sl, #8
 8005c16:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	4650      	mov	r0, sl
 8005c1c:	b017      	add	sp, #92	@ 0x5c
 8005c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	f77f ae3d 	ble.w	80058a4 <_dtoa_r+0x7c4>
 8005c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c2e:	2001      	movs	r0, #1
 8005c30:	e65b      	b.n	80058ea <_dtoa_r+0x80a>
 8005c32:	9b08      	ldr	r3, [sp, #32]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f77f aed6 	ble.w	80059e6 <_dtoa_r+0x906>
 8005c3a:	4656      	mov	r6, sl
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	4648      	mov	r0, r9
 8005c40:	f7ff f9c5 	bl	8004fce <quorem>
 8005c44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c48:	f806 8b01 	strb.w	r8, [r6], #1
 8005c4c:	9b08      	ldr	r3, [sp, #32]
 8005c4e:	eba6 020a 	sub.w	r2, r6, sl
 8005c52:	4293      	cmp	r3, r2
 8005c54:	ddb3      	ble.n	8005bbe <_dtoa_r+0xade>
 8005c56:	4649      	mov	r1, r9
 8005c58:	2300      	movs	r3, #0
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	4658      	mov	r0, fp
 8005c5e:	f000 f969 	bl	8005f34 <__multadd>
 8005c62:	4681      	mov	r9, r0
 8005c64:	e7ea      	b.n	8005c3c <_dtoa_r+0xb5c>
 8005c66:	bf00      	nop
 8005c68:	08006c94 	.word	0x08006c94
 8005c6c:	08006c18 	.word	0x08006c18

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d041      	beq.n	8005cfc <_free_r+0x8c>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f000 f8e8 	bl	8005e58 <__malloc_lock>
 8005c88:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <_free_r+0x90>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x2c>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f000 b8e4 	b.w	8005e64 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1809      	addeq	r1, r1, r0
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x1e>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x4c>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x42>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1850      	adds	r0, r2, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x6c>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x22>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6053      	str	r3, [r2, #4]
 8005cd6:	4408      	add	r0, r1
 8005cd8:	6010      	str	r0, [r2, #0]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x22>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x74>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x22>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	6054      	str	r4, [r2, #4]
 8005cfa:	e7ca      	b.n	8005c92 <_free_r+0x22>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	200003dc 	.word	0x200003dc

08005d04 <malloc>:
 8005d04:	4b02      	ldr	r3, [pc, #8]	@ (8005d10 <malloc+0xc>)
 8005d06:	4601      	mov	r1, r0
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f000 b825 	b.w	8005d58 <_malloc_r>
 8005d0e:	bf00      	nop
 8005d10:	20000018 	.word	0x20000018

08005d14 <sbrk_aligned>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4e0f      	ldr	r6, [pc, #60]	@ (8005d54 <sbrk_aligned+0x40>)
 8005d18:	460c      	mov	r4, r1
 8005d1a:	6831      	ldr	r1, [r6, #0]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	b911      	cbnz	r1, 8005d26 <sbrk_aligned+0x12>
 8005d20:	f000 fdea 	bl	80068f8 <_sbrk_r>
 8005d24:	6030      	str	r0, [r6, #0]
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 fde5 	bl	80068f8 <_sbrk_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d103      	bne.n	8005d3a <sbrk_aligned+0x26>
 8005d32:	f04f 34ff 	mov.w	r4, #4294967295
 8005d36:	4620      	mov	r0, r4
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d0f8      	beq.n	8005d36 <sbrk_aligned+0x22>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 fdd6 	bl	80068f8 <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1f2      	bne.n	8005d36 <sbrk_aligned+0x22>
 8005d50:	e7ef      	b.n	8005d32 <sbrk_aligned+0x1e>
 8005d52:	bf00      	nop
 8005d54:	200003d8 	.word	0x200003d8

08005d58 <_malloc_r>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	1ccd      	adds	r5, r1, #3
 8005d5e:	f025 0503 	bic.w	r5, r5, #3
 8005d62:	3508      	adds	r5, #8
 8005d64:	2d0c      	cmp	r5, #12
 8005d66:	bf38      	it	cc
 8005d68:	250c      	movcc	r5, #12
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	db01      	blt.n	8005d74 <_malloc_r+0x1c>
 8005d70:	42a9      	cmp	r1, r5
 8005d72:	d904      	bls.n	8005d7e <_malloc_r+0x26>
 8005d74:	230c      	movs	r3, #12
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e54 <_malloc_r+0xfc>
 8005d82:	f000 f869 	bl	8005e58 <__malloc_lock>
 8005d86:	f8d8 3000 	ldr.w	r3, [r8]
 8005d8a:	461c      	mov	r4, r3
 8005d8c:	bb44      	cbnz	r4, 8005de0 <_malloc_r+0x88>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ffbf 	bl	8005d14 <sbrk_aligned>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	4604      	mov	r4, r0
 8005d9a:	d158      	bne.n	8005e4e <_malloc_r+0xf6>
 8005d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005da0:	4627      	mov	r7, r4
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d143      	bne.n	8005e2e <_malloc_r+0xd6>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d04b      	beq.n	8005e42 <_malloc_r+0xea>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	4639      	mov	r1, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	eb04 0903 	add.w	r9, r4, r3
 8005db4:	f000 fda0 	bl	80068f8 <_sbrk_r>
 8005db8:	4581      	cmp	r9, r0
 8005dba:	d142      	bne.n	8005e42 <_malloc_r+0xea>
 8005dbc:	6821      	ldr	r1, [r4, #0]
 8005dbe:	1a6d      	subs	r5, r5, r1
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ffa6 	bl	8005d14 <sbrk_aligned>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d03a      	beq.n	8005e42 <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	442b      	add	r3, r5
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	bb62      	cbnz	r2, 8005e34 <_malloc_r+0xdc>
 8005dda:	f8c8 7000 	str.w	r7, [r8]
 8005dde:	e00f      	b.n	8005e00 <_malloc_r+0xa8>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	1b52      	subs	r2, r2, r5
 8005de4:	d420      	bmi.n	8005e28 <_malloc_r+0xd0>
 8005de6:	2a0b      	cmp	r2, #11
 8005de8:	d917      	bls.n	8005e1a <_malloc_r+0xc2>
 8005dea:	1961      	adds	r1, r4, r5
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	6025      	str	r5, [r4, #0]
 8005df0:	bf18      	it	ne
 8005df2:	6059      	strne	r1, [r3, #4]
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	bf08      	it	eq
 8005df8:	f8c8 1000 	streq.w	r1, [r8]
 8005dfc:	5162      	str	r2, [r4, r5]
 8005dfe:	604b      	str	r3, [r1, #4]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f82f 	bl	8005e64 <__malloc_unlock>
 8005e06:	f104 000b 	add.w	r0, r4, #11
 8005e0a:	1d23      	adds	r3, r4, #4
 8005e0c:	f020 0007 	bic.w	r0, r0, #7
 8005e10:	1ac2      	subs	r2, r0, r3
 8005e12:	bf1c      	itt	ne
 8005e14:	1a1b      	subne	r3, r3, r0
 8005e16:	50a3      	strne	r3, [r4, r2]
 8005e18:	e7af      	b.n	8005d7a <_malloc_r+0x22>
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	bf0c      	ite	eq
 8005e20:	f8c8 2000 	streq.w	r2, [r8]
 8005e24:	605a      	strne	r2, [r3, #4]
 8005e26:	e7eb      	b.n	8005e00 <_malloc_r+0xa8>
 8005e28:	4623      	mov	r3, r4
 8005e2a:	6864      	ldr	r4, [r4, #4]
 8005e2c:	e7ae      	b.n	8005d8c <_malloc_r+0x34>
 8005e2e:	463c      	mov	r4, r7
 8005e30:	687f      	ldr	r7, [r7, #4]
 8005e32:	e7b6      	b.n	8005da2 <_malloc_r+0x4a>
 8005e34:	461a      	mov	r2, r3
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d1fb      	bne.n	8005e34 <_malloc_r+0xdc>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6053      	str	r3, [r2, #4]
 8005e40:	e7de      	b.n	8005e00 <_malloc_r+0xa8>
 8005e42:	230c      	movs	r3, #12
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	4630      	mov	r0, r6
 8005e48:	f000 f80c 	bl	8005e64 <__malloc_unlock>
 8005e4c:	e794      	b.n	8005d78 <_malloc_r+0x20>
 8005e4e:	6005      	str	r5, [r0, #0]
 8005e50:	e7d6      	b.n	8005e00 <_malloc_r+0xa8>
 8005e52:	bf00      	nop
 8005e54:	200003dc 	.word	0x200003dc

08005e58 <__malloc_lock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__malloc_lock+0x8>)
 8005e5a:	f7ff b8b6 	b.w	8004fca <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	200003d4 	.word	0x200003d4

08005e64 <__malloc_unlock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_unlock+0x8>)
 8005e66:	f7ff b8b1 	b.w	8004fcc <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	200003d4 	.word	0x200003d4

08005e70 <_Balloc>:
 8005e70:	b570      	push	{r4, r5, r6, lr}
 8005e72:	69c6      	ldr	r6, [r0, #28]
 8005e74:	4604      	mov	r4, r0
 8005e76:	460d      	mov	r5, r1
 8005e78:	b976      	cbnz	r6, 8005e98 <_Balloc+0x28>
 8005e7a:	2010      	movs	r0, #16
 8005e7c:	f7ff ff42 	bl	8005d04 <malloc>
 8005e80:	4602      	mov	r2, r0
 8005e82:	61e0      	str	r0, [r4, #28]
 8005e84:	b920      	cbnz	r0, 8005e90 <_Balloc+0x20>
 8005e86:	4b18      	ldr	r3, [pc, #96]	@ (8005ee8 <_Balloc+0x78>)
 8005e88:	4818      	ldr	r0, [pc, #96]	@ (8005eec <_Balloc+0x7c>)
 8005e8a:	216b      	movs	r1, #107	@ 0x6b
 8005e8c:	f000 fd52 	bl	8006934 <__assert_func>
 8005e90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e94:	6006      	str	r6, [r0, #0]
 8005e96:	60c6      	str	r6, [r0, #12]
 8005e98:	69e6      	ldr	r6, [r4, #28]
 8005e9a:	68f3      	ldr	r3, [r6, #12]
 8005e9c:	b183      	cbz	r3, 8005ec0 <_Balloc+0x50>
 8005e9e:	69e3      	ldr	r3, [r4, #28]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ea6:	b9b8      	cbnz	r0, 8005ed8 <_Balloc+0x68>
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	fa01 f605 	lsl.w	r6, r1, r5
 8005eae:	1d72      	adds	r2, r6, #5
 8005eb0:	0092      	lsls	r2, r2, #2
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fd5c 	bl	8006970 <_calloc_r>
 8005eb8:	b160      	cbz	r0, 8005ed4 <_Balloc+0x64>
 8005eba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ebe:	e00e      	b.n	8005ede <_Balloc+0x6e>
 8005ec0:	2221      	movs	r2, #33	@ 0x21
 8005ec2:	2104      	movs	r1, #4
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 fd53 	bl	8006970 <_calloc_r>
 8005eca:	69e3      	ldr	r3, [r4, #28]
 8005ecc:	60f0      	str	r0, [r6, #12]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1e4      	bne.n	8005e9e <_Balloc+0x2e>
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	6802      	ldr	r2, [r0, #0]
 8005eda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ee4:	e7f7      	b.n	8005ed6 <_Balloc+0x66>
 8005ee6:	bf00      	nop
 8005ee8:	08006c25 	.word	0x08006c25
 8005eec:	08006ca5 	.word	0x08006ca5

08005ef0 <_Bfree>:
 8005ef0:	b570      	push	{r4, r5, r6, lr}
 8005ef2:	69c6      	ldr	r6, [r0, #28]
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	b976      	cbnz	r6, 8005f18 <_Bfree+0x28>
 8005efa:	2010      	movs	r0, #16
 8005efc:	f7ff ff02 	bl	8005d04 <malloc>
 8005f00:	4602      	mov	r2, r0
 8005f02:	61e8      	str	r0, [r5, #28]
 8005f04:	b920      	cbnz	r0, 8005f10 <_Bfree+0x20>
 8005f06:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <_Bfree+0x3c>)
 8005f08:	4809      	ldr	r0, [pc, #36]	@ (8005f30 <_Bfree+0x40>)
 8005f0a:	218f      	movs	r1, #143	@ 0x8f
 8005f0c:	f000 fd12 	bl	8006934 <__assert_func>
 8005f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f14:	6006      	str	r6, [r0, #0]
 8005f16:	60c6      	str	r6, [r0, #12]
 8005f18:	b13c      	cbz	r4, 8005f2a <_Bfree+0x3a>
 8005f1a:	69eb      	ldr	r3, [r5, #28]
 8005f1c:	6862      	ldr	r2, [r4, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f24:	6021      	str	r1, [r4, #0]
 8005f26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f2a:	bd70      	pop	{r4, r5, r6, pc}
 8005f2c:	08006c25 	.word	0x08006c25
 8005f30:	08006ca5 	.word	0x08006ca5

08005f34 <__multadd>:
 8005f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f38:	690d      	ldr	r5, [r1, #16]
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	461e      	mov	r6, r3
 8005f40:	f101 0c14 	add.w	ip, r1, #20
 8005f44:	2000      	movs	r0, #0
 8005f46:	f8dc 3000 	ldr.w	r3, [ip]
 8005f4a:	b299      	uxth	r1, r3
 8005f4c:	fb02 6101 	mla	r1, r2, r1, r6
 8005f50:	0c1e      	lsrs	r6, r3, #16
 8005f52:	0c0b      	lsrs	r3, r1, #16
 8005f54:	fb02 3306 	mla	r3, r2, r6, r3
 8005f58:	b289      	uxth	r1, r1
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f60:	4285      	cmp	r5, r0
 8005f62:	f84c 1b04 	str.w	r1, [ip], #4
 8005f66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f6a:	dcec      	bgt.n	8005f46 <__multadd+0x12>
 8005f6c:	b30e      	cbz	r6, 8005fb2 <__multadd+0x7e>
 8005f6e:	68a3      	ldr	r3, [r4, #8]
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	dc19      	bgt.n	8005fa8 <__multadd+0x74>
 8005f74:	6861      	ldr	r1, [r4, #4]
 8005f76:	4638      	mov	r0, r7
 8005f78:	3101      	adds	r1, #1
 8005f7a:	f7ff ff79 	bl	8005e70 <_Balloc>
 8005f7e:	4680      	mov	r8, r0
 8005f80:	b928      	cbnz	r0, 8005f8e <__multadd+0x5a>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <__multadd+0x84>)
 8005f86:	480d      	ldr	r0, [pc, #52]	@ (8005fbc <__multadd+0x88>)
 8005f88:	21ba      	movs	r1, #186	@ 0xba
 8005f8a:	f000 fcd3 	bl	8006934 <__assert_func>
 8005f8e:	6922      	ldr	r2, [r4, #16]
 8005f90:	3202      	adds	r2, #2
 8005f92:	f104 010c 	add.w	r1, r4, #12
 8005f96:	0092      	lsls	r2, r2, #2
 8005f98:	300c      	adds	r0, #12
 8005f9a:	f000 fcbd 	bl	8006918 <memcpy>
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ffa5 	bl	8005ef0 <_Bfree>
 8005fa6:	4644      	mov	r4, r8
 8005fa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fac:	3501      	adds	r5, #1
 8005fae:	615e      	str	r6, [r3, #20]
 8005fb0:	6125      	str	r5, [r4, #16]
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb8:	08006c94 	.word	0x08006c94
 8005fbc:	08006ca5 	.word	0x08006ca5

08005fc0 <__hi0bits>:
 8005fc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	bf36      	itet	cc
 8005fc8:	0403      	lslcc	r3, r0, #16
 8005fca:	2000      	movcs	r0, #0
 8005fcc:	2010      	movcc	r0, #16
 8005fce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fd2:	bf3c      	itt	cc
 8005fd4:	021b      	lslcc	r3, r3, #8
 8005fd6:	3008      	addcc	r0, #8
 8005fd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fdc:	bf3c      	itt	cc
 8005fde:	011b      	lslcc	r3, r3, #4
 8005fe0:	3004      	addcc	r0, #4
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	bf3c      	itt	cc
 8005fe8:	009b      	lslcc	r3, r3, #2
 8005fea:	3002      	addcc	r0, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db05      	blt.n	8005ffc <__hi0bits+0x3c>
 8005ff0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005ff4:	f100 0001 	add.w	r0, r0, #1
 8005ff8:	bf08      	it	eq
 8005ffa:	2020      	moveq	r0, #32
 8005ffc:	4770      	bx	lr

08005ffe <__lo0bits>:
 8005ffe:	6803      	ldr	r3, [r0, #0]
 8006000:	4602      	mov	r2, r0
 8006002:	f013 0007 	ands.w	r0, r3, #7
 8006006:	d00b      	beq.n	8006020 <__lo0bits+0x22>
 8006008:	07d9      	lsls	r1, r3, #31
 800600a:	d421      	bmi.n	8006050 <__lo0bits+0x52>
 800600c:	0798      	lsls	r0, r3, #30
 800600e:	bf49      	itett	mi
 8006010:	085b      	lsrmi	r3, r3, #1
 8006012:	089b      	lsrpl	r3, r3, #2
 8006014:	2001      	movmi	r0, #1
 8006016:	6013      	strmi	r3, [r2, #0]
 8006018:	bf5c      	itt	pl
 800601a:	6013      	strpl	r3, [r2, #0]
 800601c:	2002      	movpl	r0, #2
 800601e:	4770      	bx	lr
 8006020:	b299      	uxth	r1, r3
 8006022:	b909      	cbnz	r1, 8006028 <__lo0bits+0x2a>
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	2010      	movs	r0, #16
 8006028:	b2d9      	uxtb	r1, r3
 800602a:	b909      	cbnz	r1, 8006030 <__lo0bits+0x32>
 800602c:	3008      	adds	r0, #8
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	0719      	lsls	r1, r3, #28
 8006032:	bf04      	itt	eq
 8006034:	091b      	lsreq	r3, r3, #4
 8006036:	3004      	addeq	r0, #4
 8006038:	0799      	lsls	r1, r3, #30
 800603a:	bf04      	itt	eq
 800603c:	089b      	lsreq	r3, r3, #2
 800603e:	3002      	addeq	r0, #2
 8006040:	07d9      	lsls	r1, r3, #31
 8006042:	d403      	bmi.n	800604c <__lo0bits+0x4e>
 8006044:	085b      	lsrs	r3, r3, #1
 8006046:	f100 0001 	add.w	r0, r0, #1
 800604a:	d003      	beq.n	8006054 <__lo0bits+0x56>
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	4770      	bx	lr
 8006050:	2000      	movs	r0, #0
 8006052:	4770      	bx	lr
 8006054:	2020      	movs	r0, #32
 8006056:	4770      	bx	lr

08006058 <__i2b>:
 8006058:	b510      	push	{r4, lr}
 800605a:	460c      	mov	r4, r1
 800605c:	2101      	movs	r1, #1
 800605e:	f7ff ff07 	bl	8005e70 <_Balloc>
 8006062:	4602      	mov	r2, r0
 8006064:	b928      	cbnz	r0, 8006072 <__i2b+0x1a>
 8006066:	4b05      	ldr	r3, [pc, #20]	@ (800607c <__i2b+0x24>)
 8006068:	4805      	ldr	r0, [pc, #20]	@ (8006080 <__i2b+0x28>)
 800606a:	f240 1145 	movw	r1, #325	@ 0x145
 800606e:	f000 fc61 	bl	8006934 <__assert_func>
 8006072:	2301      	movs	r3, #1
 8006074:	6144      	str	r4, [r0, #20]
 8006076:	6103      	str	r3, [r0, #16]
 8006078:	bd10      	pop	{r4, pc}
 800607a:	bf00      	nop
 800607c:	08006c94 	.word	0x08006c94
 8006080:	08006ca5 	.word	0x08006ca5

08006084 <__multiply>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	4614      	mov	r4, r2
 800608a:	690a      	ldr	r2, [r1, #16]
 800608c:	6923      	ldr	r3, [r4, #16]
 800608e:	429a      	cmp	r2, r3
 8006090:	bfa8      	it	ge
 8006092:	4623      	movge	r3, r4
 8006094:	460f      	mov	r7, r1
 8006096:	bfa4      	itt	ge
 8006098:	460c      	movge	r4, r1
 800609a:	461f      	movge	r7, r3
 800609c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80060a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	6861      	ldr	r1, [r4, #4]
 80060a8:	eb0a 0609 	add.w	r6, sl, r9
 80060ac:	42b3      	cmp	r3, r6
 80060ae:	b085      	sub	sp, #20
 80060b0:	bfb8      	it	lt
 80060b2:	3101      	addlt	r1, #1
 80060b4:	f7ff fedc 	bl	8005e70 <_Balloc>
 80060b8:	b930      	cbnz	r0, 80060c8 <__multiply+0x44>
 80060ba:	4602      	mov	r2, r0
 80060bc:	4b44      	ldr	r3, [pc, #272]	@ (80061d0 <__multiply+0x14c>)
 80060be:	4845      	ldr	r0, [pc, #276]	@ (80061d4 <__multiply+0x150>)
 80060c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060c4:	f000 fc36 	bl	8006934 <__assert_func>
 80060c8:	f100 0514 	add.w	r5, r0, #20
 80060cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060d0:	462b      	mov	r3, r5
 80060d2:	2200      	movs	r2, #0
 80060d4:	4543      	cmp	r3, r8
 80060d6:	d321      	bcc.n	800611c <__multiply+0x98>
 80060d8:	f107 0114 	add.w	r1, r7, #20
 80060dc:	f104 0214 	add.w	r2, r4, #20
 80060e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80060e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80060e8:	9302      	str	r3, [sp, #8]
 80060ea:	1b13      	subs	r3, r2, r4
 80060ec:	3b15      	subs	r3, #21
 80060ee:	f023 0303 	bic.w	r3, r3, #3
 80060f2:	3304      	adds	r3, #4
 80060f4:	f104 0715 	add.w	r7, r4, #21
 80060f8:	42ba      	cmp	r2, r7
 80060fa:	bf38      	it	cc
 80060fc:	2304      	movcc	r3, #4
 80060fe:	9301      	str	r3, [sp, #4]
 8006100:	9b02      	ldr	r3, [sp, #8]
 8006102:	9103      	str	r1, [sp, #12]
 8006104:	428b      	cmp	r3, r1
 8006106:	d80c      	bhi.n	8006122 <__multiply+0x9e>
 8006108:	2e00      	cmp	r6, #0
 800610a:	dd03      	ble.n	8006114 <__multiply+0x90>
 800610c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006110:	2b00      	cmp	r3, #0
 8006112:	d05a      	beq.n	80061ca <__multiply+0x146>
 8006114:	6106      	str	r6, [r0, #16]
 8006116:	b005      	add	sp, #20
 8006118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611c:	f843 2b04 	str.w	r2, [r3], #4
 8006120:	e7d8      	b.n	80060d4 <__multiply+0x50>
 8006122:	f8b1 a000 	ldrh.w	sl, [r1]
 8006126:	f1ba 0f00 	cmp.w	sl, #0
 800612a:	d023      	beq.n	8006174 <__multiply+0xf0>
 800612c:	f104 0e14 	add.w	lr, r4, #20
 8006130:	46a9      	mov	r9, r5
 8006132:	f04f 0c00 	mov.w	ip, #0
 8006136:	f85e 7b04 	ldr.w	r7, [lr], #4
 800613a:	f8d9 3000 	ldr.w	r3, [r9]
 800613e:	fa1f fb87 	uxth.w	fp, r7
 8006142:	b29b      	uxth	r3, r3
 8006144:	fb0a 330b 	mla	r3, sl, fp, r3
 8006148:	4463      	add	r3, ip
 800614a:	f8d9 c000 	ldr.w	ip, [r9]
 800614e:	0c3f      	lsrs	r7, r7, #16
 8006150:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006154:	fb0a c707 	mla	r7, sl, r7, ip
 8006158:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006162:	4572      	cmp	r2, lr
 8006164:	f849 3b04 	str.w	r3, [r9], #4
 8006168:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800616c:	d8e3      	bhi.n	8006136 <__multiply+0xb2>
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	f845 c003 	str.w	ip, [r5, r3]
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800617a:	3104      	adds	r1, #4
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	d021      	beq.n	80061c6 <__multiply+0x142>
 8006182:	682b      	ldr	r3, [r5, #0]
 8006184:	f104 0c14 	add.w	ip, r4, #20
 8006188:	46ae      	mov	lr, r5
 800618a:	f04f 0a00 	mov.w	sl, #0
 800618e:	f8bc b000 	ldrh.w	fp, [ip]
 8006192:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006196:	fb09 770b 	mla	r7, r9, fp, r7
 800619a:	4457      	add	r7, sl
 800619c:	b29b      	uxth	r3, r3
 800619e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80061a2:	f84e 3b04 	str.w	r3, [lr], #4
 80061a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061ae:	f8be 3000 	ldrh.w	r3, [lr]
 80061b2:	fb09 330a 	mla	r3, r9, sl, r3
 80061b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80061ba:	4562      	cmp	r2, ip
 80061bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061c0:	d8e5      	bhi.n	800618e <__multiply+0x10a>
 80061c2:	9f01      	ldr	r7, [sp, #4]
 80061c4:	51eb      	str	r3, [r5, r7]
 80061c6:	3504      	adds	r5, #4
 80061c8:	e79a      	b.n	8006100 <__multiply+0x7c>
 80061ca:	3e01      	subs	r6, #1
 80061cc:	e79c      	b.n	8006108 <__multiply+0x84>
 80061ce:	bf00      	nop
 80061d0:	08006c94 	.word	0x08006c94
 80061d4:	08006ca5 	.word	0x08006ca5

080061d8 <__pow5mult>:
 80061d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061dc:	4615      	mov	r5, r2
 80061de:	f012 0203 	ands.w	r2, r2, #3
 80061e2:	4607      	mov	r7, r0
 80061e4:	460e      	mov	r6, r1
 80061e6:	d007      	beq.n	80061f8 <__pow5mult+0x20>
 80061e8:	4c25      	ldr	r4, [pc, #148]	@ (8006280 <__pow5mult+0xa8>)
 80061ea:	3a01      	subs	r2, #1
 80061ec:	2300      	movs	r3, #0
 80061ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061f2:	f7ff fe9f 	bl	8005f34 <__multadd>
 80061f6:	4606      	mov	r6, r0
 80061f8:	10ad      	asrs	r5, r5, #2
 80061fa:	d03d      	beq.n	8006278 <__pow5mult+0xa0>
 80061fc:	69fc      	ldr	r4, [r7, #28]
 80061fe:	b97c      	cbnz	r4, 8006220 <__pow5mult+0x48>
 8006200:	2010      	movs	r0, #16
 8006202:	f7ff fd7f 	bl	8005d04 <malloc>
 8006206:	4602      	mov	r2, r0
 8006208:	61f8      	str	r0, [r7, #28]
 800620a:	b928      	cbnz	r0, 8006218 <__pow5mult+0x40>
 800620c:	4b1d      	ldr	r3, [pc, #116]	@ (8006284 <__pow5mult+0xac>)
 800620e:	481e      	ldr	r0, [pc, #120]	@ (8006288 <__pow5mult+0xb0>)
 8006210:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006214:	f000 fb8e 	bl	8006934 <__assert_func>
 8006218:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800621c:	6004      	str	r4, [r0, #0]
 800621e:	60c4      	str	r4, [r0, #12]
 8006220:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006224:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006228:	b94c      	cbnz	r4, 800623e <__pow5mult+0x66>
 800622a:	f240 2171 	movw	r1, #625	@ 0x271
 800622e:	4638      	mov	r0, r7
 8006230:	f7ff ff12 	bl	8006058 <__i2b>
 8006234:	2300      	movs	r3, #0
 8006236:	f8c8 0008 	str.w	r0, [r8, #8]
 800623a:	4604      	mov	r4, r0
 800623c:	6003      	str	r3, [r0, #0]
 800623e:	f04f 0900 	mov.w	r9, #0
 8006242:	07eb      	lsls	r3, r5, #31
 8006244:	d50a      	bpl.n	800625c <__pow5mult+0x84>
 8006246:	4631      	mov	r1, r6
 8006248:	4622      	mov	r2, r4
 800624a:	4638      	mov	r0, r7
 800624c:	f7ff ff1a 	bl	8006084 <__multiply>
 8006250:	4631      	mov	r1, r6
 8006252:	4680      	mov	r8, r0
 8006254:	4638      	mov	r0, r7
 8006256:	f7ff fe4b 	bl	8005ef0 <_Bfree>
 800625a:	4646      	mov	r6, r8
 800625c:	106d      	asrs	r5, r5, #1
 800625e:	d00b      	beq.n	8006278 <__pow5mult+0xa0>
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	b938      	cbnz	r0, 8006274 <__pow5mult+0x9c>
 8006264:	4622      	mov	r2, r4
 8006266:	4621      	mov	r1, r4
 8006268:	4638      	mov	r0, r7
 800626a:	f7ff ff0b 	bl	8006084 <__multiply>
 800626e:	6020      	str	r0, [r4, #0]
 8006270:	f8c0 9000 	str.w	r9, [r0]
 8006274:	4604      	mov	r4, r0
 8006276:	e7e4      	b.n	8006242 <__pow5mult+0x6a>
 8006278:	4630      	mov	r0, r6
 800627a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800627e:	bf00      	nop
 8006280:	08006d00 	.word	0x08006d00
 8006284:	08006c25 	.word	0x08006c25
 8006288:	08006ca5 	.word	0x08006ca5

0800628c <__lshift>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	460c      	mov	r4, r1
 8006292:	6849      	ldr	r1, [r1, #4]
 8006294:	6923      	ldr	r3, [r4, #16]
 8006296:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800629a:	68a3      	ldr	r3, [r4, #8]
 800629c:	4607      	mov	r7, r0
 800629e:	4691      	mov	r9, r2
 80062a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80062a4:	f108 0601 	add.w	r6, r8, #1
 80062a8:	42b3      	cmp	r3, r6
 80062aa:	db0b      	blt.n	80062c4 <__lshift+0x38>
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff fddf 	bl	8005e70 <_Balloc>
 80062b2:	4605      	mov	r5, r0
 80062b4:	b948      	cbnz	r0, 80062ca <__lshift+0x3e>
 80062b6:	4602      	mov	r2, r0
 80062b8:	4b28      	ldr	r3, [pc, #160]	@ (800635c <__lshift+0xd0>)
 80062ba:	4829      	ldr	r0, [pc, #164]	@ (8006360 <__lshift+0xd4>)
 80062bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80062c0:	f000 fb38 	bl	8006934 <__assert_func>
 80062c4:	3101      	adds	r1, #1
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	e7ee      	b.n	80062a8 <__lshift+0x1c>
 80062ca:	2300      	movs	r3, #0
 80062cc:	f100 0114 	add.w	r1, r0, #20
 80062d0:	f100 0210 	add.w	r2, r0, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	4553      	cmp	r3, sl
 80062d8:	db33      	blt.n	8006342 <__lshift+0xb6>
 80062da:	6920      	ldr	r0, [r4, #16]
 80062dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062e0:	f104 0314 	add.w	r3, r4, #20
 80062e4:	f019 091f 	ands.w	r9, r9, #31
 80062e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062f0:	d02b      	beq.n	800634a <__lshift+0xbe>
 80062f2:	f1c9 0e20 	rsb	lr, r9, #32
 80062f6:	468a      	mov	sl, r1
 80062f8:	2200      	movs	r2, #0
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006300:	4310      	orrs	r0, r2
 8006302:	f84a 0b04 	str.w	r0, [sl], #4
 8006306:	f853 2b04 	ldr.w	r2, [r3], #4
 800630a:	459c      	cmp	ip, r3
 800630c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006310:	d8f3      	bhi.n	80062fa <__lshift+0x6e>
 8006312:	ebac 0304 	sub.w	r3, ip, r4
 8006316:	3b15      	subs	r3, #21
 8006318:	f023 0303 	bic.w	r3, r3, #3
 800631c:	3304      	adds	r3, #4
 800631e:	f104 0015 	add.w	r0, r4, #21
 8006322:	4584      	cmp	ip, r0
 8006324:	bf38      	it	cc
 8006326:	2304      	movcc	r3, #4
 8006328:	50ca      	str	r2, [r1, r3]
 800632a:	b10a      	cbz	r2, 8006330 <__lshift+0xa4>
 800632c:	f108 0602 	add.w	r6, r8, #2
 8006330:	3e01      	subs	r6, #1
 8006332:	4638      	mov	r0, r7
 8006334:	612e      	str	r6, [r5, #16]
 8006336:	4621      	mov	r1, r4
 8006338:	f7ff fdda 	bl	8005ef0 <_Bfree>
 800633c:	4628      	mov	r0, r5
 800633e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006342:	f842 0f04 	str.w	r0, [r2, #4]!
 8006346:	3301      	adds	r3, #1
 8006348:	e7c5      	b.n	80062d6 <__lshift+0x4a>
 800634a:	3904      	subs	r1, #4
 800634c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006350:	f841 2f04 	str.w	r2, [r1, #4]!
 8006354:	459c      	cmp	ip, r3
 8006356:	d8f9      	bhi.n	800634c <__lshift+0xc0>
 8006358:	e7ea      	b.n	8006330 <__lshift+0xa4>
 800635a:	bf00      	nop
 800635c:	08006c94 	.word	0x08006c94
 8006360:	08006ca5 	.word	0x08006ca5

08006364 <__mcmp>:
 8006364:	690a      	ldr	r2, [r1, #16]
 8006366:	4603      	mov	r3, r0
 8006368:	6900      	ldr	r0, [r0, #16]
 800636a:	1a80      	subs	r0, r0, r2
 800636c:	b530      	push	{r4, r5, lr}
 800636e:	d10e      	bne.n	800638e <__mcmp+0x2a>
 8006370:	3314      	adds	r3, #20
 8006372:	3114      	adds	r1, #20
 8006374:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006378:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800637c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006380:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006384:	4295      	cmp	r5, r2
 8006386:	d003      	beq.n	8006390 <__mcmp+0x2c>
 8006388:	d205      	bcs.n	8006396 <__mcmp+0x32>
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	bd30      	pop	{r4, r5, pc}
 8006390:	42a3      	cmp	r3, r4
 8006392:	d3f3      	bcc.n	800637c <__mcmp+0x18>
 8006394:	e7fb      	b.n	800638e <__mcmp+0x2a>
 8006396:	2001      	movs	r0, #1
 8006398:	e7f9      	b.n	800638e <__mcmp+0x2a>
	...

0800639c <__mdiff>:
 800639c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a0:	4689      	mov	r9, r1
 80063a2:	4606      	mov	r6, r0
 80063a4:	4611      	mov	r1, r2
 80063a6:	4648      	mov	r0, r9
 80063a8:	4614      	mov	r4, r2
 80063aa:	f7ff ffdb 	bl	8006364 <__mcmp>
 80063ae:	1e05      	subs	r5, r0, #0
 80063b0:	d112      	bne.n	80063d8 <__mdiff+0x3c>
 80063b2:	4629      	mov	r1, r5
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff fd5b 	bl	8005e70 <_Balloc>
 80063ba:	4602      	mov	r2, r0
 80063bc:	b928      	cbnz	r0, 80063ca <__mdiff+0x2e>
 80063be:	4b3e      	ldr	r3, [pc, #248]	@ (80064b8 <__mdiff+0x11c>)
 80063c0:	f240 2137 	movw	r1, #567	@ 0x237
 80063c4:	483d      	ldr	r0, [pc, #244]	@ (80064bc <__mdiff+0x120>)
 80063c6:	f000 fab5 	bl	8006934 <__assert_func>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063d0:	4610      	mov	r0, r2
 80063d2:	b003      	add	sp, #12
 80063d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d8:	bfbc      	itt	lt
 80063da:	464b      	movlt	r3, r9
 80063dc:	46a1      	movlt	r9, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063e4:	bfba      	itte	lt
 80063e6:	461c      	movlt	r4, r3
 80063e8:	2501      	movlt	r5, #1
 80063ea:	2500      	movge	r5, #0
 80063ec:	f7ff fd40 	bl	8005e70 <_Balloc>
 80063f0:	4602      	mov	r2, r0
 80063f2:	b918      	cbnz	r0, 80063fc <__mdiff+0x60>
 80063f4:	4b30      	ldr	r3, [pc, #192]	@ (80064b8 <__mdiff+0x11c>)
 80063f6:	f240 2145 	movw	r1, #581	@ 0x245
 80063fa:	e7e3      	b.n	80063c4 <__mdiff+0x28>
 80063fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006400:	6926      	ldr	r6, [r4, #16]
 8006402:	60c5      	str	r5, [r0, #12]
 8006404:	f109 0310 	add.w	r3, r9, #16
 8006408:	f109 0514 	add.w	r5, r9, #20
 800640c:	f104 0e14 	add.w	lr, r4, #20
 8006410:	f100 0b14 	add.w	fp, r0, #20
 8006414:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006418:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	46d9      	mov	r9, fp
 8006420:	f04f 0c00 	mov.w	ip, #0
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	f85e 0b04 	ldr.w	r0, [lr], #4
 800642a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800642e:	9301      	str	r3, [sp, #4]
 8006430:	b281      	uxth	r1, r0
 8006432:	fa1f f38a 	uxth.w	r3, sl
 8006436:	1a5b      	subs	r3, r3, r1
 8006438:	0c00      	lsrs	r0, r0, #16
 800643a:	4463      	add	r3, ip
 800643c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006440:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006444:	b29b      	uxth	r3, r3
 8006446:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800644a:	4576      	cmp	r6, lr
 800644c:	f849 3b04 	str.w	r3, [r9], #4
 8006450:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006454:	d8e6      	bhi.n	8006424 <__mdiff+0x88>
 8006456:	1b33      	subs	r3, r6, r4
 8006458:	3b15      	subs	r3, #21
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	3415      	adds	r4, #21
 8006460:	3304      	adds	r3, #4
 8006462:	42a6      	cmp	r6, r4
 8006464:	bf38      	it	cc
 8006466:	2304      	movcc	r3, #4
 8006468:	441d      	add	r5, r3
 800646a:	445b      	add	r3, fp
 800646c:	461e      	mov	r6, r3
 800646e:	462c      	mov	r4, r5
 8006470:	4544      	cmp	r4, r8
 8006472:	d30e      	bcc.n	8006492 <__mdiff+0xf6>
 8006474:	f108 0103 	add.w	r1, r8, #3
 8006478:	1b49      	subs	r1, r1, r5
 800647a:	f021 0103 	bic.w	r1, r1, #3
 800647e:	3d03      	subs	r5, #3
 8006480:	45a8      	cmp	r8, r5
 8006482:	bf38      	it	cc
 8006484:	2100      	movcc	r1, #0
 8006486:	440b      	add	r3, r1
 8006488:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800648c:	b191      	cbz	r1, 80064b4 <__mdiff+0x118>
 800648e:	6117      	str	r7, [r2, #16]
 8006490:	e79e      	b.n	80063d0 <__mdiff+0x34>
 8006492:	f854 1b04 	ldr.w	r1, [r4], #4
 8006496:	46e6      	mov	lr, ip
 8006498:	0c08      	lsrs	r0, r1, #16
 800649a:	fa1c fc81 	uxtah	ip, ip, r1
 800649e:	4471      	add	r1, lr
 80064a0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80064a4:	b289      	uxth	r1, r1
 80064a6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80064aa:	f846 1b04 	str.w	r1, [r6], #4
 80064ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80064b2:	e7dd      	b.n	8006470 <__mdiff+0xd4>
 80064b4:	3f01      	subs	r7, #1
 80064b6:	e7e7      	b.n	8006488 <__mdiff+0xec>
 80064b8:	08006c94 	.word	0x08006c94
 80064bc:	08006ca5 	.word	0x08006ca5

080064c0 <__d2b>:
 80064c0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80064c4:	2101      	movs	r1, #1
 80064c6:	9e08      	ldr	r6, [sp, #32]
 80064c8:	4690      	mov	r8, r2
 80064ca:	4699      	mov	r9, r3
 80064cc:	f7ff fcd0 	bl	8005e70 <_Balloc>
 80064d0:	4604      	mov	r4, r0
 80064d2:	b930      	cbnz	r0, 80064e2 <__d2b+0x22>
 80064d4:	4602      	mov	r2, r0
 80064d6:	4b24      	ldr	r3, [pc, #144]	@ (8006568 <__d2b+0xa8>)
 80064d8:	4824      	ldr	r0, [pc, #144]	@ (800656c <__d2b+0xac>)
 80064da:	f240 310f 	movw	r1, #783	@ 0x30f
 80064de:	f000 fa29 	bl	8006934 <__assert_func>
 80064e2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064ea:	b10d      	cbz	r5, 80064f0 <__d2b+0x30>
 80064ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	f1b8 0300 	subs.w	r3, r8, #0
 80064f6:	d024      	beq.n	8006542 <__d2b+0x82>
 80064f8:	4668      	mov	r0, sp
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	f7ff fd7f 	bl	8005ffe <__lo0bits>
 8006500:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006504:	b1d8      	cbz	r0, 800653e <__d2b+0x7e>
 8006506:	f1c0 0320 	rsb	r3, r0, #32
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	430b      	orrs	r3, r1
 8006510:	40c2      	lsrs	r2, r0
 8006512:	6163      	str	r3, [r4, #20]
 8006514:	9201      	str	r2, [sp, #4]
 8006516:	9b01      	ldr	r3, [sp, #4]
 8006518:	61a3      	str	r3, [r4, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	bf0c      	ite	eq
 800651e:	2201      	moveq	r2, #1
 8006520:	2202      	movne	r2, #2
 8006522:	6122      	str	r2, [r4, #16]
 8006524:	b1ad      	cbz	r5, 8006552 <__d2b+0x92>
 8006526:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800652a:	4405      	add	r5, r0
 800652c:	6035      	str	r5, [r6, #0]
 800652e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006534:	6018      	str	r0, [r3, #0]
 8006536:	4620      	mov	r0, r4
 8006538:	b002      	add	sp, #8
 800653a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800653e:	6161      	str	r1, [r4, #20]
 8006540:	e7e9      	b.n	8006516 <__d2b+0x56>
 8006542:	a801      	add	r0, sp, #4
 8006544:	f7ff fd5b 	bl	8005ffe <__lo0bits>
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	6163      	str	r3, [r4, #20]
 800654c:	3020      	adds	r0, #32
 800654e:	2201      	movs	r2, #1
 8006550:	e7e7      	b.n	8006522 <__d2b+0x62>
 8006552:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006556:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800655a:	6030      	str	r0, [r6, #0]
 800655c:	6918      	ldr	r0, [r3, #16]
 800655e:	f7ff fd2f 	bl	8005fc0 <__hi0bits>
 8006562:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006566:	e7e4      	b.n	8006532 <__d2b+0x72>
 8006568:	08006c94 	.word	0x08006c94
 800656c:	08006ca5 	.word	0x08006ca5

08006570 <__sfputc_r>:
 8006570:	6893      	ldr	r3, [r2, #8]
 8006572:	3b01      	subs	r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	b410      	push	{r4}
 8006578:	6093      	str	r3, [r2, #8]
 800657a:	da07      	bge.n	800658c <__sfputc_r+0x1c>
 800657c:	6994      	ldr	r4, [r2, #24]
 800657e:	42a3      	cmp	r3, r4
 8006580:	db01      	blt.n	8006586 <__sfputc_r+0x16>
 8006582:	290a      	cmp	r1, #10
 8006584:	d102      	bne.n	800658c <__sfputc_r+0x1c>
 8006586:	bc10      	pop	{r4}
 8006588:	f7fe bc0d 	b.w	8004da6 <__swbuf_r>
 800658c:	6813      	ldr	r3, [r2, #0]
 800658e:	1c58      	adds	r0, r3, #1
 8006590:	6010      	str	r0, [r2, #0]
 8006592:	7019      	strb	r1, [r3, #0]
 8006594:	4608      	mov	r0, r1
 8006596:	bc10      	pop	{r4}
 8006598:	4770      	bx	lr

0800659a <__sfputs_r>:
 800659a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659c:	4606      	mov	r6, r0
 800659e:	460f      	mov	r7, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	18d5      	adds	r5, r2, r3
 80065a4:	42ac      	cmp	r4, r5
 80065a6:	d101      	bne.n	80065ac <__sfputs_r+0x12>
 80065a8:	2000      	movs	r0, #0
 80065aa:	e007      	b.n	80065bc <__sfputs_r+0x22>
 80065ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b0:	463a      	mov	r2, r7
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff ffdc 	bl	8006570 <__sfputc_r>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d1f3      	bne.n	80065a4 <__sfputs_r+0xa>
 80065bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065c0 <_vfiprintf_r>:
 80065c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	460d      	mov	r5, r1
 80065c6:	b09d      	sub	sp, #116	@ 0x74
 80065c8:	4614      	mov	r4, r2
 80065ca:	4698      	mov	r8, r3
 80065cc:	4606      	mov	r6, r0
 80065ce:	b118      	cbz	r0, 80065d8 <_vfiprintf_r+0x18>
 80065d0:	6a03      	ldr	r3, [r0, #32]
 80065d2:	b90b      	cbnz	r3, 80065d8 <_vfiprintf_r+0x18>
 80065d4:	f7fe fafe 	bl	8004bd4 <__sinit>
 80065d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065da:	07d9      	lsls	r1, r3, #31
 80065dc:	d405      	bmi.n	80065ea <_vfiprintf_r+0x2a>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	059a      	lsls	r2, r3, #22
 80065e2:	d402      	bmi.n	80065ea <_vfiprintf_r+0x2a>
 80065e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065e6:	f7fe fcf0 	bl	8004fca <__retarget_lock_acquire_recursive>
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	071b      	lsls	r3, r3, #28
 80065ee:	d501      	bpl.n	80065f4 <_vfiprintf_r+0x34>
 80065f0:	692b      	ldr	r3, [r5, #16]
 80065f2:	b99b      	cbnz	r3, 800661c <_vfiprintf_r+0x5c>
 80065f4:	4629      	mov	r1, r5
 80065f6:	4630      	mov	r0, r6
 80065f8:	f7fe fc14 	bl	8004e24 <__swsetup_r>
 80065fc:	b170      	cbz	r0, 800661c <_vfiprintf_r+0x5c>
 80065fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006600:	07dc      	lsls	r4, r3, #31
 8006602:	d504      	bpl.n	800660e <_vfiprintf_r+0x4e>
 8006604:	f04f 30ff 	mov.w	r0, #4294967295
 8006608:	b01d      	add	sp, #116	@ 0x74
 800660a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660e:	89ab      	ldrh	r3, [r5, #12]
 8006610:	0598      	lsls	r0, r3, #22
 8006612:	d4f7      	bmi.n	8006604 <_vfiprintf_r+0x44>
 8006614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006616:	f7fe fcd9 	bl	8004fcc <__retarget_lock_release_recursive>
 800661a:	e7f3      	b.n	8006604 <_vfiprintf_r+0x44>
 800661c:	2300      	movs	r3, #0
 800661e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006620:	2320      	movs	r3, #32
 8006622:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006626:	f8cd 800c 	str.w	r8, [sp, #12]
 800662a:	2330      	movs	r3, #48	@ 0x30
 800662c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80067dc <_vfiprintf_r+0x21c>
 8006630:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006634:	f04f 0901 	mov.w	r9, #1
 8006638:	4623      	mov	r3, r4
 800663a:	469a      	mov	sl, r3
 800663c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006640:	b10a      	cbz	r2, 8006646 <_vfiprintf_r+0x86>
 8006642:	2a25      	cmp	r2, #37	@ 0x25
 8006644:	d1f9      	bne.n	800663a <_vfiprintf_r+0x7a>
 8006646:	ebba 0b04 	subs.w	fp, sl, r4
 800664a:	d00b      	beq.n	8006664 <_vfiprintf_r+0xa4>
 800664c:	465b      	mov	r3, fp
 800664e:	4622      	mov	r2, r4
 8006650:	4629      	mov	r1, r5
 8006652:	4630      	mov	r0, r6
 8006654:	f7ff ffa1 	bl	800659a <__sfputs_r>
 8006658:	3001      	adds	r0, #1
 800665a:	f000 80a7 	beq.w	80067ac <_vfiprintf_r+0x1ec>
 800665e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006660:	445a      	add	r2, fp
 8006662:	9209      	str	r2, [sp, #36]	@ 0x24
 8006664:	f89a 3000 	ldrb.w	r3, [sl]
 8006668:	2b00      	cmp	r3, #0
 800666a:	f000 809f 	beq.w	80067ac <_vfiprintf_r+0x1ec>
 800666e:	2300      	movs	r3, #0
 8006670:	f04f 32ff 	mov.w	r2, #4294967295
 8006674:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006678:	f10a 0a01 	add.w	sl, sl, #1
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	9307      	str	r3, [sp, #28]
 8006680:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006684:	931a      	str	r3, [sp, #104]	@ 0x68
 8006686:	4654      	mov	r4, sl
 8006688:	2205      	movs	r2, #5
 800668a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800668e:	4853      	ldr	r0, [pc, #332]	@ (80067dc <_vfiprintf_r+0x21c>)
 8006690:	f7f9 fdbe 	bl	8000210 <memchr>
 8006694:	9a04      	ldr	r2, [sp, #16]
 8006696:	b9d8      	cbnz	r0, 80066d0 <_vfiprintf_r+0x110>
 8006698:	06d1      	lsls	r1, r2, #27
 800669a:	bf44      	itt	mi
 800669c:	2320      	movmi	r3, #32
 800669e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066a2:	0713      	lsls	r3, r2, #28
 80066a4:	bf44      	itt	mi
 80066a6:	232b      	movmi	r3, #43	@ 0x2b
 80066a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066ac:	f89a 3000 	ldrb.w	r3, [sl]
 80066b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b2:	d015      	beq.n	80066e0 <_vfiprintf_r+0x120>
 80066b4:	9a07      	ldr	r2, [sp, #28]
 80066b6:	4654      	mov	r4, sl
 80066b8:	2000      	movs	r0, #0
 80066ba:	f04f 0c0a 	mov.w	ip, #10
 80066be:	4621      	mov	r1, r4
 80066c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066c4:	3b30      	subs	r3, #48	@ 0x30
 80066c6:	2b09      	cmp	r3, #9
 80066c8:	d94b      	bls.n	8006762 <_vfiprintf_r+0x1a2>
 80066ca:	b1b0      	cbz	r0, 80066fa <_vfiprintf_r+0x13a>
 80066cc:	9207      	str	r2, [sp, #28]
 80066ce:	e014      	b.n	80066fa <_vfiprintf_r+0x13a>
 80066d0:	eba0 0308 	sub.w	r3, r0, r8
 80066d4:	fa09 f303 	lsl.w	r3, r9, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	46a2      	mov	sl, r4
 80066de:	e7d2      	b.n	8006686 <_vfiprintf_r+0xc6>
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	1d19      	adds	r1, r3, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	9103      	str	r1, [sp, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bfbb      	ittet	lt
 80066ec:	425b      	neglt	r3, r3
 80066ee:	f042 0202 	orrlt.w	r2, r2, #2
 80066f2:	9307      	strge	r3, [sp, #28]
 80066f4:	9307      	strlt	r3, [sp, #28]
 80066f6:	bfb8      	it	lt
 80066f8:	9204      	strlt	r2, [sp, #16]
 80066fa:	7823      	ldrb	r3, [r4, #0]
 80066fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80066fe:	d10a      	bne.n	8006716 <_vfiprintf_r+0x156>
 8006700:	7863      	ldrb	r3, [r4, #1]
 8006702:	2b2a      	cmp	r3, #42	@ 0x2a
 8006704:	d132      	bne.n	800676c <_vfiprintf_r+0x1ac>
 8006706:	9b03      	ldr	r3, [sp, #12]
 8006708:	1d1a      	adds	r2, r3, #4
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	9203      	str	r2, [sp, #12]
 800670e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006712:	3402      	adds	r4, #2
 8006714:	9305      	str	r3, [sp, #20]
 8006716:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80067e0 <_vfiprintf_r+0x220>
 800671a:	7821      	ldrb	r1, [r4, #0]
 800671c:	2203      	movs	r2, #3
 800671e:	4650      	mov	r0, sl
 8006720:	f7f9 fd76 	bl	8000210 <memchr>
 8006724:	b138      	cbz	r0, 8006736 <_vfiprintf_r+0x176>
 8006726:	9b04      	ldr	r3, [sp, #16]
 8006728:	eba0 000a 	sub.w	r0, r0, sl
 800672c:	2240      	movs	r2, #64	@ 0x40
 800672e:	4082      	lsls	r2, r0
 8006730:	4313      	orrs	r3, r2
 8006732:	3401      	adds	r4, #1
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673a:	482a      	ldr	r0, [pc, #168]	@ (80067e4 <_vfiprintf_r+0x224>)
 800673c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006740:	2206      	movs	r2, #6
 8006742:	f7f9 fd65 	bl	8000210 <memchr>
 8006746:	2800      	cmp	r0, #0
 8006748:	d03f      	beq.n	80067ca <_vfiprintf_r+0x20a>
 800674a:	4b27      	ldr	r3, [pc, #156]	@ (80067e8 <_vfiprintf_r+0x228>)
 800674c:	bb1b      	cbnz	r3, 8006796 <_vfiprintf_r+0x1d6>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	3307      	adds	r3, #7
 8006752:	f023 0307 	bic.w	r3, r3, #7
 8006756:	3308      	adds	r3, #8
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800675c:	443b      	add	r3, r7
 800675e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006760:	e76a      	b.n	8006638 <_vfiprintf_r+0x78>
 8006762:	fb0c 3202 	mla	r2, ip, r2, r3
 8006766:	460c      	mov	r4, r1
 8006768:	2001      	movs	r0, #1
 800676a:	e7a8      	b.n	80066be <_vfiprintf_r+0xfe>
 800676c:	2300      	movs	r3, #0
 800676e:	3401      	adds	r4, #1
 8006770:	9305      	str	r3, [sp, #20]
 8006772:	4619      	mov	r1, r3
 8006774:	f04f 0c0a 	mov.w	ip, #10
 8006778:	4620      	mov	r0, r4
 800677a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677e:	3a30      	subs	r2, #48	@ 0x30
 8006780:	2a09      	cmp	r2, #9
 8006782:	d903      	bls.n	800678c <_vfiprintf_r+0x1cc>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0c6      	beq.n	8006716 <_vfiprintf_r+0x156>
 8006788:	9105      	str	r1, [sp, #20]
 800678a:	e7c4      	b.n	8006716 <_vfiprintf_r+0x156>
 800678c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006790:	4604      	mov	r4, r0
 8006792:	2301      	movs	r3, #1
 8006794:	e7f0      	b.n	8006778 <_vfiprintf_r+0x1b8>
 8006796:	ab03      	add	r3, sp, #12
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	462a      	mov	r2, r5
 800679c:	4b13      	ldr	r3, [pc, #76]	@ (80067ec <_vfiprintf_r+0x22c>)
 800679e:	a904      	add	r1, sp, #16
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7fd fd15 	bl	80041d0 <_printf_float>
 80067a6:	4607      	mov	r7, r0
 80067a8:	1c78      	adds	r0, r7, #1
 80067aa:	d1d6      	bne.n	800675a <_vfiprintf_r+0x19a>
 80067ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067ae:	07d9      	lsls	r1, r3, #31
 80067b0:	d405      	bmi.n	80067be <_vfiprintf_r+0x1fe>
 80067b2:	89ab      	ldrh	r3, [r5, #12]
 80067b4:	059a      	lsls	r2, r3, #22
 80067b6:	d402      	bmi.n	80067be <_vfiprintf_r+0x1fe>
 80067b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ba:	f7fe fc07 	bl	8004fcc <__retarget_lock_release_recursive>
 80067be:	89ab      	ldrh	r3, [r5, #12]
 80067c0:	065b      	lsls	r3, r3, #25
 80067c2:	f53f af1f 	bmi.w	8006604 <_vfiprintf_r+0x44>
 80067c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067c8:	e71e      	b.n	8006608 <_vfiprintf_r+0x48>
 80067ca:	ab03      	add	r3, sp, #12
 80067cc:	9300      	str	r3, [sp, #0]
 80067ce:	462a      	mov	r2, r5
 80067d0:	4b06      	ldr	r3, [pc, #24]	@ (80067ec <_vfiprintf_r+0x22c>)
 80067d2:	a904      	add	r1, sp, #16
 80067d4:	4630      	mov	r0, r6
 80067d6:	f7fd ff95 	bl	8004704 <_printf_i>
 80067da:	e7e4      	b.n	80067a6 <_vfiprintf_r+0x1e6>
 80067dc:	08006e00 	.word	0x08006e00
 80067e0:	08006e06 	.word	0x08006e06
 80067e4:	08006e0a 	.word	0x08006e0a
 80067e8:	080041d1 	.word	0x080041d1
 80067ec:	0800659b 	.word	0x0800659b

080067f0 <__swhatbuf_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	460c      	mov	r4, r1
 80067f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f8:	2900      	cmp	r1, #0
 80067fa:	b096      	sub	sp, #88	@ 0x58
 80067fc:	4615      	mov	r5, r2
 80067fe:	461e      	mov	r6, r3
 8006800:	da0d      	bge.n	800681e <__swhatbuf_r+0x2e>
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	bf14      	ite	ne
 800680e:	2340      	movne	r3, #64	@ 0x40
 8006810:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006814:	2000      	movs	r0, #0
 8006816:	6031      	str	r1, [r6, #0]
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	b016      	add	sp, #88	@ 0x58
 800681c:	bd70      	pop	{r4, r5, r6, pc}
 800681e:	466a      	mov	r2, sp
 8006820:	f000 f848 	bl	80068b4 <_fstat_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	dbec      	blt.n	8006802 <__swhatbuf_r+0x12>
 8006828:	9901      	ldr	r1, [sp, #4]
 800682a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800682e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006832:	4259      	negs	r1, r3
 8006834:	4159      	adcs	r1, r3
 8006836:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800683a:	e7eb      	b.n	8006814 <__swhatbuf_r+0x24>

0800683c <__smakebuf_r>:
 800683c:	898b      	ldrh	r3, [r1, #12]
 800683e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006840:	079d      	lsls	r5, r3, #30
 8006842:	4606      	mov	r6, r0
 8006844:	460c      	mov	r4, r1
 8006846:	d507      	bpl.n	8006858 <__smakebuf_r+0x1c>
 8006848:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	2301      	movs	r3, #1
 8006852:	6163      	str	r3, [r4, #20]
 8006854:	b003      	add	sp, #12
 8006856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006858:	ab01      	add	r3, sp, #4
 800685a:	466a      	mov	r2, sp
 800685c:	f7ff ffc8 	bl	80067f0 <__swhatbuf_r>
 8006860:	9f00      	ldr	r7, [sp, #0]
 8006862:	4605      	mov	r5, r0
 8006864:	4639      	mov	r1, r7
 8006866:	4630      	mov	r0, r6
 8006868:	f7ff fa76 	bl	8005d58 <_malloc_r>
 800686c:	b948      	cbnz	r0, 8006882 <__smakebuf_r+0x46>
 800686e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006872:	059a      	lsls	r2, r3, #22
 8006874:	d4ee      	bmi.n	8006854 <__smakebuf_r+0x18>
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	f043 0302 	orr.w	r3, r3, #2
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	e7e2      	b.n	8006848 <__smakebuf_r+0xc>
 8006882:	89a3      	ldrh	r3, [r4, #12]
 8006884:	6020      	str	r0, [r4, #0]
 8006886:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	9b01      	ldr	r3, [sp, #4]
 800688e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006892:	b15b      	cbz	r3, 80068ac <__smakebuf_r+0x70>
 8006894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006898:	4630      	mov	r0, r6
 800689a:	f000 f81d 	bl	80068d8 <_isatty_r>
 800689e:	b128      	cbz	r0, 80068ac <__smakebuf_r+0x70>
 80068a0:	89a3      	ldrh	r3, [r4, #12]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	f043 0301 	orr.w	r3, r3, #1
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	431d      	orrs	r5, r3
 80068b0:	81a5      	strh	r5, [r4, #12]
 80068b2:	e7cf      	b.n	8006854 <__smakebuf_r+0x18>

080068b4 <_fstat_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	@ (80068d4 <_fstat_r+0x20>)
 80068b8:	2300      	movs	r3, #0
 80068ba:	4604      	mov	r4, r0
 80068bc:	4608      	mov	r0, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f7fa ff4f 	bl	8001764 <_fstat>
 80068c6:	1c43      	adds	r3, r0, #1
 80068c8:	d102      	bne.n	80068d0 <_fstat_r+0x1c>
 80068ca:	682b      	ldr	r3, [r5, #0]
 80068cc:	b103      	cbz	r3, 80068d0 <_fstat_r+0x1c>
 80068ce:	6023      	str	r3, [r4, #0]
 80068d0:	bd38      	pop	{r3, r4, r5, pc}
 80068d2:	bf00      	nop
 80068d4:	200003d0 	.word	0x200003d0

080068d8 <_isatty_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	@ (80068f4 <_isatty_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fa ff4d 	bl	8001782 <_isatty>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_isatty_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_isatty_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	200003d0 	.word	0x200003d0

080068f8 <_sbrk_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d06      	ldr	r5, [pc, #24]	@ (8006914 <_sbrk_r+0x1c>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	602b      	str	r3, [r5, #0]
 8006904:	f7fa ff54 	bl	80017b0 <_sbrk>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d102      	bne.n	8006912 <_sbrk_r+0x1a>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	b103      	cbz	r3, 8006912 <_sbrk_r+0x1a>
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200003d0 	.word	0x200003d0

08006918 <memcpy>:
 8006918:	440a      	add	r2, r1
 800691a:	4291      	cmp	r1, r2
 800691c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006920:	d100      	bne.n	8006924 <memcpy+0xc>
 8006922:	4770      	bx	lr
 8006924:	b510      	push	{r4, lr}
 8006926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800692a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692e:	4291      	cmp	r1, r2
 8006930:	d1f9      	bne.n	8006926 <memcpy+0xe>
 8006932:	bd10      	pop	{r4, pc}

08006934 <__assert_func>:
 8006934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006936:	4614      	mov	r4, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4b09      	ldr	r3, [pc, #36]	@ (8006960 <__assert_func+0x2c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4605      	mov	r5, r0
 8006940:	68d8      	ldr	r0, [r3, #12]
 8006942:	b954      	cbnz	r4, 800695a <__assert_func+0x26>
 8006944:	4b07      	ldr	r3, [pc, #28]	@ (8006964 <__assert_func+0x30>)
 8006946:	461c      	mov	r4, r3
 8006948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800694c:	9100      	str	r1, [sp, #0]
 800694e:	462b      	mov	r3, r5
 8006950:	4905      	ldr	r1, [pc, #20]	@ (8006968 <__assert_func+0x34>)
 8006952:	f000 f841 	bl	80069d8 <fiprintf>
 8006956:	f000 f851 	bl	80069fc <abort>
 800695a:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__assert_func+0x38>)
 800695c:	e7f4      	b.n	8006948 <__assert_func+0x14>
 800695e:	bf00      	nop
 8006960:	20000018 	.word	0x20000018
 8006964:	08006e56 	.word	0x08006e56
 8006968:	08006e28 	.word	0x08006e28
 800696c:	08006e1b 	.word	0x08006e1b

08006970 <_calloc_r>:
 8006970:	b570      	push	{r4, r5, r6, lr}
 8006972:	fba1 5402 	umull	r5, r4, r1, r2
 8006976:	b93c      	cbnz	r4, 8006988 <_calloc_r+0x18>
 8006978:	4629      	mov	r1, r5
 800697a:	f7ff f9ed 	bl	8005d58 <_malloc_r>
 800697e:	4606      	mov	r6, r0
 8006980:	b928      	cbnz	r0, 800698e <_calloc_r+0x1e>
 8006982:	2600      	movs	r6, #0
 8006984:	4630      	mov	r0, r6
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	220c      	movs	r2, #12
 800698a:	6002      	str	r2, [r0, #0]
 800698c:	e7f9      	b.n	8006982 <_calloc_r+0x12>
 800698e:	462a      	mov	r2, r5
 8006990:	4621      	mov	r1, r4
 8006992:	f7fe fa9d 	bl	8004ed0 <memset>
 8006996:	e7f5      	b.n	8006984 <_calloc_r+0x14>

08006998 <__ascii_mbtowc>:
 8006998:	b082      	sub	sp, #8
 800699a:	b901      	cbnz	r1, 800699e <__ascii_mbtowc+0x6>
 800699c:	a901      	add	r1, sp, #4
 800699e:	b142      	cbz	r2, 80069b2 <__ascii_mbtowc+0x1a>
 80069a0:	b14b      	cbz	r3, 80069b6 <__ascii_mbtowc+0x1e>
 80069a2:	7813      	ldrb	r3, [r2, #0]
 80069a4:	600b      	str	r3, [r1, #0]
 80069a6:	7812      	ldrb	r2, [r2, #0]
 80069a8:	1e10      	subs	r0, r2, #0
 80069aa:	bf18      	it	ne
 80069ac:	2001      	movne	r0, #1
 80069ae:	b002      	add	sp, #8
 80069b0:	4770      	bx	lr
 80069b2:	4610      	mov	r0, r2
 80069b4:	e7fb      	b.n	80069ae <__ascii_mbtowc+0x16>
 80069b6:	f06f 0001 	mvn.w	r0, #1
 80069ba:	e7f8      	b.n	80069ae <__ascii_mbtowc+0x16>

080069bc <__ascii_wctomb>:
 80069bc:	4603      	mov	r3, r0
 80069be:	4608      	mov	r0, r1
 80069c0:	b141      	cbz	r1, 80069d4 <__ascii_wctomb+0x18>
 80069c2:	2aff      	cmp	r2, #255	@ 0xff
 80069c4:	d904      	bls.n	80069d0 <__ascii_wctomb+0x14>
 80069c6:	228a      	movs	r2, #138	@ 0x8a
 80069c8:	601a      	str	r2, [r3, #0]
 80069ca:	f04f 30ff 	mov.w	r0, #4294967295
 80069ce:	4770      	bx	lr
 80069d0:	700a      	strb	r2, [r1, #0]
 80069d2:	2001      	movs	r0, #1
 80069d4:	4770      	bx	lr
	...

080069d8 <fiprintf>:
 80069d8:	b40e      	push	{r1, r2, r3}
 80069da:	b503      	push	{r0, r1, lr}
 80069dc:	4601      	mov	r1, r0
 80069de:	ab03      	add	r3, sp, #12
 80069e0:	4805      	ldr	r0, [pc, #20]	@ (80069f8 <fiprintf+0x20>)
 80069e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069e6:	6800      	ldr	r0, [r0, #0]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f7ff fde9 	bl	80065c0 <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069f4:	b003      	add	sp, #12
 80069f6:	4770      	bx	lr
 80069f8:	20000018 	.word	0x20000018

080069fc <abort>:
 80069fc:	b508      	push	{r3, lr}
 80069fe:	2006      	movs	r0, #6
 8006a00:	f000 f82c 	bl	8006a5c <raise>
 8006a04:	2001      	movs	r0, #1
 8006a06:	f7fa fe5e 	bl	80016c6 <_exit>

08006a0a <_raise_r>:
 8006a0a:	291f      	cmp	r1, #31
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4605      	mov	r5, r0
 8006a10:	460c      	mov	r4, r1
 8006a12:	d904      	bls.n	8006a1e <_raise_r+0x14>
 8006a14:	2316      	movs	r3, #22
 8006a16:	6003      	str	r3, [r0, #0]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006a20:	b112      	cbz	r2, 8006a28 <_raise_r+0x1e>
 8006a22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a26:	b94b      	cbnz	r3, 8006a3c <_raise_r+0x32>
 8006a28:	4628      	mov	r0, r5
 8006a2a:	f000 f831 	bl	8006a90 <_getpid_r>
 8006a2e:	4622      	mov	r2, r4
 8006a30:	4601      	mov	r1, r0
 8006a32:	4628      	mov	r0, r5
 8006a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a38:	f000 b818 	b.w	8006a6c <_kill_r>
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d00a      	beq.n	8006a56 <_raise_r+0x4c>
 8006a40:	1c59      	adds	r1, r3, #1
 8006a42:	d103      	bne.n	8006a4c <_raise_r+0x42>
 8006a44:	2316      	movs	r3, #22
 8006a46:	6003      	str	r3, [r0, #0]
 8006a48:	2001      	movs	r0, #1
 8006a4a:	e7e7      	b.n	8006a1c <_raise_r+0x12>
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006a52:	4620      	mov	r0, r4
 8006a54:	4798      	blx	r3
 8006a56:	2000      	movs	r0, #0
 8006a58:	e7e0      	b.n	8006a1c <_raise_r+0x12>
	...

08006a5c <raise>:
 8006a5c:	4b02      	ldr	r3, [pc, #8]	@ (8006a68 <raise+0xc>)
 8006a5e:	4601      	mov	r1, r0
 8006a60:	6818      	ldr	r0, [r3, #0]
 8006a62:	f7ff bfd2 	b.w	8006a0a <_raise_r>
 8006a66:	bf00      	nop
 8006a68:	20000018 	.word	0x20000018

08006a6c <_kill_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	@ (8006a8c <_kill_r+0x20>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	602b      	str	r3, [r5, #0]
 8006a7a:	f7fa fe14 	bl	80016a6 <_kill>
 8006a7e:	1c43      	adds	r3, r0, #1
 8006a80:	d102      	bne.n	8006a88 <_kill_r+0x1c>
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	b103      	cbz	r3, 8006a88 <_kill_r+0x1c>
 8006a86:	6023      	str	r3, [r4, #0]
 8006a88:	bd38      	pop	{r3, r4, r5, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200003d0 	.word	0x200003d0

08006a90 <_getpid_r>:
 8006a90:	f7fa be02 	b.w	8001698 <_getpid>

08006a94 <_init>:
 8006a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a96:	bf00      	nop
 8006a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a9a:	bc08      	pop	{r3}
 8006a9c:	469e      	mov	lr, r3
 8006a9e:	4770      	bx	lr

08006aa0 <_fini>:
 8006aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa2:	bf00      	nop
 8006aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa6:	bc08      	pop	{r3}
 8006aa8:	469e      	mov	lr, r3
 8006aaa:	4770      	bx	lr
