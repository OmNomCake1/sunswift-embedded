
Rotary_Encoder_No_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fe0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021b8  080021b8  000031b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021d0  080021d0  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  080021d0  080021d0  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021d0  080021d0  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021d0  080021d0  000031d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080021d4  080021d4  000031d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080021d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002240  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002240  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005659  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001407  00000000  00000000  000096f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  0000aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004be  00000000  00000000  0000b180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cd2e  00000000  00000000  0000b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006d75  00000000  00000000  0002836c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1b73  00000000  00000000  0002f0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0c54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e70  00000000  00000000  000e0c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e2b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080021a0 	.word	0x080021a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	080021a0 	.word	0x080021a0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa33 	bl	8000686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f804 	bl	800022c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f842 	bl	80002ac <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000228:	bf00      	nop
 800022a:	e7fd      	b.n	8000228 <main+0x10>

0800022c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b094      	sub	sp, #80	@ 0x50
 8000230:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000232:	f107 0318 	add.w	r3, r7, #24
 8000236:	2238      	movs	r2, #56	@ 0x38
 8000238:	2100      	movs	r1, #0
 800023a:	4618      	mov	r0, r3
 800023c:	f001 fda8 	bl	8001d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800024e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000252:	f000 fd4b 	bl	8000cec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000256:	2302      	movs	r3, #2
 8000258:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800025e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2340      	movs	r3, #64	@ 0x40
 8000262:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f000 fde1 	bl	8000e34 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000278:	f000 f89c 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2100      	movs	r1, #0
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f8df 	bl	8001458 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002a0:	f000 f888 	bl	80003b4 <Error_Handler>
  }
}
 80002a4:	bf00      	nop
 80002a6:	3750      	adds	r7, #80	@ 0x50
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b086      	sub	sp, #24
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
 80002be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <MX_GPIO_Init+0x78>)
 80002c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002c4:	4a17      	ldr	r2, [pc, #92]	@ (8000324 <MX_GPIO_Init+0x78>)
 80002c6:	f043 0302 	orr.w	r3, r3, #2
 80002ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <MX_GPIO_Init+0x78>)
 80002ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002d0:	f003 0302 	and.w	r3, r3, #2
 80002d4:	603b      	str	r3, [r7, #0]
 80002d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80002d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80002dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80002e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	480e      	ldr	r0, [pc, #56]	@ (8000328 <MX_GPIO_Init+0x7c>)
 80002ee:	f000 fb4b 	bl	8000988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80002f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002fc:	2301      	movs	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4808      	ldr	r0, [pc, #32]	@ (8000328 <MX_GPIO_Init+0x7c>)
 8000306:	f000 fb3f 	bl	8000988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	2028      	movs	r0, #40	@ 0x28
 8000310:	f000 fb05 	bl	800091e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000314:	2028      	movs	r0, #40	@ 0x28
 8000316:	f000 fb1c 	bl	8000952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800031a:	bf00      	nop
 800031c:	3718      	adds	r7, #24
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	40021000 	.word	0x40021000
 8000328:	48000400 	.word	0x48000400

0800032c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	80fb      	strh	r3, [r7, #6]
	// check pin
	if (GPIO_Pin == GPIO_PIN_11) {
 8000336:	88fb      	ldrh	r3, [r7, #6]
 8000338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800033c:	d12e      	bne.n	800039c <HAL_GPIO_EXTI_Callback+0x70>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 800033e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000342:	4818      	ldr	r0, [pc, #96]	@ (80003a4 <HAL_GPIO_EXTI_Callback+0x78>)
 8000344:	f000 fca2 	bl	8000c8c <HAL_GPIO_ReadPin>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d118      	bne.n	8000380 <HAL_GPIO_EXTI_Callback+0x54>
			// printf("Going counter clockwise\n");
			// fflush(stdout);
			if (encoder_count == 359) {
 800034e:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	f240 1267 	movw	r2, #359	@ 0x167
 8000356:	4293      	cmp	r3, r2
 8000358:	d10c      	bne.n	8000374 <HAL_GPIO_EXTI_Callback+0x48>
				encoder_count = 0;
 800035a:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
				printf("1 rev\n");
 8000360:	4812      	ldr	r0, [pc, #72]	@ (80003ac <HAL_GPIO_EXTI_Callback+0x80>)
 8000362:	f001 fc35 	bl	8001bd0 <puts>
				fflush(stdout);
 8000366:	4b12      	ldr	r3, [pc, #72]	@ (80003b0 <HAL_GPIO_EXTI_Callback+0x84>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4618      	mov	r0, r3
 800036e:	f001 fb03 	bl	8001978 <fflush>
				encoder_count--;
			}
			// printf("Encoder position: %d degrees\n", encoder_count);
		}
	}
}
 8000372:	e013      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x70>
				encoder_count++;
 8000374:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	4a0b      	ldr	r2, [pc, #44]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800037c:	6013      	str	r3, [r2, #0]
}
 800037e:	e00d      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x70>
			if (encoder_count == 0) {
 8000380:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d104      	bne.n	8000392 <HAL_GPIO_EXTI_Callback+0x66>
				encoder_count = 359;
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800038a:	f240 1267 	movw	r2, #359	@ 0x167
 800038e:	601a      	str	r2, [r3, #0]
}
 8000390:	e004      	b.n	800039c <HAL_GPIO_EXTI_Callback+0x70>
				encoder_count--;
 8000392:	4b05      	ldr	r3, [pc, #20]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	3b01      	subs	r3, #1
 8000398:	4a03      	ldr	r2, [pc, #12]	@ (80003a8 <HAL_GPIO_EXTI_Callback+0x7c>)
 800039a:	6013      	str	r3, [r2, #0]
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	48000400 	.word	0x48000400
 80003a8:	20000084 	.word	0x20000084
 80003ac:	080021b8 	.word	0x080021b8
 80003b0:	20000018 	.word	0x20000018

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <Error_Handler+0x8>

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000404 <HAL_MspInit+0x44>)
 80003c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_MspInit+0x44>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80003d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000404 <HAL_MspInit+0x44>)
 80003d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b09      	ldr	r3, [pc, #36]	@ (8000404 <HAL_MspInit+0x44>)
 80003e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003e2:	4a08      	ldr	r2, [pc, #32]	@ (8000404 <HAL_MspInit+0x44>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80003ea:	4b06      	ldr	r3, [pc, #24]	@ (8000404 <HAL_MspInit+0x44>)
 80003ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f965 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}

08000466 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000466:	b580      	push	{r7, lr}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800046a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800046e:	f000 fc25 	bl	8000cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000482:	4b0f      	ldr	r3, [pc, #60]	@ (80004c0 <ITM_SendChar+0x48>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a0e      	ldr	r2, [pc, #56]	@ (80004c0 <ITM_SendChar+0x48>)
 8000488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800048c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800048e:	4b0d      	ldr	r3, [pc, #52]	@ (80004c4 <ITM_SendChar+0x4c>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a0c      	ldr	r2, [pc, #48]	@ (80004c4 <ITM_SendChar+0x4c>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800049a:	bf00      	nop
 800049c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d0f8      	beq.n	800049c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004aa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	6013      	str	r3, [r2, #0]
}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000edfc 	.word	0xe000edfc
 80004c4:	e0000e00 	.word	0xe0000e00

080004c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	60f8      	str	r0, [r7, #12]
 80004d0:	60b9      	str	r1, [r7, #8]
 80004d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	e00a      	b.n	80004f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004da:	f3af 8000 	nop.w
 80004de:	4601      	mov	r1, r0
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	1c5a      	adds	r2, r3, #1
 80004e4:	60ba      	str	r2, [r7, #8]
 80004e6:	b2ca      	uxtb	r2, r1
 80004e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	3301      	adds	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
 80004f0:	697a      	ldr	r2, [r7, #20]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbf0      	blt.n	80004da <_read+0x12>
  }

  return len;
 80004f8:	687b      	ldr	r3, [r7, #4]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3718      	adds	r7, #24
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b086      	sub	sp, #24
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e009      	b.n	8000528 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	1c5a      	adds	r2, r3, #1
 8000518:	60ba      	str	r2, [r7, #8]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ffab 	bl	8000478 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	3301      	adds	r3, #1
 8000526:	617b      	str	r3, [r7, #20]
 8000528:	697a      	ldr	r2, [r7, #20]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <_write+0x12>
  }
  return len;
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3718      	adds	r7, #24
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <_close>:

int _close(int file)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000562:	605a      	str	r2, [r3, #4]
  return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <_isatty>:

int _isatty(int file)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005ac:	4a14      	ldr	r2, [pc, #80]	@ (8000600 <_sbrk+0x5c>)
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <_sbrk+0x60>)
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <_sbrk+0x64>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d102      	bne.n	80005c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <_sbrk+0x64>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <_sbrk+0x68>)
 80005c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d207      	bcs.n	80005e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d4:	f001 fc2a 	bl	8001e2c <__errno>
 80005d8:	4603      	mov	r3, r0
 80005da:	220c      	movs	r2, #12
 80005dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	e009      	b.n	80005f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <_sbrk+0x64>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <_sbrk+0x64>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <_sbrk+0x64>)
 80005f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20008000 	.word	0x20008000
 8000604:	00000400 	.word	0x00000400
 8000608:	20000088 	.word	0x20000088
 800060c:	200001e0 	.word	0x200001e0

08000610 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <SystemInit+0x20>)
 8000616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800061a:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <SystemInit+0x20>)
 800061c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000634:	480d      	ldr	r0, [pc, #52]	@ (800066c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000636:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000638:	f7ff ffea 	bl	8000610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <LoopForever+0x6>)
  ldr r1, =_edata
 800063e:	490d      	ldr	r1, [pc, #52]	@ (8000674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000640:	4a0d      	ldr	r2, [pc, #52]	@ (8000678 <LoopForever+0xe>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000644:	e002      	b.n	800064c <LoopCopyDataInit>

08000646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800064a:	3304      	adds	r3, #4

0800064c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800064c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800064e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000650:	d3f9      	bcc.n	8000646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000652:	4a0a      	ldr	r2, [pc, #40]	@ (800067c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000654:	4c0a      	ldr	r4, [pc, #40]	@ (8000680 <LoopForever+0x16>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000658:	e001      	b.n	800065e <LoopFillZerobss>

0800065a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800065a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800065c:	3204      	adds	r2, #4

0800065e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800065e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000660:	d3fb      	bcc.n	800065a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f001 fbe9 	bl	8001e38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000666:	f7ff fdd7 	bl	8000218 <main>

0800066a <LoopForever>:

LoopForever:
    b LoopForever
 800066a:	e7fe      	b.n	800066a <LoopForever>
  ldr   r0, =_estack
 800066c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000674:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000678:	080021d8 	.word	0x080021d8
  ldr r2, =_sbss
 800067c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000680:	200001dc 	.word	0x200001dc

08000684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000684:	e7fe      	b.n	8000684 <ADC1_2_IRQHandler>

08000686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b082      	sub	sp, #8
 800068a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800068c:	2300      	movs	r3, #0
 800068e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f939 	bl	8000908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000696:	200f      	movs	r0, #15
 8000698:	f000 f80e 	bl	80006b8 <HAL_InitTick>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d002      	beq.n	80006a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	e001      	b.n	80006ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006a8:	f7ff fe8a 	bl	80003c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006ac:	79fb      	ldrb	r3, [r7, #7]

}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <HAL_InitTick+0x68>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d022      	beq.n	8000712 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80006cc:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <HAL_InitTick+0x6c>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <HAL_InitTick+0x68>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f944 	bl	800096e <HAL_SYSTICK_Config>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d10f      	bne.n	800070c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b0f      	cmp	r3, #15
 80006f0:	d809      	bhi.n	8000706 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f2:	2200      	movs	r2, #0
 80006f4:	6879      	ldr	r1, [r7, #4]
 80006f6:	f04f 30ff 	mov.w	r0, #4294967295
 80006fa:	f000 f910 	bl	800091e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000728 <HAL_InitTick+0x70>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e007      	b.n	8000716 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000706:	2301      	movs	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e004      	b.n	8000716 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800070c:	2301      	movs	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	e001      	b.n	8000716 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000716:	7bfb      	ldrb	r3, [r7, #15]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000008 	.word	0x20000008
 8000724:	20000000 	.word	0x20000000
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x1c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x20>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4413      	add	r3, r2
 800073a:	4a03      	ldr	r2, [pc, #12]	@ (8000748 <HAL_IncTick+0x1c>)
 800073c:	6013      	str	r3, [r2, #0]
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	2000008c 	.word	0x2000008c
 800074c:	20000008 	.word	0x20000008

08000750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b03      	ldr	r3, [pc, #12]	@ (8000764 <HAL_GetTick+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	2000008c 	.word	0x2000008c

08000768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f003 0307 	and.w	r3, r3, #7
 8000776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000784:	4013      	ands	r3, r2
 8000786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079a:	4a04      	ldr	r2, [pc, #16]	@ (80007ac <__NVIC_SetPriorityGrouping+0x44>)
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	60d3      	str	r3, [r2, #12]
}
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <__NVIC_GetPriorityGrouping+0x18>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	0a1b      	lsrs	r3, r3, #8
 80007ba:	f003 0307 	and.w	r3, r3, #7
}
 80007be:	4618      	mov	r0, r3
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db0b      	blt.n	80007f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	f003 021f 	and.w	r2, r3, #31
 80007e4:	4907      	ldr	r1, [pc, #28]	@ (8000804 <__NVIC_EnableIRQ+0x38>)
 80007e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ea:	095b      	lsrs	r3, r3, #5
 80007ec:	2001      	movs	r0, #1
 80007ee:	fa00 f202 	lsl.w	r2, r0, r2
 80007f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e000e100 	.word	0xe000e100

08000808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	6039      	str	r1, [r7, #0]
 8000812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	db0a      	blt.n	8000832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	b2da      	uxtb	r2, r3
 8000820:	490c      	ldr	r1, [pc, #48]	@ (8000854 <__NVIC_SetPriority+0x4c>)
 8000822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	b2d2      	uxtb	r2, r2
 800082a:	440b      	add	r3, r1
 800082c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000830:	e00a      	b.n	8000848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4908      	ldr	r1, [pc, #32]	@ (8000858 <__NVIC_SetPriority+0x50>)
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	f003 030f 	and.w	r3, r3, #15
 800083e:	3b04      	subs	r3, #4
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	440b      	add	r3, r1
 8000846:	761a      	strb	r2, [r3, #24]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e100 	.word	0xe000e100
 8000858:	e000ed00 	.word	0xe000ed00

0800085c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	@ 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f1c3 0307 	rsb	r3, r3, #7
 8000876:	2b04      	cmp	r3, #4
 8000878:	bf28      	it	cs
 800087a:	2304      	movcs	r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3304      	adds	r3, #4
 8000882:	2b06      	cmp	r3, #6
 8000884:	d902      	bls.n	800088c <NVIC_EncodePriority+0x30>
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	3b03      	subs	r3, #3
 800088a:	e000      	b.n	800088e <NVIC_EncodePriority+0x32>
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000890:	f04f 32ff 	mov.w	r2, #4294967295
 8000894:	69bb      	ldr	r3, [r7, #24]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	43da      	mvns	r2, r3
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	401a      	ands	r2, r3
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008a4:	f04f 31ff 	mov.w	r1, #4294967295
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa01 f303 	lsl.w	r3, r1, r3
 80008ae:	43d9      	mvns	r1, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008b4:	4313      	orrs	r3, r2
         );
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3724      	adds	r7, #36	@ 0x24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
	...

080008c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008d4:	d301      	bcc.n	80008da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00f      	b.n	80008fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008da:	4a0a      	ldr	r2, [pc, #40]	@ (8000904 <SysTick_Config+0x40>)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	3b01      	subs	r3, #1
 80008e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008e2:	210f      	movs	r1, #15
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f7ff ff8e 	bl	8000808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <SysTick_Config+0x40>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008f2:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <SysTick_Config+0x40>)
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f8:	2300      	movs	r3, #0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000e010 	.word	0xe000e010

08000908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f7ff ff29 	bl	8000768 <__NVIC_SetPriorityGrouping>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	60b9      	str	r1, [r7, #8]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800092c:	f7ff ff40 	bl	80007b0 <__NVIC_GetPriorityGrouping>
 8000930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	68b9      	ldr	r1, [r7, #8]
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff ff90 	bl	800085c <NVIC_EncodePriority>
 800093c:	4602      	mov	r2, r0
 800093e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff5f 	bl	8000808 <__NVIC_SetPriority>
}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800095c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff33 	bl	80007cc <__NVIC_EnableIRQ>
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ffa4 	bl	80008c4 <SysTick_Config>
 800097c:	4603      	mov	r3, r0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000988:	b480      	push	{r7}
 800098a:	b087      	sub	sp, #28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000996:	e15a      	b.n	8000c4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	2101      	movs	r1, #1
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	4013      	ands	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 814c 	beq.w	8000c48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0303 	and.w	r3, r3, #3
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d005      	beq.n	80009c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80009c4:	2b02      	cmp	r3, #2
 80009c6:	d130      	bne.n	8000a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	2203      	movs	r2, #3
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4013      	ands	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68da      	ldr	r2, [r3, #12]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009fe:	2201      	movs	r2, #1
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	091b      	lsrs	r3, r3, #4
 8000a14:	f003 0201 	and.w	r2, r3, #1
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	693a      	ldr	r2, [r7, #16]
 8000a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0303 	and.w	r3, r3, #3
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	d017      	beq.n	8000a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	2203      	movs	r2, #3
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43db      	mvns	r3, r3
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689a      	ldr	r2, [r3, #8]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f003 0303 	and.w	r3, r3, #3
 8000a6e:	2b02      	cmp	r3, #2
 8000a70:	d123      	bne.n	8000aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	691a      	ldr	r2, [r3, #16]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	08da      	lsrs	r2, r3, #3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3208      	adds	r2, #8
 8000ab4:	6939      	ldr	r1, [r7, #16]
 8000ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	43db      	mvns	r3, r3
 8000acc:	693a      	ldr	r2, [r7, #16]
 8000ace:	4013      	ands	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0203 	and.w	r2, r3, #3
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80a6 	beq.w	8000c48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afc:	4b5b      	ldr	r3, [pc, #364]	@ (8000c6c <HAL_GPIO_Init+0x2e4>)
 8000afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b00:	4a5a      	ldr	r2, [pc, #360]	@ (8000c6c <HAL_GPIO_Init+0x2e4>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b08:	4b58      	ldr	r3, [pc, #352]	@ (8000c6c <HAL_GPIO_Init+0x2e4>)
 8000b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b14:	4a56      	ldr	r2, [pc, #344]	@ (8000c70 <HAL_GPIO_Init+0x2e8>)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	089b      	lsrs	r3, r3, #2
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f003 0303 	and.w	r3, r3, #3
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	220f      	movs	r2, #15
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000b3e:	d01f      	beq.n	8000b80 <HAL_GPIO_Init+0x1f8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a4c      	ldr	r2, [pc, #304]	@ (8000c74 <HAL_GPIO_Init+0x2ec>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d019      	beq.n	8000b7c <HAL_GPIO_Init+0x1f4>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a4b      	ldr	r2, [pc, #300]	@ (8000c78 <HAL_GPIO_Init+0x2f0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d013      	beq.n	8000b78 <HAL_GPIO_Init+0x1f0>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a4a      	ldr	r2, [pc, #296]	@ (8000c7c <HAL_GPIO_Init+0x2f4>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d00d      	beq.n	8000b74 <HAL_GPIO_Init+0x1ec>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a49      	ldr	r2, [pc, #292]	@ (8000c80 <HAL_GPIO_Init+0x2f8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d007      	beq.n	8000b70 <HAL_GPIO_Init+0x1e8>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a48      	ldr	r2, [pc, #288]	@ (8000c84 <HAL_GPIO_Init+0x2fc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d101      	bne.n	8000b6c <HAL_GPIO_Init+0x1e4>
 8000b68:	2305      	movs	r3, #5
 8000b6a:	e00a      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	e008      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b70:	2304      	movs	r3, #4
 8000b72:	e006      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b74:	2303      	movs	r3, #3
 8000b76:	e004      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b78:	2302      	movs	r3, #2
 8000b7a:	e002      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <HAL_GPIO_Init+0x1fa>
 8000b80:	2300      	movs	r3, #0
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	f002 0203 	and.w	r2, r2, #3
 8000b88:	0092      	lsls	r2, r2, #2
 8000b8a:	4093      	lsls	r3, r2
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b92:	4937      	ldr	r1, [pc, #220]	@ (8000c70 <HAL_GPIO_Init+0x2e8>)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	089b      	lsrs	r3, r3, #2
 8000b98:	3302      	adds	r3, #2
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ba0:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000bc4:	4a30      	ldr	r2, [pc, #192]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000bca:	4b2f      	ldr	r3, [pc, #188]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000bee:	4a26      	ldr	r2, [pc, #152]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	43db      	mvns	r3, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d003      	beq.n	8000c42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c42:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <HAL_GPIO_Init+0x300>)
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f47f ae9d 	bne.w	8000998 <HAL_GPIO_Init+0x10>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000c00 	.word	0x48000c00
 8000c80:	48001000 	.word	0x48001000
 8000c84:	48001400 	.word	0x48001400
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	887b      	ldrh	r3, [r7, #2]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
 8000ca8:	e001      	b.n	8000cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc8:	695a      	ldr	r2, [r3, #20]
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fb26 	bl	800032c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010400 	.word	0x40010400

08000cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d141      	bne.n	8000d7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d06:	d131      	bne.n	8000d6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d08:	4b47      	ldr	r3, [pc, #284]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d0e:	4a46      	ldr	r2, [pc, #280]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d18:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000d20:	4a41      	ldr	r2, [pc, #260]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d28:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2232      	movs	r2, #50	@ 0x32
 8000d2e:	fb02 f303 	mul.w	r3, r2, r3
 8000d32:	4a3f      	ldr	r2, [pc, #252]	@ (8000e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9b      	lsrs	r3, r3, #18
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d3e:	e002      	b.n	8000d46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d46:	4b38      	ldr	r3, [pc, #224]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d52:	d102      	bne.n	8000d5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f2      	bne.n	8000d40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d5a:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d66:	d158      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e057      	b.n	8000e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d72:	4a2d      	ldr	r2, [pc, #180]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000d7c:	e04d      	b.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d84:	d141      	bne.n	8000e0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d92:	d131      	bne.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da4:	4b20      	ldr	r3, [pc, #128]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2232      	movs	r2, #50	@ 0x32
 8000dba:	fb02 f303 	mul.w	r3, r2, r3
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	0c9b      	lsrs	r3, r3, #18
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dca:	e002      	b.n	8000dd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000dde:	d102      	bne.n	8000de6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f2      	bne.n	8000dcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000df2:	d112      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e011      	b.n	8000e1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000e08:	e007      	b.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e0a:	4b07      	ldr	r3, [pc, #28]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40007000 	.word	0x40007000
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	431bde83 	.word	0x431bde83

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e2fe      	b.n	8001444 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d075      	beq.n	8000f3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e52:	4b97      	ldr	r3, [pc, #604]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e5c:	4b94      	ldr	r3, [pc, #592]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f003 0303 	and.w	r3, r3, #3
 8000e64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	2b0c      	cmp	r3, #12
 8000e6a:	d102      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3e>
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d002      	beq.n	8000e78 <HAL_RCC_OscConfig+0x44>
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2b08      	cmp	r3, #8
 8000e76:	d10b      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4b8d      	ldr	r3, [pc, #564]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d05b      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d157      	bne.n	8000f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e2d9      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e98:	d106      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x74>
 8000e9a:	4b85      	ldr	r3, [pc, #532]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a84      	ldr	r2, [pc, #528]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	e01d      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x98>
 8000eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
 8000ecc:	4b78      	ldr	r3, [pc, #480]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a77      	ldr	r2, [pc, #476]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b75      	ldr	r3, [pc, #468]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a74      	ldr	r2, [pc, #464]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc30 	bl	8000750 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc2c 	bl	8000750 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e29e      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f06:	4b6a      	ldr	r3, [pc, #424]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
 8000f12:	e014      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc1c 	bl	8000750 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f1c:	f7ff fc18 	bl	8000750 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	@ 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e28a      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f2e:	4b60      	ldr	r3, [pc, #384]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d1f0      	bne.n	8000f1c <HAL_RCC_OscConfig+0xe8>
 8000f3a:	e000      	b.n	8000f3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d075      	beq.n	8001036 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f4a:	4b59      	ldr	r3, [pc, #356]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f54:	4b56      	ldr	r3, [pc, #344]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	2b0c      	cmp	r3, #12
 8000f62:	d102      	bne.n	8000f6a <HAL_RCC_OscConfig+0x136>
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d002      	beq.n	8000f70 <HAL_RCC_OscConfig+0x13c>
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d11f      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f70:	4b4f      	ldr	r3, [pc, #316]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_OscConfig+0x154>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e25d      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f88:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	691b      	ldr	r3, [r3, #16]
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	4946      	ldr	r1, [pc, #280]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f9c:	4b45      	ldr	r3, [pc, #276]	@ (80010b4 <HAL_RCC_OscConfig+0x280>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb89 	bl	80006b8 <HAL_InitTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d043      	beq.n	8001034 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e249      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d023      	beq.n	8001000 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fbc4 	bl	8000750 <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbc0 	bl	8000750 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e232      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fde:	4b34      	ldr	r3, [pc, #208]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f0      	beq.n	8000fcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	4b31      	ldr	r3, [pc, #196]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	061b      	lsls	r3, r3, #24
 8000ff8:	492d      	ldr	r1, [pc, #180]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	604b      	str	r3, [r1, #4]
 8000ffe:	e01a      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001000:	4b2b      	ldr	r3, [pc, #172]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a2a      	ldr	r2, [pc, #168]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001006:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800100a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800100c:	f7ff fba0 	bl	8000750 <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fb9c 	bl	8000750 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e20e      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x1e0>
 8001032:	e000      	b.n	8001036 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001034:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0308 	and.w	r3, r3, #8
 800103e:	2b00      	cmp	r3, #0
 8001040:	d041      	beq.n	80010c6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d01c      	beq.n	8001084 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800104a:	4b19      	ldr	r3, [pc, #100]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 800104c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001050:	4a17      	ldr	r2, [pc, #92]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105a:	f7ff fb79 	bl	8000750 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001060:	e008      	b.n	8001074 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001062:	f7ff fb75 	bl	8000750 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e1e7      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001074:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001076:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0ef      	beq.n	8001062 <HAL_RCC_OscConfig+0x22e>
 8001082:	e020      	b.n	80010c6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001084:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 8001086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800108a:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <HAL_RCC_OscConfig+0x27c>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001094:	f7ff fb5c 	bl	8000750 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800109a:	e00d      	b.n	80010b8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800109c:	f7ff fb58 	bl	8000750 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d906      	bls.n	80010b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1ca      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000
 80010b4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b8:	4b8c      	ldr	r3, [pc, #560]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ea      	bne.n	800109c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80a6 	beq.w	8001220 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80010d8:	4b84      	ldr	r3, [pc, #528]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d101      	bne.n	80010e8 <HAL_RCC_OscConfig+0x2b4>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <HAL_RCC_OscConfig+0x2b6>
 80010e8:	2300      	movs	r3, #0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00d      	beq.n	800110a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b7f      	ldr	r3, [pc, #508]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a7e      	ldr	r2, [pc, #504]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b7c      	ldr	r3, [pc, #496]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001106:	2301      	movs	r3, #1
 8001108:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800110a:	4b79      	ldr	r3, [pc, #484]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001112:	2b00      	cmp	r3, #0
 8001114:	d118      	bne.n	8001148 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001116:	4b76      	ldr	r3, [pc, #472]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a75      	ldr	r2, [pc, #468]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001122:	f7ff fb15 	bl	8000750 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800112a:	f7ff fb11 	bl	8000750 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e183      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800113c:	4b6c      	ldr	r3, [pc, #432]	@ (80012f0 <HAL_RCC_OscConfig+0x4bc>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d108      	bne.n	8001162 <HAL_RCC_OscConfig+0x32e>
 8001150:	4b66      	ldr	r3, [pc, #408]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001156:	4a65      	ldr	r2, [pc, #404]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001160:	e024      	b.n	80011ac <HAL_RCC_OscConfig+0x378>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d110      	bne.n	800118c <HAL_RCC_OscConfig+0x358>
 800116a:	4b60      	ldr	r3, [pc, #384]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800116c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001170:	4a5e      	ldr	r2, [pc, #376]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800117a:	4b5c      	ldr	r3, [pc, #368]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800117c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001180:	4a5a      	ldr	r2, [pc, #360]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800118a:	e00f      	b.n	80011ac <HAL_RCC_OscConfig+0x378>
 800118c:	4b57      	ldr	r3, [pc, #348]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800118e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001192:	4a56      	ldr	r2, [pc, #344]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001194:	f023 0301 	bic.w	r3, r3, #1
 8001198:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800119e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011a2:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d016      	beq.n	80011e2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff facc 	bl	8000750 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011ba:	e00a      	b.n	80011d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011bc:	f7ff fac8 	bl	8000750 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e138      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80011d2:	4b46      	ldr	r3, [pc, #280]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80011d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d0ed      	beq.n	80011bc <HAL_RCC_OscConfig+0x388>
 80011e0:	e015      	b.n	800120e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e2:	f7ff fab5 	bl	8000750 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011e8:	e00a      	b.n	8001200 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ea:	f7ff fab1 	bl	8000750 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e121      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001200:	4b3a      	ldr	r3, [pc, #232]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1ed      	bne.n	80011ea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d105      	bne.n	8001220 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001214:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001218:	4a34      	ldr	r2, [pc, #208]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800121e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	2b00      	cmp	r3, #0
 800122a:	d03c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d01c      	beq.n	800126e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001234:	4b2d      	ldr	r3, [pc, #180]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001236:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800123a:	4a2c      	ldr	r2, [pc, #176]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff fa84 	bl	8000750 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800124c:	f7ff fa80 	bl	8000750 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e0f2      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800125e:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001260:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ef      	beq.n	800124c <HAL_RCC_OscConfig+0x418>
 800126c:	e01b      	b.n	80012a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001274:	4a1d      	ldr	r2, [pc, #116]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127e:	f7ff fa67 	bl	8000750 <HAL_GetTick>
 8001282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001286:	f7ff fa63 	bl	8000750 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0d5      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 800129a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1ef      	bne.n	8001286 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 80c9 	beq.w	8001442 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b0:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	f000 8083 	beq.w	80013c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d15e      	bne.n	8001384 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b09      	ldr	r3, [pc, #36]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a08      	ldr	r2, [pc, #32]	@ (80012ec <HAL_RCC_OscConfig+0x4b8>)
 80012cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80012d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d2:	f7ff fa3d 	bl	8000750 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012d8:	e00c      	b.n	80012f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012da:	f7ff fa39 	bl	8000750 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d905      	bls.n	80012f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0ab      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012f4:	4b55      	ldr	r3, [pc, #340]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1ec      	bne.n	80012da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001300:	4b52      	ldr	r3, [pc, #328]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	4b52      	ldr	r3, [pc, #328]	@ (8001450 <HAL_RCC_OscConfig+0x61c>)
 8001306:	4013      	ands	r3, r2
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	6a11      	ldr	r1, [r2, #32]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001310:	3a01      	subs	r2, #1
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	4311      	orrs	r1, r2
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800131a:	0212      	lsls	r2, r2, #8
 800131c:	4311      	orrs	r1, r2
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001322:	0852      	lsrs	r2, r2, #1
 8001324:	3a01      	subs	r2, #1
 8001326:	0552      	lsls	r2, r2, #21
 8001328:	4311      	orrs	r1, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800132e:	0852      	lsrs	r2, r2, #1
 8001330:	3a01      	subs	r2, #1
 8001332:	0652      	lsls	r2, r2, #25
 8001334:	4311      	orrs	r1, r2
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800133a:	06d2      	lsls	r2, r2, #27
 800133c:	430a      	orrs	r2, r1
 800133e:	4943      	ldr	r1, [pc, #268]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001344:	4b41      	ldr	r3, [pc, #260]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a40      	ldr	r2, [pc, #256]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 800134a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800134e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001350:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800135a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff f9f8 	bl	8000750 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff f9f4 	bl	8000750 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e066      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001376:	4b35      	ldr	r3, [pc, #212]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0x530>
 8001382:	e05e      	b.n	8001442 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001384:	4b31      	ldr	r3, [pc, #196]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a30      	ldr	r2, [pc, #192]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800138e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff f9de 	bl	8000750 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001398:	f7ff f9da 	bl	8000750 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e04c      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013aa:	4b28      	ldr	r3, [pc, #160]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80013b6:	4b25      	ldr	r3, [pc, #148]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4924      	ldr	r1, [pc, #144]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013bc:	4b25      	ldr	r3, [pc, #148]	@ (8001454 <HAL_RCC_OscConfig+0x620>)
 80013be:	4013      	ands	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
 80013c2:	e03e      	b.n	8001442 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e039      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <HAL_RCC_OscConfig+0x618>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0203 	and.w	r2, r3, #3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d12c      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	3b01      	subs	r3, #1
 80013f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d123      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d11b      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001410:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d113      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	085b      	lsrs	r3, r3, #1
 8001422:	3b01      	subs	r3, #1
 8001424:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001426:	429a      	cmp	r2, r3
 8001428:	d109      	bne.n	800143e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e000      	b.n	8001444 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000
 8001450:	019f800c 	.word	0x019f800c
 8001454:	feeefffc 	.word	0xfeeefffc

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e11e      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b91      	ldr	r3, [pc, #580]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b8e      	ldr	r3, [pc, #568]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 020f 	bic.w	r2, r3, #15
 8001486:	498c      	ldr	r1, [pc, #560]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b8a      	ldr	r3, [pc, #552]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 030f 	and.w	r3, r3, #15
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e106      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d073      	beq.n	8001594 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d129      	bne.n	8001508 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b81      	ldr	r3, [pc, #516]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e0f4      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80014c4:	f000 f966 	bl	8001794 <RCC_GetSysClockFreqFromPLLSource>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4a7c      	ldr	r2, [pc, #496]	@ (80016c0 <HAL_RCC_ClockConfig+0x268>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d93f      	bls.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014d2:	4b7a      	ldr	r3, [pc, #488]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d033      	beq.n	8001552 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d12f      	bne.n	8001552 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014f2:	4b72      	ldr	r3, [pc, #456]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014fa:	4a70      	ldr	r2, [pc, #448]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80014fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001500:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001502:	2380      	movs	r3, #128	@ 0x80
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	e024      	b.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d107      	bne.n	8001520 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001510:	4b6a      	ldr	r3, [pc, #424]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e0c6      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	4b66      	ldr	r3, [pc, #408]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e0be      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001530:	f000 f8ce 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 8001534:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4a61      	ldr	r2, [pc, #388]	@ (80016c0 <HAL_RCC_ClockConfig+0x268>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d909      	bls.n	8001552 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800153e:	4b5f      	ldr	r3, [pc, #380]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001546:	4a5d      	ldr	r2, [pc, #372]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800154c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001552:	4b5a      	ldr	r3, [pc, #360]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f023 0203 	bic.w	r2, r3, #3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	4957      	ldr	r1, [pc, #348]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001560:	4313      	orrs	r3, r2
 8001562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001564:	f7ff f8f4 	bl	8000750 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	e00a      	b.n	8001582 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156c:	f7ff f8f0 	bl	8000750 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e095      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001582:	4b4e      	ldr	r3, [pc, #312]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 020c 	and.w	r2, r3, #12
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	429a      	cmp	r2, r3
 8001592:	d1eb      	bne.n	800156c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d023      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b43      	ldr	r3, [pc, #268]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	4a42      	ldr	r2, [pc, #264]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80015c4:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80015cc:	4a3b      	ldr	r2, [pc, #236]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80015d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4936      	ldr	r1, [pc, #216]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
 80015e6:	e008      	b.n	80015fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2b80      	cmp	r3, #128	@ 0x80
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4a32      	ldr	r2, [pc, #200]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 80015f4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80015f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015fa:	4b2f      	ldr	r3, [pc, #188]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	683a      	ldr	r2, [r7, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d21d      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 020f 	bic.w	r2, r3, #15
 8001610:	4929      	ldr	r1, [pc, #164]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001618:	f7ff f89a 	bl	8000750 <HAL_GetTick>
 800161c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	e00a      	b.n	8001636 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001620:	f7ff f896 	bl	8000750 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162e:	4293      	cmp	r3, r2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e03b      	b.n	80016ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_RCC_ClockConfig+0x260>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d1ed      	bne.n	8001620 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4917      	ldr	r1, [pc, #92]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490f      	ldr	r1, [pc, #60]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001682:	f000 f825 	bl	80016d0 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_RCC_ClockConfig+0x264>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <HAL_RCC_ClockConfig+0x26c>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	f003 031f 	and.w	r3, r3, #31
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_RCC_ClockConfig+0x270>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	@ (80016cc <HAL_RCC_ClockConfig+0x274>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f806 	bl	80006b8 <HAL_InitTick>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	04c4b400 	.word	0x04c4b400
 80016c4:	080021c0 	.word	0x080021c0
 80016c8:	20000000 	.word	0x20000000
 80016cc:	20000004 	.word	0x20000004

080016d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	f003 030c 	and.w	r3, r3, #12
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	e047      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016e8:	4b27      	ldr	r3, [pc, #156]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d102      	bne.n	80016fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016f4:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	e03e      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016fa:	4b23      	ldr	r3, [pc, #140]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b0c      	cmp	r3, #12
 8001704:	d136      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001710:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3301      	adds	r3, #1
 800171c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d10c      	bne.n	800173e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001724:	4a1a      	ldr	r2, [pc, #104]	@ (8001790 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800172e:	68d2      	ldr	r2, [r2, #12]
 8001730:	0a12      	lsrs	r2, r2, #8
 8001732:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	617b      	str	r3, [r7, #20]
      break;
 800173c:	e00c      	b.n	8001758 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800173e:	4a13      	ldr	r2, [pc, #76]	@ (800178c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4a10      	ldr	r2, [pc, #64]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001748:	68d2      	ldr	r2, [r2, #12]
 800174a:	0a12      	lsrs	r2, r2, #8
 800174c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001750:	fb02 f303 	mul.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
      break;
 8001756:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001758:	4b0b      	ldr	r3, [pc, #44]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xb8>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	0e5b      	lsrs	r3, r3, #25
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	3301      	adds	r3, #1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	e001      	b.n	8001778 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001778:	693b      	ldr	r3, [r7, #16]
}
 800177a:	4618      	mov	r0, r3
 800177c:	371c      	adds	r7, #28
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	00f42400 	.word	0x00f42400
 8001790:	007a1200 	.word	0x007a1200

08001794 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800179a:	4b1e      	ldr	r3, [pc, #120]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3301      	adds	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d10c      	bne.n	80017d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017b8:	4a17      	ldr	r2, [pc, #92]	@ (8001818 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017c2:	68d2      	ldr	r2, [r2, #12]
 80017c4:	0a12      	lsrs	r2, r2, #8
 80017c6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
    break;
 80017d0:	e00c      	b.n	80017ec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4a0e      	ldr	r2, [pc, #56]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017dc:	68d2      	ldr	r2, [r2, #12]
 80017de:	0a12      	lsrs	r2, r2, #8
 80017e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
    break;
 80017ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0e5b      	lsrs	r3, r3, #25
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	3301      	adds	r3, #1
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	fbb2 f3f3 	udiv	r3, r2, r3
 8001804:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	4618      	mov	r0, r3
 800180a:	371c      	adds	r7, #28
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000
 8001818:	007a1200 	.word	0x007a1200
 800181c:	00f42400 	.word	0x00f42400

08001820 <__sflush_r>:
 8001820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001828:	0716      	lsls	r6, r2, #28
 800182a:	4605      	mov	r5, r0
 800182c:	460c      	mov	r4, r1
 800182e:	d454      	bmi.n	80018da <__sflush_r+0xba>
 8001830:	684b      	ldr	r3, [r1, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	dc02      	bgt.n	800183c <__sflush_r+0x1c>
 8001836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd48      	ble.n	80018ce <__sflush_r+0xae>
 800183c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800183e:	2e00      	cmp	r6, #0
 8001840:	d045      	beq.n	80018ce <__sflush_r+0xae>
 8001842:	2300      	movs	r3, #0
 8001844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001848:	682f      	ldr	r7, [r5, #0]
 800184a:	6a21      	ldr	r1, [r4, #32]
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	d030      	beq.n	80018b2 <__sflush_r+0x92>
 8001850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001852:	89a3      	ldrh	r3, [r4, #12]
 8001854:	0759      	lsls	r1, r3, #29
 8001856:	d505      	bpl.n	8001864 <__sflush_r+0x44>
 8001858:	6863      	ldr	r3, [r4, #4]
 800185a:	1ad2      	subs	r2, r2, r3
 800185c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800185e:	b10b      	cbz	r3, 8001864 <__sflush_r+0x44>
 8001860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	2300      	movs	r3, #0
 8001866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001868:	6a21      	ldr	r1, [r4, #32]
 800186a:	4628      	mov	r0, r5
 800186c:	47b0      	blx	r6
 800186e:	1c43      	adds	r3, r0, #1
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	d106      	bne.n	8001882 <__sflush_r+0x62>
 8001874:	6829      	ldr	r1, [r5, #0]
 8001876:	291d      	cmp	r1, #29
 8001878:	d82b      	bhi.n	80018d2 <__sflush_r+0xb2>
 800187a:	4a2a      	ldr	r2, [pc, #168]	@ (8001924 <__sflush_r+0x104>)
 800187c:	410a      	asrs	r2, r1
 800187e:	07d6      	lsls	r6, r2, #31
 8001880:	d427      	bmi.n	80018d2 <__sflush_r+0xb2>
 8001882:	2200      	movs	r2, #0
 8001884:	6062      	str	r2, [r4, #4]
 8001886:	04d9      	lsls	r1, r3, #19
 8001888:	6922      	ldr	r2, [r4, #16]
 800188a:	6022      	str	r2, [r4, #0]
 800188c:	d504      	bpl.n	8001898 <__sflush_r+0x78>
 800188e:	1c42      	adds	r2, r0, #1
 8001890:	d101      	bne.n	8001896 <__sflush_r+0x76>
 8001892:	682b      	ldr	r3, [r5, #0]
 8001894:	b903      	cbnz	r3, 8001898 <__sflush_r+0x78>
 8001896:	6560      	str	r0, [r4, #84]	@ 0x54
 8001898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800189a:	602f      	str	r7, [r5, #0]
 800189c:	b1b9      	cbz	r1, 80018ce <__sflush_r+0xae>
 800189e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018a2:	4299      	cmp	r1, r3
 80018a4:	d002      	beq.n	80018ac <__sflush_r+0x8c>
 80018a6:	4628      	mov	r0, r5
 80018a8:	f000 faee 	bl	8001e88 <_free_r>
 80018ac:	2300      	movs	r3, #0
 80018ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80018b0:	e00d      	b.n	80018ce <__sflush_r+0xae>
 80018b2:	2301      	movs	r3, #1
 80018b4:	4628      	mov	r0, r5
 80018b6:	47b0      	blx	r6
 80018b8:	4602      	mov	r2, r0
 80018ba:	1c50      	adds	r0, r2, #1
 80018bc:	d1c9      	bne.n	8001852 <__sflush_r+0x32>
 80018be:	682b      	ldr	r3, [r5, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0c6      	beq.n	8001852 <__sflush_r+0x32>
 80018c4:	2b1d      	cmp	r3, #29
 80018c6:	d001      	beq.n	80018cc <__sflush_r+0xac>
 80018c8:	2b16      	cmp	r3, #22
 80018ca:	d11e      	bne.n	800190a <__sflush_r+0xea>
 80018cc:	602f      	str	r7, [r5, #0]
 80018ce:	2000      	movs	r0, #0
 80018d0:	e022      	b.n	8001918 <__sflush_r+0xf8>
 80018d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	e01b      	b.n	8001912 <__sflush_r+0xf2>
 80018da:	690f      	ldr	r7, [r1, #16]
 80018dc:	2f00      	cmp	r7, #0
 80018de:	d0f6      	beq.n	80018ce <__sflush_r+0xae>
 80018e0:	0793      	lsls	r3, r2, #30
 80018e2:	680e      	ldr	r6, [r1, #0]
 80018e4:	bf08      	it	eq
 80018e6:	694b      	ldreq	r3, [r1, #20]
 80018e8:	600f      	str	r7, [r1, #0]
 80018ea:	bf18      	it	ne
 80018ec:	2300      	movne	r3, #0
 80018ee:	eba6 0807 	sub.w	r8, r6, r7
 80018f2:	608b      	str	r3, [r1, #8]
 80018f4:	f1b8 0f00 	cmp.w	r8, #0
 80018f8:	dde9      	ble.n	80018ce <__sflush_r+0xae>
 80018fa:	6a21      	ldr	r1, [r4, #32]
 80018fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80018fe:	4643      	mov	r3, r8
 8001900:	463a      	mov	r2, r7
 8001902:	4628      	mov	r0, r5
 8001904:	47b0      	blx	r6
 8001906:	2800      	cmp	r0, #0
 8001908:	dc08      	bgt.n	800191c <__sflush_r+0xfc>
 800190a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800190e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001912:	81a3      	strh	r3, [r4, #12]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800191c:	4407      	add	r7, r0
 800191e:	eba8 0800 	sub.w	r8, r8, r0
 8001922:	e7e7      	b.n	80018f4 <__sflush_r+0xd4>
 8001924:	dfbffffe 	.word	0xdfbffffe

08001928 <_fflush_r>:
 8001928:	b538      	push	{r3, r4, r5, lr}
 800192a:	690b      	ldr	r3, [r1, #16]
 800192c:	4605      	mov	r5, r0
 800192e:	460c      	mov	r4, r1
 8001930:	b913      	cbnz	r3, 8001938 <_fflush_r+0x10>
 8001932:	2500      	movs	r5, #0
 8001934:	4628      	mov	r0, r5
 8001936:	bd38      	pop	{r3, r4, r5, pc}
 8001938:	b118      	cbz	r0, 8001942 <_fflush_r+0x1a>
 800193a:	6a03      	ldr	r3, [r0, #32]
 800193c:	b90b      	cbnz	r3, 8001942 <_fflush_r+0x1a>
 800193e:	f000 f8bb 	bl	8001ab8 <__sinit>
 8001942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0f3      	beq.n	8001932 <_fflush_r+0xa>
 800194a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800194c:	07d0      	lsls	r0, r2, #31
 800194e:	d404      	bmi.n	800195a <_fflush_r+0x32>
 8001950:	0599      	lsls	r1, r3, #22
 8001952:	d402      	bmi.n	800195a <_fflush_r+0x32>
 8001954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001956:	f000 fa94 	bl	8001e82 <__retarget_lock_acquire_recursive>
 800195a:	4628      	mov	r0, r5
 800195c:	4621      	mov	r1, r4
 800195e:	f7ff ff5f 	bl	8001820 <__sflush_r>
 8001962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001964:	07da      	lsls	r2, r3, #31
 8001966:	4605      	mov	r5, r0
 8001968:	d4e4      	bmi.n	8001934 <_fflush_r+0xc>
 800196a:	89a3      	ldrh	r3, [r4, #12]
 800196c:	059b      	lsls	r3, r3, #22
 800196e:	d4e1      	bmi.n	8001934 <_fflush_r+0xc>
 8001970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001972:	f000 fa87 	bl	8001e84 <__retarget_lock_release_recursive>
 8001976:	e7dd      	b.n	8001934 <_fflush_r+0xc>

08001978 <fflush>:
 8001978:	4601      	mov	r1, r0
 800197a:	b920      	cbnz	r0, 8001986 <fflush+0xe>
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <fflush+0x18>)
 800197e:	4905      	ldr	r1, [pc, #20]	@ (8001994 <fflush+0x1c>)
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <fflush+0x20>)
 8001982:	f000 b8b1 	b.w	8001ae8 <_fwalk_sglue>
 8001986:	4b05      	ldr	r3, [pc, #20]	@ (800199c <fflush+0x24>)
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f7ff bfcd 	b.w	8001928 <_fflush_r>
 800198e:	bf00      	nop
 8001990:	2000000c 	.word	0x2000000c
 8001994:	08001929 	.word	0x08001929
 8001998:	2000001c 	.word	0x2000001c
 800199c:	20000018 	.word	0x20000018

080019a0 <std>:
 80019a0:	2300      	movs	r3, #0
 80019a2:	b510      	push	{r4, lr}
 80019a4:	4604      	mov	r4, r0
 80019a6:	e9c0 3300 	strd	r3, r3, [r0]
 80019aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80019ae:	6083      	str	r3, [r0, #8]
 80019b0:	8181      	strh	r1, [r0, #12]
 80019b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80019b4:	81c2      	strh	r2, [r0, #14]
 80019b6:	6183      	str	r3, [r0, #24]
 80019b8:	4619      	mov	r1, r3
 80019ba:	2208      	movs	r2, #8
 80019bc:	305c      	adds	r0, #92	@ 0x5c
 80019be:	f000 f9e7 	bl	8001d90 <memset>
 80019c2:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <std+0x58>)
 80019c4:	6263      	str	r3, [r4, #36]	@ 0x24
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <std+0x5c>)
 80019c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80019ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001a00 <std+0x60>)
 80019cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001a04 <std+0x64>)
 80019d0:	6323      	str	r3, [r4, #48]	@ 0x30
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <std+0x68>)
 80019d4:	6224      	str	r4, [r4, #32]
 80019d6:	429c      	cmp	r4, r3
 80019d8:	d006      	beq.n	80019e8 <std+0x48>
 80019da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80019de:	4294      	cmp	r4, r2
 80019e0:	d002      	beq.n	80019e8 <std+0x48>
 80019e2:	33d0      	adds	r3, #208	@ 0xd0
 80019e4:	429c      	cmp	r4, r3
 80019e6:	d105      	bne.n	80019f4 <std+0x54>
 80019e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80019ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019f0:	f000 ba46 	b.w	8001e80 <__retarget_lock_init_recursive>
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	bf00      	nop
 80019f8:	08001be1 	.word	0x08001be1
 80019fc:	08001c03 	.word	0x08001c03
 8001a00:	08001c3b 	.word	0x08001c3b
 8001a04:	08001c5f 	.word	0x08001c5f
 8001a08:	20000090 	.word	0x20000090

08001a0c <stdio_exit_handler>:
 8001a0c:	4a02      	ldr	r2, [pc, #8]	@ (8001a18 <stdio_exit_handler+0xc>)
 8001a0e:	4903      	ldr	r1, [pc, #12]	@ (8001a1c <stdio_exit_handler+0x10>)
 8001a10:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <stdio_exit_handler+0x14>)
 8001a12:	f000 b869 	b.w	8001ae8 <_fwalk_sglue>
 8001a16:	bf00      	nop
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	08001929 	.word	0x08001929
 8001a20:	2000001c 	.word	0x2000001c

08001a24 <cleanup_stdio>:
 8001a24:	6841      	ldr	r1, [r0, #4]
 8001a26:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <cleanup_stdio+0x34>)
 8001a28:	4299      	cmp	r1, r3
 8001a2a:	b510      	push	{r4, lr}
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	d001      	beq.n	8001a34 <cleanup_stdio+0x10>
 8001a30:	f7ff ff7a 	bl	8001928 <_fflush_r>
 8001a34:	68a1      	ldr	r1, [r4, #8]
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <cleanup_stdio+0x38>)
 8001a38:	4299      	cmp	r1, r3
 8001a3a:	d002      	beq.n	8001a42 <cleanup_stdio+0x1e>
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ff73 	bl	8001928 <_fflush_r>
 8001a42:	68e1      	ldr	r1, [r4, #12]
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <cleanup_stdio+0x3c>)
 8001a46:	4299      	cmp	r1, r3
 8001a48:	d004      	beq.n	8001a54 <cleanup_stdio+0x30>
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a50:	f7ff bf6a 	b.w	8001928 <_fflush_r>
 8001a54:	bd10      	pop	{r4, pc}
 8001a56:	bf00      	nop
 8001a58:	20000090 	.word	0x20000090
 8001a5c:	200000f8 	.word	0x200000f8
 8001a60:	20000160 	.word	0x20000160

08001a64 <global_stdio_init.part.0>:
 8001a64:	b510      	push	{r4, lr}
 8001a66:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <global_stdio_init.part.0+0x30>)
 8001a68:	4c0b      	ldr	r4, [pc, #44]	@ (8001a98 <global_stdio_init.part.0+0x34>)
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a9c <global_stdio_init.part.0+0x38>)
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	4620      	mov	r0, r4
 8001a70:	2200      	movs	r2, #0
 8001a72:	2104      	movs	r1, #4
 8001a74:	f7ff ff94 	bl	80019a0 <std>
 8001a78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2109      	movs	r1, #9
 8001a80:	f7ff ff8e 	bl	80019a0 <std>
 8001a84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001a88:	2202      	movs	r2, #2
 8001a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a8e:	2112      	movs	r1, #18
 8001a90:	f7ff bf86 	b.w	80019a0 <std>
 8001a94:	200001c8 	.word	0x200001c8
 8001a98:	20000090 	.word	0x20000090
 8001a9c:	08001a0d 	.word	0x08001a0d

08001aa0 <__sfp_lock_acquire>:
 8001aa0:	4801      	ldr	r0, [pc, #4]	@ (8001aa8 <__sfp_lock_acquire+0x8>)
 8001aa2:	f000 b9ee 	b.w	8001e82 <__retarget_lock_acquire_recursive>
 8001aa6:	bf00      	nop
 8001aa8:	200001d1 	.word	0x200001d1

08001aac <__sfp_lock_release>:
 8001aac:	4801      	ldr	r0, [pc, #4]	@ (8001ab4 <__sfp_lock_release+0x8>)
 8001aae:	f000 b9e9 	b.w	8001e84 <__retarget_lock_release_recursive>
 8001ab2:	bf00      	nop
 8001ab4:	200001d1 	.word	0x200001d1

08001ab8 <__sinit>:
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	4604      	mov	r4, r0
 8001abc:	f7ff fff0 	bl	8001aa0 <__sfp_lock_acquire>
 8001ac0:	6a23      	ldr	r3, [r4, #32]
 8001ac2:	b11b      	cbz	r3, 8001acc <__sinit+0x14>
 8001ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ac8:	f7ff bff0 	b.w	8001aac <__sfp_lock_release>
 8001acc:	4b04      	ldr	r3, [pc, #16]	@ (8001ae0 <__sinit+0x28>)
 8001ace:	6223      	str	r3, [r4, #32]
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__sinit+0x2c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1f5      	bne.n	8001ac4 <__sinit+0xc>
 8001ad8:	f7ff ffc4 	bl	8001a64 <global_stdio_init.part.0>
 8001adc:	e7f2      	b.n	8001ac4 <__sinit+0xc>
 8001ade:	bf00      	nop
 8001ae0:	08001a25 	.word	0x08001a25
 8001ae4:	200001c8 	.word	0x200001c8

08001ae8 <_fwalk_sglue>:
 8001ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001aec:	4607      	mov	r7, r0
 8001aee:	4688      	mov	r8, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	2600      	movs	r6, #0
 8001af4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001af8:	f1b9 0901 	subs.w	r9, r9, #1
 8001afc:	d505      	bpl.n	8001b0a <_fwalk_sglue+0x22>
 8001afe:	6824      	ldr	r4, [r4, #0]
 8001b00:	2c00      	cmp	r4, #0
 8001b02:	d1f7      	bne.n	8001af4 <_fwalk_sglue+0xc>
 8001b04:	4630      	mov	r0, r6
 8001b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b0a:	89ab      	ldrh	r3, [r5, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d907      	bls.n	8001b20 <_fwalk_sglue+0x38>
 8001b10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b14:	3301      	adds	r3, #1
 8001b16:	d003      	beq.n	8001b20 <_fwalk_sglue+0x38>
 8001b18:	4629      	mov	r1, r5
 8001b1a:	4638      	mov	r0, r7
 8001b1c:	47c0      	blx	r8
 8001b1e:	4306      	orrs	r6, r0
 8001b20:	3568      	adds	r5, #104	@ 0x68
 8001b22:	e7e9      	b.n	8001af8 <_fwalk_sglue+0x10>

08001b24 <_puts_r>:
 8001b24:	6a03      	ldr	r3, [r0, #32]
 8001b26:	b570      	push	{r4, r5, r6, lr}
 8001b28:	6884      	ldr	r4, [r0, #8]
 8001b2a:	4605      	mov	r5, r0
 8001b2c:	460e      	mov	r6, r1
 8001b2e:	b90b      	cbnz	r3, 8001b34 <_puts_r+0x10>
 8001b30:	f7ff ffc2 	bl	8001ab8 <__sinit>
 8001b34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b36:	07db      	lsls	r3, r3, #31
 8001b38:	d405      	bmi.n	8001b46 <_puts_r+0x22>
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	0598      	lsls	r0, r3, #22
 8001b3e:	d402      	bmi.n	8001b46 <_puts_r+0x22>
 8001b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b42:	f000 f99e 	bl	8001e82 <__retarget_lock_acquire_recursive>
 8001b46:	89a3      	ldrh	r3, [r4, #12]
 8001b48:	0719      	lsls	r1, r3, #28
 8001b4a:	d502      	bpl.n	8001b52 <_puts_r+0x2e>
 8001b4c:	6923      	ldr	r3, [r4, #16]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d135      	bne.n	8001bbe <_puts_r+0x9a>
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 f8c5 	bl	8001ce4 <__swsetup_r>
 8001b5a:	b380      	cbz	r0, 8001bbe <_puts_r+0x9a>
 8001b5c:	f04f 35ff 	mov.w	r5, #4294967295
 8001b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001b62:	07da      	lsls	r2, r3, #31
 8001b64:	d405      	bmi.n	8001b72 <_puts_r+0x4e>
 8001b66:	89a3      	ldrh	r3, [r4, #12]
 8001b68:	059b      	lsls	r3, r3, #22
 8001b6a:	d402      	bmi.n	8001b72 <_puts_r+0x4e>
 8001b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001b6e:	f000 f989 	bl	8001e84 <__retarget_lock_release_recursive>
 8001b72:	4628      	mov	r0, r5
 8001b74:	bd70      	pop	{r4, r5, r6, pc}
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da04      	bge.n	8001b84 <_puts_r+0x60>
 8001b7a:	69a2      	ldr	r2, [r4, #24]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dc17      	bgt.n	8001bb0 <_puts_r+0x8c>
 8001b80:	290a      	cmp	r1, #10
 8001b82:	d015      	beq.n	8001bb0 <_puts_r+0x8c>
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	6022      	str	r2, [r4, #0]
 8001b8a:	7019      	strb	r1, [r3, #0]
 8001b8c:	68a3      	ldr	r3, [r4, #8]
 8001b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001b92:	3b01      	subs	r3, #1
 8001b94:	60a3      	str	r3, [r4, #8]
 8001b96:	2900      	cmp	r1, #0
 8001b98:	d1ed      	bne.n	8001b76 <_puts_r+0x52>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	da11      	bge.n	8001bc2 <_puts_r+0x9e>
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	4628      	mov	r0, r5
 8001ba4:	f000 f85f 	bl	8001c66 <__swbuf_r>
 8001ba8:	3001      	adds	r0, #1
 8001baa:	d0d7      	beq.n	8001b5c <_puts_r+0x38>
 8001bac:	250a      	movs	r5, #10
 8001bae:	e7d7      	b.n	8001b60 <_puts_r+0x3c>
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f000 f857 	bl	8001c66 <__swbuf_r>
 8001bb8:	3001      	adds	r0, #1
 8001bba:	d1e7      	bne.n	8001b8c <_puts_r+0x68>
 8001bbc:	e7ce      	b.n	8001b5c <_puts_r+0x38>
 8001bbe:	3e01      	subs	r6, #1
 8001bc0:	e7e4      	b.n	8001b8c <_puts_r+0x68>
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	6022      	str	r2, [r4, #0]
 8001bc8:	220a      	movs	r2, #10
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e7ee      	b.n	8001bac <_puts_r+0x88>
	...

08001bd0 <puts>:
 8001bd0:	4b02      	ldr	r3, [pc, #8]	@ (8001bdc <puts+0xc>)
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f7ff bfa5 	b.w	8001b24 <_puts_r>
 8001bda:	bf00      	nop
 8001bdc:	20000018 	.word	0x20000018

08001be0 <__sread>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	460c      	mov	r4, r1
 8001be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be8:	f000 f8fc 	bl	8001de4 <_read_r>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	bfab      	itete	ge
 8001bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8001bf4:	181b      	addge	r3, r3, r0
 8001bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001bfa:	bfac      	ite	ge
 8001bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001bfe:	81a3      	strhlt	r3, [r4, #12]
 8001c00:	bd10      	pop	{r4, pc}

08001c02 <__swrite>:
 8001c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c06:	461f      	mov	r7, r3
 8001c08:	898b      	ldrh	r3, [r1, #12]
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4616      	mov	r6, r2
 8001c12:	d505      	bpl.n	8001c20 <__swrite+0x1e>
 8001c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f000 f8d0 	bl	8001dc0 <_lseek_r>
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4628      	mov	r0, r5
 8001c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c36:	f000 b8e7 	b.w	8001e08 <_write_r>

08001c3a <__sseek>:
 8001c3a:	b510      	push	{r4, lr}
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c42:	f000 f8bd 	bl	8001dc0 <_lseek_r>
 8001c46:	1c43      	adds	r3, r0, #1
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	bf15      	itete	ne
 8001c4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001c4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001c52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001c56:	81a3      	strheq	r3, [r4, #12]
 8001c58:	bf18      	it	ne
 8001c5a:	81a3      	strhne	r3, [r4, #12]
 8001c5c:	bd10      	pop	{r4, pc}

08001c5e <__sclose>:
 8001c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c62:	f000 b89d 	b.w	8001da0 <_close_r>

08001c66 <__swbuf_r>:
 8001c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c68:	460e      	mov	r6, r1
 8001c6a:	4614      	mov	r4, r2
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	b118      	cbz	r0, 8001c78 <__swbuf_r+0x12>
 8001c70:	6a03      	ldr	r3, [r0, #32]
 8001c72:	b90b      	cbnz	r3, 8001c78 <__swbuf_r+0x12>
 8001c74:	f7ff ff20 	bl	8001ab8 <__sinit>
 8001c78:	69a3      	ldr	r3, [r4, #24]
 8001c7a:	60a3      	str	r3, [r4, #8]
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	071a      	lsls	r2, r3, #28
 8001c80:	d501      	bpl.n	8001c86 <__swbuf_r+0x20>
 8001c82:	6923      	ldr	r3, [r4, #16]
 8001c84:	b943      	cbnz	r3, 8001c98 <__swbuf_r+0x32>
 8001c86:	4621      	mov	r1, r4
 8001c88:	4628      	mov	r0, r5
 8001c8a:	f000 f82b 	bl	8001ce4 <__swsetup_r>
 8001c8e:	b118      	cbz	r0, 8001c98 <__swbuf_r+0x32>
 8001c90:	f04f 37ff 	mov.w	r7, #4294967295
 8001c94:	4638      	mov	r0, r7
 8001c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	6922      	ldr	r2, [r4, #16]
 8001c9c:	1a98      	subs	r0, r3, r2
 8001c9e:	6963      	ldr	r3, [r4, #20]
 8001ca0:	b2f6      	uxtb	r6, r6
 8001ca2:	4283      	cmp	r3, r0
 8001ca4:	4637      	mov	r7, r6
 8001ca6:	dc05      	bgt.n	8001cb4 <__swbuf_r+0x4e>
 8001ca8:	4621      	mov	r1, r4
 8001caa:	4628      	mov	r0, r5
 8001cac:	f7ff fe3c 	bl	8001928 <_fflush_r>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d1ed      	bne.n	8001c90 <__swbuf_r+0x2a>
 8001cb4:	68a3      	ldr	r3, [r4, #8]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	60a3      	str	r3, [r4, #8]
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	6022      	str	r2, [r4, #0]
 8001cc0:	701e      	strb	r6, [r3, #0]
 8001cc2:	6962      	ldr	r2, [r4, #20]
 8001cc4:	1c43      	adds	r3, r0, #1
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d004      	beq.n	8001cd4 <__swbuf_r+0x6e>
 8001cca:	89a3      	ldrh	r3, [r4, #12]
 8001ccc:	07db      	lsls	r3, r3, #31
 8001cce:	d5e1      	bpl.n	8001c94 <__swbuf_r+0x2e>
 8001cd0:	2e0a      	cmp	r6, #10
 8001cd2:	d1df      	bne.n	8001c94 <__swbuf_r+0x2e>
 8001cd4:	4621      	mov	r1, r4
 8001cd6:	4628      	mov	r0, r5
 8001cd8:	f7ff fe26 	bl	8001928 <_fflush_r>
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	d0d9      	beq.n	8001c94 <__swbuf_r+0x2e>
 8001ce0:	e7d6      	b.n	8001c90 <__swbuf_r+0x2a>
	...

08001ce4 <__swsetup_r>:
 8001ce4:	b538      	push	{r3, r4, r5, lr}
 8001ce6:	4b29      	ldr	r3, [pc, #164]	@ (8001d8c <__swsetup_r+0xa8>)
 8001ce8:	4605      	mov	r5, r0
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	460c      	mov	r4, r1
 8001cee:	b118      	cbz	r0, 8001cf8 <__swsetup_r+0x14>
 8001cf0:	6a03      	ldr	r3, [r0, #32]
 8001cf2:	b90b      	cbnz	r3, 8001cf8 <__swsetup_r+0x14>
 8001cf4:	f7ff fee0 	bl	8001ab8 <__sinit>
 8001cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cfc:	0719      	lsls	r1, r3, #28
 8001cfe:	d422      	bmi.n	8001d46 <__swsetup_r+0x62>
 8001d00:	06da      	lsls	r2, r3, #27
 8001d02:	d407      	bmi.n	8001d14 <__swsetup_r+0x30>
 8001d04:	2209      	movs	r2, #9
 8001d06:	602a      	str	r2, [r5, #0]
 8001d08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0c:	81a3      	strh	r3, [r4, #12]
 8001d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d12:	e033      	b.n	8001d7c <__swsetup_r+0x98>
 8001d14:	0758      	lsls	r0, r3, #29
 8001d16:	d512      	bpl.n	8001d3e <__swsetup_r+0x5a>
 8001d18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d1a:	b141      	cbz	r1, 8001d2e <__swsetup_r+0x4a>
 8001d1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001d20:	4299      	cmp	r1, r3
 8001d22:	d002      	beq.n	8001d2a <__swsetup_r+0x46>
 8001d24:	4628      	mov	r0, r5
 8001d26:	f000 f8af 	bl	8001e88 <_free_r>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001d34:	81a3      	strh	r3, [r4, #12]
 8001d36:	2300      	movs	r3, #0
 8001d38:	6063      	str	r3, [r4, #4]
 8001d3a:	6923      	ldr	r3, [r4, #16]
 8001d3c:	6023      	str	r3, [r4, #0]
 8001d3e:	89a3      	ldrh	r3, [r4, #12]
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	81a3      	strh	r3, [r4, #12]
 8001d46:	6923      	ldr	r3, [r4, #16]
 8001d48:	b94b      	cbnz	r3, 8001d5e <__swsetup_r+0x7a>
 8001d4a:	89a3      	ldrh	r3, [r4, #12]
 8001d4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d54:	d003      	beq.n	8001d5e <__swsetup_r+0x7a>
 8001d56:	4621      	mov	r1, r4
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f000 f9b3 	bl	80020c4 <__smakebuf_r>
 8001d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d62:	f013 0201 	ands.w	r2, r3, #1
 8001d66:	d00a      	beq.n	8001d7e <__swsetup_r+0x9a>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60a2      	str	r2, [r4, #8]
 8001d6c:	6962      	ldr	r2, [r4, #20]
 8001d6e:	4252      	negs	r2, r2
 8001d70:	61a2      	str	r2, [r4, #24]
 8001d72:	6922      	ldr	r2, [r4, #16]
 8001d74:	b942      	cbnz	r2, 8001d88 <__swsetup_r+0xa4>
 8001d76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001d7a:	d1c5      	bne.n	8001d08 <__swsetup_r+0x24>
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
 8001d7e:	0799      	lsls	r1, r3, #30
 8001d80:	bf58      	it	pl
 8001d82:	6962      	ldrpl	r2, [r4, #20]
 8001d84:	60a2      	str	r2, [r4, #8]
 8001d86:	e7f4      	b.n	8001d72 <__swsetup_r+0x8e>
 8001d88:	2000      	movs	r0, #0
 8001d8a:	e7f7      	b.n	8001d7c <__swsetup_r+0x98>
 8001d8c:	20000018 	.word	0x20000018

08001d90 <memset>:
 8001d90:	4402      	add	r2, r0
 8001d92:	4603      	mov	r3, r0
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d100      	bne.n	8001d9a <memset+0xa>
 8001d98:	4770      	bx	lr
 8001d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d9e:	e7f9      	b.n	8001d94 <memset+0x4>

08001da0 <_close_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4d06      	ldr	r5, [pc, #24]	@ (8001dbc <_close_r+0x1c>)
 8001da4:	2300      	movs	r3, #0
 8001da6:	4604      	mov	r4, r0
 8001da8:	4608      	mov	r0, r1
 8001daa:	602b      	str	r3, [r5, #0]
 8001dac:	f7fe fbc5 	bl	800053a <_close>
 8001db0:	1c43      	adds	r3, r0, #1
 8001db2:	d102      	bne.n	8001dba <_close_r+0x1a>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	b103      	cbz	r3, 8001dba <_close_r+0x1a>
 8001db8:	6023      	str	r3, [r4, #0]
 8001dba:	bd38      	pop	{r3, r4, r5, pc}
 8001dbc:	200001cc 	.word	0x200001cc

08001dc0 <_lseek_r>:
 8001dc0:	b538      	push	{r3, r4, r5, lr}
 8001dc2:	4d07      	ldr	r5, [pc, #28]	@ (8001de0 <_lseek_r+0x20>)
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	4611      	mov	r1, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	602a      	str	r2, [r5, #0]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f7fe fbda 	bl	8000588 <_lseek>
 8001dd4:	1c43      	adds	r3, r0, #1
 8001dd6:	d102      	bne.n	8001dde <_lseek_r+0x1e>
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	b103      	cbz	r3, 8001dde <_lseek_r+0x1e>
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
 8001de0:	200001cc 	.word	0x200001cc

08001de4 <_read_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4d07      	ldr	r5, [pc, #28]	@ (8001e04 <_read_r+0x20>)
 8001de8:	4604      	mov	r4, r0
 8001dea:	4608      	mov	r0, r1
 8001dec:	4611      	mov	r1, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	602a      	str	r2, [r5, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7fe fb68 	bl	80004c8 <_read>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d102      	bne.n	8001e02 <_read_r+0x1e>
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	b103      	cbz	r3, 8001e02 <_read_r+0x1e>
 8001e00:	6023      	str	r3, [r4, #0]
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	200001cc 	.word	0x200001cc

08001e08 <_write_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	@ (8001e28 <_write_r+0x20>)
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4608      	mov	r0, r1
 8001e10:	4611      	mov	r1, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	602a      	str	r2, [r5, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7fe fb73 	bl	8000502 <_write>
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d102      	bne.n	8001e26 <_write_r+0x1e>
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	b103      	cbz	r3, 8001e26 <_write_r+0x1e>
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	200001cc 	.word	0x200001cc

08001e2c <__errno>:
 8001e2c:	4b01      	ldr	r3, [pc, #4]	@ (8001e34 <__errno+0x8>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000018 	.word	0x20000018

08001e38 <__libc_init_array>:
 8001e38:	b570      	push	{r4, r5, r6, lr}
 8001e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8001e70 <__libc_init_array+0x38>)
 8001e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8001e74 <__libc_init_array+0x3c>)
 8001e3e:	1b64      	subs	r4, r4, r5
 8001e40:	10a4      	asrs	r4, r4, #2
 8001e42:	2600      	movs	r6, #0
 8001e44:	42a6      	cmp	r6, r4
 8001e46:	d109      	bne.n	8001e5c <__libc_init_array+0x24>
 8001e48:	4d0b      	ldr	r5, [pc, #44]	@ (8001e78 <__libc_init_array+0x40>)
 8001e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e7c <__libc_init_array+0x44>)
 8001e4c:	f000 f9a8 	bl	80021a0 <_init>
 8001e50:	1b64      	subs	r4, r4, r5
 8001e52:	10a4      	asrs	r4, r4, #2
 8001e54:	2600      	movs	r6, #0
 8001e56:	42a6      	cmp	r6, r4
 8001e58:	d105      	bne.n	8001e66 <__libc_init_array+0x2e>
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
 8001e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e60:	4798      	blx	r3
 8001e62:	3601      	adds	r6, #1
 8001e64:	e7ee      	b.n	8001e44 <__libc_init_array+0xc>
 8001e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e6a:	4798      	blx	r3
 8001e6c:	3601      	adds	r6, #1
 8001e6e:	e7f2      	b.n	8001e56 <__libc_init_array+0x1e>
 8001e70:	080021d0 	.word	0x080021d0
 8001e74:	080021d0 	.word	0x080021d0
 8001e78:	080021d0 	.word	0x080021d0
 8001e7c:	080021d4 	.word	0x080021d4

08001e80 <__retarget_lock_init_recursive>:
 8001e80:	4770      	bx	lr

08001e82 <__retarget_lock_acquire_recursive>:
 8001e82:	4770      	bx	lr

08001e84 <__retarget_lock_release_recursive>:
 8001e84:	4770      	bx	lr
	...

08001e88 <_free_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4605      	mov	r5, r0
 8001e8c:	2900      	cmp	r1, #0
 8001e8e:	d041      	beq.n	8001f14 <_free_r+0x8c>
 8001e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e94:	1f0c      	subs	r4, r1, #4
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bfb8      	it	lt
 8001e9a:	18e4      	addlt	r4, r4, r3
 8001e9c:	f000 f8e0 	bl	8002060 <__malloc_lock>
 8001ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f18 <_free_r+0x90>)
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	b933      	cbnz	r3, 8001eb4 <_free_r+0x2c>
 8001ea6:	6063      	str	r3, [r4, #4]
 8001ea8:	6014      	str	r4, [r2, #0]
 8001eaa:	4628      	mov	r0, r5
 8001eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001eb0:	f000 b8dc 	b.w	800206c <__malloc_unlock>
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	d908      	bls.n	8001eca <_free_r+0x42>
 8001eb8:	6820      	ldr	r0, [r4, #0]
 8001eba:	1821      	adds	r1, r4, r0
 8001ebc:	428b      	cmp	r3, r1
 8001ebe:	bf01      	itttt	eq
 8001ec0:	6819      	ldreq	r1, [r3, #0]
 8001ec2:	685b      	ldreq	r3, [r3, #4]
 8001ec4:	1809      	addeq	r1, r1, r0
 8001ec6:	6021      	streq	r1, [r4, #0]
 8001ec8:	e7ed      	b.n	8001ea6 <_free_r+0x1e>
 8001eca:	461a      	mov	r2, r3
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	b10b      	cbz	r3, 8001ed4 <_free_r+0x4c>
 8001ed0:	42a3      	cmp	r3, r4
 8001ed2:	d9fa      	bls.n	8001eca <_free_r+0x42>
 8001ed4:	6811      	ldr	r1, [r2, #0]
 8001ed6:	1850      	adds	r0, r2, r1
 8001ed8:	42a0      	cmp	r0, r4
 8001eda:	d10b      	bne.n	8001ef4 <_free_r+0x6c>
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	4401      	add	r1, r0
 8001ee0:	1850      	adds	r0, r2, r1
 8001ee2:	4283      	cmp	r3, r0
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	d1e0      	bne.n	8001eaa <_free_r+0x22>
 8001ee8:	6818      	ldr	r0, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	6053      	str	r3, [r2, #4]
 8001eee:	4408      	add	r0, r1
 8001ef0:	6010      	str	r0, [r2, #0]
 8001ef2:	e7da      	b.n	8001eaa <_free_r+0x22>
 8001ef4:	d902      	bls.n	8001efc <_free_r+0x74>
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	602b      	str	r3, [r5, #0]
 8001efa:	e7d6      	b.n	8001eaa <_free_r+0x22>
 8001efc:	6820      	ldr	r0, [r4, #0]
 8001efe:	1821      	adds	r1, r4, r0
 8001f00:	428b      	cmp	r3, r1
 8001f02:	bf04      	itt	eq
 8001f04:	6819      	ldreq	r1, [r3, #0]
 8001f06:	685b      	ldreq	r3, [r3, #4]
 8001f08:	6063      	str	r3, [r4, #4]
 8001f0a:	bf04      	itt	eq
 8001f0c:	1809      	addeq	r1, r1, r0
 8001f0e:	6021      	streq	r1, [r4, #0]
 8001f10:	6054      	str	r4, [r2, #4]
 8001f12:	e7ca      	b.n	8001eaa <_free_r+0x22>
 8001f14:	bd38      	pop	{r3, r4, r5, pc}
 8001f16:	bf00      	nop
 8001f18:	200001d8 	.word	0x200001d8

08001f1c <sbrk_aligned>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8001f5c <sbrk_aligned+0x40>)
 8001f20:	460c      	mov	r4, r1
 8001f22:	6831      	ldr	r1, [r6, #0]
 8001f24:	4605      	mov	r5, r0
 8001f26:	b911      	cbnz	r1, 8001f2e <sbrk_aligned+0x12>
 8001f28:	f000 f92a 	bl	8002180 <_sbrk_r>
 8001f2c:	6030      	str	r0, [r6, #0]
 8001f2e:	4621      	mov	r1, r4
 8001f30:	4628      	mov	r0, r5
 8001f32:	f000 f925 	bl	8002180 <_sbrk_r>
 8001f36:	1c43      	adds	r3, r0, #1
 8001f38:	d103      	bne.n	8001f42 <sbrk_aligned+0x26>
 8001f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8001f3e:	4620      	mov	r0, r4
 8001f40:	bd70      	pop	{r4, r5, r6, pc}
 8001f42:	1cc4      	adds	r4, r0, #3
 8001f44:	f024 0403 	bic.w	r4, r4, #3
 8001f48:	42a0      	cmp	r0, r4
 8001f4a:	d0f8      	beq.n	8001f3e <sbrk_aligned+0x22>
 8001f4c:	1a21      	subs	r1, r4, r0
 8001f4e:	4628      	mov	r0, r5
 8001f50:	f000 f916 	bl	8002180 <_sbrk_r>
 8001f54:	3001      	adds	r0, #1
 8001f56:	d1f2      	bne.n	8001f3e <sbrk_aligned+0x22>
 8001f58:	e7ef      	b.n	8001f3a <sbrk_aligned+0x1e>
 8001f5a:	bf00      	nop
 8001f5c:	200001d4 	.word	0x200001d4

08001f60 <_malloc_r>:
 8001f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f64:	1ccd      	adds	r5, r1, #3
 8001f66:	f025 0503 	bic.w	r5, r5, #3
 8001f6a:	3508      	adds	r5, #8
 8001f6c:	2d0c      	cmp	r5, #12
 8001f6e:	bf38      	it	cc
 8001f70:	250c      	movcc	r5, #12
 8001f72:	2d00      	cmp	r5, #0
 8001f74:	4606      	mov	r6, r0
 8001f76:	db01      	blt.n	8001f7c <_malloc_r+0x1c>
 8001f78:	42a9      	cmp	r1, r5
 8001f7a:	d904      	bls.n	8001f86 <_malloc_r+0x26>
 8001f7c:	230c      	movs	r3, #12
 8001f7e:	6033      	str	r3, [r6, #0]
 8001f80:	2000      	movs	r0, #0
 8001f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800205c <_malloc_r+0xfc>
 8001f8a:	f000 f869 	bl	8002060 <__malloc_lock>
 8001f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001f92:	461c      	mov	r4, r3
 8001f94:	bb44      	cbnz	r4, 8001fe8 <_malloc_r+0x88>
 8001f96:	4629      	mov	r1, r5
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f7ff ffbf 	bl	8001f1c <sbrk_aligned>
 8001f9e:	1c43      	adds	r3, r0, #1
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	d158      	bne.n	8002056 <_malloc_r+0xf6>
 8001fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8001fa8:	4627      	mov	r7, r4
 8001faa:	2f00      	cmp	r7, #0
 8001fac:	d143      	bne.n	8002036 <_malloc_r+0xd6>
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d04b      	beq.n	800204a <_malloc_r+0xea>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	4639      	mov	r1, r7
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	eb04 0903 	add.w	r9, r4, r3
 8001fbc:	f000 f8e0 	bl	8002180 <_sbrk_r>
 8001fc0:	4581      	cmp	r9, r0
 8001fc2:	d142      	bne.n	800204a <_malloc_r+0xea>
 8001fc4:	6821      	ldr	r1, [r4, #0]
 8001fc6:	1a6d      	subs	r5, r5, r1
 8001fc8:	4629      	mov	r1, r5
 8001fca:	4630      	mov	r0, r6
 8001fcc:	f7ff ffa6 	bl	8001f1c <sbrk_aligned>
 8001fd0:	3001      	adds	r0, #1
 8001fd2:	d03a      	beq.n	800204a <_malloc_r+0xea>
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	442b      	add	r3, r5
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	f8d8 3000 	ldr.w	r3, [r8]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	bb62      	cbnz	r2, 800203c <_malloc_r+0xdc>
 8001fe2:	f8c8 7000 	str.w	r7, [r8]
 8001fe6:	e00f      	b.n	8002008 <_malloc_r+0xa8>
 8001fe8:	6822      	ldr	r2, [r4, #0]
 8001fea:	1b52      	subs	r2, r2, r5
 8001fec:	d420      	bmi.n	8002030 <_malloc_r+0xd0>
 8001fee:	2a0b      	cmp	r2, #11
 8001ff0:	d917      	bls.n	8002022 <_malloc_r+0xc2>
 8001ff2:	1961      	adds	r1, r4, r5
 8001ff4:	42a3      	cmp	r3, r4
 8001ff6:	6025      	str	r5, [r4, #0]
 8001ff8:	bf18      	it	ne
 8001ffa:	6059      	strne	r1, [r3, #4]
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	bf08      	it	eq
 8002000:	f8c8 1000 	streq.w	r1, [r8]
 8002004:	5162      	str	r2, [r4, r5]
 8002006:	604b      	str	r3, [r1, #4]
 8002008:	4630      	mov	r0, r6
 800200a:	f000 f82f 	bl	800206c <__malloc_unlock>
 800200e:	f104 000b 	add.w	r0, r4, #11
 8002012:	1d23      	adds	r3, r4, #4
 8002014:	f020 0007 	bic.w	r0, r0, #7
 8002018:	1ac2      	subs	r2, r0, r3
 800201a:	bf1c      	itt	ne
 800201c:	1a1b      	subne	r3, r3, r0
 800201e:	50a3      	strne	r3, [r4, r2]
 8002020:	e7af      	b.n	8001f82 <_malloc_r+0x22>
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	42a3      	cmp	r3, r4
 8002026:	bf0c      	ite	eq
 8002028:	f8c8 2000 	streq.w	r2, [r8]
 800202c:	605a      	strne	r2, [r3, #4]
 800202e:	e7eb      	b.n	8002008 <_malloc_r+0xa8>
 8002030:	4623      	mov	r3, r4
 8002032:	6864      	ldr	r4, [r4, #4]
 8002034:	e7ae      	b.n	8001f94 <_malloc_r+0x34>
 8002036:	463c      	mov	r4, r7
 8002038:	687f      	ldr	r7, [r7, #4]
 800203a:	e7b6      	b.n	8001faa <_malloc_r+0x4a>
 800203c:	461a      	mov	r2, r3
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	42a3      	cmp	r3, r4
 8002042:	d1fb      	bne.n	800203c <_malloc_r+0xdc>
 8002044:	2300      	movs	r3, #0
 8002046:	6053      	str	r3, [r2, #4]
 8002048:	e7de      	b.n	8002008 <_malloc_r+0xa8>
 800204a:	230c      	movs	r3, #12
 800204c:	6033      	str	r3, [r6, #0]
 800204e:	4630      	mov	r0, r6
 8002050:	f000 f80c 	bl	800206c <__malloc_unlock>
 8002054:	e794      	b.n	8001f80 <_malloc_r+0x20>
 8002056:	6005      	str	r5, [r0, #0]
 8002058:	e7d6      	b.n	8002008 <_malloc_r+0xa8>
 800205a:	bf00      	nop
 800205c:	200001d8 	.word	0x200001d8

08002060 <__malloc_lock>:
 8002060:	4801      	ldr	r0, [pc, #4]	@ (8002068 <__malloc_lock+0x8>)
 8002062:	f7ff bf0e 	b.w	8001e82 <__retarget_lock_acquire_recursive>
 8002066:	bf00      	nop
 8002068:	200001d0 	.word	0x200001d0

0800206c <__malloc_unlock>:
 800206c:	4801      	ldr	r0, [pc, #4]	@ (8002074 <__malloc_unlock+0x8>)
 800206e:	f7ff bf09 	b.w	8001e84 <__retarget_lock_release_recursive>
 8002072:	bf00      	nop
 8002074:	200001d0 	.word	0x200001d0

08002078 <__swhatbuf_r>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	460c      	mov	r4, r1
 800207c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002080:	2900      	cmp	r1, #0
 8002082:	b096      	sub	sp, #88	@ 0x58
 8002084:	4615      	mov	r5, r2
 8002086:	461e      	mov	r6, r3
 8002088:	da0d      	bge.n	80020a6 <__swhatbuf_r+0x2e>
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002090:	f04f 0100 	mov.w	r1, #0
 8002094:	bf14      	ite	ne
 8002096:	2340      	movne	r3, #64	@ 0x40
 8002098:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800209c:	2000      	movs	r0, #0
 800209e:	6031      	str	r1, [r6, #0]
 80020a0:	602b      	str	r3, [r5, #0]
 80020a2:	b016      	add	sp, #88	@ 0x58
 80020a4:	bd70      	pop	{r4, r5, r6, pc}
 80020a6:	466a      	mov	r2, sp
 80020a8:	f000 f848 	bl	800213c <_fstat_r>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	dbec      	blt.n	800208a <__swhatbuf_r+0x12>
 80020b0:	9901      	ldr	r1, [sp, #4]
 80020b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80020b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80020ba:	4259      	negs	r1, r3
 80020bc:	4159      	adcs	r1, r3
 80020be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020c2:	e7eb      	b.n	800209c <__swhatbuf_r+0x24>

080020c4 <__smakebuf_r>:
 80020c4:	898b      	ldrh	r3, [r1, #12]
 80020c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020c8:	079d      	lsls	r5, r3, #30
 80020ca:	4606      	mov	r6, r0
 80020cc:	460c      	mov	r4, r1
 80020ce:	d507      	bpl.n	80020e0 <__smakebuf_r+0x1c>
 80020d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80020d4:	6023      	str	r3, [r4, #0]
 80020d6:	6123      	str	r3, [r4, #16]
 80020d8:	2301      	movs	r3, #1
 80020da:	6163      	str	r3, [r4, #20]
 80020dc:	b003      	add	sp, #12
 80020de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e0:	ab01      	add	r3, sp, #4
 80020e2:	466a      	mov	r2, sp
 80020e4:	f7ff ffc8 	bl	8002078 <__swhatbuf_r>
 80020e8:	9f00      	ldr	r7, [sp, #0]
 80020ea:	4605      	mov	r5, r0
 80020ec:	4639      	mov	r1, r7
 80020ee:	4630      	mov	r0, r6
 80020f0:	f7ff ff36 	bl	8001f60 <_malloc_r>
 80020f4:	b948      	cbnz	r0, 800210a <__smakebuf_r+0x46>
 80020f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020fa:	059a      	lsls	r2, r3, #22
 80020fc:	d4ee      	bmi.n	80020dc <__smakebuf_r+0x18>
 80020fe:	f023 0303 	bic.w	r3, r3, #3
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	81a3      	strh	r3, [r4, #12]
 8002108:	e7e2      	b.n	80020d0 <__smakebuf_r+0xc>
 800210a:	89a3      	ldrh	r3, [r4, #12]
 800210c:	6020      	str	r0, [r4, #0]
 800210e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002112:	81a3      	strh	r3, [r4, #12]
 8002114:	9b01      	ldr	r3, [sp, #4]
 8002116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800211a:	b15b      	cbz	r3, 8002134 <__smakebuf_r+0x70>
 800211c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002120:	4630      	mov	r0, r6
 8002122:	f000 f81d 	bl	8002160 <_isatty_r>
 8002126:	b128      	cbz	r0, 8002134 <__smakebuf_r+0x70>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	431d      	orrs	r5, r3
 8002138:	81a5      	strh	r5, [r4, #12]
 800213a:	e7cf      	b.n	80020dc <__smakebuf_r+0x18>

0800213c <_fstat_r>:
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4d07      	ldr	r5, [pc, #28]	@ (800215c <_fstat_r+0x20>)
 8002140:	2300      	movs	r3, #0
 8002142:	4604      	mov	r4, r0
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	602b      	str	r3, [r5, #0]
 800214a:	f7fe fa02 	bl	8000552 <_fstat>
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d102      	bne.n	8002158 <_fstat_r+0x1c>
 8002152:	682b      	ldr	r3, [r5, #0]
 8002154:	b103      	cbz	r3, 8002158 <_fstat_r+0x1c>
 8002156:	6023      	str	r3, [r4, #0]
 8002158:	bd38      	pop	{r3, r4, r5, pc}
 800215a:	bf00      	nop
 800215c:	200001cc 	.word	0x200001cc

08002160 <_isatty_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d06      	ldr	r5, [pc, #24]	@ (800217c <_isatty_r+0x1c>)
 8002164:	2300      	movs	r3, #0
 8002166:	4604      	mov	r4, r0
 8002168:	4608      	mov	r0, r1
 800216a:	602b      	str	r3, [r5, #0]
 800216c:	f7fe fa01 	bl	8000572 <_isatty>
 8002170:	1c43      	adds	r3, r0, #1
 8002172:	d102      	bne.n	800217a <_isatty_r+0x1a>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	b103      	cbz	r3, 800217a <_isatty_r+0x1a>
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	bd38      	pop	{r3, r4, r5, pc}
 800217c:	200001cc 	.word	0x200001cc

08002180 <_sbrk_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4d06      	ldr	r5, [pc, #24]	@ (800219c <_sbrk_r+0x1c>)
 8002184:	2300      	movs	r3, #0
 8002186:	4604      	mov	r4, r0
 8002188:	4608      	mov	r0, r1
 800218a:	602b      	str	r3, [r5, #0]
 800218c:	f7fe fa0a 	bl	80005a4 <_sbrk>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	d102      	bne.n	800219a <_sbrk_r+0x1a>
 8002194:	682b      	ldr	r3, [r5, #0]
 8002196:	b103      	cbz	r3, 800219a <_sbrk_r+0x1a>
 8002198:	6023      	str	r3, [r4, #0]
 800219a:	bd38      	pop	{r3, r4, r5, pc}
 800219c:	200001cc 	.word	0x200001cc

080021a0 <_init>:
 80021a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a2:	bf00      	nop
 80021a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a6:	bc08      	pop	{r3}
 80021a8:	469e      	mov	lr, r3
 80021aa:	4770      	bx	lr

080021ac <_fini>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	bf00      	nop
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr
