
UART_To_NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e8  080053e8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080053e8  080053e8  000063e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f0  080053f0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f0  080053f0  000063f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053f4  080053f4  000063f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  08005460  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005460  00007270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dabd  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002020  00000000  00000000  00014b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00016b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000841  00000000  00000000  00017648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc6a  00000000  00000000  00017e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8a4  00000000  00000000  00035af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b88b7  00000000  00000000  00043397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbc4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000fbc94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005344 	.word	0x08005344

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08005344 	.word	0x08005344

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fab0 	bl	8000b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f81d 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8a7 	bl	8000710 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f859 	bl	8000678 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t TxData = 0x08;
 80005c6:	2308      	movs	r3, #8
 80005c8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // start listening for UART
  HAL_UART_Receive_IT(&huart2, &RxData, sizeof(RxData));
 80005ca:	2201      	movs	r2, #1
 80005cc:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <main+0x40>)
 80005ce:	4809      	ldr	r0, [pc, #36]	@ (80005f4 <main+0x44>)
 80005d0:	f001 ff38 	bl	8002444 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, &TxData, sizeof(TxData), HAL_MAX_DELAY);
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	4805      	ldr	r0, [pc, #20]	@ (80005f4 <main+0x44>)
 80005de:	f001 fea3 	bl	8002328 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005e6:	f000 fb09 	bl	8000bfc <HAL_Delay>
	  HAL_UART_Transmit(&huart2, &TxData, sizeof(TxData), HAL_MAX_DELAY);
 80005ea:	bf00      	nop
 80005ec:	e7f2      	b.n	80005d4 <main+0x24>
 80005ee:	bf00      	nop
 80005f0:	20000118 	.word	0x20000118
 80005f4:	20000084 	.word	0x20000084

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2238      	movs	r2, #56	@ 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 f92f 	bl	800486a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800061e:	f000 fe61 	bl	80012e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800062a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2340      	movs	r3, #64	@ 0x40
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0318 	add.w	r3, r7, #24
 8000638:	4618      	mov	r0, r3
 800063a:	f000 ff07 	bl	800144c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000644:	f000 f89e 	bl	8000784 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064c:	2301      	movs	r3, #1
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f001 fa05 	bl	8001a70 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800066c:	f000 f88a 	bl	8000784 <Error_Handler>
  }
}
 8000670:	bf00      	nop
 8000672:	3750      	adds	r7, #80	@ 0x50
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 800067e:	4a23      	ldr	r2, [pc, #140]	@ (800070c <MX_USART2_UART_Init+0x94>)
 8000680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000682:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b1d      	ldr	r3, [pc, #116]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000696:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b19      	ldr	r3, [pc, #100]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ae:	4b16      	ldr	r3, [pc, #88]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ba:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c0:	4811      	ldr	r0, [pc, #68]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006c2:	f001 fde1 	bl	8002288 <HAL_UART_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006cc:	f000 f85a 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006d4:	f003 fe27 	bl	8004326 <HAL_UARTEx_SetTxFifoThreshold>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006de:	f000 f851 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4808      	ldr	r0, [pc, #32]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006e6:	f003 fe5c 	bl	80043a2 <HAL_UARTEx_SetRxFifoThreshold>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 f848 	bl	8000784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <MX_USART2_UART_Init+0x90>)
 80006f6:	f003 fddd 	bl	80042b4 <HAL_UARTEx_DisableFifoMode>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000700:	f000 f840 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000084 	.word	0x20000084
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_GPIO_Init+0x2c>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <MX_GPIO_Init+0x2c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_GPIO_Init+0x2c>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// receive callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	printf("Received Message: %u\n", RxData);
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <HAL_UART_RxCpltCallback+0x34>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	480a      	ldr	r0, [pc, #40]	@ (8000778 <HAL_UART_RxCpltCallback+0x38>)
 8000750:	f004 f836 	bl	80047c0 <iprintf>
	fflush(stdout);
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_UART_RxCpltCallback+0x3c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	4618      	mov	r0, r3
 800075c:	f003 ff5a 	bl	8004614 <fflush>

	// restart listening for UART messages
	HAL_UART_Receive_IT(&huart2, &RxData, sizeof(RxData));
 8000760:	2201      	movs	r2, #1
 8000762:	4904      	ldr	r1, [pc, #16]	@ (8000774 <HAL_UART_RxCpltCallback+0x34>)
 8000764:	4806      	ldr	r0, [pc, #24]	@ (8000780 <HAL_UART_RxCpltCallback+0x40>)
 8000766:	f001 fe6d 	bl	8002444 <HAL_UART_Receive_IT>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000118 	.word	0x20000118
 8000778:	0800535c 	.word	0x0800535c
 800077c:	20000018 	.word	0x20000018
 8000780:	20000084 	.word	0x20000084

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <Error_Handler+0x8>

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <HAL_MspInit+0x44>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079a:	4a0e      	ldr	r2, [pc, #56]	@ (80007d4 <HAL_MspInit+0x44>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a2:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <HAL_MspInit+0x44>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x44>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x44>)
 80007bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007c6:	f000 fe31 	bl	800142c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09a      	sub	sp, #104	@ 0x68
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2244      	movs	r2, #68	@ 0x44
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 f836 	bl	800486a <memset>
  if(huart->Instance==USART2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a23      	ldr	r2, [pc, #140]	@ (8000890 <HAL_UART_MspInit+0xb8>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d13e      	bne.n	8000886 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000808:	2302      	movs	r3, #2
 800080a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fb47 	bl	8001ea8 <HAL_RCCEx_PeriphCLKConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000820:	f7ff ffb0 	bl	8000784 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 8000826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000828:	4a1a      	ldr	r2, [pc, #104]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 800082a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 8000832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 800083e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000840:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <HAL_UART_MspInit+0xbc>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000854:	230c      	movs	r3, #12
 8000856:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000864:	2307      	movs	r3, #7
 8000866:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800086c:	4619      	mov	r1, r3
 800086e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000872:	f000 fbb5 	bl	8000fe0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2026      	movs	r0, #38	@ 0x26
 800087c:	f000 fabb 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000880:	2026      	movs	r0, #38	@ 0x26
 8000882:	f000 fad2 	bl	8000e2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000886:	bf00      	nop
 8000888:	3768      	adds	r7, #104	@ 0x68
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40004400 	.word	0x40004400
 8000894:	40021000 	.word	0x40021000

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f967 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <USART2_IRQHandler+0x10>)
 80008fe:	f001 fded 	bl	80024dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000084 	.word	0x20000084

0800090c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <ITM_SendChar+0x48>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <ITM_SendChar+0x48>)
 800091c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000920:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <ITM_SendChar+0x4c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a0c      	ldr	r2, [pc, #48]	@ (8000958 <ITM_SendChar+0x4c>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800092e:	bf00      	nop
 8000930:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b00      	cmp	r3, #0
 800093c:	d0f8      	beq.n	8000930 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800093e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	6013      	str	r3, [r2, #0]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000edfc 	.word	0xe000edfc
 8000958:	e0000e00 	.word	0xe0000e00

0800095c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00a      	b.n	8000984 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800096e:	f3af 8000 	nop.w
 8000972:	4601      	mov	r1, r0
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	b2ca      	uxtb	r2, r1
 800097c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf0      	blt.n	800096e <_read+0x12>
  }

  return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	e009      	b.n	80009bc <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff ffab 	bl	800090c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dbf1      	blt.n	80009a8 <_write+0x12>
  }
  return len;
 80009c4:	687b      	ldr	r3, [r7, #4]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <_close>:

int _close(int file)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
  return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <_isatty>:

int _isatty(int file)
{
 8000a06:	b480      	push	{r7}
 8000a08:	b083      	sub	sp, #12
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a40:	4a14      	ldr	r2, [pc, #80]	@ (8000a94 <_sbrk+0x5c>)
 8000a42:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <_sbrk+0x60>)
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a4c:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <_sbrk+0x64>)
 8000a56:	4a12      	ldr	r2, [pc, #72]	@ (8000aa0 <_sbrk+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a5a:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d207      	bcs.n	8000a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a68:	f003 ff4e 	bl	8004908 <__errno>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	220c      	movs	r2, #12
 8000a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	e009      	b.n	8000a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	@ (8000a9c <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a05      	ldr	r2, [pc, #20]	@ (8000a9c <_sbrk+0x64>)
 8000a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20008000 	.word	0x20008000
 8000a98:	00000400 	.word	0x00000400
 8000a9c:	2000011c 	.word	0x2000011c
 8000aa0:	20000270 	.word	0x20000270

08000aa4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ac8:	480d      	ldr	r0, [pc, #52]	@ (8000b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopForever+0xe>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopForever+0x16>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 ff0d 	bl	8004914 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000afa:	f7ff fd59 	bl	80005b0 <main>

08000afe <LoopForever>:

LoopForever:
    b LoopForever
 8000afe:	e7fe      	b.n	8000afe <LoopForever>
  ldr   r0, =_estack
 8000b00:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b0c:	080053f8 	.word	0x080053f8
  ldr r2, =_sbss
 8000b10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b14:	20000270 	.word	0x20000270

08000b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC1_2_IRQHandler>

08000b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b24:	2003      	movs	r0, #3
 8000b26:	f000 f95b 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2a:	200f      	movs	r0, #15
 8000b2c:	f000 f80e 	bl	8000b4c <HAL_InitTick>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d002      	beq.n	8000b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	e001      	b.n	8000b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b3c:	f7ff fe28 	bl	8000790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b40:	79fb      	ldrb	r3, [r7, #7]

}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <HAL_InitTick+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d022      	beq.n	8000ba6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_InitTick+0x6c>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <HAL_InitTick+0x68>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b74:	4618      	mov	r0, r3
 8000b76:	f000 f966 	bl	8000e46 <HAL_SYSTICK_Config>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10f      	bne.n	8000ba0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b0f      	cmp	r3, #15
 8000b84:	d809      	bhi.n	8000b9a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b86:	2200      	movs	r2, #0
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8e:	f000 f932 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b92:	4a0a      	ldr	r2, [pc, #40]	@ (8000bbc <HAL_InitTick+0x70>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	e007      	b.n	8000baa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	e004      	b.n	8000baa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	73fb      	strb	r3, [r7, #15]
 8000ba4:	e001      	b.n	8000baa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000004 	.word	0x20000004

08000bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_IncTick+0x1c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <HAL_IncTick+0x1c>)
 8000bd0:	6013      	str	r3, [r2, #0]
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000120 	.word	0x20000120
 8000be0:	20000008 	.word	0x20000008

08000be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return uwTick;
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <HAL_GetTick+0x14>)
 8000bea:	681b      	ldr	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	20000120 	.word	0x20000120

08000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c04:	f7ff ffee 	bl	8000be4 <HAL_GetTick>
 8000c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d004      	beq.n	8000c20 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_Delay+0x40>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c20:	bf00      	nop
 8000c22:	f7ff ffdf 	bl	8000be4 <HAL_GetTick>
 8000c26:	4602      	mov	r2, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d8f7      	bhi.n	8000c22 <HAL_Delay+0x26>
  {
  }
}
 8000c32:	bf00      	nop
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000008 	.word	0x20000008

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff29 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff40 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff90 	bl	8000d34 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5f 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff33 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ffa4 	bl	8000d9c <SysTick_Config>
 8000e54:	4603      	mov	r3, r0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b085      	sub	sp, #20
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d005      	beq.n	8000e82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e037      	b.n	8000ef2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020e 	bic.w	r2, r2, #14
 8000e90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ea0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0201 	bic.w	r2, r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	f003 021f 	and.w	r2, r3, #31
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ece:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ee2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ee6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ef0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d00d      	beq.n	8000f44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e047      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 020e 	bic.w	r2, r2, #14
 8000f52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 0201 	bic.w	r2, r2, #1
 8000f62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fa8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000fb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d003      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	4798      	blx	r3
    }
  }
  return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fee:	e15a      	b.n	80012a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 814c 	beq.w	80012a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80a6 	beq.w	80012a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b5b      	ldr	r3, [pc, #364]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001158:	4a5a      	ldr	r2, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001160:	4b58      	ldr	r3, [pc, #352]	@ (80012c4 <HAL_GPIO_Init+0x2e4>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116c:	4a56      	ldr	r2, [pc, #344]	@ (80012c8 <HAL_GPIO_Init+0x2e8>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001196:	d01f      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x2ec>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d019      	beq.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x2f0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d013      	beq.n	80011d0 <HAL_GPIO_Init+0x1f0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a4a      	ldr	r2, [pc, #296]	@ (80012d4 <HAL_GPIO_Init+0x2f4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d00d      	beq.n	80011cc <HAL_GPIO_Init+0x1ec>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a49      	ldr	r2, [pc, #292]	@ (80012d8 <HAL_GPIO_Init+0x2f8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d007      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a48      	ldr	r2, [pc, #288]	@ (80012dc <HAL_GPIO_Init+0x2fc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d101      	bne.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011c0:	2305      	movs	r3, #5
 80011c2:	e00a      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011c4:	2306      	movs	r3, #6
 80011c6:	e008      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e006      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011cc:	2303      	movs	r3, #3
 80011ce:	e004      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e002      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d4:	2301      	movs	r3, #1
 80011d6:	e000      	b.n	80011da <HAL_GPIO_Init+0x1fa>
 80011d8:	2300      	movs	r3, #0
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	0092      	lsls	r2, r2, #2
 80011e2:	4093      	lsls	r3, r2
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011ea:	4937      	ldr	r1, [pc, #220]	@ (80012c8 <HAL_GPIO_Init+0x2e8>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011f8:	4b39      	ldr	r3, [pc, #228]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800121c:	4a30      	ldr	r2, [pc, #192]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001222:	4b2f      	ldr	r3, [pc, #188]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001246:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001270:	4a1b      	ldr	r2, [pc, #108]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800129a:	4a11      	ldr	r2, [pc, #68]	@ (80012e0 <HAL_GPIO_Init+0x300>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f ae9d 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	371c      	adds	r7, #28
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	48000400 	.word	0x48000400
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000c00 	.word	0x48000c00
 80012d8:	48001000 	.word	0x48001000
 80012dc:	48001400 	.word	0x48001400
 80012e0:	40010400 	.word	0x40010400

080012e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d141      	bne.n	8001376 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fe:	d131      	bne.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001300:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001306:	4a46      	ldr	r2, [pc, #280]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800130c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001318:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001320:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2232      	movs	r2, #50	@ 0x32
 8001326:	fb02 f303 	mul.w	r3, r2, r3
 800132a:	4a3f      	ldr	r2, [pc, #252]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9b      	lsrs	r3, r3, #18
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001336:	e002      	b.n	800133e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133e:	4b38      	ldr	r3, [pc, #224]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134a:	d102      	bne.n	8001352 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f2      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001352:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135e:	d158      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e057      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001364:	4b2e      	ldr	r3, [pc, #184]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136a:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001374:	e04d      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800137c:	d141      	bne.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800137e:	4b28      	ldr	r3, [pc, #160]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138a:	d131      	bne.n	80013f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800138c:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001392:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001398:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	4b20      	ldr	r3, [pc, #128]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2232      	movs	r2, #50	@ 0x32
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001428 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9b      	lsrs	r3, r3, #18
 80013be:	3301      	adds	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c2:	e002      	b.n	80013ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d6:	d102      	bne.n	80013de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f2      	bne.n	80013c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013ea:	d112      	bne.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e011      	b.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001400:	e007      	b.n	8001412 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001402:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800140a:	4a05      	ldr	r2, [pc, #20]	@ (8001420 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001410:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40007000 	.word	0x40007000
 8001424:	20000000 	.word	0x20000000
 8001428:	431bde83 	.word	0x431bde83

0800142c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001430:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001436:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800143a:	6093      	str	r3, [r2, #8]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40007000 	.word	0x40007000

0800144c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d101      	bne.n	800145e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e2fe      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	2b00      	cmp	r3, #0
 8001468:	d075      	beq.n	8001556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	4b97      	ldr	r3, [pc, #604]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001474:	4b94      	ldr	r3, [pc, #592]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b0c      	cmp	r3, #12
 8001482:	d102      	bne.n	800148a <HAL_RCC_OscConfig+0x3e>
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d002      	beq.n	8001490 <HAL_RCC_OscConfig+0x44>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d10b      	bne.n	80014a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	4b8d      	ldr	r3, [pc, #564]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d05b      	beq.n	8001554 <HAL_RCC_OscConfig+0x108>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d157      	bne.n	8001554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e2d9      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b0:	d106      	bne.n	80014c0 <HAL_RCC_OscConfig+0x74>
 80014b2:	4b85      	ldr	r3, [pc, #532]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a84      	ldr	r2, [pc, #528]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e01d      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x98>
 80014ca:	4b7f      	ldr	r3, [pc, #508]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7e      	ldr	r2, [pc, #504]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b7c      	ldr	r3, [pc, #496]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a7b      	ldr	r2, [pc, #492]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xb0>
 80014e4:	4b78      	ldr	r3, [pc, #480]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a77      	ldr	r2, [pc, #476]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b75      	ldr	r3, [pc, #468]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a74      	ldr	r2, [pc, #464]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fb6e 	bl	8000be4 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff fb6a 	bl	8000be4 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	@ 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e29e      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800151e:	4b6a      	ldr	r3, [pc, #424]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0xc0>
 800152a:	e014      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fb5a 	bl	8000be4 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fb56 	bl	8000be4 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	@ 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e28a      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001546:	4b60      	ldr	r3, [pc, #384]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0xe8>
 8001552:	e000      	b.n	8001556 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d075      	beq.n	800164e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001562:	4b59      	ldr	r3, [pc, #356]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
 800156a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800156c:	4b56      	ldr	r3, [pc, #344]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	2b0c      	cmp	r3, #12
 800157a:	d102      	bne.n	8001582 <HAL_RCC_OscConfig+0x136>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d002      	beq.n	8001588 <HAL_RCC_OscConfig+0x13c>
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d11f      	bne.n	80015c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001588:	4b4f      	ldr	r3, [pc, #316]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_RCC_OscConfig+0x154>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e25d      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a0:	4b49      	ldr	r3, [pc, #292]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	061b      	lsls	r3, r3, #24
 80015ae:	4946      	ldr	r1, [pc, #280]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015b4:	4b45      	ldr	r3, [pc, #276]	@ (80016cc <HAL_RCC_OscConfig+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fac7 	bl	8000b4c <HAL_InitTick>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d043      	beq.n	800164c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e249      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d023      	beq.n	8001618 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a3c      	ldr	r2, [pc, #240]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff fb02 	bl	8000be4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff fafe 	bl	8000be4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e232      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	061b      	lsls	r3, r3, #24
 8001610:	492d      	ldr	r1, [pc, #180]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001612:	4313      	orrs	r3, r2
 8001614:	604b      	str	r3, [r1, #4]
 8001616:	e01a      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001618:	4b2b      	ldr	r3, [pc, #172]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2a      	ldr	r2, [pc, #168]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800161e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001624:	f7ff fade 	bl	8000be4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162c:	f7ff fada 	bl	8000be4 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e20e      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163e:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x1e0>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d041      	beq.n	80016de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01c      	beq.n	800169c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 8001664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001668:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001672:	f7ff fab7 	bl	8000be4 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167a:	f7ff fab3 	bl	8000be4 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e1e7      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0ef      	beq.n	800167a <HAL_RCC_OscConfig+0x22e>
 800169a:	e020      	b.n	80016de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800169c:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 800169e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a2:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_RCC_OscConfig+0x27c>)
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ac:	f7ff fa9a 	bl	8000be4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b2:	e00d      	b.n	80016d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fa96 	bl	8000be4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d906      	bls.n	80016d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1ca      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ea      	bne.n	80016b4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a6 	beq.w	8001838 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ec:	2300      	movs	r3, #0
 80016ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016f0:	4b84      	ldr	r3, [pc, #528]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_OscConfig+0x2b4>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x2b6>
 8001700:	2300      	movs	r3, #0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b7f      	ldr	r3, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170a:	4a7e      	ldr	r2, [pc, #504]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	6593      	str	r3, [r2, #88]	@ 0x58
 8001712:	4b7c      	ldr	r3, [pc, #496]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800171e:	2301      	movs	r3, #1
 8001720:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001722:	4b79      	ldr	r3, [pc, #484]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d118      	bne.n	8001760 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172e:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a75      	ldr	r2, [pc, #468]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173a:	f7ff fa53 	bl	8000be4 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff fa4f 	bl	8000be4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e183      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001754:	4b6c      	ldr	r3, [pc, #432]	@ (8001908 <HAL_RCC_OscConfig+0x4bc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_RCC_OscConfig+0x32e>
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a65      	ldr	r2, [pc, #404]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001778:	e024      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b05      	cmp	r3, #5
 8001780:	d110      	bne.n	80017a4 <HAL_RCC_OscConfig+0x358>
 8001782:	4b60      	ldr	r3, [pc, #384]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001788:	4a5e      	ldr	r2, [pc, #376]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001792:	4b5c      	ldr	r3, [pc, #368]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001798:	4a5a      	ldr	r2, [pc, #360]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a2:	e00f      	b.n	80017c4 <HAL_RCC_OscConfig+0x378>
 80017a4:	4b57      	ldr	r3, [pc, #348]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a56      	ldr	r2, [pc, #344]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b4:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ba:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d016      	beq.n	80017fa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fa0a 	bl	8000be4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fa06 	bl	8000be4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e138      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0ed      	beq.n	80017d4 <HAL_RCC_OscConfig+0x388>
 80017f8:	e015      	b.n	8001826 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7ff f9f3 	bl	8000be4 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7ff f9ef 	bl	8000be4 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e121      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001818:	4b3a      	ldr	r3, [pc, #232]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800181a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ed      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001826:	7ffb      	ldrb	r3, [r7, #31]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001830:	4a34      	ldr	r2, [pc, #208]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001832:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001836:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0320 	and.w	r3, r3, #32
 8001840:	2b00      	cmp	r3, #0
 8001842:	d03c      	beq.n	80018be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01c      	beq.n	8001886 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001852:	4a2c      	ldr	r2, [pc, #176]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185c:	f7ff f9c2 	bl	8000be4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001864:	f7ff f9be 	bl	8000be4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0f2      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0ef      	beq.n	8001864 <HAL_RCC_OscConfig+0x418>
 8001884:	e01b      	b.n	80018be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 8001888:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800188c:	4a1d      	ldr	r2, [pc, #116]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 800188e:	f023 0301 	bic.w	r3, r3, #1
 8001892:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001896:	f7ff f9a5 	bl	8000be4 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189e:	f7ff f9a1 	bl	8000be4 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e0d5      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1ef      	bne.n	800189e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80c9 	beq.w	8001a5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	f000 8083 	beq.w	80019dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d15e      	bne.n	800199c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_RCC_OscConfig+0x4b8>)
 80018e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff f97b 	bl	8000be4 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f0:	e00c      	b.n	800190c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff f977 	bl	8000be4 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d905      	bls.n	800190c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0ab      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
 8001904:	40021000 	.word	0x40021000
 8001908:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ec      	bne.n	80018f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b52      	ldr	r3, [pc, #328]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4b52      	ldr	r3, [pc, #328]	@ (8001a68 <HAL_RCC_OscConfig+0x61c>)
 800191e:	4013      	ands	r3, r2
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6a11      	ldr	r1, [r2, #32]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001928:	3a01      	subs	r2, #1
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	4311      	orrs	r1, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001932:	0212      	lsls	r2, r2, #8
 8001934:	4311      	orrs	r1, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800193a:	0852      	lsrs	r2, r2, #1
 800193c:	3a01      	subs	r2, #1
 800193e:	0552      	lsls	r2, r2, #21
 8001940:	4311      	orrs	r1, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001946:	0852      	lsrs	r2, r2, #1
 8001948:	3a01      	subs	r2, #1
 800194a:	0652      	lsls	r2, r2, #25
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001952:	06d2      	lsls	r2, r2, #27
 8001954:	430a      	orrs	r2, r1
 8001956:	4943      	ldr	r1, [pc, #268]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001958:	4313      	orrs	r3, r2
 800195a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800195c:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001966:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001968:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800196e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001972:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff f936 	bl	8000be4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff f932 	bl	8000be4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e066      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b35      	ldr	r3, [pc, #212]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x530>
 800199a:	e05e      	b.n	8001a5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199c:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a30      	ldr	r2, [pc, #192]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff f91c 	bl	8000be4 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f918 	bl	8000be4 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e04c      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c2:	4b28      	ldr	r3, [pc, #160]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80019ce:	4b25      	ldr	r3, [pc, #148]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	4924      	ldr	r1, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_RCC_OscConfig+0x620>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	60cb      	str	r3, [r1, #12]
 80019da:	e03e      	b.n	8001a5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e039      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80019e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <HAL_RCC_OscConfig+0x618>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d12c      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	3b01      	subs	r3, #1
 8001a08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d123      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d11b      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d113      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a38:	085b      	lsrs	r3, r3, #1
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d109      	bne.n	8001a56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3720      	adds	r7, #32
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40021000 	.word	0x40021000
 8001a68:	019f800c 	.word	0x019f800c
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e11e      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b91      	ldr	r3, [pc, #580]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d910      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b8e      	ldr	r3, [pc, #568]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 020f 	bic.w	r2, r3, #15
 8001a9e:	498c      	ldr	r1, [pc, #560]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e106      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d073      	beq.n	8001bac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d129      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b81      	ldr	r3, [pc, #516]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0f4      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001adc:	f000 f99e 	bl	8001e1c <RCC_GetSysClockFreqFromPLLSource>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4a7c      	ldr	r2, [pc, #496]	@ (8001cd8 <HAL_RCC_ClockConfig+0x268>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d93f      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001aea:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d033      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d12f      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0a:	4b72      	ldr	r3, [pc, #456]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b12:	4a70      	ldr	r2, [pc, #448]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e024      	b.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b28:	4b6a      	ldr	r3, [pc, #424]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0c6      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b38:	4b66      	ldr	r3, [pc, #408]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0be      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001b48:	f000 f8ce 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4a61      	ldr	r2, [pc, #388]	@ (8001cd8 <HAL_RCC_ClockConfig+0x268>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d909      	bls.n	8001b6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b56:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b5e:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f023 0203 	bic.w	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4957      	ldr	r1, [pc, #348]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f832 	bl	8000be4 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	e00a      	b.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b84:	f7ff f82e 	bl	8000be4 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e095      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 020c 	and.w	r2, r3, #12
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d1eb      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d023      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a42      	ldr	r2, [pc, #264]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001be4:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b39      	ldr	r3, [pc, #228]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4936      	ldr	r1, [pc, #216]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
 8001bfe:	e008      	b.n	8001c12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b80      	cmp	r3, #128	@ 0x80
 8001c04:	d105      	bne.n	8001c12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c06:	4b33      	ldr	r3, [pc, #204]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	4a32      	ldr	r2, [pc, #200]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001c10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c12:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d21d      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c20:	4b2b      	ldr	r3, [pc, #172]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 020f 	bic.w	r2, r3, #15
 8001c28:	4929      	ldr	r1, [pc, #164]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c30:	f7fe ffd8 	bl	8000be4 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7fe ffd4 	bl	8000be4 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e03b      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d1ed      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4917      	ldr	r1, [pc, #92]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490f      	ldr	r1, [pc, #60]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9a:	f000 f825 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd4 <HAL_RCC_ClockConfig+0x264>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <HAL_RCC_ClockConfig+0x26c>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x270>)
 8001cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001cba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <HAL_RCC_ClockConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe ff44 	bl	8000b4c <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	04c4b400 	.word	0x04c4b400
 8001cdc:	08005374 	.word	0x08005374
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cee:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d102      	bne.n	8001d00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	e047      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d00:	4b27      	ldr	r3, [pc, #156]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e03e      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001d12:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	d136      	bne.n	8001d8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3301      	adds	r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d10c      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8001da8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	4a16      	ldr	r2, [pc, #88]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d46:	68d2      	ldr	r2, [r2, #12]
 8001d48:	0a12      	lsrs	r2, r2, #8
 8001d4a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
      break;
 8001d54:	e00c      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d56:	4a13      	ldr	r2, [pc, #76]	@ (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4a10      	ldr	r2, [pc, #64]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d60:	68d2      	ldr	r2, [r2, #12]
 8001d62:	0a12      	lsrs	r2, r2, #8
 8001d64:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d70:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0e5b      	lsrs	r3, r3, #25
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	e001      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d90:	693b      	ldr	r3, [r7, #16]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	007a1200 	.word	0x007a1200

08001dac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	@ (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4904      	ldr	r1, [pc, #16]	@ (8001dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dda:	5ccb      	ldrb	r3, [r1, r3]
 8001ddc:	f003 031f 	and.w	r3, r3, #31
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08005384 	.word	0x08005384

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001df4:	f7ff ffda 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4904      	ldr	r1, [pc, #16]	@ (8001e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08005384 	.word	0x08005384

08001e1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b087      	sub	sp, #28
 8001e20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	091b      	lsrs	r3, r3, #4
 8001e32:	f003 030f 	and.w	r3, r3, #15
 8001e36:	3301      	adds	r3, #1
 8001e38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d10c      	bne.n	8001e5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e40:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e48:	4a14      	ldr	r2, [pc, #80]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e4a:	68d2      	ldr	r2, [r2, #12]
 8001e4c:	0a12      	lsrs	r2, r2, #8
 8001e4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
    break;
 8001e58:	e00c      	b.n	8001e74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e64:	68d2      	ldr	r2, [r2, #12]
 8001e66:	0a12      	lsrs	r2, r2, #8
 8001e68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	617b      	str	r3, [r7, #20]
    break;
 8001e72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0e5b      	lsrs	r3, r3, #25
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	371c      	adds	r7, #28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	007a1200 	.word	0x007a1200
 8001ea4:	00f42400 	.word	0x00f42400

08001ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 8098 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10d      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eda:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a39      	ldr	r2, [pc, #228]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efe:	f7fe fe71 	bl	8000be4 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f04:	e009      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f06:	f7fe fe6d 	bl	8000be4 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d902      	bls.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	74fb      	strb	r3, [r7, #19]
        break;
 8001f18:	e005      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f1a:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ef      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001f26:	7cfb      	ldrb	r3, [r7, #19]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d159      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01e      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d019      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f54:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f74:	4a18      	ldr	r2, [pc, #96]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d016      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7fe fe2d 	bl	8000be4 <HAL_GetTick>
 8001f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fe29 	bl	8000be4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d902      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa4:	e006      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0ec      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001fb4:	7cfb      	ldrb	r3, [r7, #19]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	74bb      	strb	r3, [r7, #18]
 8001fd6:	e005      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7c7b      	ldrb	r3, [r7, #17]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4ba6      	ldr	r3, [pc, #664]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4aa5      	ldr	r2, [pc, #660]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002002:	4ba0      	ldr	r3, [pc, #640]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	499c      	ldr	r1, [pc, #624]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002024:	4b97      	ldr	r3, [pc, #604]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4994      	ldr	r1, [pc, #592]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002046:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	498b      	ldr	r1, [pc, #556]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002068:	4b86      	ldr	r3, [pc, #536]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4983      	ldr	r1, [pc, #524]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0320 	and.w	r3, r3, #32
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800208a:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	497a      	ldr	r1, [pc, #488]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b75      	ldr	r3, [pc, #468]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	4972      	ldr	r1, [pc, #456]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	4969      	ldr	r1, [pc, #420]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020f0:	4b64      	ldr	r3, [pc, #400]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4961      	ldr	r1, [pc, #388]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002118:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	4958      	ldr	r1, [pc, #352]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002142:	4950      	ldr	r1, [pc, #320]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002152:	d105      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4a4a      	ldr	r2, [pc, #296]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800215e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002168:	2b00      	cmp	r3, #0
 800216a:	d015      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800216c:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	4942      	ldr	r1, [pc, #264]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800218a:	d105      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218c:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a3c      	ldr	r2, [pc, #240]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002196:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d015      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80021a4:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021aa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4934      	ldr	r1, [pc, #208]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c2:	d105      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d015      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021dc:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ea:	4926      	ldr	r1, [pc, #152]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a20      	ldr	r2, [pc, #128]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002206:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002222:	4918      	ldr	r1, [pc, #96]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002232:	d105      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800223e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d015      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002252:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	490a      	ldr	r1, [pc, #40]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002266:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800226a:	d105      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800226c:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002276:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002278:	7cbb      	ldrb	r3, [r7, #18]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000

08002288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e042      	b.n	8002320 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d106      	bne.n	80022b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe fa93 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2224      	movs	r2, #36	@ 0x24
 80022b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 ff30 	bl	8003138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 fc61 	bl	8002ba0 <UART_SetConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e01b      	b.n	8002320 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002306:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 ffaf 	bl	800327c <UART_CheckIdleState>
 800231e:	4603      	mov	r3, r0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	2b20      	cmp	r3, #32
 8002340:	d17b      	bne.n	800243a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <HAL_UART_Transmit+0x26>
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e074      	b.n	800243c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2221      	movs	r2, #33	@ 0x21
 800235e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002362:	f7fe fc3f 	bl	8000be4 <HAL_GetTick>
 8002366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	88fa      	ldrh	r2, [r7, #6]
 800236c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002380:	d108      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e003      	b.n	800239c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800239c:	e030      	b.n	8002400 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2200      	movs	r2, #0
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f001 f811 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e03d      	b.n	800243c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	3302      	adds	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
 80023dc:	e007      	b.n	80023ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	3301      	adds	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3b01      	subs	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1c8      	bne.n	800239e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2200      	movs	r2, #0
 8002414:	2140      	movs	r1, #64	@ 0x40
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 ffda 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2220      	movs	r2, #32
 8002426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e006      	b.n	800243c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2220      	movs	r2, #32
 8002432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
  }
}
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	@ 0x28
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002458:	2b20      	cmp	r3, #32
 800245a:	d137      	bne.n	80024cc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_UART_Receive_IT+0x24>
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e030      	b.n	80024ce <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_UART_Receive_IT+0x94>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01f      	beq.n	80024bc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d018      	beq.n	80024bc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	e853 3f00 	ldrex	r3, [r3]
 8002496:	613b      	str	r3, [r7, #16]
   return(result);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	461a      	mov	r2, r3
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ac:	69f9      	ldr	r1, [r7, #28]
 80024ae:	6a3a      	ldr	r2, [r7, #32]
 80024b0:	e841 2300 	strex	r3, r2, [r1]
 80024b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e6      	bne.n	800248a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	461a      	mov	r2, r3
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fff2 	bl	80034ac <UART_Start_Receive_IT>
 80024c8:	4603      	mov	r3, r0
 80024ca:	e000      	b.n	80024ce <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3728      	adds	r7, #40	@ 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40008000 	.word	0x40008000

080024dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b0ba      	sub	sp, #232	@ 0xe8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002506:	f640 030f 	movw	r3, #2063	@ 0x80f
 800250a:	4013      	ands	r3, r2
 800250c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11b      	bne.n	8002550 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8300 	beq.w	8002b46 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
      }
      return;
 800254e:	e2fa      	b.n	8002b46 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8123 	beq.w	80027a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800255a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800255e:	4b8d      	ldr	r3, [pc, #564]	@ (8002794 <HAL_UART_IRQHandler+0x2b8>)
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800256a:	4b8b      	ldr	r3, [pc, #556]	@ (8002798 <HAL_UART_IRQHandler+0x2bc>)
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8116 	beq.w	80027a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d011      	beq.n	80025a4 <HAL_UART_IRQHandler+0xc8>
 8002580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	f043 0201 	orr.w	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_UART_IRQHandler+0xf8>
 80025b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2202      	movs	r2, #2
 80025c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d011      	beq.n	8002604 <HAL_UART_IRQHandler+0x128>
 80025e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2204      	movs	r2, #4
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f043 0202 	orr.w	r2, r3, #2
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002608:	f003 0308 	and.w	r3, r3, #8
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b00      	cmp	r3, #0
 800261a:	d105      	bne.n	8002628 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800261c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002620:	4b5c      	ldr	r3, [pc, #368]	@ (8002794 <HAL_UART_IRQHandler+0x2b8>)
 8002622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2208      	movs	r2, #8
 800262e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	f043 0208 	orr.w	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002648:	2b00      	cmp	r3, #0
 800264a:	d012      	beq.n	8002672 <HAL_UART_IRQHandler+0x196>
 800264c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00c      	beq.n	8002672 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8266 	beq.w	8002b4a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002682:	f003 0320 	and.w	r3, r3, #32
 8002686:	2b00      	cmp	r3, #0
 8002688:	d013      	beq.n	80026b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800268e:	f003 0320 	and.w	r3, r3, #32
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	2b40      	cmp	r3, #64	@ 0x40
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80026ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d054      	beq.n	8002780 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f001 f80a 	bl	80036f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e6:	2b40      	cmp	r3, #64	@ 0x40
 80026e8:	d146      	bne.n	8002778 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3308      	adds	r3, #8
 80026f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	3308      	adds	r3, #8
 8002712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800271a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800272e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1d9      	bne.n	80026ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002746:	4a15      	ldr	r2, [pc, #84]	@ (800279c <HAL_UART_IRQHandler+0x2c0>)
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fbdd 	bl	8000f10 <HAL_DMA_Abort_IT>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800276a:	4610      	mov	r0, r2
 800276c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800276e:	e00f      	b.n	8002790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f9ff 	bl	8002b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002776:	e00b      	b.n	8002790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f9fb 	bl	8002b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800277e:	e007      	b.n	8002790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f9f7 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800278e:	e1dc      	b.n	8002b4a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	bf00      	nop
    return;
 8002792:	e1da      	b.n	8002b4a <HAL_UART_IRQHandler+0x66e>
 8002794:	10000001 	.word	0x10000001
 8002798:	04000120 	.word	0x04000120
 800279c:	080037bd 	.word	0x080037bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	f040 8170 	bne.w	8002a8a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ae:	f003 0310 	and.w	r3, r3, #16
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 8169 	beq.w	8002a8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 8162 	beq.w	8002a8a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2210      	movs	r2, #16
 80027cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	2b40      	cmp	r3, #64	@ 0x40
 80027da:	f040 80d8 	bne.w	800298e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80af 	beq.w	8002954 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002800:	429a      	cmp	r2, r3
 8002802:	f080 80a7 	bcs.w	8002954 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800280c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 8087 	bne.w	8002932 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002838:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800283c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002840:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800284e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002852:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002856:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800285a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1da      	bne.n	8002824 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3308      	adds	r3, #8
 8002874:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800287e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3308      	adds	r3, #8
 800288e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002892:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002896:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002898:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800289a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80028a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1e1      	bne.n	800286e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3308      	adds	r3, #8
 80028b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80028ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3308      	adds	r3, #8
 80028ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80028ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80028d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80028d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80028d6:	e841 2300 	strex	r3, r2, [r1]
 80028da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80028dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1e3      	bne.n	80028aa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002900:	f023 0310 	bic.w	r3, r3, #16
 8002904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002912:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002914:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002918:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e4      	bne.n	80028f0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fa96 	bl	8000e5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002944:	b29b      	uxth	r3, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	b29b      	uxth	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f91b 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002952:	e0fc      	b.n	8002b4e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800295a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800295e:	429a      	cmp	r2, r3
 8002960:	f040 80f5 	bne.w	8002b4e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b20      	cmp	r3, #32
 8002974:	f040 80eb 	bne.w	8002b4e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8fe 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
      return;
 800298c:	e0df      	b.n	8002b4e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800299a:	b29b      	uxth	r3, r3
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 80d1 	beq.w	8002b52 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80029b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80cc 	beq.w	8002b52 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80029c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80029dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80029de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80029e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029e4:	e841 2300 	strex	r3, r2, [r1]
 80029e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80029ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e4      	bne.n	80029ba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3308      	adds	r3, #8
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	623b      	str	r3, [r7, #32]
   return(result);
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3308      	adds	r3, #8
 8002a14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a18:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a20:	e841 2300 	strex	r3, r2, [r1]
 8002a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1e1      	bne.n	80029f0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0310 	bic.w	r3, r3, #16
 8002a54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e4      	bne.n	8002a40 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f880 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a88:	e063      	b.n	8002b52 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00e      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x5d8>
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002aaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f001 fbe3 	bl	8004278 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ab2:	e051      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d014      	beq.n	8002aea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ad0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d03a      	beq.n	8002b56 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
    }
    return;
 8002ae8:	e035      	b.n	8002b56 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_UART_IRQHandler+0x62e>
 8002af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d003      	beq.n	8002b0a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fe6c 	bl	80037e0 <UART_EndTransmit_IT>
    return;
 8002b08:	e026      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d009      	beq.n	8002b2a <HAL_UART_IRQHandler+0x64e>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f001 fbbc 	bl	80042a0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b28:	e016      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <HAL_UART_IRQHandler+0x67c>
 8002b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0c      	bge.n	8002b58 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f001 fba4 	bl	800428c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b44:	e008      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b46:	bf00      	nop
 8002b48:	e006      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
    return;
 8002b4a:	bf00      	nop
 8002b4c:	e004      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b4e:	bf00      	nop
 8002b50:	e002      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002b52:	bf00      	nop
 8002b54:	e000      	b.n	8002b58 <HAL_UART_IRQHandler+0x67c>
    return;
 8002b56:	bf00      	nop
  }
}
 8002b58:	37e8      	adds	r7, #232	@ 0xe8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop

08002b60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba4:	b08c      	sub	sp, #48	@ 0x30
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4bab      	ldr	r3, [pc, #684]	@ (8002e7c <UART_SetConfig+0x2dc>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4aa0      	ldr	r2, [pc, #640]	@ (8002e80 <UART_SetConfig+0x2e0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002c16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	f023 010f 	bic.w	r1, r3, #15
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a91      	ldr	r2, [pc, #580]	@ (8002e84 <UART_SetConfig+0x2e4>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d125      	bne.n	8002c90 <UART_SetConfig+0xf0>
 8002c44:	4b90      	ldr	r3, [pc, #576]	@ (8002e88 <UART_SetConfig+0x2e8>)
 8002c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d81a      	bhi.n	8002c88 <UART_SetConfig+0xe8>
 8002c52:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <UART_SetConfig+0xb8>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c79 	.word	0x08002c79
 8002c60:	08002c71 	.word	0x08002c71
 8002c64:	08002c81 	.word	0x08002c81
 8002c68:	2301      	movs	r3, #1
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6e:	e0d6      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c76:	e0d2      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7e:	e0ce      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c86:	e0ca      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8e:	e0c6      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a7d      	ldr	r2, [pc, #500]	@ (8002e8c <UART_SetConfig+0x2ec>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d138      	bne.n	8002d0c <UART_SetConfig+0x16c>
 8002c9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e88 <UART_SetConfig+0x2e8>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d82d      	bhi.n	8002d04 <UART_SetConfig+0x164>
 8002ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <UART_SetConfig+0x110>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002ce5 	.word	0x08002ce5
 8002cb4:	08002d05 	.word	0x08002d05
 8002cb8:	08002d05 	.word	0x08002d05
 8002cbc:	08002d05 	.word	0x08002d05
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d05 	.word	0x08002d05
 8002cc8:	08002d05 	.word	0x08002d05
 8002ccc:	08002d05 	.word	0x08002d05
 8002cd0:	08002ced 	.word	0x08002ced
 8002cd4:	08002d05 	.word	0x08002d05
 8002cd8:	08002d05 	.word	0x08002d05
 8002cdc:	08002d05 	.word	0x08002d05
 8002ce0:	08002cfd 	.word	0x08002cfd
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cea:	e098      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002cec:	2302      	movs	r3, #2
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf2:	e094      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfa:	e090      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d02:	e08c      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d04:	2310      	movs	r3, #16
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0a:	e088      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5f      	ldr	r2, [pc, #380]	@ (8002e90 <UART_SetConfig+0x2f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d125      	bne.n	8002d62 <UART_SetConfig+0x1c2>
 8002d16:	4b5c      	ldr	r3, [pc, #368]	@ (8002e88 <UART_SetConfig+0x2e8>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d20:	2b30      	cmp	r3, #48	@ 0x30
 8002d22:	d016      	beq.n	8002d52 <UART_SetConfig+0x1b2>
 8002d24:	2b30      	cmp	r3, #48	@ 0x30
 8002d26:	d818      	bhi.n	8002d5a <UART_SetConfig+0x1ba>
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d00a      	beq.n	8002d42 <UART_SetConfig+0x1a2>
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d814      	bhi.n	8002d5a <UART_SetConfig+0x1ba>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <UART_SetConfig+0x19a>
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d008      	beq.n	8002d4a <UART_SetConfig+0x1aa>
 8002d38:	e00f      	b.n	8002d5a <UART_SetConfig+0x1ba>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d40:	e06d      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d42:	2302      	movs	r3, #2
 8002d44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d48:	e069      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d50:	e065      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d52:	2308      	movs	r3, #8
 8002d54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d58:	e061      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d60:	e05d      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a4b      	ldr	r2, [pc, #300]	@ (8002e94 <UART_SetConfig+0x2f4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d125      	bne.n	8002db8 <UART_SetConfig+0x218>
 8002d6c:	4b46      	ldr	r3, [pc, #280]	@ (8002e88 <UART_SetConfig+0x2e8>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d76:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d78:	d016      	beq.n	8002da8 <UART_SetConfig+0x208>
 8002d7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d7c:	d818      	bhi.n	8002db0 <UART_SetConfig+0x210>
 8002d7e:	2b80      	cmp	r3, #128	@ 0x80
 8002d80:	d00a      	beq.n	8002d98 <UART_SetConfig+0x1f8>
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	d814      	bhi.n	8002db0 <UART_SetConfig+0x210>
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d002      	beq.n	8002d90 <UART_SetConfig+0x1f0>
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d008      	beq.n	8002da0 <UART_SetConfig+0x200>
 8002d8e:	e00f      	b.n	8002db0 <UART_SetConfig+0x210>
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d96:	e042      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d9e:	e03e      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da6:	e03a      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dae:	e036      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db6:	e032      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a30      	ldr	r2, [pc, #192]	@ (8002e80 <UART_SetConfig+0x2e0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12a      	bne.n	8002e18 <UART_SetConfig+0x278>
 8002dc2:	4b31      	ldr	r3, [pc, #196]	@ (8002e88 <UART_SetConfig+0x2e8>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002dcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dd0:	d01a      	beq.n	8002e08 <UART_SetConfig+0x268>
 8002dd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dd6:	d81b      	bhi.n	8002e10 <UART_SetConfig+0x270>
 8002dd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ddc:	d00c      	beq.n	8002df8 <UART_SetConfig+0x258>
 8002dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002de2:	d815      	bhi.n	8002e10 <UART_SetConfig+0x270>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <UART_SetConfig+0x250>
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dec:	d008      	beq.n	8002e00 <UART_SetConfig+0x260>
 8002dee:	e00f      	b.n	8002e10 <UART_SetConfig+0x270>
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002df6:	e012      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfe:	e00e      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002e00:	2304      	movs	r3, #4
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e06:	e00a      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002e08:	2308      	movs	r3, #8
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0e:	e006      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002e10:	2310      	movs	r3, #16
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e16:	e002      	b.n	8002e1e <UART_SetConfig+0x27e>
 8002e18:	2310      	movs	r3, #16
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a17      	ldr	r2, [pc, #92]	@ (8002e80 <UART_SetConfig+0x2e0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	f040 80a8 	bne.w	8002f7a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d834      	bhi.n	8002e9c <UART_SetConfig+0x2fc>
 8002e32:	a201      	add	r2, pc, #4	@ (adr r2, 8002e38 <UART_SetConfig+0x298>)
 8002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e38:	08002e5d 	.word	0x08002e5d
 8002e3c:	08002e9d 	.word	0x08002e9d
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002e9d 	.word	0x08002e9d
 8002e48:	08002e6b 	.word	0x08002e6b
 8002e4c:	08002e9d 	.word	0x08002e9d
 8002e50:	08002e9d 	.word	0x08002e9d
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e5c:	f7fe ffb2 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e62:	e021      	b.n	8002ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <UART_SetConfig+0x2f8>)
 8002e66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e68:	e01e      	b.n	8002ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7fe ff3d 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002e6e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e70:	e01a      	b.n	8002ea8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e78:	e016      	b.n	8002ea8 <UART_SetConfig+0x308>
 8002e7a:	bf00      	nop
 8002e7c:	cfff69f3 	.word	0xcfff69f3
 8002e80:	40008000 	.word	0x40008000
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40004400 	.word	0x40004400
 8002e90:	40004800 	.word	0x40004800
 8002e94:	40004c00 	.word	0x40004c00
 8002e98:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 812a 	beq.w	8003104 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	4a9e      	ldr	r2, [pc, #632]	@ (8003130 <UART_SetConfig+0x590>)
 8002eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d305      	bcc.n	8002ee0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d903      	bls.n	8002ee8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002ee6:	e10d      	b.n	8003104 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eea:	2200      	movs	r2, #0
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	60fa      	str	r2, [r7, #12]
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	4a8e      	ldr	r2, [pc, #568]	@ (8003130 <UART_SetConfig+0x590>)
 8002ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2200      	movs	r2, #0
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0a:	f7fd f9d9 	bl	80002c0 <__aeabi_uldivmod>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	020b      	lsls	r3, r1, #8
 8002f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f24:	0202      	lsls	r2, r0, #8
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	6849      	ldr	r1, [r1, #4]
 8002f2a:	0849      	lsrs	r1, r1, #1
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	460c      	mov	r4, r1
 8002f30:	4605      	mov	r5, r0
 8002f32:	eb12 0804 	adds.w	r8, r2, r4
 8002f36:	eb43 0905 	adc.w	r9, r3, r5
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	469a      	mov	sl, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	4652      	mov	r2, sl
 8002f46:	465b      	mov	r3, fp
 8002f48:	4640      	mov	r0, r8
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	f7fd f9b8 	bl	80002c0 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4613      	mov	r3, r2
 8002f56:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f5e:	d308      	bcc.n	8002f72 <UART_SetConfig+0x3d2>
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f66:	d204      	bcs.n	8002f72 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	60da      	str	r2, [r3, #12]
 8002f70:	e0c8      	b.n	8003104 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f78:	e0c4      	b.n	8003104 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f82:	d167      	bne.n	8003054 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d828      	bhi.n	8002fde <UART_SetConfig+0x43e>
 8002f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f94 <UART_SetConfig+0x3f4>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fc1 	.word	0x08002fc1
 8002f9c:	08002fc9 	.word	0x08002fc9
 8002fa0:	08002fdf 	.word	0x08002fdf
 8002fa4:	08002fcf 	.word	0x08002fcf
 8002fa8:	08002fdf 	.word	0x08002fdf
 8002fac:	08002fdf 	.word	0x08002fdf
 8002fb0:	08002fdf 	.word	0x08002fdf
 8002fb4:	08002fd7 	.word	0x08002fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7fe ff04 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002fbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fbe:	e014      	b.n	8002fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fc0:	f7fe ff16 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002fc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fc6:	e010      	b.n	8002fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8003134 <UART_SetConfig+0x594>)
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fcc:	e00d      	b.n	8002fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fce:	f7fe fe8b 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8002fd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002fd4:	e009      	b.n	8002fea <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002fdc:	e005      	b.n	8002fea <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002fe8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8089 	beq.w	8003104 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8003130 <UART_SetConfig+0x590>)
 8002ff8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	fbb3 f3f2 	udiv	r3, r3, r2
 8003004:	005a      	lsls	r2, r3, #1
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	085b      	lsrs	r3, r3, #1
 800300c:	441a      	add	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	2b0f      	cmp	r3, #15
 800301c:	d916      	bls.n	800304c <UART_SetConfig+0x4ac>
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003024:	d212      	bcs.n	800304c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	b29b      	uxth	r3, r3
 800302a:	f023 030f 	bic.w	r3, r3, #15
 800302e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	085b      	lsrs	r3, r3, #1
 8003034:	b29b      	uxth	r3, r3
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	b29a      	uxth	r2, r3
 800303c:	8bfb      	ldrh	r3, [r7, #30]
 800303e:	4313      	orrs	r3, r2
 8003040:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	8bfa      	ldrh	r2, [r7, #30]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e05b      	b.n	8003104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003052:	e057      	b.n	8003104 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003054:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003058:	2b08      	cmp	r3, #8
 800305a:	d828      	bhi.n	80030ae <UART_SetConfig+0x50e>
 800305c:	a201      	add	r2, pc, #4	@ (adr r2, 8003064 <UART_SetConfig+0x4c4>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003089 	.word	0x08003089
 8003068:	08003091 	.word	0x08003091
 800306c:	08003099 	.word	0x08003099
 8003070:	080030af 	.word	0x080030af
 8003074:	0800309f 	.word	0x0800309f
 8003078:	080030af 	.word	0x080030af
 800307c:	080030af 	.word	0x080030af
 8003080:	080030af 	.word	0x080030af
 8003084:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003088:	f7fe fe9c 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 800308c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800308e:	e014      	b.n	80030ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7fe feae 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8003094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003096:	e010      	b.n	80030ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <UART_SetConfig+0x594>)
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800309c:	e00d      	b.n	80030ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7fe fe23 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 80030a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a4:	e009      	b.n	80030ba <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030ac:	e005      	b.n	80030ba <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030b8:	bf00      	nop
    }

    if (pclk != 0U)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d021      	beq.n	8003104 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <UART_SetConfig+0x590>)
 80030c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ca:	461a      	mov	r2, r3
 80030cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	441a      	add	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b0f      	cmp	r3, #15
 80030e8:	d909      	bls.n	80030fe <UART_SetConfig+0x55e>
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030f0:	d205      	bcs.n	80030fe <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	e002      	b.n	8003104 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2201      	movs	r2, #1
 8003108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2201      	movs	r2, #1
 8003110:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003120:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003124:	4618      	mov	r0, r3
 8003126:	3730      	adds	r7, #48	@ 0x30
 8003128:	46bd      	mov	sp, r7
 800312a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312e:	bf00      	nop
 8003130:	0800538c 	.word	0x0800538c
 8003134:	00f42400 	.word	0x00f42400

08003138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00a      	beq.n	8003184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01a      	beq.n	800324e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003236:	d10a      	bne.n	800324e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  }
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b098      	sub	sp, #96	@ 0x60
 8003280:	af02      	add	r7, sp, #8
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800328c:	f7fd fcaa 	bl	8000be4 <HAL_GetTick>
 8003290:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0308 	and.w	r3, r3, #8
 800329c:	2b08      	cmp	r3, #8
 800329e:	d12f      	bne.n	8003300 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a8:	2200      	movs	r2, #0
 80032aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f88e 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d022      	beq.n	8003300 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c2:	e853 3f00 	ldrex	r3, [r3]
 80032c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80032de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032e0:	e841 2300 	strex	r3, r2, [r1]
 80032e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80032e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1e6      	bne.n	80032ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e063      	b.n	80033c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d149      	bne.n	80033a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f857 	bl	80033d0 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d03c      	beq.n	80033a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	623b      	str	r3, [r7, #32]
   return(result);
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800333c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003346:	633b      	str	r3, [r7, #48]	@ 0x30
 8003348:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800334c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e6      	bne.n	8003328 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	60fb      	str	r3, [r7, #12]
   return(result);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3308      	adds	r3, #8
 8003378:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800337a:	61fa      	str	r2, [r7, #28]
 800337c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	69b9      	ldr	r1, [r7, #24]
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	617b      	str	r3, [r7, #20]
   return(result);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e012      	b.n	80033c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3758      	adds	r7, #88	@ 0x58
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	4613      	mov	r3, r2
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e0:	e04f      	b.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e8:	d04b      	beq.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ea:	f7fd fbfb 	bl	8000be4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d302      	bcc.n	8003400 <UART_WaitOnFlagUntilTimeout+0x30>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e04e      	b.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b00      	cmp	r3, #0
 8003410:	d037      	beq.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b80      	cmp	r3, #128	@ 0x80
 8003416:	d034      	beq.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b40      	cmp	r3, #64	@ 0x40
 800341c:	d031      	beq.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d110      	bne.n	800344e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2208      	movs	r2, #8
 8003432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f000 f95b 	bl	80036f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2208      	movs	r2, #8
 800343e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e029      	b.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003458:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800345c:	d111      	bne.n	8003482 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f941 	bl	80036f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2220      	movs	r2, #32
 8003472:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e00f      	b.n	80034a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4013      	ands	r3, r2
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	bf0c      	ite	eq
 8003492:	2301      	moveq	r3, #1
 8003494:	2300      	movne	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	461a      	mov	r2, r3
 800349a:	79fb      	ldrb	r3, [r7, #7]
 800349c:	429a      	cmp	r2, r3
 800349e:	d0a0      	beq.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b0a3      	sub	sp, #140	@ 0x8c
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034de:	d10e      	bne.n	80034fe <UART_Start_Receive_IT+0x52>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <UART_Start_Receive_IT+0x48>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034f2:	e02d      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	@ 0xff
 80034f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034fc:	e028      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <UART_Start_Receive_IT+0x76>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d104      	bne.n	8003518 <UART_Start_Receive_IT+0x6c>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	22ff      	movs	r2, #255	@ 0xff
 8003512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003516:	e01b      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	227f      	movs	r2, #127	@ 0x7f
 800351c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003520:	e016      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800352a:	d10d      	bne.n	8003548 <UART_Start_Receive_IT+0x9c>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d104      	bne.n	800353e <UART_Start_Receive_IT+0x92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	227f      	movs	r2, #127	@ 0x7f
 8003538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800353c:	e008      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	223f      	movs	r2, #63	@ 0x3f
 8003542:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003546:	e003      	b.n	8003550 <UART_Start_Receive_IT+0xa4>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2222      	movs	r2, #34	@ 0x22
 800355c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003570:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003584:	673a      	str	r2, [r7, #112]	@ 0x70
 8003586:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800358a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e3      	bne.n	8003560 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035a0:	d14f      	bne.n	8003642 <UART_Start_Receive_IT+0x196>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80035a8:	88fa      	ldrh	r2, [r7, #6]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d349      	bcc.n	8003642 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b6:	d107      	bne.n	80035c8 <UART_Start_Receive_IT+0x11c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a47      	ldr	r2, [pc, #284]	@ (80036e0 <UART_Start_Receive_IT+0x234>)
 80035c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80035c6:	e002      	b.n	80035ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a46      	ldr	r2, [pc, #280]	@ (80036e4 <UART_Start_Receive_IT+0x238>)
 80035cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01a      	beq.n	800360c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035de:	e853 3f00 	ldrex	r3, [r3]
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80035e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80035fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8003606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e4      	bne.n	80035d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	3308      	adds	r3, #8
 8003612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003616:	e853 3f00 	ldrex	r3, [r3]
 800361a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800361c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003622:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800362c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800362e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003630:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003634:	e841 2300 	strex	r3, r2, [r1]
 8003638:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800363a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e5      	bne.n	800360c <UART_Start_Receive_IT+0x160>
 8003640:	e046      	b.n	80036d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364a:	d107      	bne.n	800365c <UART_Start_Receive_IT+0x1b0>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4a24      	ldr	r2, [pc, #144]	@ (80036e8 <UART_Start_Receive_IT+0x23c>)
 8003658:	675a      	str	r2, [r3, #116]	@ 0x74
 800365a:	e002      	b.n	8003662 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a23      	ldr	r2, [pc, #140]	@ (80036ec <UART_Start_Receive_IT+0x240>)
 8003660:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d019      	beq.n	800369e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800367e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003688:	637b      	str	r3, [r7, #52]	@ 0x34
 800368a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800368e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e6      	bne.n	800366a <UART_Start_Receive_IT+0x1be>
 800369c:	e018      	b.n	80036d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	613b      	str	r3, [r7, #16]
   return(result);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f043 0320 	orr.w	r3, r3, #32
 80036b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036bc:	623b      	str	r3, [r7, #32]
 80036be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	69f9      	ldr	r1, [r7, #28]
 80036c2:	6a3a      	ldr	r2, [r7, #32]
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	378c      	adds	r7, #140	@ 0x8c
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	08003f0d 	.word	0x08003f0d
 80036e4:	08003ba9 	.word	0x08003ba9
 80036e8:	080039f1 	.word	0x080039f1
 80036ec:	08003839 	.word	0x08003839

080036f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b095      	sub	sp, #84	@ 0x54
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40
 8003718:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800371c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e6      	bne.n	80036f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3308      	adds	r3, #8
 8003730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	61fb      	str	r3, [r7, #28]
   return(result);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3308      	adds	r3, #8
 800374c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800374e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e3      	bne.n	800372a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d118      	bne.n	800379c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	60bb      	str	r3, [r7, #8]
   return(result);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f023 0310 	bic.w	r3, r3, #16
 800377e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6979      	ldr	r1, [r7, #20]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	613b      	str	r3, [r7, #16]
   return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e6      	bne.n	800376a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037b0:	bf00      	nop
 80037b2:	3754      	adds	r7, #84	@ 0x54
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff f9ce 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037d8:	bf00      	nop
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	613b      	str	r3, [r7, #16]
   return(result);
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e6      	bne.n	80037e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff f999 	bl	8002b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382e:	bf00      	nop
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09c      	sub	sp, #112	@ 0x70
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003846:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003850:	2b22      	cmp	r3, #34	@ 0x22
 8003852:	f040 80be 	bne.w	80039d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003860:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800386a:	b2da      	uxtb	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	400a      	ands	r2, r1
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 80a1 	bne.w	80039e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a8:	e853 3f00 	ldrex	r3, [r3]
 80038ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e6      	bne.n	80038a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3308      	adds	r3, #8
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3308      	adds	r3, #8
 80038f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80038f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038fa:	e841 2300 	strex	r3, r2, [r1]
 80038fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e5      	bne.n	80038d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a33      	ldr	r2, [pc, #204]	@ (80039ec <UART_RxISR_8BIT+0x1b4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01f      	beq.n	8003964 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d018      	beq.n	8003964 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	623b      	str	r3, [r7, #32]
   return(result);
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003946:	663b      	str	r3, [r7, #96]	@ 0x60
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003950:	633b      	str	r3, [r7, #48]	@ 0x30
 8003952:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800395e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e6      	bne.n	8003932 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d12e      	bne.n	80039ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	e853 3f00 	ldrex	r3, [r3]
 800397e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	617b      	str	r3, [r7, #20]
   return(result);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e6      	bne.n	8003972 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f003 0310 	and.w	r3, r3, #16
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d103      	bne.n	80039ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff f8e0 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039c8:	e00b      	b.n	80039e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fc feb8 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 80039d0:	e007      	b.n	80039e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f042 0208 	orr.w	r2, r2, #8
 80039e0:	619a      	str	r2, [r3, #24]
}
 80039e2:	bf00      	nop
 80039e4:	3770      	adds	r7, #112	@ 0x70
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40008000 	.word	0x40008000

080039f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b09c      	sub	sp, #112	@ 0x70
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80039fe:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a08:	2b22      	cmp	r3, #34	@ 0x22
 8003a0a:	f040 80be 	bne.w	8003b8a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a1e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003a22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a26:	4013      	ands	r3, r2
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a2c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	1c9a      	adds	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80a1 	bne.w	8003b9a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6c:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a76:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a78:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003aaa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a33      	ldr	r2, [pc, #204]	@ (8003ba4 <UART_RxISR_16BIT+0x1b4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d01f      	beq.n	8003b1c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d018      	beq.n	8003b1c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b0a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d12e      	bne.n	8003b82 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	e853 3f00 	ldrex	r3, [r3]
 8003b36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f023 0310 	bic.w	r3, r3, #16
 8003b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	461a      	mov	r2, r3
 8003b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4c:	6979      	ldr	r1, [r7, #20]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	e841 2300 	strex	r3, r2, [r1]
 8003b54:	613b      	str	r3, [r7, #16]
   return(result);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e6      	bne.n	8003b2a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b10      	cmp	r3, #16
 8003b68:	d103      	bne.n	8003b72 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2210      	movs	r2, #16
 8003b70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff f804 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b80:	e00b      	b.n	8003b9a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fc fddc 	bl	8000740 <HAL_UART_RxCpltCallback>
}
 8003b88:	e007      	b.n	8003b9a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699a      	ldr	r2, [r3, #24]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0208 	orr.w	r2, r2, #8
 8003b98:	619a      	str	r2, [r3, #24]
}
 8003b9a:	bf00      	nop
 8003b9c:	3770      	adds	r7, #112	@ 0x70
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40008000 	.word	0x40008000

08003ba8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b0ac      	sub	sp, #176	@ 0xb0
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003bb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bde:	2b22      	cmp	r3, #34	@ 0x22
 8003be0:	f040 8183 	bne.w	8003eea <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003bea:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003bee:	e126      	b.n	8003e3e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bfa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003bfe:	b2d9      	uxtb	r1, r3
 8003c00:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	400a      	ands	r2, r1
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003c36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d053      	beq.n	8003cea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d011      	beq.n	8003c72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d011      	beq.n	8003cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc8:	f043 0202 	orr.w	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fe ff49 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f040 80a3 	bne.w	8003e3e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d00:	e853 3f00 	ldrex	r3, [r3]
 8003d04:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d1c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003d20:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e4      	bne.n	8003cf8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003d3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	3308      	adds	r3, #8
 8003d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d56:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003d58:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003d5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003d64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e1      	bne.n	8003d2e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a60      	ldr	r2, [pc, #384]	@ (8003f04 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d021      	beq.n	8003dcc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01a      	beq.n	8003dcc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003daa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003db8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003dba:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003dbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e4      	bne.n	8003d96 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d130      	bne.n	8003e36 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dea:	f023 0310 	bic.w	r3, r3, #16
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003dfe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e4      	bne.n	8003dda <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 0310 	and.w	r3, r3, #16
 8003e1a:	2b10      	cmp	r3, #16
 8003e1c:	d103      	bne.n	8003e26 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2210      	movs	r2, #16
 8003e24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fe feaa 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003e34:	e00e      	b.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fc82 	bl	8000740 <HAL_UART_RxCpltCallback>
        break;
 8003e3c:	e00a      	b.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e3e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8003e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f47f aece 	bne.w	8003bf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e5a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003e5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d049      	beq.n	8003efa <UART_RxISR_8BIT_FIFOEN+0x352>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003e6c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d242      	bcs.n	8003efa <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003e98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e3      	bne.n	8003e74 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8003eb0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f043 0320 	orr.w	r3, r3, #32
 8003ec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e4      	bne.n	8003eb2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ee8:	e007      	b.n	8003efa <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	699a      	ldr	r2, [r3, #24]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0208 	orr.w	r2, r2, #8
 8003ef8:	619a      	str	r2, [r3, #24]
}
 8003efa:	bf00      	nop
 8003efc:	37b0      	adds	r7, #176	@ 0xb0
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40008000 	.word	0x40008000
 8003f08:	08003839 	.word	0x08003839

08003f0c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b0ae      	sub	sp, #184	@ 0xb8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003f1a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f42:	2b22      	cmp	r3, #34	@ 0x22
 8003f44:	f040 8187 	bne.w	8004256 <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003f4e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f52:	e12a      	b.n	80041aa <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003f66:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8003f6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d053      	beq.n	8004052 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d011      	beq.n	8003fda <UART_RxISR_16BIT_FIFOEN+0xce>
 8003fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd0:	f043 0201 	orr.w	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d011      	beq.n	800400a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004000:	f043 0204 	orr.w	r2, r3, #4
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800400a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d011      	beq.n	800403a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8004016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2204      	movs	r2, #4
 8004028:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004030:	f043 0202 	orr.w	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fe fd95 	bl	8002b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	f040 80a5 	bne.w	80041aa <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004066:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004068:	e853 3f00 	ldrex	r3, [r3]
 800406c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800406e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004070:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004074:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004082:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004086:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800408a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800408e:	e841 2300 	strex	r3, r2, [r1]
 8004092:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004094:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1e2      	bne.n	8004060 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80040aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80040c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040ca:	e841 2300 	strex	r3, r2, [r1]
 80040ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e1      	bne.n	800409a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2220      	movs	r2, #32
 80040da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a60      	ldr	r2, [pc, #384]	@ (8004270 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d021      	beq.n	8004138 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01a      	beq.n	8004138 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004112:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004124:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004126:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800412a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e4      	bne.n	8004102 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d130      	bne.n	80041a2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004156:	f023 0310 	bic.w	r3, r3, #16
 800415a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004168:	647b      	str	r3, [r7, #68]	@ 0x44
 800416a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800416e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e4      	bne.n	8004146 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b10      	cmp	r3, #16
 8004188:	d103      	bne.n	8004192 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2210      	movs	r2, #16
 8004190:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fcf4 	bl	8002b88 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80041a0:	e00e      	b.n	80041c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f7fc facc 	bl	8000740 <HAL_UART_RxCpltCallback>
        break;
 80041a8:	e00a      	b.n	80041c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80041aa:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d006      	beq.n	80041c0 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80041b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f47f aeca 	bne.w	8003f54 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80041c6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80041ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d049      	beq.n	8004266 <UART_RxISR_16BIT_FIFOEN+0x35a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80041d8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80041dc:	429a      	cmp	r2, r3
 80041de:	d242      	bcs.n	8004266 <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	623b      	str	r3, [r7, #32]
   return(result);
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3308      	adds	r3, #8
 8004200:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8004204:	633a      	str	r2, [r7, #48]	@ 0x30
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800420a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e3      	bne.n	80041e0 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800421c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	60fb      	str	r3, [r7, #12]
   return(result);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	e841 2300 	strex	r3, r2, [r1]
 800424c:	617b      	str	r3, [r7, #20]
   return(result);
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1e4      	bne.n	800421e <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004254:	e007      	b.n	8004266 <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0208 	orr.w	r2, r2, #8
 8004264:	619a      	str	r2, [r3, #24]
}
 8004266:	bf00      	nop
 8004268:	37b8      	adds	r7, #184	@ 0xb8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40008000 	.word	0x40008000
 8004274:	080039f1 	.word	0x080039f1

08004278 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_UARTEx_DisableFifoMode+0x16>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e027      	b.n	800431a <HAL_UARTEx_DisableFifoMode+0x66>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2224      	movs	r2, #36	@ 0x24
 80042d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80042f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b084      	sub	sp, #16
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
 800432e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800433a:	2302      	movs	r3, #2
 800433c:	e02d      	b.n	800439a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	@ 0x24
 800434a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0201 	bic.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f850 	bl	8004420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e02d      	b.n	8004416 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2224      	movs	r2, #36	@ 0x24
 80043c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0201 	bic.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f812 	bl	8004420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800442c:	2b00      	cmp	r3, #0
 800442e:	d108      	bne.n	8004442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004440:	e031      	b.n	80044a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004442:	2308      	movs	r3, #8
 8004444:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004446:	2308      	movs	r3, #8
 8004448:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	0e5b      	lsrs	r3, r3, #25
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	0f5b      	lsrs	r3, r3, #29
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800446a:	7bbb      	ldrb	r3, [r7, #14]
 800446c:	7b3a      	ldrb	r2, [r7, #12]
 800446e:	4911      	ldr	r1, [pc, #68]	@ (80044b4 <UARTEx_SetNbDataToProcess+0x94>)
 8004470:	5c8a      	ldrb	r2, [r1, r2]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004476:	7b3a      	ldrb	r2, [r7, #12]
 8004478:	490f      	ldr	r1, [pc, #60]	@ (80044b8 <UARTEx_SetNbDataToProcess+0x98>)
 800447a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800447c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004480:	b29a      	uxth	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	7b7a      	ldrb	r2, [r7, #13]
 800448c:	4909      	ldr	r1, [pc, #36]	@ (80044b4 <UARTEx_SetNbDataToProcess+0x94>)
 800448e:	5c8a      	ldrb	r2, [r1, r2]
 8004490:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004494:	7b7a      	ldrb	r2, [r7, #13]
 8004496:	4908      	ldr	r1, [pc, #32]	@ (80044b8 <UARTEx_SetNbDataToProcess+0x98>)
 8004498:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800449a:	fb93 f3f2 	sdiv	r3, r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	080053a4 	.word	0x080053a4
 80044b8:	080053ac 	.word	0x080053ac

080044bc <__sflush_r>:
 80044bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044c4:	0716      	lsls	r6, r2, #28
 80044c6:	4605      	mov	r5, r0
 80044c8:	460c      	mov	r4, r1
 80044ca:	d454      	bmi.n	8004576 <__sflush_r+0xba>
 80044cc:	684b      	ldr	r3, [r1, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	dc02      	bgt.n	80044d8 <__sflush_r+0x1c>
 80044d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	dd48      	ble.n	800456a <__sflush_r+0xae>
 80044d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044da:	2e00      	cmp	r6, #0
 80044dc:	d045      	beq.n	800456a <__sflush_r+0xae>
 80044de:	2300      	movs	r3, #0
 80044e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044e4:	682f      	ldr	r7, [r5, #0]
 80044e6:	6a21      	ldr	r1, [r4, #32]
 80044e8:	602b      	str	r3, [r5, #0]
 80044ea:	d030      	beq.n	800454e <__sflush_r+0x92>
 80044ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044ee:	89a3      	ldrh	r3, [r4, #12]
 80044f0:	0759      	lsls	r1, r3, #29
 80044f2:	d505      	bpl.n	8004500 <__sflush_r+0x44>
 80044f4:	6863      	ldr	r3, [r4, #4]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044fa:	b10b      	cbz	r3, 8004500 <__sflush_r+0x44>
 80044fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044fe:	1ad2      	subs	r2, r2, r3
 8004500:	2300      	movs	r3, #0
 8004502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004504:	6a21      	ldr	r1, [r4, #32]
 8004506:	4628      	mov	r0, r5
 8004508:	47b0      	blx	r6
 800450a:	1c43      	adds	r3, r0, #1
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	d106      	bne.n	800451e <__sflush_r+0x62>
 8004510:	6829      	ldr	r1, [r5, #0]
 8004512:	291d      	cmp	r1, #29
 8004514:	d82b      	bhi.n	800456e <__sflush_r+0xb2>
 8004516:	4a2a      	ldr	r2, [pc, #168]	@ (80045c0 <__sflush_r+0x104>)
 8004518:	410a      	asrs	r2, r1
 800451a:	07d6      	lsls	r6, r2, #31
 800451c:	d427      	bmi.n	800456e <__sflush_r+0xb2>
 800451e:	2200      	movs	r2, #0
 8004520:	6062      	str	r2, [r4, #4]
 8004522:	04d9      	lsls	r1, r3, #19
 8004524:	6922      	ldr	r2, [r4, #16]
 8004526:	6022      	str	r2, [r4, #0]
 8004528:	d504      	bpl.n	8004534 <__sflush_r+0x78>
 800452a:	1c42      	adds	r2, r0, #1
 800452c:	d101      	bne.n	8004532 <__sflush_r+0x76>
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	b903      	cbnz	r3, 8004534 <__sflush_r+0x78>
 8004532:	6560      	str	r0, [r4, #84]	@ 0x54
 8004534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004536:	602f      	str	r7, [r5, #0]
 8004538:	b1b9      	cbz	r1, 800456a <__sflush_r+0xae>
 800453a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800453e:	4299      	cmp	r1, r3
 8004540:	d002      	beq.n	8004548 <__sflush_r+0x8c>
 8004542:	4628      	mov	r0, r5
 8004544:	f000 fa0e 	bl	8004964 <_free_r>
 8004548:	2300      	movs	r3, #0
 800454a:	6363      	str	r3, [r4, #52]	@ 0x34
 800454c:	e00d      	b.n	800456a <__sflush_r+0xae>
 800454e:	2301      	movs	r3, #1
 8004550:	4628      	mov	r0, r5
 8004552:	47b0      	blx	r6
 8004554:	4602      	mov	r2, r0
 8004556:	1c50      	adds	r0, r2, #1
 8004558:	d1c9      	bne.n	80044ee <__sflush_r+0x32>
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0c6      	beq.n	80044ee <__sflush_r+0x32>
 8004560:	2b1d      	cmp	r3, #29
 8004562:	d001      	beq.n	8004568 <__sflush_r+0xac>
 8004564:	2b16      	cmp	r3, #22
 8004566:	d11e      	bne.n	80045a6 <__sflush_r+0xea>
 8004568:	602f      	str	r7, [r5, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	e022      	b.n	80045b4 <__sflush_r+0xf8>
 800456e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004572:	b21b      	sxth	r3, r3
 8004574:	e01b      	b.n	80045ae <__sflush_r+0xf2>
 8004576:	690f      	ldr	r7, [r1, #16]
 8004578:	2f00      	cmp	r7, #0
 800457a:	d0f6      	beq.n	800456a <__sflush_r+0xae>
 800457c:	0793      	lsls	r3, r2, #30
 800457e:	680e      	ldr	r6, [r1, #0]
 8004580:	bf08      	it	eq
 8004582:	694b      	ldreq	r3, [r1, #20]
 8004584:	600f      	str	r7, [r1, #0]
 8004586:	bf18      	it	ne
 8004588:	2300      	movne	r3, #0
 800458a:	eba6 0807 	sub.w	r8, r6, r7
 800458e:	608b      	str	r3, [r1, #8]
 8004590:	f1b8 0f00 	cmp.w	r8, #0
 8004594:	dde9      	ble.n	800456a <__sflush_r+0xae>
 8004596:	6a21      	ldr	r1, [r4, #32]
 8004598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800459a:	4643      	mov	r3, r8
 800459c:	463a      	mov	r2, r7
 800459e:	4628      	mov	r0, r5
 80045a0:	47b0      	blx	r6
 80045a2:	2800      	cmp	r0, #0
 80045a4:	dc08      	bgt.n	80045b8 <__sflush_r+0xfc>
 80045a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045ae:	81a3      	strh	r3, [r4, #12]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045b8:	4407      	add	r7, r0
 80045ba:	eba8 0800 	sub.w	r8, r8, r0
 80045be:	e7e7      	b.n	8004590 <__sflush_r+0xd4>
 80045c0:	dfbffffe 	.word	0xdfbffffe

080045c4 <_fflush_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	690b      	ldr	r3, [r1, #16]
 80045c8:	4605      	mov	r5, r0
 80045ca:	460c      	mov	r4, r1
 80045cc:	b913      	cbnz	r3, 80045d4 <_fflush_r+0x10>
 80045ce:	2500      	movs	r5, #0
 80045d0:	4628      	mov	r0, r5
 80045d2:	bd38      	pop	{r3, r4, r5, pc}
 80045d4:	b118      	cbz	r0, 80045de <_fflush_r+0x1a>
 80045d6:	6a03      	ldr	r3, [r0, #32]
 80045d8:	b90b      	cbnz	r3, 80045de <_fflush_r+0x1a>
 80045da:	f000 f8bb 	bl	8004754 <__sinit>
 80045de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f3      	beq.n	80045ce <_fflush_r+0xa>
 80045e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045e8:	07d0      	lsls	r0, r2, #31
 80045ea:	d404      	bmi.n	80045f6 <_fflush_r+0x32>
 80045ec:	0599      	lsls	r1, r3, #22
 80045ee:	d402      	bmi.n	80045f6 <_fflush_r+0x32>
 80045f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f2:	f000 f9b4 	bl	800495e <__retarget_lock_acquire_recursive>
 80045f6:	4628      	mov	r0, r5
 80045f8:	4621      	mov	r1, r4
 80045fa:	f7ff ff5f 	bl	80044bc <__sflush_r>
 80045fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004600:	07da      	lsls	r2, r3, #31
 8004602:	4605      	mov	r5, r0
 8004604:	d4e4      	bmi.n	80045d0 <_fflush_r+0xc>
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	059b      	lsls	r3, r3, #22
 800460a:	d4e1      	bmi.n	80045d0 <_fflush_r+0xc>
 800460c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460e:	f000 f9a7 	bl	8004960 <__retarget_lock_release_recursive>
 8004612:	e7dd      	b.n	80045d0 <_fflush_r+0xc>

08004614 <fflush>:
 8004614:	4601      	mov	r1, r0
 8004616:	b920      	cbnz	r0, 8004622 <fflush+0xe>
 8004618:	4a04      	ldr	r2, [pc, #16]	@ (800462c <fflush+0x18>)
 800461a:	4905      	ldr	r1, [pc, #20]	@ (8004630 <fflush+0x1c>)
 800461c:	4805      	ldr	r0, [pc, #20]	@ (8004634 <fflush+0x20>)
 800461e:	f000 b8b1 	b.w	8004784 <_fwalk_sglue>
 8004622:	4b05      	ldr	r3, [pc, #20]	@ (8004638 <fflush+0x24>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f7ff bfcd 	b.w	80045c4 <_fflush_r>
 800462a:	bf00      	nop
 800462c:	2000000c 	.word	0x2000000c
 8004630:	080045c5 	.word	0x080045c5
 8004634:	2000001c 	.word	0x2000001c
 8004638:	20000018 	.word	0x20000018

0800463c <std>:
 800463c:	2300      	movs	r3, #0
 800463e:	b510      	push	{r4, lr}
 8004640:	4604      	mov	r4, r0
 8004642:	e9c0 3300 	strd	r3, r3, [r0]
 8004646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464a:	6083      	str	r3, [r0, #8]
 800464c:	8181      	strh	r1, [r0, #12]
 800464e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004650:	81c2      	strh	r2, [r0, #14]
 8004652:	6183      	str	r3, [r0, #24]
 8004654:	4619      	mov	r1, r3
 8004656:	2208      	movs	r2, #8
 8004658:	305c      	adds	r0, #92	@ 0x5c
 800465a:	f000 f906 	bl	800486a <memset>
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <std+0x58>)
 8004660:	6263      	str	r3, [r4, #36]	@ 0x24
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <std+0x5c>)
 8004664:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <std+0x60>)
 8004668:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <std+0x64>)
 800466c:	6323      	str	r3, [r4, #48]	@ 0x30
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <std+0x68>)
 8004670:	6224      	str	r4, [r4, #32]
 8004672:	429c      	cmp	r4, r3
 8004674:	d006      	beq.n	8004684 <std+0x48>
 8004676:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800467a:	4294      	cmp	r4, r2
 800467c:	d002      	beq.n	8004684 <std+0x48>
 800467e:	33d0      	adds	r3, #208	@ 0xd0
 8004680:	429c      	cmp	r4, r3
 8004682:	d105      	bne.n	8004690 <std+0x54>
 8004684:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800468c:	f000 b966 	b.w	800495c <__retarget_lock_init_recursive>
 8004690:	bd10      	pop	{r4, pc}
 8004692:	bf00      	nop
 8004694:	080047e5 	.word	0x080047e5
 8004698:	08004807 	.word	0x08004807
 800469c:	0800483f 	.word	0x0800483f
 80046a0:	08004863 	.word	0x08004863
 80046a4:	20000124 	.word	0x20000124

080046a8 <stdio_exit_handler>:
 80046a8:	4a02      	ldr	r2, [pc, #8]	@ (80046b4 <stdio_exit_handler+0xc>)
 80046aa:	4903      	ldr	r1, [pc, #12]	@ (80046b8 <stdio_exit_handler+0x10>)
 80046ac:	4803      	ldr	r0, [pc, #12]	@ (80046bc <stdio_exit_handler+0x14>)
 80046ae:	f000 b869 	b.w	8004784 <_fwalk_sglue>
 80046b2:	bf00      	nop
 80046b4:	2000000c 	.word	0x2000000c
 80046b8:	080045c5 	.word	0x080045c5
 80046bc:	2000001c 	.word	0x2000001c

080046c0 <cleanup_stdio>:
 80046c0:	6841      	ldr	r1, [r0, #4]
 80046c2:	4b0c      	ldr	r3, [pc, #48]	@ (80046f4 <cleanup_stdio+0x34>)
 80046c4:	4299      	cmp	r1, r3
 80046c6:	b510      	push	{r4, lr}
 80046c8:	4604      	mov	r4, r0
 80046ca:	d001      	beq.n	80046d0 <cleanup_stdio+0x10>
 80046cc:	f7ff ff7a 	bl	80045c4 <_fflush_r>
 80046d0:	68a1      	ldr	r1, [r4, #8]
 80046d2:	4b09      	ldr	r3, [pc, #36]	@ (80046f8 <cleanup_stdio+0x38>)
 80046d4:	4299      	cmp	r1, r3
 80046d6:	d002      	beq.n	80046de <cleanup_stdio+0x1e>
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff ff73 	bl	80045c4 <_fflush_r>
 80046de:	68e1      	ldr	r1, [r4, #12]
 80046e0:	4b06      	ldr	r3, [pc, #24]	@ (80046fc <cleanup_stdio+0x3c>)
 80046e2:	4299      	cmp	r1, r3
 80046e4:	d004      	beq.n	80046f0 <cleanup_stdio+0x30>
 80046e6:	4620      	mov	r0, r4
 80046e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046ec:	f7ff bf6a 	b.w	80045c4 <_fflush_r>
 80046f0:	bd10      	pop	{r4, pc}
 80046f2:	bf00      	nop
 80046f4:	20000124 	.word	0x20000124
 80046f8:	2000018c 	.word	0x2000018c
 80046fc:	200001f4 	.word	0x200001f4

08004700 <global_stdio_init.part.0>:
 8004700:	b510      	push	{r4, lr}
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <global_stdio_init.part.0+0x30>)
 8004704:	4c0b      	ldr	r4, [pc, #44]	@ (8004734 <global_stdio_init.part.0+0x34>)
 8004706:	4a0c      	ldr	r2, [pc, #48]	@ (8004738 <global_stdio_init.part.0+0x38>)
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	4620      	mov	r0, r4
 800470c:	2200      	movs	r2, #0
 800470e:	2104      	movs	r1, #4
 8004710:	f7ff ff94 	bl	800463c <std>
 8004714:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004718:	2201      	movs	r2, #1
 800471a:	2109      	movs	r1, #9
 800471c:	f7ff ff8e 	bl	800463c <std>
 8004720:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004724:	2202      	movs	r2, #2
 8004726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472a:	2112      	movs	r1, #18
 800472c:	f7ff bf86 	b.w	800463c <std>
 8004730:	2000025c 	.word	0x2000025c
 8004734:	20000124 	.word	0x20000124
 8004738:	080046a9 	.word	0x080046a9

0800473c <__sfp_lock_acquire>:
 800473c:	4801      	ldr	r0, [pc, #4]	@ (8004744 <__sfp_lock_acquire+0x8>)
 800473e:	f000 b90e 	b.w	800495e <__retarget_lock_acquire_recursive>
 8004742:	bf00      	nop
 8004744:	20000265 	.word	0x20000265

08004748 <__sfp_lock_release>:
 8004748:	4801      	ldr	r0, [pc, #4]	@ (8004750 <__sfp_lock_release+0x8>)
 800474a:	f000 b909 	b.w	8004960 <__retarget_lock_release_recursive>
 800474e:	bf00      	nop
 8004750:	20000265 	.word	0x20000265

08004754 <__sinit>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	f7ff fff0 	bl	800473c <__sfp_lock_acquire>
 800475c:	6a23      	ldr	r3, [r4, #32]
 800475e:	b11b      	cbz	r3, 8004768 <__sinit+0x14>
 8004760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004764:	f7ff bff0 	b.w	8004748 <__sfp_lock_release>
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <__sinit+0x28>)
 800476a:	6223      	str	r3, [r4, #32]
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__sinit+0x2c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f5      	bne.n	8004760 <__sinit+0xc>
 8004774:	f7ff ffc4 	bl	8004700 <global_stdio_init.part.0>
 8004778:	e7f2      	b.n	8004760 <__sinit+0xc>
 800477a:	bf00      	nop
 800477c:	080046c1 	.word	0x080046c1
 8004780:	2000025c 	.word	0x2000025c

08004784 <_fwalk_sglue>:
 8004784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004788:	4607      	mov	r7, r0
 800478a:	4688      	mov	r8, r1
 800478c:	4614      	mov	r4, r2
 800478e:	2600      	movs	r6, #0
 8004790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004794:	f1b9 0901 	subs.w	r9, r9, #1
 8004798:	d505      	bpl.n	80047a6 <_fwalk_sglue+0x22>
 800479a:	6824      	ldr	r4, [r4, #0]
 800479c:	2c00      	cmp	r4, #0
 800479e:	d1f7      	bne.n	8004790 <_fwalk_sglue+0xc>
 80047a0:	4630      	mov	r0, r6
 80047a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a6:	89ab      	ldrh	r3, [r5, #12]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d907      	bls.n	80047bc <_fwalk_sglue+0x38>
 80047ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b0:	3301      	adds	r3, #1
 80047b2:	d003      	beq.n	80047bc <_fwalk_sglue+0x38>
 80047b4:	4629      	mov	r1, r5
 80047b6:	4638      	mov	r0, r7
 80047b8:	47c0      	blx	r8
 80047ba:	4306      	orrs	r6, r0
 80047bc:	3568      	adds	r5, #104	@ 0x68
 80047be:	e7e9      	b.n	8004794 <_fwalk_sglue+0x10>

080047c0 <iprintf>:
 80047c0:	b40f      	push	{r0, r1, r2, r3}
 80047c2:	b507      	push	{r0, r1, r2, lr}
 80047c4:	4906      	ldr	r1, [pc, #24]	@ (80047e0 <iprintf+0x20>)
 80047c6:	ab04      	add	r3, sp, #16
 80047c8:	6808      	ldr	r0, [r1, #0]
 80047ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ce:	6881      	ldr	r1, [r0, #8]
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	f000 f9e9 	bl	8004ba8 <_vfiprintf_r>
 80047d6:	b003      	add	sp, #12
 80047d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	20000018 	.word	0x20000018

080047e4 <__sread>:
 80047e4:	b510      	push	{r4, lr}
 80047e6:	460c      	mov	r4, r1
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	f000 f868 	bl	80048c0 <_read_r>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	bfab      	itete	ge
 80047f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047f6:	89a3      	ldrhlt	r3, [r4, #12]
 80047f8:	181b      	addge	r3, r3, r0
 80047fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047fe:	bfac      	ite	ge
 8004800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004802:	81a3      	strhlt	r3, [r4, #12]
 8004804:	bd10      	pop	{r4, pc}

08004806 <__swrite>:
 8004806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	461f      	mov	r7, r3
 800480c:	898b      	ldrh	r3, [r1, #12]
 800480e:	05db      	lsls	r3, r3, #23
 8004810:	4605      	mov	r5, r0
 8004812:	460c      	mov	r4, r1
 8004814:	4616      	mov	r6, r2
 8004816:	d505      	bpl.n	8004824 <__swrite+0x1e>
 8004818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481c:	2302      	movs	r3, #2
 800481e:	2200      	movs	r2, #0
 8004820:	f000 f83c 	bl	800489c <_lseek_r>
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800482a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800482e:	81a3      	strh	r3, [r4, #12]
 8004830:	4632      	mov	r2, r6
 8004832:	463b      	mov	r3, r7
 8004834:	4628      	mov	r0, r5
 8004836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800483a:	f000 b853 	b.w	80048e4 <_write_r>

0800483e <__sseek>:
 800483e:	b510      	push	{r4, lr}
 8004840:	460c      	mov	r4, r1
 8004842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004846:	f000 f829 	bl	800489c <_lseek_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	89a3      	ldrh	r3, [r4, #12]
 800484e:	bf15      	itete	ne
 8004850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800485a:	81a3      	strheq	r3, [r4, #12]
 800485c:	bf18      	it	ne
 800485e:	81a3      	strhne	r3, [r4, #12]
 8004860:	bd10      	pop	{r4, pc}

08004862 <__sclose>:
 8004862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004866:	f000 b809 	b.w	800487c <_close_r>

0800486a <memset>:
 800486a:	4402      	add	r2, r0
 800486c:	4603      	mov	r3, r0
 800486e:	4293      	cmp	r3, r2
 8004870:	d100      	bne.n	8004874 <memset+0xa>
 8004872:	4770      	bx	lr
 8004874:	f803 1b01 	strb.w	r1, [r3], #1
 8004878:	e7f9      	b.n	800486e <memset+0x4>
	...

0800487c <_close_r>:
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4d06      	ldr	r5, [pc, #24]	@ (8004898 <_close_r+0x1c>)
 8004880:	2300      	movs	r3, #0
 8004882:	4604      	mov	r4, r0
 8004884:	4608      	mov	r0, r1
 8004886:	602b      	str	r3, [r5, #0]
 8004888:	f7fc f8a1 	bl	80009ce <_close>
 800488c:	1c43      	adds	r3, r0, #1
 800488e:	d102      	bne.n	8004896 <_close_r+0x1a>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	b103      	cbz	r3, 8004896 <_close_r+0x1a>
 8004894:	6023      	str	r3, [r4, #0]
 8004896:	bd38      	pop	{r3, r4, r5, pc}
 8004898:	20000260 	.word	0x20000260

0800489c <_lseek_r>:
 800489c:	b538      	push	{r3, r4, r5, lr}
 800489e:	4d07      	ldr	r5, [pc, #28]	@ (80048bc <_lseek_r+0x20>)
 80048a0:	4604      	mov	r4, r0
 80048a2:	4608      	mov	r0, r1
 80048a4:	4611      	mov	r1, r2
 80048a6:	2200      	movs	r2, #0
 80048a8:	602a      	str	r2, [r5, #0]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f7fc f8b6 	bl	8000a1c <_lseek>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_lseek_r+0x1e>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_lseek_r+0x1e>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	20000260 	.word	0x20000260

080048c0 <_read_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	@ (80048e0 <_read_r+0x20>)
 80048c4:	4604      	mov	r4, r0
 80048c6:	4608      	mov	r0, r1
 80048c8:	4611      	mov	r1, r2
 80048ca:	2200      	movs	r2, #0
 80048cc:	602a      	str	r2, [r5, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	f7fc f844 	bl	800095c <_read>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_read_r+0x1e>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_read_r+0x1e>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	20000260 	.word	0x20000260

080048e4 <_write_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	@ (8004904 <_write_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fc f84f 	bl	8000996 <_write>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_write_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_write_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	20000260 	.word	0x20000260

08004908 <__errno>:
 8004908:	4b01      	ldr	r3, [pc, #4]	@ (8004910 <__errno+0x8>)
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000018 	.word	0x20000018

08004914 <__libc_init_array>:
 8004914:	b570      	push	{r4, r5, r6, lr}
 8004916:	4d0d      	ldr	r5, [pc, #52]	@ (800494c <__libc_init_array+0x38>)
 8004918:	4c0d      	ldr	r4, [pc, #52]	@ (8004950 <__libc_init_array+0x3c>)
 800491a:	1b64      	subs	r4, r4, r5
 800491c:	10a4      	asrs	r4, r4, #2
 800491e:	2600      	movs	r6, #0
 8004920:	42a6      	cmp	r6, r4
 8004922:	d109      	bne.n	8004938 <__libc_init_array+0x24>
 8004924:	4d0b      	ldr	r5, [pc, #44]	@ (8004954 <__libc_init_array+0x40>)
 8004926:	4c0c      	ldr	r4, [pc, #48]	@ (8004958 <__libc_init_array+0x44>)
 8004928:	f000 fd0c 	bl	8005344 <_init>
 800492c:	1b64      	subs	r4, r4, r5
 800492e:	10a4      	asrs	r4, r4, #2
 8004930:	2600      	movs	r6, #0
 8004932:	42a6      	cmp	r6, r4
 8004934:	d105      	bne.n	8004942 <__libc_init_array+0x2e>
 8004936:	bd70      	pop	{r4, r5, r6, pc}
 8004938:	f855 3b04 	ldr.w	r3, [r5], #4
 800493c:	4798      	blx	r3
 800493e:	3601      	adds	r6, #1
 8004940:	e7ee      	b.n	8004920 <__libc_init_array+0xc>
 8004942:	f855 3b04 	ldr.w	r3, [r5], #4
 8004946:	4798      	blx	r3
 8004948:	3601      	adds	r6, #1
 800494a:	e7f2      	b.n	8004932 <__libc_init_array+0x1e>
 800494c:	080053f0 	.word	0x080053f0
 8004950:	080053f0 	.word	0x080053f0
 8004954:	080053f0 	.word	0x080053f0
 8004958:	080053f4 	.word	0x080053f4

0800495c <__retarget_lock_init_recursive>:
 800495c:	4770      	bx	lr

0800495e <__retarget_lock_acquire_recursive>:
 800495e:	4770      	bx	lr

08004960 <__retarget_lock_release_recursive>:
 8004960:	4770      	bx	lr
	...

08004964 <_free_r>:
 8004964:	b538      	push	{r3, r4, r5, lr}
 8004966:	4605      	mov	r5, r0
 8004968:	2900      	cmp	r1, #0
 800496a:	d041      	beq.n	80049f0 <_free_r+0x8c>
 800496c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004970:	1f0c      	subs	r4, r1, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfb8      	it	lt
 8004976:	18e4      	addlt	r4, r4, r3
 8004978:	f000 f8e0 	bl	8004b3c <__malloc_lock>
 800497c:	4a1d      	ldr	r2, [pc, #116]	@ (80049f4 <_free_r+0x90>)
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	b933      	cbnz	r3, 8004990 <_free_r+0x2c>
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	6014      	str	r4, [r2, #0]
 8004986:	4628      	mov	r0, r5
 8004988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800498c:	f000 b8dc 	b.w	8004b48 <__malloc_unlock>
 8004990:	42a3      	cmp	r3, r4
 8004992:	d908      	bls.n	80049a6 <_free_r+0x42>
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	1821      	adds	r1, r4, r0
 8004998:	428b      	cmp	r3, r1
 800499a:	bf01      	itttt	eq
 800499c:	6819      	ldreq	r1, [r3, #0]
 800499e:	685b      	ldreq	r3, [r3, #4]
 80049a0:	1809      	addeq	r1, r1, r0
 80049a2:	6021      	streq	r1, [r4, #0]
 80049a4:	e7ed      	b.n	8004982 <_free_r+0x1e>
 80049a6:	461a      	mov	r2, r3
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	b10b      	cbz	r3, 80049b0 <_free_r+0x4c>
 80049ac:	42a3      	cmp	r3, r4
 80049ae:	d9fa      	bls.n	80049a6 <_free_r+0x42>
 80049b0:	6811      	ldr	r1, [r2, #0]
 80049b2:	1850      	adds	r0, r2, r1
 80049b4:	42a0      	cmp	r0, r4
 80049b6:	d10b      	bne.n	80049d0 <_free_r+0x6c>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	4401      	add	r1, r0
 80049bc:	1850      	adds	r0, r2, r1
 80049be:	4283      	cmp	r3, r0
 80049c0:	6011      	str	r1, [r2, #0]
 80049c2:	d1e0      	bne.n	8004986 <_free_r+0x22>
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	6053      	str	r3, [r2, #4]
 80049ca:	4408      	add	r0, r1
 80049cc:	6010      	str	r0, [r2, #0]
 80049ce:	e7da      	b.n	8004986 <_free_r+0x22>
 80049d0:	d902      	bls.n	80049d8 <_free_r+0x74>
 80049d2:	230c      	movs	r3, #12
 80049d4:	602b      	str	r3, [r5, #0]
 80049d6:	e7d6      	b.n	8004986 <_free_r+0x22>
 80049d8:	6820      	ldr	r0, [r4, #0]
 80049da:	1821      	adds	r1, r4, r0
 80049dc:	428b      	cmp	r3, r1
 80049de:	bf04      	itt	eq
 80049e0:	6819      	ldreq	r1, [r3, #0]
 80049e2:	685b      	ldreq	r3, [r3, #4]
 80049e4:	6063      	str	r3, [r4, #4]
 80049e6:	bf04      	itt	eq
 80049e8:	1809      	addeq	r1, r1, r0
 80049ea:	6021      	streq	r1, [r4, #0]
 80049ec:	6054      	str	r4, [r2, #4]
 80049ee:	e7ca      	b.n	8004986 <_free_r+0x22>
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	2000026c 	.word	0x2000026c

080049f8 <sbrk_aligned>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4e0f      	ldr	r6, [pc, #60]	@ (8004a38 <sbrk_aligned+0x40>)
 80049fc:	460c      	mov	r4, r1
 80049fe:	6831      	ldr	r1, [r6, #0]
 8004a00:	4605      	mov	r5, r0
 8004a02:	b911      	cbnz	r1, 8004a0a <sbrk_aligned+0x12>
 8004a04:	f000 fc0a 	bl	800521c <_sbrk_r>
 8004a08:	6030      	str	r0, [r6, #0]
 8004a0a:	4621      	mov	r1, r4
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f000 fc05 	bl	800521c <_sbrk_r>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d103      	bne.n	8004a1e <sbrk_aligned+0x26>
 8004a16:	f04f 34ff 	mov.w	r4, #4294967295
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
 8004a1e:	1cc4      	adds	r4, r0, #3
 8004a20:	f024 0403 	bic.w	r4, r4, #3
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	d0f8      	beq.n	8004a1a <sbrk_aligned+0x22>
 8004a28:	1a21      	subs	r1, r4, r0
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 fbf6 	bl	800521c <_sbrk_r>
 8004a30:	3001      	adds	r0, #1
 8004a32:	d1f2      	bne.n	8004a1a <sbrk_aligned+0x22>
 8004a34:	e7ef      	b.n	8004a16 <sbrk_aligned+0x1e>
 8004a36:	bf00      	nop
 8004a38:	20000268 	.word	0x20000268

08004a3c <_malloc_r>:
 8004a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a40:	1ccd      	adds	r5, r1, #3
 8004a42:	f025 0503 	bic.w	r5, r5, #3
 8004a46:	3508      	adds	r5, #8
 8004a48:	2d0c      	cmp	r5, #12
 8004a4a:	bf38      	it	cc
 8004a4c:	250c      	movcc	r5, #12
 8004a4e:	2d00      	cmp	r5, #0
 8004a50:	4606      	mov	r6, r0
 8004a52:	db01      	blt.n	8004a58 <_malloc_r+0x1c>
 8004a54:	42a9      	cmp	r1, r5
 8004a56:	d904      	bls.n	8004a62 <_malloc_r+0x26>
 8004a58:	230c      	movs	r3, #12
 8004a5a:	6033      	str	r3, [r6, #0]
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b38 <_malloc_r+0xfc>
 8004a66:	f000 f869 	bl	8004b3c <__malloc_lock>
 8004a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6e:	461c      	mov	r4, r3
 8004a70:	bb44      	cbnz	r4, 8004ac4 <_malloc_r+0x88>
 8004a72:	4629      	mov	r1, r5
 8004a74:	4630      	mov	r0, r6
 8004a76:	f7ff ffbf 	bl	80049f8 <sbrk_aligned>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	4604      	mov	r4, r0
 8004a7e:	d158      	bne.n	8004b32 <_malloc_r+0xf6>
 8004a80:	f8d8 4000 	ldr.w	r4, [r8]
 8004a84:	4627      	mov	r7, r4
 8004a86:	2f00      	cmp	r7, #0
 8004a88:	d143      	bne.n	8004b12 <_malloc_r+0xd6>
 8004a8a:	2c00      	cmp	r4, #0
 8004a8c:	d04b      	beq.n	8004b26 <_malloc_r+0xea>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	4639      	mov	r1, r7
 8004a92:	4630      	mov	r0, r6
 8004a94:	eb04 0903 	add.w	r9, r4, r3
 8004a98:	f000 fbc0 	bl	800521c <_sbrk_r>
 8004a9c:	4581      	cmp	r9, r0
 8004a9e:	d142      	bne.n	8004b26 <_malloc_r+0xea>
 8004aa0:	6821      	ldr	r1, [r4, #0]
 8004aa2:	1a6d      	subs	r5, r5, r1
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f7ff ffa6 	bl	80049f8 <sbrk_aligned>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d03a      	beq.n	8004b26 <_malloc_r+0xea>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	442b      	add	r3, r5
 8004ab4:	6023      	str	r3, [r4, #0]
 8004ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	bb62      	cbnz	r2, 8004b18 <_malloc_r+0xdc>
 8004abe:	f8c8 7000 	str.w	r7, [r8]
 8004ac2:	e00f      	b.n	8004ae4 <_malloc_r+0xa8>
 8004ac4:	6822      	ldr	r2, [r4, #0]
 8004ac6:	1b52      	subs	r2, r2, r5
 8004ac8:	d420      	bmi.n	8004b0c <_malloc_r+0xd0>
 8004aca:	2a0b      	cmp	r2, #11
 8004acc:	d917      	bls.n	8004afe <_malloc_r+0xc2>
 8004ace:	1961      	adds	r1, r4, r5
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	6025      	str	r5, [r4, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	6059      	strne	r1, [r3, #4]
 8004ad8:	6863      	ldr	r3, [r4, #4]
 8004ada:	bf08      	it	eq
 8004adc:	f8c8 1000 	streq.w	r1, [r8]
 8004ae0:	5162      	str	r2, [r4, r5]
 8004ae2:	604b      	str	r3, [r1, #4]
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f000 f82f 	bl	8004b48 <__malloc_unlock>
 8004aea:	f104 000b 	add.w	r0, r4, #11
 8004aee:	1d23      	adds	r3, r4, #4
 8004af0:	f020 0007 	bic.w	r0, r0, #7
 8004af4:	1ac2      	subs	r2, r0, r3
 8004af6:	bf1c      	itt	ne
 8004af8:	1a1b      	subne	r3, r3, r0
 8004afa:	50a3      	strne	r3, [r4, r2]
 8004afc:	e7af      	b.n	8004a5e <_malloc_r+0x22>
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	bf0c      	ite	eq
 8004b04:	f8c8 2000 	streq.w	r2, [r8]
 8004b08:	605a      	strne	r2, [r3, #4]
 8004b0a:	e7eb      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b0c:	4623      	mov	r3, r4
 8004b0e:	6864      	ldr	r4, [r4, #4]
 8004b10:	e7ae      	b.n	8004a70 <_malloc_r+0x34>
 8004b12:	463c      	mov	r4, r7
 8004b14:	687f      	ldr	r7, [r7, #4]
 8004b16:	e7b6      	b.n	8004a86 <_malloc_r+0x4a>
 8004b18:	461a      	mov	r2, r3
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d1fb      	bne.n	8004b18 <_malloc_r+0xdc>
 8004b20:	2300      	movs	r3, #0
 8004b22:	6053      	str	r3, [r2, #4]
 8004b24:	e7de      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b26:	230c      	movs	r3, #12
 8004b28:	6033      	str	r3, [r6, #0]
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f000 f80c 	bl	8004b48 <__malloc_unlock>
 8004b30:	e794      	b.n	8004a5c <_malloc_r+0x20>
 8004b32:	6005      	str	r5, [r0, #0]
 8004b34:	e7d6      	b.n	8004ae4 <_malloc_r+0xa8>
 8004b36:	bf00      	nop
 8004b38:	2000026c 	.word	0x2000026c

08004b3c <__malloc_lock>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	@ (8004b44 <__malloc_lock+0x8>)
 8004b3e:	f7ff bf0e 	b.w	800495e <__retarget_lock_acquire_recursive>
 8004b42:	bf00      	nop
 8004b44:	20000264 	.word	0x20000264

08004b48 <__malloc_unlock>:
 8004b48:	4801      	ldr	r0, [pc, #4]	@ (8004b50 <__malloc_unlock+0x8>)
 8004b4a:	f7ff bf09 	b.w	8004960 <__retarget_lock_release_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20000264 	.word	0x20000264

08004b54 <__sfputc_r>:
 8004b54:	6893      	ldr	r3, [r2, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	b410      	push	{r4}
 8004b5c:	6093      	str	r3, [r2, #8]
 8004b5e:	da08      	bge.n	8004b72 <__sfputc_r+0x1e>
 8004b60:	6994      	ldr	r4, [r2, #24]
 8004b62:	42a3      	cmp	r3, r4
 8004b64:	db01      	blt.n	8004b6a <__sfputc_r+0x16>
 8004b66:	290a      	cmp	r1, #10
 8004b68:	d103      	bne.n	8004b72 <__sfputc_r+0x1e>
 8004b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b6e:	f000 bac1 	b.w	80050f4 <__swbuf_r>
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	1c58      	adds	r0, r3, #1
 8004b76:	6010      	str	r0, [r2, #0]
 8004b78:	7019      	strb	r1, [r3, #0]
 8004b7a:	4608      	mov	r0, r1
 8004b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <__sfputs_r>:
 8004b82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b84:	4606      	mov	r6, r0
 8004b86:	460f      	mov	r7, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	18d5      	adds	r5, r2, r3
 8004b8c:	42ac      	cmp	r4, r5
 8004b8e:	d101      	bne.n	8004b94 <__sfputs_r+0x12>
 8004b90:	2000      	movs	r0, #0
 8004b92:	e007      	b.n	8004ba4 <__sfputs_r+0x22>
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	463a      	mov	r2, r7
 8004b9a:	4630      	mov	r0, r6
 8004b9c:	f7ff ffda 	bl	8004b54 <__sfputc_r>
 8004ba0:	1c43      	adds	r3, r0, #1
 8004ba2:	d1f3      	bne.n	8004b8c <__sfputs_r+0xa>
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ba8 <_vfiprintf_r>:
 8004ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bac:	460d      	mov	r5, r1
 8004bae:	b09d      	sub	sp, #116	@ 0x74
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	b118      	cbz	r0, 8004bc0 <_vfiprintf_r+0x18>
 8004bb8:	6a03      	ldr	r3, [r0, #32]
 8004bba:	b90b      	cbnz	r3, 8004bc0 <_vfiprintf_r+0x18>
 8004bbc:	f7ff fdca 	bl	8004754 <__sinit>
 8004bc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bc2:	07d9      	lsls	r1, r3, #31
 8004bc4:	d405      	bmi.n	8004bd2 <_vfiprintf_r+0x2a>
 8004bc6:	89ab      	ldrh	r3, [r5, #12]
 8004bc8:	059a      	lsls	r2, r3, #22
 8004bca:	d402      	bmi.n	8004bd2 <_vfiprintf_r+0x2a>
 8004bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bce:	f7ff fec6 	bl	800495e <__retarget_lock_acquire_recursive>
 8004bd2:	89ab      	ldrh	r3, [r5, #12]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	d501      	bpl.n	8004bdc <_vfiprintf_r+0x34>
 8004bd8:	692b      	ldr	r3, [r5, #16]
 8004bda:	b99b      	cbnz	r3, 8004c04 <_vfiprintf_r+0x5c>
 8004bdc:	4629      	mov	r1, r5
 8004bde:	4630      	mov	r0, r6
 8004be0:	f000 fac6 	bl	8005170 <__swsetup_r>
 8004be4:	b170      	cbz	r0, 8004c04 <_vfiprintf_r+0x5c>
 8004be6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004be8:	07dc      	lsls	r4, r3, #31
 8004bea:	d504      	bpl.n	8004bf6 <_vfiprintf_r+0x4e>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	b01d      	add	sp, #116	@ 0x74
 8004bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	0598      	lsls	r0, r3, #22
 8004bfa:	d4f7      	bmi.n	8004bec <_vfiprintf_r+0x44>
 8004bfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bfe:	f7ff feaf 	bl	8004960 <__retarget_lock_release_recursive>
 8004c02:	e7f3      	b.n	8004bec <_vfiprintf_r+0x44>
 8004c04:	2300      	movs	r3, #0
 8004c06:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c08:	2320      	movs	r3, #32
 8004c0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c12:	2330      	movs	r3, #48	@ 0x30
 8004c14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004dc4 <_vfiprintf_r+0x21c>
 8004c18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c1c:	f04f 0901 	mov.w	r9, #1
 8004c20:	4623      	mov	r3, r4
 8004c22:	469a      	mov	sl, r3
 8004c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c28:	b10a      	cbz	r2, 8004c2e <_vfiprintf_r+0x86>
 8004c2a:	2a25      	cmp	r2, #37	@ 0x25
 8004c2c:	d1f9      	bne.n	8004c22 <_vfiprintf_r+0x7a>
 8004c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c32:	d00b      	beq.n	8004c4c <_vfiprintf_r+0xa4>
 8004c34:	465b      	mov	r3, fp
 8004c36:	4622      	mov	r2, r4
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff ffa1 	bl	8004b82 <__sfputs_r>
 8004c40:	3001      	adds	r0, #1
 8004c42:	f000 80a7 	beq.w	8004d94 <_vfiprintf_r+0x1ec>
 8004c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c48:	445a      	add	r2, fp
 8004c4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 809f 	beq.w	8004d94 <_vfiprintf_r+0x1ec>
 8004c56:	2300      	movs	r3, #0
 8004c58:	f04f 32ff 	mov.w	r2, #4294967295
 8004c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c60:	f10a 0a01 	add.w	sl, sl, #1
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	9307      	str	r3, [sp, #28]
 8004c68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c6e:	4654      	mov	r4, sl
 8004c70:	2205      	movs	r2, #5
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	4853      	ldr	r0, [pc, #332]	@ (8004dc4 <_vfiprintf_r+0x21c>)
 8004c78:	f7fb fad2 	bl	8000220 <memchr>
 8004c7c:	9a04      	ldr	r2, [sp, #16]
 8004c7e:	b9d8      	cbnz	r0, 8004cb8 <_vfiprintf_r+0x110>
 8004c80:	06d1      	lsls	r1, r2, #27
 8004c82:	bf44      	itt	mi
 8004c84:	2320      	movmi	r3, #32
 8004c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c8a:	0713      	lsls	r3, r2, #28
 8004c8c:	bf44      	itt	mi
 8004c8e:	232b      	movmi	r3, #43	@ 0x2b
 8004c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c94:	f89a 3000 	ldrb.w	r3, [sl]
 8004c98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c9a:	d015      	beq.n	8004cc8 <_vfiprintf_r+0x120>
 8004c9c:	9a07      	ldr	r2, [sp, #28]
 8004c9e:	4654      	mov	r4, sl
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f04f 0c0a 	mov.w	ip, #10
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cac:	3b30      	subs	r3, #48	@ 0x30
 8004cae:	2b09      	cmp	r3, #9
 8004cb0:	d94b      	bls.n	8004d4a <_vfiprintf_r+0x1a2>
 8004cb2:	b1b0      	cbz	r0, 8004ce2 <_vfiprintf_r+0x13a>
 8004cb4:	9207      	str	r2, [sp, #28]
 8004cb6:	e014      	b.n	8004ce2 <_vfiprintf_r+0x13a>
 8004cb8:	eba0 0308 	sub.w	r3, r0, r8
 8004cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	9304      	str	r3, [sp, #16]
 8004cc4:	46a2      	mov	sl, r4
 8004cc6:	e7d2      	b.n	8004c6e <_vfiprintf_r+0xc6>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	1d19      	adds	r1, r3, #4
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	9103      	str	r1, [sp, #12]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bfbb      	ittet	lt
 8004cd4:	425b      	neglt	r3, r3
 8004cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8004cda:	9307      	strge	r3, [sp, #28]
 8004cdc:	9307      	strlt	r3, [sp, #28]
 8004cde:	bfb8      	it	lt
 8004ce0:	9204      	strlt	r2, [sp, #16]
 8004ce2:	7823      	ldrb	r3, [r4, #0]
 8004ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ce6:	d10a      	bne.n	8004cfe <_vfiprintf_r+0x156>
 8004ce8:	7863      	ldrb	r3, [r4, #1]
 8004cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cec:	d132      	bne.n	8004d54 <_vfiprintf_r+0x1ac>
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	1d1a      	adds	r2, r3, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	9203      	str	r2, [sp, #12]
 8004cf6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cfa:	3402      	adds	r4, #2
 8004cfc:	9305      	str	r3, [sp, #20]
 8004cfe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004dd4 <_vfiprintf_r+0x22c>
 8004d02:	7821      	ldrb	r1, [r4, #0]
 8004d04:	2203      	movs	r2, #3
 8004d06:	4650      	mov	r0, sl
 8004d08:	f7fb fa8a 	bl	8000220 <memchr>
 8004d0c:	b138      	cbz	r0, 8004d1e <_vfiprintf_r+0x176>
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	eba0 000a 	sub.w	r0, r0, sl
 8004d14:	2240      	movs	r2, #64	@ 0x40
 8004d16:	4082      	lsls	r2, r0
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	3401      	adds	r4, #1
 8004d1c:	9304      	str	r3, [sp, #16]
 8004d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d22:	4829      	ldr	r0, [pc, #164]	@ (8004dc8 <_vfiprintf_r+0x220>)
 8004d24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d28:	2206      	movs	r2, #6
 8004d2a:	f7fb fa79 	bl	8000220 <memchr>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d03f      	beq.n	8004db2 <_vfiprintf_r+0x20a>
 8004d32:	4b26      	ldr	r3, [pc, #152]	@ (8004dcc <_vfiprintf_r+0x224>)
 8004d34:	bb1b      	cbnz	r3, 8004d7e <_vfiprintf_r+0x1d6>
 8004d36:	9b03      	ldr	r3, [sp, #12]
 8004d38:	3307      	adds	r3, #7
 8004d3a:	f023 0307 	bic.w	r3, r3, #7
 8004d3e:	3308      	adds	r3, #8
 8004d40:	9303      	str	r3, [sp, #12]
 8004d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d44:	443b      	add	r3, r7
 8004d46:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d48:	e76a      	b.n	8004c20 <_vfiprintf_r+0x78>
 8004d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d4e:	460c      	mov	r4, r1
 8004d50:	2001      	movs	r0, #1
 8004d52:	e7a8      	b.n	8004ca6 <_vfiprintf_r+0xfe>
 8004d54:	2300      	movs	r3, #0
 8004d56:	3401      	adds	r4, #1
 8004d58:	9305      	str	r3, [sp, #20]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f04f 0c0a 	mov.w	ip, #10
 8004d60:	4620      	mov	r0, r4
 8004d62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d66:	3a30      	subs	r2, #48	@ 0x30
 8004d68:	2a09      	cmp	r2, #9
 8004d6a:	d903      	bls.n	8004d74 <_vfiprintf_r+0x1cc>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0c6      	beq.n	8004cfe <_vfiprintf_r+0x156>
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	e7c4      	b.n	8004cfe <_vfiprintf_r+0x156>
 8004d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d78:	4604      	mov	r4, r0
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e7f0      	b.n	8004d60 <_vfiprintf_r+0x1b8>
 8004d7e:	ab03      	add	r3, sp, #12
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	462a      	mov	r2, r5
 8004d84:	4b12      	ldr	r3, [pc, #72]	@ (8004dd0 <_vfiprintf_r+0x228>)
 8004d86:	a904      	add	r1, sp, #16
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f3af 8000 	nop.w
 8004d8e:	4607      	mov	r7, r0
 8004d90:	1c78      	adds	r0, r7, #1
 8004d92:	d1d6      	bne.n	8004d42 <_vfiprintf_r+0x19a>
 8004d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d96:	07d9      	lsls	r1, r3, #31
 8004d98:	d405      	bmi.n	8004da6 <_vfiprintf_r+0x1fe>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	059a      	lsls	r2, r3, #22
 8004d9e:	d402      	bmi.n	8004da6 <_vfiprintf_r+0x1fe>
 8004da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004da2:	f7ff fddd 	bl	8004960 <__retarget_lock_release_recursive>
 8004da6:	89ab      	ldrh	r3, [r5, #12]
 8004da8:	065b      	lsls	r3, r3, #25
 8004daa:	f53f af1f 	bmi.w	8004bec <_vfiprintf_r+0x44>
 8004dae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004db0:	e71e      	b.n	8004bf0 <_vfiprintf_r+0x48>
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <_vfiprintf_r+0x228>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f000 f879 	bl	8004eb4 <_printf_i>
 8004dc2:	e7e4      	b.n	8004d8e <_vfiprintf_r+0x1e6>
 8004dc4:	080053b4 	.word	0x080053b4
 8004dc8:	080053be 	.word	0x080053be
 8004dcc:	00000000 	.word	0x00000000
 8004dd0:	08004b83 	.word	0x08004b83
 8004dd4:	080053ba 	.word	0x080053ba

08004dd8 <_printf_common>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	4616      	mov	r6, r2
 8004dde:	4698      	mov	r8, r3
 8004de0:	688a      	ldr	r2, [r1, #8]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfb8      	it	lt
 8004dec:	4613      	movlt	r3, r2
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df4:	4607      	mov	r7, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b10a      	cbz	r2, 8004dfe <_printf_common+0x26>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	0699      	lsls	r1, r3, #26
 8004e02:	bf42      	ittt	mi
 8004e04:	6833      	ldrmi	r3, [r6, #0]
 8004e06:	3302      	addmi	r3, #2
 8004e08:	6033      	strmi	r3, [r6, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d106      	bne.n	8004e20 <_printf_common+0x48>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dc26      	bgt.n	8004e6e <_printf_common+0x96>
 8004e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	3b00      	subs	r3, #0
 8004e28:	bf18      	it	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	0692      	lsls	r2, r2, #26
 8004e2e:	d42b      	bmi.n	8004e88 <_printf_common+0xb0>
 8004e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c8      	blx	r9
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d01e      	beq.n	8004e7c <_printf_common+0xa4>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf02      	ittt	eq
 8004e4a:	68e5      	ldreq	r5, [r4, #12]
 8004e4c:	6833      	ldreq	r3, [r6, #0]
 8004e4e:	1aed      	subeq	r5, r5, r3
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	bf0c      	ite	eq
 8004e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e58:	2500      	movne	r5, #0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bfc4      	itt	gt
 8004e5e:	1a9b      	subgt	r3, r3, r2
 8004e60:	18ed      	addgt	r5, r5, r3
 8004e62:	2600      	movs	r6, #0
 8004e64:	341a      	adds	r4, #26
 8004e66:	42b5      	cmp	r5, r6
 8004e68:	d11a      	bne.n	8004ea0 <_printf_common+0xc8>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e008      	b.n	8004e80 <_printf_common+0xa8>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	4641      	mov	r1, r8
 8004e74:	4638      	mov	r0, r7
 8004e76:	47c8      	blx	r9
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d103      	bne.n	8004e84 <_printf_common+0xac>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	3501      	adds	r5, #1
 8004e86:	e7c6      	b.n	8004e16 <_printf_common+0x3e>
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	2030      	movs	r0, #48	@ 0x30
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e92:	4422      	add	r2, r4
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7c7      	b.n	8004e30 <_printf_common+0x58>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d0e6      	beq.n	8004e7c <_printf_common+0xa4>
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7d9      	b.n	8004e66 <_printf_common+0x8e>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ebc:	2f78      	cmp	r7, #120	@ 0x78
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	@ 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d2 	beq.w	800507a <_printf_i+0x1c6>
 8004ed6:	2f58      	cmp	r7, #88	@ 0x58
 8004ed8:	f000 80b9 	beq.w	800504e <_printf_i+0x19a>
 8004edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	08005061 	.word	0x08005061
 8004f24:	08004f8b 	.word	0x08004f8b
 8004f28:	0800501b 	.word	0x0800501b
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	08005083 	.word	0x08005083
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f8b 	.word	0x08004f8b
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005023 	.word	0x08005023
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6032      	str	r2, [r6, #0]
 8004f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09d      	b.n	800509c <_printf_i+0x1e8>
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	1d19      	adds	r1, r3, #4
 8004f66:	6031      	str	r1, [r6, #0]
 8004f68:	0606      	lsls	r6, r0, #24
 8004f6a:	d501      	bpl.n	8004f70 <_printf_i+0xbc>
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	e003      	b.n	8004f78 <_printf_i+0xc4>
 8004f70:	0645      	lsls	r5, r0, #25
 8004f72:	d5fb      	bpl.n	8004f6c <_printf_i+0xb8>
 8004f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	da03      	bge.n	8004f84 <_printf_i+0xd0>
 8004f7c:	232d      	movs	r3, #45	@ 0x2d
 8004f7e:	426d      	negs	r5, r5
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f84:	4859      	ldr	r0, [pc, #356]	@ (80050ec <_printf_i+0x238>)
 8004f86:	230a      	movs	r3, #10
 8004f88:	e011      	b.n	8004fae <_printf_i+0xfa>
 8004f8a:	6821      	ldr	r1, [r4, #0]
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	0608      	lsls	r0, r1, #24
 8004f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f94:	d402      	bmi.n	8004f9c <_printf_i+0xe8>
 8004f96:	0649      	lsls	r1, r1, #25
 8004f98:	bf48      	it	mi
 8004f9a:	b2ad      	uxthmi	r5, r5
 8004f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f9e:	4853      	ldr	r0, [pc, #332]	@ (80050ec <_printf_i+0x238>)
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	bf14      	ite	ne
 8004fa4:	230a      	movne	r3, #10
 8004fa6:	2308      	moveq	r3, #8
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fae:	6866      	ldr	r6, [r4, #4]
 8004fb0:	60a6      	str	r6, [r4, #8]
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	bfa2      	ittt	ge
 8004fb6:	6821      	ldrge	r1, [r4, #0]
 8004fb8:	f021 0104 	bicge.w	r1, r1, #4
 8004fbc:	6021      	strge	r1, [r4, #0]
 8004fbe:	b90d      	cbnz	r5, 8004fc4 <_printf_i+0x110>
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	d04b      	beq.n	800505c <_printf_i+0x1a8>
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fca:	fb03 5711 	mls	r7, r3, r1, r5
 8004fce:	5dc7      	ldrb	r7, [r0, r7]
 8004fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fd4:	462f      	mov	r7, r5
 8004fd6:	42bb      	cmp	r3, r7
 8004fd8:	460d      	mov	r5, r1
 8004fda:	d9f4      	bls.n	8004fc6 <_printf_i+0x112>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d10b      	bne.n	8004ff8 <_printf_i+0x144>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	07df      	lsls	r7, r3, #31
 8004fe4:	d508      	bpl.n	8004ff8 <_printf_i+0x144>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	6861      	ldr	r1, [r4, #4]
 8004fea:	4299      	cmp	r1, r3
 8004fec:	bfde      	ittt	le
 8004fee:	2330      	movle	r3, #48	@ 0x30
 8004ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ff4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ff8:	1b92      	subs	r2, r2, r6
 8004ffa:	6122      	str	r2, [r4, #16]
 8004ffc:	f8cd a000 	str.w	sl, [sp]
 8005000:	464b      	mov	r3, r9
 8005002:	aa03      	add	r2, sp, #12
 8005004:	4621      	mov	r1, r4
 8005006:	4640      	mov	r0, r8
 8005008:	f7ff fee6 	bl	8004dd8 <_printf_common>
 800500c:	3001      	adds	r0, #1
 800500e:	d14a      	bne.n	80050a6 <_printf_i+0x1f2>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	b004      	add	sp, #16
 8005016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	f043 0320 	orr.w	r3, r3, #32
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	4833      	ldr	r0, [pc, #204]	@ (80050f0 <_printf_i+0x23c>)
 8005024:	2778      	movs	r7, #120	@ 0x78
 8005026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	6831      	ldr	r1, [r6, #0]
 800502e:	061f      	lsls	r7, r3, #24
 8005030:	f851 5b04 	ldr.w	r5, [r1], #4
 8005034:	d402      	bmi.n	800503c <_printf_i+0x188>
 8005036:	065f      	lsls	r7, r3, #25
 8005038:	bf48      	it	mi
 800503a:	b2ad      	uxthmi	r5, r5
 800503c:	6031      	str	r1, [r6, #0]
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	bf44      	itt	mi
 8005042:	f043 0320 	orrmi.w	r3, r3, #32
 8005046:	6023      	strmi	r3, [r4, #0]
 8005048:	b11d      	cbz	r5, 8005052 <_printf_i+0x19e>
 800504a:	2310      	movs	r3, #16
 800504c:	e7ac      	b.n	8004fa8 <_printf_i+0xf4>
 800504e:	4827      	ldr	r0, [pc, #156]	@ (80050ec <_printf_i+0x238>)
 8005050:	e7e9      	b.n	8005026 <_printf_i+0x172>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f023 0320 	bic.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	e7f6      	b.n	800504a <_printf_i+0x196>
 800505c:	4616      	mov	r6, r2
 800505e:	e7bd      	b.n	8004fdc <_printf_i+0x128>
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	6961      	ldr	r1, [r4, #20]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	062e      	lsls	r6, r5, #24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	d501      	bpl.n	8005074 <_printf_i+0x1c0>
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0x1c6>
 8005074:	0668      	lsls	r0, r5, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0x1bc>
 8005078:	8019      	strh	r1, [r3, #0]
 800507a:	2300      	movs	r3, #0
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	4616      	mov	r6, r2
 8005080:	e7bc      	b.n	8004ffc <_printf_i+0x148>
 8005082:	6833      	ldr	r3, [r6, #0]
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	6032      	str	r2, [r6, #0]
 8005088:	681e      	ldr	r6, [r3, #0]
 800508a:	6862      	ldr	r2, [r4, #4]
 800508c:	2100      	movs	r1, #0
 800508e:	4630      	mov	r0, r6
 8005090:	f7fb f8c6 	bl	8000220 <memchr>
 8005094:	b108      	cbz	r0, 800509a <_printf_i+0x1e6>
 8005096:	1b80      	subs	r0, r0, r6
 8005098:	6060      	str	r0, [r4, #4]
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	2300      	movs	r3, #0
 80050a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a4:	e7aa      	b.n	8004ffc <_printf_i+0x148>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	4632      	mov	r2, r6
 80050aa:	4649      	mov	r1, r9
 80050ac:	4640      	mov	r0, r8
 80050ae:	47d0      	blx	sl
 80050b0:	3001      	adds	r0, #1
 80050b2:	d0ad      	beq.n	8005010 <_printf_i+0x15c>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d413      	bmi.n	80050e2 <_printf_i+0x22e>
 80050ba:	68e0      	ldr	r0, [r4, #12]
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	4298      	cmp	r0, r3
 80050c0:	bfb8      	it	lt
 80050c2:	4618      	movlt	r0, r3
 80050c4:	e7a6      	b.n	8005014 <_printf_i+0x160>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4632      	mov	r2, r6
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	47d0      	blx	sl
 80050d0:	3001      	adds	r0, #1
 80050d2:	d09d      	beq.n	8005010 <_printf_i+0x15c>
 80050d4:	3501      	adds	r5, #1
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	9903      	ldr	r1, [sp, #12]
 80050da:	1a5b      	subs	r3, r3, r1
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dcf2      	bgt.n	80050c6 <_printf_i+0x212>
 80050e0:	e7eb      	b.n	80050ba <_printf_i+0x206>
 80050e2:	2500      	movs	r5, #0
 80050e4:	f104 0619 	add.w	r6, r4, #25
 80050e8:	e7f5      	b.n	80050d6 <_printf_i+0x222>
 80050ea:	bf00      	nop
 80050ec:	080053c5 	.word	0x080053c5
 80050f0:	080053d6 	.word	0x080053d6

080050f4 <__swbuf_r>:
 80050f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050f6:	460e      	mov	r6, r1
 80050f8:	4614      	mov	r4, r2
 80050fa:	4605      	mov	r5, r0
 80050fc:	b118      	cbz	r0, 8005106 <__swbuf_r+0x12>
 80050fe:	6a03      	ldr	r3, [r0, #32]
 8005100:	b90b      	cbnz	r3, 8005106 <__swbuf_r+0x12>
 8005102:	f7ff fb27 	bl	8004754 <__sinit>
 8005106:	69a3      	ldr	r3, [r4, #24]
 8005108:	60a3      	str	r3, [r4, #8]
 800510a:	89a3      	ldrh	r3, [r4, #12]
 800510c:	071a      	lsls	r2, r3, #28
 800510e:	d501      	bpl.n	8005114 <__swbuf_r+0x20>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	b943      	cbnz	r3, 8005126 <__swbuf_r+0x32>
 8005114:	4621      	mov	r1, r4
 8005116:	4628      	mov	r0, r5
 8005118:	f000 f82a 	bl	8005170 <__swsetup_r>
 800511c:	b118      	cbz	r0, 8005126 <__swbuf_r+0x32>
 800511e:	f04f 37ff 	mov.w	r7, #4294967295
 8005122:	4638      	mov	r0, r7
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	6922      	ldr	r2, [r4, #16]
 800512a:	1a98      	subs	r0, r3, r2
 800512c:	6963      	ldr	r3, [r4, #20]
 800512e:	b2f6      	uxtb	r6, r6
 8005130:	4283      	cmp	r3, r0
 8005132:	4637      	mov	r7, r6
 8005134:	dc05      	bgt.n	8005142 <__swbuf_r+0x4e>
 8005136:	4621      	mov	r1, r4
 8005138:	4628      	mov	r0, r5
 800513a:	f7ff fa43 	bl	80045c4 <_fflush_r>
 800513e:	2800      	cmp	r0, #0
 8005140:	d1ed      	bne.n	800511e <__swbuf_r+0x2a>
 8005142:	68a3      	ldr	r3, [r4, #8]
 8005144:	3b01      	subs	r3, #1
 8005146:	60a3      	str	r3, [r4, #8]
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	1c5a      	adds	r2, r3, #1
 800514c:	6022      	str	r2, [r4, #0]
 800514e:	701e      	strb	r6, [r3, #0]
 8005150:	6962      	ldr	r2, [r4, #20]
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	429a      	cmp	r2, r3
 8005156:	d004      	beq.n	8005162 <__swbuf_r+0x6e>
 8005158:	89a3      	ldrh	r3, [r4, #12]
 800515a:	07db      	lsls	r3, r3, #31
 800515c:	d5e1      	bpl.n	8005122 <__swbuf_r+0x2e>
 800515e:	2e0a      	cmp	r6, #10
 8005160:	d1df      	bne.n	8005122 <__swbuf_r+0x2e>
 8005162:	4621      	mov	r1, r4
 8005164:	4628      	mov	r0, r5
 8005166:	f7ff fa2d 	bl	80045c4 <_fflush_r>
 800516a:	2800      	cmp	r0, #0
 800516c:	d0d9      	beq.n	8005122 <__swbuf_r+0x2e>
 800516e:	e7d6      	b.n	800511e <__swbuf_r+0x2a>

08005170 <__swsetup_r>:
 8005170:	b538      	push	{r3, r4, r5, lr}
 8005172:	4b29      	ldr	r3, [pc, #164]	@ (8005218 <__swsetup_r+0xa8>)
 8005174:	4605      	mov	r5, r0
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	460c      	mov	r4, r1
 800517a:	b118      	cbz	r0, 8005184 <__swsetup_r+0x14>
 800517c:	6a03      	ldr	r3, [r0, #32]
 800517e:	b90b      	cbnz	r3, 8005184 <__swsetup_r+0x14>
 8005180:	f7ff fae8 	bl	8004754 <__sinit>
 8005184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005188:	0719      	lsls	r1, r3, #28
 800518a:	d422      	bmi.n	80051d2 <__swsetup_r+0x62>
 800518c:	06da      	lsls	r2, r3, #27
 800518e:	d407      	bmi.n	80051a0 <__swsetup_r+0x30>
 8005190:	2209      	movs	r2, #9
 8005192:	602a      	str	r2, [r5, #0]
 8005194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005198:	81a3      	strh	r3, [r4, #12]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	e033      	b.n	8005208 <__swsetup_r+0x98>
 80051a0:	0758      	lsls	r0, r3, #29
 80051a2:	d512      	bpl.n	80051ca <__swsetup_r+0x5a>
 80051a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051a6:	b141      	cbz	r1, 80051ba <__swsetup_r+0x4a>
 80051a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051ac:	4299      	cmp	r1, r3
 80051ae:	d002      	beq.n	80051b6 <__swsetup_r+0x46>
 80051b0:	4628      	mov	r0, r5
 80051b2:	f7ff fbd7 	bl	8004964 <_free_r>
 80051b6:	2300      	movs	r3, #0
 80051b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80051ba:	89a3      	ldrh	r3, [r4, #12]
 80051bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051c0:	81a3      	strh	r3, [r4, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	6063      	str	r3, [r4, #4]
 80051c6:	6923      	ldr	r3, [r4, #16]
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f043 0308 	orr.w	r3, r3, #8
 80051d0:	81a3      	strh	r3, [r4, #12]
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	b94b      	cbnz	r3, 80051ea <__swsetup_r+0x7a>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051e0:	d003      	beq.n	80051ea <__swsetup_r+0x7a>
 80051e2:	4621      	mov	r1, r4
 80051e4:	4628      	mov	r0, r5
 80051e6:	f000 f84f 	bl	8005288 <__smakebuf_r>
 80051ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ee:	f013 0201 	ands.w	r2, r3, #1
 80051f2:	d00a      	beq.n	800520a <__swsetup_r+0x9a>
 80051f4:	2200      	movs	r2, #0
 80051f6:	60a2      	str	r2, [r4, #8]
 80051f8:	6962      	ldr	r2, [r4, #20]
 80051fa:	4252      	negs	r2, r2
 80051fc:	61a2      	str	r2, [r4, #24]
 80051fe:	6922      	ldr	r2, [r4, #16]
 8005200:	b942      	cbnz	r2, 8005214 <__swsetup_r+0xa4>
 8005202:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005206:	d1c5      	bne.n	8005194 <__swsetup_r+0x24>
 8005208:	bd38      	pop	{r3, r4, r5, pc}
 800520a:	0799      	lsls	r1, r3, #30
 800520c:	bf58      	it	pl
 800520e:	6962      	ldrpl	r2, [r4, #20]
 8005210:	60a2      	str	r2, [r4, #8]
 8005212:	e7f4      	b.n	80051fe <__swsetup_r+0x8e>
 8005214:	2000      	movs	r0, #0
 8005216:	e7f7      	b.n	8005208 <__swsetup_r+0x98>
 8005218:	20000018 	.word	0x20000018

0800521c <_sbrk_r>:
 800521c:	b538      	push	{r3, r4, r5, lr}
 800521e:	4d06      	ldr	r5, [pc, #24]	@ (8005238 <_sbrk_r+0x1c>)
 8005220:	2300      	movs	r3, #0
 8005222:	4604      	mov	r4, r0
 8005224:	4608      	mov	r0, r1
 8005226:	602b      	str	r3, [r5, #0]
 8005228:	f7fb fc06 	bl	8000a38 <_sbrk>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_sbrk_r+0x1a>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_sbrk_r+0x1a>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000260 	.word	0x20000260

0800523c <__swhatbuf_r>:
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	460c      	mov	r4, r1
 8005240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005244:	2900      	cmp	r1, #0
 8005246:	b096      	sub	sp, #88	@ 0x58
 8005248:	4615      	mov	r5, r2
 800524a:	461e      	mov	r6, r3
 800524c:	da0d      	bge.n	800526a <__swhatbuf_r+0x2e>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	bf14      	ite	ne
 800525a:	2340      	movne	r3, #64	@ 0x40
 800525c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005260:	2000      	movs	r0, #0
 8005262:	6031      	str	r1, [r6, #0]
 8005264:	602b      	str	r3, [r5, #0]
 8005266:	b016      	add	sp, #88	@ 0x58
 8005268:	bd70      	pop	{r4, r5, r6, pc}
 800526a:	466a      	mov	r2, sp
 800526c:	f000 f848 	bl	8005300 <_fstat_r>
 8005270:	2800      	cmp	r0, #0
 8005272:	dbec      	blt.n	800524e <__swhatbuf_r+0x12>
 8005274:	9901      	ldr	r1, [sp, #4]
 8005276:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800527a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800527e:	4259      	negs	r1, r3
 8005280:	4159      	adcs	r1, r3
 8005282:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005286:	e7eb      	b.n	8005260 <__swhatbuf_r+0x24>

08005288 <__smakebuf_r>:
 8005288:	898b      	ldrh	r3, [r1, #12]
 800528a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800528c:	079d      	lsls	r5, r3, #30
 800528e:	4606      	mov	r6, r0
 8005290:	460c      	mov	r4, r1
 8005292:	d507      	bpl.n	80052a4 <__smakebuf_r+0x1c>
 8005294:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	6123      	str	r3, [r4, #16]
 800529c:	2301      	movs	r3, #1
 800529e:	6163      	str	r3, [r4, #20]
 80052a0:	b003      	add	sp, #12
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052a4:	ab01      	add	r3, sp, #4
 80052a6:	466a      	mov	r2, sp
 80052a8:	f7ff ffc8 	bl	800523c <__swhatbuf_r>
 80052ac:	9f00      	ldr	r7, [sp, #0]
 80052ae:	4605      	mov	r5, r0
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	f7ff fbc2 	bl	8004a3c <_malloc_r>
 80052b8:	b948      	cbnz	r0, 80052ce <__smakebuf_r+0x46>
 80052ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052be:	059a      	lsls	r2, r3, #22
 80052c0:	d4ee      	bmi.n	80052a0 <__smakebuf_r+0x18>
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	f043 0302 	orr.w	r3, r3, #2
 80052ca:	81a3      	strh	r3, [r4, #12]
 80052cc:	e7e2      	b.n	8005294 <__smakebuf_r+0xc>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	6020      	str	r0, [r4, #0]
 80052d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052d6:	81a3      	strh	r3, [r4, #12]
 80052d8:	9b01      	ldr	r3, [sp, #4]
 80052da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80052de:	b15b      	cbz	r3, 80052f8 <__smakebuf_r+0x70>
 80052e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 f81d 	bl	8005324 <_isatty_r>
 80052ea:	b128      	cbz	r0, 80052f8 <__smakebuf_r+0x70>
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	f023 0303 	bic.w	r3, r3, #3
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	81a3      	strh	r3, [r4, #12]
 80052f8:	89a3      	ldrh	r3, [r4, #12]
 80052fa:	431d      	orrs	r5, r3
 80052fc:	81a5      	strh	r5, [r4, #12]
 80052fe:	e7cf      	b.n	80052a0 <__smakebuf_r+0x18>

08005300 <_fstat_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	4d07      	ldr	r5, [pc, #28]	@ (8005320 <_fstat_r+0x20>)
 8005304:	2300      	movs	r3, #0
 8005306:	4604      	mov	r4, r0
 8005308:	4608      	mov	r0, r1
 800530a:	4611      	mov	r1, r2
 800530c:	602b      	str	r3, [r5, #0]
 800530e:	f7fb fb6a 	bl	80009e6 <_fstat>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d102      	bne.n	800531c <_fstat_r+0x1c>
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	b103      	cbz	r3, 800531c <_fstat_r+0x1c>
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	bd38      	pop	{r3, r4, r5, pc}
 800531e:	bf00      	nop
 8005320:	20000260 	.word	0x20000260

08005324 <_isatty_r>:
 8005324:	b538      	push	{r3, r4, r5, lr}
 8005326:	4d06      	ldr	r5, [pc, #24]	@ (8005340 <_isatty_r+0x1c>)
 8005328:	2300      	movs	r3, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	602b      	str	r3, [r5, #0]
 8005330:	f7fb fb69 	bl	8000a06 <_isatty>
 8005334:	1c43      	adds	r3, r0, #1
 8005336:	d102      	bne.n	800533e <_isatty_r+0x1a>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	b103      	cbz	r3, 800533e <_isatty_r+0x1a>
 800533c:	6023      	str	r3, [r4, #0]
 800533e:	bd38      	pop	{r3, r4, r5, pc}
 8005340:	20000260 	.word	0x20000260

08005344 <_init>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr

08005350 <_fini>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr
