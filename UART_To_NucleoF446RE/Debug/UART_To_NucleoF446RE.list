
UART_To_NucleoF446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005130  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a4  080053a4  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080053a4  080053a4  000063a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ac  080053ac  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ac  080053ac  000063ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053b0  080053b0  000063b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080053b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  0800541c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800541c  00007274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daaf  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002025  00000000  00000000  00014b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00016b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  00017638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc58  00000000  00000000  00017e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d869  00000000  00000000  00035acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b881d  00000000  00000000  00043334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fbb51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003294  00000000  00000000  000fbb94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fee28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	080052f8 	.word	0x080052f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	080052f8 	.word	0x080052f8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fa8a 	bl	8000ace <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f821 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8ab 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 f85d 	bl	8000680 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char RxData[6] = "Hello";
 80005c6:	4a0c      	ldr	r2, [pc, #48]	@ (80005f8 <main+0x48>)
 80005c8:	463b      	mov	r3, r7
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // start listening for UART
  HAL_UART_Receive_IT(&huart2, RxData, sizeof(RxData));
 80005d4:	463b      	mov	r3, r7
 80005d6:	2206      	movs	r2, #6
 80005d8:	4619      	mov	r1, r3
 80005da:	4808      	ldr	r0, [pc, #32]	@ (80005fc <main+0x4c>)
 80005dc:	f001 ff0c 	bl	80023f8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart2, RxData, sizeof(RxData), 10);
 80005e0:	4639      	mov	r1, r7
 80005e2:	230a      	movs	r3, #10
 80005e4:	2206      	movs	r2, #6
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <main+0x4c>)
 80005e8:	f001 fe78 	bl	80022dc <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80005ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005f0:	f000 fade 	bl	8000bb0 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, RxData, sizeof(RxData), 10);
 80005f4:	bf00      	nop
 80005f6:	e7f3      	b.n	80005e0 <main+0x30>
 80005f8:	08005310 	.word	0x08005310
 80005fc:	20000084 	.word	0x20000084

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	2238      	movs	r2, #56	@ 0x38
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f905 	bl	800481e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000622:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000626:	f000 fe37 	bl	8001298 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000634:	2340      	movs	r3, #64	@ 0x40
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000638:	2300      	movs	r3, #0
 800063a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fedd 	bl	8001400 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800064c:	f000 f89c 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f9db 	bl	8001a24 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000674:	f000 f888 	bl	8000788 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3750      	adds	r7, #80	@ 0x50
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000684:	4b22      	ldr	r3, [pc, #136]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 8000686:	4a23      	ldr	r2, [pc, #140]	@ (8000714 <MX_USART2_UART_Init+0x94>)
 8000688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c2:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c8:	4811      	ldr	r0, [pc, #68]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006ca:	f001 fdb7 	bl	800223c <HAL_UART_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006d4:	f000 f858 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	480d      	ldr	r0, [pc, #52]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006dc:	f003 fdfd 	bl	80042da <HAL_UARTEx_SetTxFifoThreshold>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006e6:	f000 f84f 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4808      	ldr	r0, [pc, #32]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006ee:	f003 fe32 	bl	8004356 <HAL_UARTEx_SetRxFifoThreshold>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006f8:	f000 f846 	bl	8000788 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_USART2_UART_Init+0x90>)
 80006fe:	f003 fdb3 	bl	8004268 <HAL_UARTEx_DisableFifoMode>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000708:	f000 f83e 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000084 	.word	0x20000084
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_GPIO_Init+0x2c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <MX_GPIO_Init+0x2c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_GPIO_Init+0x2c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// receive callback function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	printf("Received Message: %s\n", RxData);
 8000750:	4909      	ldr	r1, [pc, #36]	@ (8000778 <HAL_UART_RxCpltCallback+0x30>)
 8000752:	480a      	ldr	r0, [pc, #40]	@ (800077c <HAL_UART_RxCpltCallback+0x34>)
 8000754:	f004 f80e 	bl	8004774 <iprintf>
	fflush(stdout);
 8000758:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <HAL_UART_RxCpltCallback+0x38>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	4618      	mov	r0, r3
 8000760:	f003 ff32 	bl	80045c8 <fflush>

	// restart listening for UART messages
	HAL_UART_Receive_IT(&huart2, RxData, sizeof(RxData));
 8000764:	2206      	movs	r2, #6
 8000766:	4904      	ldr	r1, [pc, #16]	@ (8000778 <HAL_UART_RxCpltCallback+0x30>)
 8000768:	4806      	ldr	r0, [pc, #24]	@ (8000784 <HAL_UART_RxCpltCallback+0x3c>)
 800076a:	f001 fe45 	bl	80023f8 <HAL_UART_Receive_IT>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000118 	.word	0x20000118
 800077c:	08005318 	.word	0x08005318
 8000780:	20000018 	.word	0x20000018
 8000784:	20000084 	.word	0x20000084

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <HAL_MspInit+0x44>)
 800079c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800079e:	4a0e      	ldr	r2, [pc, #56]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <HAL_MspInit+0x44>)
 80007a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007b6:	4a08      	ldr	r2, [pc, #32]	@ (80007d8 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_MspInit+0x44>)
 80007c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007ca:	f000 fe09 	bl	80013e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40021000 	.word	0x40021000

080007dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09a      	sub	sp, #104	@ 0x68
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	2244      	movs	r2, #68	@ 0x44
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f004 f80e 	bl	800481e <memset>
  if(huart->Instance==USART2)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <HAL_UART_MspInit+0xb8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d13e      	bne.n	800088a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb1f 	bl	8001e5c <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000824:	f7ff ffb0 	bl	8000788 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 800082a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082c:	4a1a      	ldr	r2, [pc, #104]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 800082e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000832:	6593      	str	r3, [r2, #88]	@ 0x58
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 8000842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000844:	4a14      	ldr	r2, [pc, #80]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 8000846:	f043 0301 	orr.w	r3, r3, #1
 800084a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_UART_MspInit+0xbc>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000858:	230c      	movs	r3, #12
 800085a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000868:	2307      	movs	r3, #7
 800086a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f000 fb8d 	bl	8000f94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2026      	movs	r0, #38	@ 0x26
 8000880:	f000 fa93 	bl	8000daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000884:	2026      	movs	r0, #38	@ 0x26
 8000886:	f000 faaa 	bl	8000dde <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800088a:	bf00      	nop
 800088c:	3768      	adds	r7, #104	@ 0x68
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004400 	.word	0x40004400
 8000898:	40021000 	.word	0x40021000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <NMI_Handler+0x4>

080008a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <MemManage_Handler+0x4>

080008b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <BusFault_Handler+0x4>

080008bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <UsageFault_Handler+0x4>

080008c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f2:	f000 f93f 	bl	8000b74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000900:	4802      	ldr	r0, [pc, #8]	@ (800090c <USART2_IRQHandler+0x10>)
 8000902:	f001 fdc5 	bl	8002490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000084 	.word	0x20000084

08000910 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000922:	f3af 8000 	nop.w
 8000926:	4601      	mov	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
  }

  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e009      	b.n	8000970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf1      	blt.n	800095c <_write+0x12>
  }
  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_close>:

int _close(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009aa:	605a      	str	r2, [r3, #4]
  return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	@ (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	@ (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f003 ff4e 	bl	80048bc <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	@ (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20008000 	.word	0x20008000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	20000120 	.word	0x20000120
 8000a54:	20000278 	.word	0x20000278

08000a58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	@ (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a80:	f7ff ffea 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 ff0d 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aae:	f7ff fd7f 	bl	80005b0 <main>

08000ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ac0:	080053b4 	.word	0x080053b4
  ldr r2, =_sbss
 8000ac4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac8:	20000274 	.word	0x20000274

08000acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC1_2_IRQHandler>

08000ace <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad8:	2003      	movs	r0, #3
 8000ada:	f000 f95b 	bl	8000d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	200f      	movs	r0, #15
 8000ae0:	f000 f80e 	bl	8000b00 <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	71fb      	strb	r3, [r7, #7]
 8000aee:	e001      	b.n	8000af4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af0:	f7ff fe50 	bl	8000794 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af4:	79fb      	ldrb	r3, [r7, #7]

}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <HAL_InitTick+0x68>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d022      	beq.n	8000b5a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_InitTick+0x6c>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <HAL_InitTick+0x68>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f966 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10f      	bne.n	8000b54 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b0f      	cmp	r3, #15
 8000b38:	d809      	bhi.n	8000b4e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b42:	f000 f932 	bl	8000daa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b46:	4a0a      	ldr	r2, [pc, #40]	@ (8000b70 <HAL_InitTick+0x70>)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	e007      	b.n	8000b5e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e004      	b.n	8000b5e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e001      	b.n	8000b5e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000004 	.word	0x20000004

08000b74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <HAL_IncTick+0x1c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x20>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a03      	ldr	r2, [pc, #12]	@ (8000b90 <HAL_IncTick+0x1c>)
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	20000124 	.word	0x20000124
 8000b94:	20000008 	.word	0x20000008

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000124 	.word	0x20000124

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff ffee 	bl	8000b98 <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d004      	beq.n	8000bd4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_Delay+0x40>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd4:	bf00      	nop
 8000bd6:	f7ff ffdf 	bl	8000b98 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d8f7      	bhi.n	8000bd6 <HAL_Delay+0x26>
  {
  }
}
 8000be6:	bf00      	nop
 8000be8:	bf00      	nop
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c04:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c10:	4013      	ands	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c26:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <__NVIC_SetPriorityGrouping+0x44>)
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	60d3      	str	r3, [r2, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <__NVIC_GetPriorityGrouping+0x18>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	f003 0307 	and.w	r3, r3, #7
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	db0a      	blt.n	8000cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	490c      	ldr	r1, [pc, #48]	@ (8000ce0 <__NVIC_SetPriority+0x4c>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	0112      	lsls	r2, r2, #4
 8000cb4:	b2d2      	uxtb	r2, r2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cbc:	e00a      	b.n	8000cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4908      	ldr	r1, [pc, #32]	@ (8000ce4 <__NVIC_SetPriority+0x50>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	f003 030f 	and.w	r3, r3, #15
 8000cca:	3b04      	subs	r3, #4
 8000ccc:	0112      	lsls	r2, r2, #4
 8000cce:	b2d2      	uxtb	r2, r2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	761a      	strb	r2, [r3, #24]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b089      	sub	sp, #36	@ 0x24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	f1c3 0307 	rsb	r3, r3, #7
 8000d02:	2b04      	cmp	r3, #4
 8000d04:	bf28      	it	cs
 8000d06:	2304      	movcs	r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	2b06      	cmp	r3, #6
 8000d10:	d902      	bls.n	8000d18 <NVIC_EncodePriority+0x30>
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3b03      	subs	r3, #3
 8000d16:	e000      	b.n	8000d1a <NVIC_EncodePriority+0x32>
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43da      	mvns	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d30:	f04f 31ff 	mov.w	r1, #4294967295
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43d9      	mvns	r1, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	4313      	orrs	r3, r2
         );
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3724      	adds	r7, #36	@ 0x24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d60:	d301      	bcc.n	8000d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00f      	b.n	8000d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <SysTick_Config+0x40>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6e:	210f      	movs	r1, #15
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f7ff ff8e 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	4b05      	ldr	r3, [pc, #20]	@ (8000d90 <SysTick_Config+0x40>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7e:	4b04      	ldr	r3, [pc, #16]	@ (8000d90 <SysTick_Config+0x40>)
 8000d80:	2207      	movs	r2, #7
 8000d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	e000e010 	.word	0xe000e010

08000d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff ff29 	bl	8000bf4 <__NVIC_SetPriorityGrouping>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b086      	sub	sp, #24
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	607a      	str	r2, [r7, #4]
 8000db6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff40 	bl	8000c3c <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff90 	bl	8000ce8 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5f 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff33 	bl	8000c58 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa4 	bl	8000d50 <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b085      	sub	sp, #20
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d005      	beq.n	8000e36 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e037      	b.n	8000ea6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 020e 	bic.w	r2, r2, #14
 8000e44:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e54:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	f003 021f 	and.w	r2, r3, #31
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e82:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00c      	beq.n	8000ea6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e9a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000ea4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d00d      	beq.n	8000ef8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e047      	b.n	8000f88 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f022 020e 	bic.w	r2, r2, #14
 8000f06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2c:	f003 021f 	and.w	r2, r3, #31
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	2101      	movs	r1, #1
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000f44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00c      	beq.n	8000f68 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000f5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000f66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
    }
  }
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000fa2:	e15a      	b.n	800125a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 814c 	beq.w	8001254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4013      	ands	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	f003 0201 	and.w	r2, r3, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d123      	bne.n	80010c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	691a      	ldr	r2, [r3, #16]
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	6939      	ldr	r1, [r7, #16]
 80010c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0203 	and.w	r2, r3, #3
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001102:	2b00      	cmp	r3, #0
 8001104:	f000 80a6 	beq.w	8001254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001108:	4b5b      	ldr	r3, [pc, #364]	@ (8001278 <HAL_GPIO_Init+0x2e4>)
 800110a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110c:	4a5a      	ldr	r2, [pc, #360]	@ (8001278 <HAL_GPIO_Init+0x2e4>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	6613      	str	r3, [r2, #96]	@ 0x60
 8001114:	4b58      	ldr	r3, [pc, #352]	@ (8001278 <HAL_GPIO_Init+0x2e4>)
 8001116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001120:	4a56      	ldr	r2, [pc, #344]	@ (800127c <HAL_GPIO_Init+0x2e8>)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4013      	ands	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800114a:	d01f      	beq.n	800118c <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4c      	ldr	r2, [pc, #304]	@ (8001280 <HAL_GPIO_Init+0x2ec>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d019      	beq.n	8001188 <HAL_GPIO_Init+0x1f4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a4b      	ldr	r2, [pc, #300]	@ (8001284 <HAL_GPIO_Init+0x2f0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d013      	beq.n	8001184 <HAL_GPIO_Init+0x1f0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4a      	ldr	r2, [pc, #296]	@ (8001288 <HAL_GPIO_Init+0x2f4>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d00d      	beq.n	8001180 <HAL_GPIO_Init+0x1ec>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_GPIO_Init+0x2f8>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <HAL_GPIO_Init+0x1e8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a48      	ldr	r2, [pc, #288]	@ (8001290 <HAL_GPIO_Init+0x2fc>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <HAL_GPIO_Init+0x1e4>
 8001174:	2305      	movs	r3, #5
 8001176:	e00a      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001178:	2306      	movs	r3, #6
 800117a:	e008      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 800117c:	2304      	movs	r3, #4
 800117e:	e006      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001180:	2303      	movs	r3, #3
 8001182:	e004      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001184:	2302      	movs	r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 8001188:	2301      	movs	r3, #1
 800118a:	e000      	b.n	800118e <HAL_GPIO_Init+0x1fa>
 800118c:	2300      	movs	r3, #0
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	f002 0203 	and.w	r2, r2, #3
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	4093      	lsls	r3, r2
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800119e:	4937      	ldr	r1, [pc, #220]	@ (800127c <HAL_GPIO_Init+0x2e8>)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ac:	4b39      	ldr	r3, [pc, #228]	@ (8001294 <HAL_GPIO_Init+0x300>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011d0:	4a30      	ldr	r2, [pc, #192]	@ (8001294 <HAL_GPIO_Init+0x300>)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001294 <HAL_GPIO_Init+0x300>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011fa:	4a26      	ldr	r2, [pc, #152]	@ (8001294 <HAL_GPIO_Init+0x300>)
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001200:	4b24      	ldr	r3, [pc, #144]	@ (8001294 <HAL_GPIO_Init+0x300>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <HAL_GPIO_Init+0x300>)
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800122a:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <HAL_GPIO_Init+0x300>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800124e:	4a11      	ldr	r2, [pc, #68]	@ (8001294 <HAL_GPIO_Init+0x300>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3301      	adds	r3, #1
 8001258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	f47f ae9d 	bne.w	8000fa4 <HAL_GPIO_Init+0x10>
  }
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	48000400 	.word	0x48000400
 8001284:	48000800 	.word	0x48000800
 8001288:	48000c00 	.word	0x48000c00
 800128c:	48001000 	.word	0x48001000
 8001290:	48001400 	.word	0x48001400
 8001294:	40010400 	.word	0x40010400

08001298 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d141      	bne.n	800132a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012a6:	4b4b      	ldr	r3, [pc, #300]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012b2:	d131      	bne.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012b4:	4b47      	ldr	r3, [pc, #284]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012ba:	4a46      	ldr	r2, [pc, #280]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012c4:	4b43      	ldr	r3, [pc, #268]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80012cc:	4a41      	ldr	r2, [pc, #260]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012d4:	4b40      	ldr	r3, [pc, #256]	@ (80013d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2232      	movs	r2, #50	@ 0x32
 80012da:	fb02 f303 	mul.w	r3, r2, r3
 80012de:	4a3f      	ldr	r2, [pc, #252]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012e0:	fba2 2303 	umull	r2, r3, r2, r3
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	3301      	adds	r3, #1
 80012e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ea:	e002      	b.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012f2:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012fe:	d102      	bne.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f2      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001306:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001312:	d158      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e057      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001318:	4b2e      	ldr	r3, [pc, #184]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800131e:	4a2d      	ldr	r2, [pc, #180]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001324:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001328:	e04d      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001330:	d141      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001332:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800133a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800133e:	d131      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001340:	4b24      	ldr	r3, [pc, #144]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800134c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001358:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800135a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800135e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2232      	movs	r2, #50	@ 0x32
 8001366:	fb02 f303 	mul.w	r3, r2, r3
 800136a:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	0c9b      	lsrs	r3, r3, #18
 8001372:	3301      	adds	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001376:	e002      	b.n	800137e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	3b01      	subs	r3, #1
 800137c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800138a:	d102      	bne.n	8001392 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f2      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800139e:	d112      	bne.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e011      	b.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80013b4:	e007      	b.n	80013c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013be:	4a05      	ldr	r2, [pc, #20]	@ (80013d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	40007000 	.word	0x40007000
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ee:	6093      	str	r3, [r2, #8]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40007000 	.word	0x40007000

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e2fe      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b97      	ldr	r3, [pc, #604]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b94      	ldr	r3, [pc, #592]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x3e>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x44>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b08      	cmp	r3, #8
 8001442:	d10b      	bne.n	800145c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	4b8d      	ldr	r3, [pc, #564]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d05b      	beq.n	8001508 <HAL_RCC_OscConfig+0x108>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d157      	bne.n	8001508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e2d9      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001464:	d106      	bne.n	8001474 <HAL_RCC_OscConfig+0x74>
 8001466:	4b85      	ldr	r3, [pc, #532]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a84      	ldr	r2, [pc, #528]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800146c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	e01d      	b.n	80014b0 <HAL_RCC_OscConfig+0xb0>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x98>
 800147e:	4b7f      	ldr	r3, [pc, #508]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7e      	ldr	r2, [pc, #504]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b7c      	ldr	r3, [pc, #496]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a7b      	ldr	r2, [pc, #492]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0xb0>
 8001498:	4b78      	ldr	r3, [pc, #480]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a77      	ldr	r2, [pc, #476]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800149e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	4b75      	ldr	r3, [pc, #468]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a74      	ldr	r2, [pc, #464]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80014aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d013      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff fb6e 	bl	8000b98 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c0:	f7ff fb6a 	bl	8000b98 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	@ 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e29e      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	4b6a      	ldr	r3, [pc, #424]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0xc0>
 80014de:	e014      	b.n	800150a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb5a 	bl	8000b98 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fb56 	bl	8000b98 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e28a      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fa:	4b60      	ldr	r3, [pc, #384]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0xe8>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d075      	beq.n	8001602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001516:	4b59      	ldr	r3, [pc, #356]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001520:	4b56      	ldr	r3, [pc, #344]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	d102      	bne.n	8001536 <HAL_RCC_OscConfig+0x136>
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d002      	beq.n	800153c <HAL_RCC_OscConfig+0x13c>
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d11f      	bne.n	800157c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800153c:	4b4f      	ldr	r3, [pc, #316]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_OscConfig+0x154>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d101      	bne.n	8001554 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e25d      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001554:	4b49      	ldr	r3, [pc, #292]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	4946      	ldr	r1, [pc, #280]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001568:	4b45      	ldr	r3, [pc, #276]	@ (8001680 <HAL_RCC_OscConfig+0x280>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fac7 	bl	8000b00 <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d043      	beq.n	8001600 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e249      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d023      	beq.n	80015cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001584:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a3c      	ldr	r2, [pc, #240]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fb02 	bl	8000b98 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fafe 	bl	8000b98 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e232      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015aa:	4b34      	ldr	r3, [pc, #208]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b31      	ldr	r3, [pc, #196]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	061b      	lsls	r3, r3, #24
 80015c4:	492d      	ldr	r1, [pc, #180]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4b2b      	ldr	r3, [pc, #172]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2a      	ldr	r2, [pc, #168]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fade 	bl	8000b98 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fada 	bl	8000b98 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e20e      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015f2:	4b22      	ldr	r3, [pc, #136]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e0>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d041      	beq.n	8001692 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01c      	beq.n	8001650 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161c:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fab7 	bl	8000b98 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fab3 	bl	8000b98 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1e7      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ef      	beq.n	800162e <HAL_RCC_OscConfig+0x22e>
 800164e:	e020      	b.n	8001692 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001656:	4a09      	ldr	r2, [pc, #36]	@ (800167c <HAL_RCC_OscConfig+0x27c>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001660:	f7ff fa9a 	bl	8000b98 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001666:	e00d      	b.n	8001684 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa96 	bl	8000b98 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d906      	bls.n	8001684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e1ca      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001684:	4b8c      	ldr	r3, [pc, #560]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ea      	bne.n	8001668 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80a6 	beq.w	80017ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80016a4:	4b84      	ldr	r3, [pc, #528]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2b4>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x2b6>
 80016b4:	2300      	movs	r3, #0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00d      	beq.n	80016d6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b7f      	ldr	r3, [pc, #508]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a7e      	ldr	r2, [pc, #504]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b7c      	ldr	r3, [pc, #496]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	4b79      	ldr	r3, [pc, #484]	@ (80018bc <HAL_RCC_OscConfig+0x4bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016e2:	4b76      	ldr	r3, [pc, #472]	@ (80018bc <HAL_RCC_OscConfig+0x4bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a75      	ldr	r2, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x4bc>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fa53 	bl	8000b98 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7ff fa4f 	bl	8000b98 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e183      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <HAL_RCC_OscConfig+0x4bc>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_RCC_OscConfig+0x32e>
 800171c:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a65      	ldr	r2, [pc, #404]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172c:	e024      	b.n	8001778 <HAL_RCC_OscConfig+0x378>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d110      	bne.n	8001758 <HAL_RCC_OscConfig+0x358>
 8001736:	4b60      	ldr	r3, [pc, #384]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800173c:	4a5e      	ldr	r2, [pc, #376]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001746:	4b5c      	ldr	r3, [pc, #368]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174c:	4a5a      	ldr	r2, [pc, #360]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001756:	e00f      	b.n	8001778 <HAL_RCC_OscConfig+0x378>
 8001758:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800175a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175e:	4a56      	ldr	r2, [pc, #344]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001760:	f023 0301 	bic.w	r3, r3, #1
 8001764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001768:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a52      	ldr	r2, [pc, #328]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d016      	beq.n	80017ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fa0a 	bl	8000b98 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fa06 	bl	8000b98 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e138      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800179e:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0ed      	beq.n	8001788 <HAL_RCC_OscConfig+0x388>
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9f3 	bl	8000b98 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b4:	e00a      	b.n	80017cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b6:	f7ff f9ef 	bl	8000b98 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e121      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017cc:	4b3a      	ldr	r3, [pc, #232]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ed      	bne.n	80017b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017da:	7ffb      	ldrb	r3, [r7, #31]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80017e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e4:	4a34      	ldr	r2, [pc, #208]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d03c      	beq.n	8001872 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01c      	beq.n	800183a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001802:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001806:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001810:	f7ff f9c2 	bl	8000b98 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001818:	f7ff f9be 	bl	8000b98 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0f2      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800182a:	4b23      	ldr	r3, [pc, #140]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0ef      	beq.n	8001818 <HAL_RCC_OscConfig+0x418>
 8001838:	e01b      	b.n	8001872 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800183a:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001840:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff f9a5 	bl	8000b98 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001852:	f7ff f9a1 	bl	8000b98 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0d5      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001864:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1ef      	bne.n	8001852 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80c9 	beq.w	8001a0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187c:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b0c      	cmp	r3, #12
 8001886:	f000 8083 	beq.w	8001990 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d15e      	bne.n	8001950 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a08      	ldr	r2, [pc, #32]	@ (80018b8 <HAL_RCC_OscConfig+0x4b8>)
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f97b 	bl	8000b98 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a4:	e00c      	b.n	80018c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff f977 	bl	8000b98 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d905      	bls.n	80018c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0ab      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	4b55      	ldr	r3, [pc, #340]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1ec      	bne.n	80018a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b52      	ldr	r3, [pc, #328]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	4b52      	ldr	r3, [pc, #328]	@ (8001a1c <HAL_RCC_OscConfig+0x61c>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6a11      	ldr	r1, [r2, #32]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018dc:	3a01      	subs	r2, #1
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018e6:	0212      	lsls	r2, r2, #8
 80018e8:	4311      	orrs	r1, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018ee:	0852      	lsrs	r2, r2, #1
 80018f0:	3a01      	subs	r2, #1
 80018f2:	0552      	lsls	r2, r2, #21
 80018f4:	4311      	orrs	r1, r2
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018fa:	0852      	lsrs	r2, r2, #1
 80018fc:	3a01      	subs	r2, #1
 80018fe:	0652      	lsls	r2, r2, #25
 8001900:	4311      	orrs	r1, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001906:	06d2      	lsls	r2, r2, #27
 8001908:	430a      	orrs	r2, r1
 800190a:	4943      	ldr	r1, [pc, #268]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001910:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a40      	ldr	r2, [pc, #256]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001916:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800191a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800191c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4a3d      	ldr	r2, [pc, #244]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001926:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f936 	bl	8000b98 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff f932 	bl	8000b98 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e066      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001942:	4b35      	ldr	r3, [pc, #212]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x530>
 800194e:	e05e      	b.n	8001a0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b31      	ldr	r3, [pc, #196]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a30      	ldr	r2, [pc, #192]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001956:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800195a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff f91c 	bl	8000b98 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001964:	f7ff f918 	bl	8000b98 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e04c      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4924      	ldr	r1, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <HAL_RCC_OscConfig+0x620>)
 800198a:	4013      	ands	r3, r2
 800198c:	60cb      	str	r3, [r1, #12]
 800198e:	e03e      	b.n	8001a0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e039      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800199c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a18 <HAL_RCC_OscConfig+0x618>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0203 	and.w	r2, r3, #3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d12c      	bne.n	8001a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d123      	bne.n	8001a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d11b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d113      	bne.n	8001a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	085b      	lsrs	r3, r3, #1
 80019ee:	3b01      	subs	r3, #1
 80019f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	3b01      	subs	r3, #1
 8001a04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	019f800c 	.word	0x019f800c
 8001a20:	feeefffc 	.word	0xfeeefffc

08001a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e11e      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b91      	ldr	r3, [pc, #580]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d910      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b8e      	ldr	r3, [pc, #568]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 020f 	bic.w	r2, r3, #15
 8001a52:	498c      	ldr	r1, [pc, #560]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b8a      	ldr	r3, [pc, #552]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e106      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d073      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b03      	cmp	r3, #3
 8001a7e:	d129      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a80:	4b81      	ldr	r3, [pc, #516]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0f4      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a90:	f000 f99e 	bl	8001dd0 <RCC_GetSysClockFreqFromPLLSource>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4a7c      	ldr	r2, [pc, #496]	@ (8001c8c <HAL_RCC_ClockConfig+0x268>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d93f      	bls.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a9e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d009      	beq.n	8001abe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d033      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d12f      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001abe:	4b72      	ldr	r3, [pc, #456]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ac6:	4a70      	ldr	r2, [pc, #448]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001acc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ace:	2380      	movs	r3, #128	@ 0x80
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	e024      	b.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001adc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0c6      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	4b66      	ldr	r3, [pc, #408]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0be      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001afc:	f000 f8ce 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001b00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4a61      	ldr	r2, [pc, #388]	@ (8001c8c <HAL_RCC_ClockConfig+0x268>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d909      	bls.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b12:	4a5d      	ldr	r2, [pc, #372]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4957      	ldr	r1, [pc, #348]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b30:	f7ff f832 	bl	8000b98 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f82e 	bl	8000b98 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e095      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d023      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b78:	4b43      	ldr	r3, [pc, #268]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4a42      	ldr	r2, [pc, #264]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b7e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d007      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b90:	4b3d      	ldr	r3, [pc, #244]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b98:	4a3b      	ldr	r2, [pc, #236]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001b9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	4936      	ldr	r1, [pc, #216]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b80      	cmp	r3, #128	@ 0x80
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001bba:	4b33      	ldr	r3, [pc, #204]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	4a32      	ldr	r2, [pc, #200]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001bc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d21d      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 020f 	bic.w	r2, r3, #15
 8001bdc:	4929      	ldr	r1, [pc, #164]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001be4:	f7fe ffd8 	bl	8000b98 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7fe ffd4 	bl	8000b98 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e03b      	b.n	8001c7a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_RCC_ClockConfig+0x260>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1ed      	bne.n	8001bec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4917      	ldr	r1, [pc, #92]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490f      	ldr	r1, [pc, #60]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c4e:	f000 f825 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <HAL_RCC_ClockConfig+0x264>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490c      	ldr	r1, [pc, #48]	@ (8001c90 <HAL_RCC_ClockConfig+0x26c>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_RCC_ClockConfig+0x270>)
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_RCC_ClockConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe ff44 	bl	8000b00 <HAL_InitTick>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40022000 	.word	0x40022000
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	04c4b400 	.word	0x04c4b400
 8001c90:	08005330 	.word	0x08005330
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d102      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cae:	4b2a      	ldr	r3, [pc, #168]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e047      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001cb4:	4b27      	ldr	r3, [pc, #156]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 030c 	and.w	r3, r3, #12
 8001cbc:	2b08      	cmp	r3, #8
 8001cbe:	d102      	bne.n	8001cc6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cc2:	613b      	str	r3, [r7, #16]
 8001cc4:	e03e      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001cc6:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d136      	bne.n	8001d40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cd2:	4b20      	ldr	r3, [pc, #128]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf8:	4a16      	ldr	r2, [pc, #88]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cfa:	68d2      	ldr	r2, [r2, #12]
 8001cfc:	0a12      	lsrs	r2, r2, #8
 8001cfe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
      break;
 8001d08:	e00c      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d0a:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	4a10      	ldr	r2, [pc, #64]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d14:	68d2      	ldr	r2, [r2, #12]
 8001d16:	0a12      	lsrs	r2, r2, #8
 8001d18:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	617b      	str	r3, [r7, #20]
      break;
 8001d22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	0e5b      	lsrs	r3, r3, #25
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	3301      	adds	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e001      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d44:	693b      	ldr	r3, [r7, #16]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b03      	ldr	r3, [pc, #12]	@ (8001d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d7c:	f7ff fff0 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4904      	ldr	r1, [pc, #16]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08005340 	.word	0x08005340

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da8:	f7ff ffda 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4904      	ldr	r1, [pc, #16]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	f003 031f 	and.w	r3, r3, #31
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08005340 	.word	0x08005340

08001dd0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d10c      	bne.n	8001e0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001df4:	4a17      	ldr	r2, [pc, #92]	@ (8001e54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dfe:	68d2      	ldr	r2, [r2, #12]
 8001e00:	0a12      	lsrs	r2, r2, #8
 8001e02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e06:	fb02 f303 	mul.w	r3, r2, r3
 8001e0a:	617b      	str	r3, [r7, #20]
    break;
 8001e0c:	e00c      	b.n	8001e28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e0e:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e18:	68d2      	ldr	r2, [r2, #12]
 8001e1a:	0a12      	lsrs	r2, r2, #8
 8001e1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001e20:	fb02 f303 	mul.w	r3, r2, r3
 8001e24:	617b      	str	r3, [r7, #20]
    break;
 8001e26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e28:	4b09      	ldr	r3, [pc, #36]	@ (8001e50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0e5b      	lsrs	r3, r3, #25
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	3301      	adds	r3, #1
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e42:	687b      	ldr	r3, [r7, #4]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	371c      	adds	r7, #28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	40021000 	.word	0x40021000
 8001e54:	007a1200 	.word	0x007a1200
 8001e58:	00f42400 	.word	0x00f42400

08001e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e64:	2300      	movs	r3, #0
 8001e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e68:	2300      	movs	r3, #0
 8001e6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 8098 	beq.w	8001faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e7e:	4b43      	ldr	r3, [pc, #268]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10d      	bne.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b40      	ldr	r3, [pc, #256]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ea6:	4b3a      	ldr	r3, [pc, #232]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a39      	ldr	r2, [pc, #228]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eb2:	f7fe fe71 	bl	8000b98 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb8:	e009      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eba:	f7fe fe6d 	bl	8000b98 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d902      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	74fb      	strb	r3, [r7, #19]
        break;
 8001ecc:	e005      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ece:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0ef      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d159      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01e      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d019      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001efc:	4b23      	ldr	r3, [pc, #140]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f08:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f18:	4b1c      	ldr	r3, [pc, #112]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f28:	4a18      	ldr	r2, [pc, #96]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe fe2d 	bl	8000b98 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f40:	e00b      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7fe fe29 	bl	8000b98 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d902      	bls.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	74fb      	strb	r3, [r7, #19]
            break;
 8001f58:	e006      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ec      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6e:	4b07      	ldr	r3, [pc, #28]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7c:	4903      	ldr	r1, [pc, #12]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f84:	e008      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f86:	7cfb      	ldrb	r3, [r7, #19]
 8001f88:	74bb      	strb	r3, [r7, #18]
 8001f8a:	e005      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f98:	7c7b      	ldrb	r3, [r7, #17]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d105      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa2:	4aa5      	ldr	r2, [pc, #660]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb6:	4ba0      	ldr	r3, [pc, #640]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbc:	f023 0203 	bic.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	499c      	ldr	r1, [pc, #624]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd8:	4b97      	ldr	r3, [pc, #604]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f023 020c 	bic.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	4994      	ldr	r1, [pc, #592]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ffa:	4b8f      	ldr	r3, [pc, #572]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002000:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	498b      	ldr	r1, [pc, #556]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800201c:	4b86      	ldr	r3, [pc, #536]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	4983      	ldr	r1, [pc, #524]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800203e:	4b7e      	ldr	r3, [pc, #504]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002044:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	497a      	ldr	r1, [pc, #488]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002060:	4b75      	ldr	r3, [pc, #468]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4972      	ldr	r1, [pc, #456]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002082:	4b6d      	ldr	r3, [pc, #436]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002088:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	4969      	ldr	r1, [pc, #420]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00a      	beq.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020a4:	4b64      	ldr	r3, [pc, #400]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4961      	ldr	r1, [pc, #388]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00a      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	4958      	ldr	r1, [pc, #352]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020e8:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	4950      	ldr	r1, [pc, #320]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002106:	d105      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002108:	4b4b      	ldr	r3, [pc, #300]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	4a4a      	ldr	r2, [pc, #296]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002112:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002120:	4b45      	ldr	r3, [pc, #276]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800212e:	4942      	ldr	r1, [pc, #264]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800213e:	d105      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002140:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a3c      	ldr	r2, [pc, #240]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800214a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002158:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	4934      	ldr	r1, [pc, #208]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002176:	d105      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a2e      	ldr	r2, [pc, #184]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002182:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d015      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002190:	4b29      	ldr	r3, [pc, #164]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800219e:	4926      	ldr	r1, [pc, #152]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ae:	d105      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b0:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	4a20      	ldr	r2, [pc, #128]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	4918      	ldr	r1, [pc, #96]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021e6:	d105      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d015      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002200:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002206:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220e:	490a      	ldr	r1, [pc, #40]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800221e:	d105      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800222c:	7cbb      	ldrb	r3, [r7, #18]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e042      	b.n	80022d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002254:	2b00      	cmp	r3, #0
 8002256:	d106      	bne.n	8002266 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7fe fabb 	bl	80007dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2224      	movs	r2, #36	@ 0x24
 800226a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 ff30 	bl	80030ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fc61 	bl	8002b54 <UART_SetConfig>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e01b      	b.n	80022d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 ffaf 	bl	8003230 <UART_CheckIdleState>
 80022d2:	4603      	mov	r3, r0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	@ 0x28
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d17b      	bne.n	80023ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_Transmit+0x26>
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e074      	b.n	80023f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	@ 0x21
 8002312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fc3f 	bl	8000b98 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002334:	d108      	bne.n	8002348 <HAL_UART_Transmit+0x6c>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d104      	bne.n	8002348 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800233e:	2300      	movs	r3, #0
 8002340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	e003      	b.n	8002350 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002350:	e030      	b.n	80023b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2200      	movs	r2, #0
 800235a:	2180      	movs	r1, #128	@ 0x80
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 f811 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e03d      	b.n	80023f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10b      	bne.n	8002392 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002388:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	3302      	adds	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
 8002390:	e007      	b.n	80023a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1c8      	bne.n	8002352 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2200      	movs	r2, #0
 80023c8:	2140      	movs	r1, #64	@ 0x40
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 ffda 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e006      	b.n	80023f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e000      	b.n	80023f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80023ee:	2302      	movs	r3, #2
  }
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240c:	2b20      	cmp	r3, #32
 800240e:	d137      	bne.n	8002480 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_UART_Receive_IT+0x24>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e030      	b.n	8002482 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_UART_Receive_IT+0x94>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d01f      	beq.n	8002470 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d018      	beq.n	8002470 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	e853 3f00 	ldrex	r3, [r3]
 800244a:	613b      	str	r3, [r7, #16]
   return(result);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002460:	69f9      	ldr	r1, [r7, #28]
 8002462:	6a3a      	ldr	r2, [r7, #32]
 8002464:	e841 2300 	strex	r3, r2, [r1]
 8002468:	61bb      	str	r3, [r7, #24]
   return(result);
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e6      	bne.n	800243e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002470:	88fb      	ldrh	r3, [r7, #6]
 8002472:	461a      	mov	r2, r3
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fff2 	bl	8003460 <UART_Start_Receive_IT>
 800247c:	4603      	mov	r3, r0
 800247e:	e000      	b.n	8002482 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3728      	adds	r7, #40	@ 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40008000 	.word	0x40008000

08002490 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b0ba      	sub	sp, #232	@ 0xe8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80024ba:	f640 030f 	movw	r3, #2063	@ 0x80f
 80024be:	4013      	ands	r3, r2
 80024c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80024c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d11b      	bne.n	8002504 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80024cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d015      	beq.n	8002504 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80024d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80024e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 8300 	beq.w	8002afa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	4798      	blx	r3
      }
      return;
 8002502:	e2fa      	b.n	8002afa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 8123 	beq.w	8002754 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800250e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002512:	4b8d      	ldr	r3, [pc, #564]	@ (8002748 <HAL_UART_IRQHandler+0x2b8>)
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d106      	bne.n	8002528 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800251a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800251e:	4b8b      	ldr	r3, [pc, #556]	@ (800274c <HAL_UART_IRQHandler+0x2bc>)
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 8116 	beq.w	8002754 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d011      	beq.n	8002558 <HAL_UART_IRQHandler+0xc8>
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2201      	movs	r2, #1
 8002546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800254e:	f043 0201 	orr.w	r2, r3, #1
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d011      	beq.n	8002588 <HAL_UART_IRQHandler+0xf8>
 8002564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2202      	movs	r2, #2
 8002576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	f043 0204 	orr.w	r2, r3, #4
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d011      	beq.n	80025b8 <HAL_UART_IRQHandler+0x128>
 8002594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2204      	movs	r2, #4
 80025a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d017      	beq.n	80025f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80025d4:	4b5c      	ldr	r3, [pc, #368]	@ (8002748 <HAL_UART_IRQHandler+0x2b8>)
 80025d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00b      	beq.n	80025f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f043 0208 	orr.w	r2, r3, #8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80025f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_UART_IRQHandler+0x196>
 8002600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002604:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00c      	beq.n	8002626 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002614:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	f043 0220 	orr.w	r2, r3, #32
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8266 	beq.w	8002afe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d013      	beq.n	8002666 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800263e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d105      	bne.n	8002656 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800264a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	2b40      	cmp	r3, #64	@ 0x40
 800267c:	d005      	beq.n	800268a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800267e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002682:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002686:	2b00      	cmp	r3, #0
 8002688:	d054      	beq.n	8002734 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f001 f80a 	bl	80036a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800269a:	2b40      	cmp	r3, #64	@ 0x40
 800269c:	d146      	bne.n	800272c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3308      	adds	r3, #8
 80026a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ac:	e853 3f00 	ldrex	r3, [r3]
 80026b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3308      	adds	r3, #8
 80026c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026da:	e841 2300 	strex	r3, r2, [r1]
 80026de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1d9      	bne.n	800269e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d017      	beq.n	8002724 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026fa:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <HAL_UART_IRQHandler+0x2c0>)
 80026fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002704:	4618      	mov	r0, r3
 8002706:	f7fe fbdd 	bl	8000ec4 <HAL_DMA_Abort_IT>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d019      	beq.n	8002744 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800271e:	4610      	mov	r0, r2
 8002720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002722:	e00f      	b.n	8002744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f9ff 	bl	8002b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272a:	e00b      	b.n	8002744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9fb 	bl	8002b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002732:	e007      	b.n	8002744 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f9f7 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002742:	e1dc      	b.n	8002afe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002744:	bf00      	nop
    return;
 8002746:	e1da      	b.n	8002afe <HAL_UART_IRQHandler+0x66e>
 8002748:	10000001 	.word	0x10000001
 800274c:	04000120 	.word	0x04000120
 8002750:	08003771 	.word	0x08003771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002758:	2b01      	cmp	r3, #1
 800275a:	f040 8170 	bne.w	8002a3e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800275e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8169 	beq.w	8002a3e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800276c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 8162 	beq.w	8002a3e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2210      	movs	r2, #16
 8002780:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	f040 80d8 	bne.w	8002942 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 80af 	beq.w	8002908 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80027b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027b4:	429a      	cmp	r2, r3
 80027b6:	f080 80a7 	bcs.w	8002908 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0320 	and.w	r3, r3, #32
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 8087 	bne.w	80028e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027e4:	e853 3f00 	ldrex	r3, [r3]
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002802:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002806:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800280e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800281a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1da      	bne.n	80027d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3308      	adds	r3, #8
 8002828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3308      	adds	r3, #8
 8002842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800284a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800284e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002852:	e841 2300 	strex	r3, r2, [r1]
 8002856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1e1      	bne.n	8002822 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3308      	adds	r3, #8
 8002864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002868:	e853 3f00 	ldrex	r3, [r3]
 800286c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800286e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3308      	adds	r3, #8
 800287e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e3      	bne.n	800285e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b4:	f023 0310 	bic.w	r3, r3, #16
 80028b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e4      	bne.n	80028a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fa96 	bl	8000e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f91b 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002906:	e0fc      	b.n	8002b02 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800290e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002912:	429a      	cmp	r2, r3
 8002914:	f040 80f5 	bne.w	8002b02 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b20      	cmp	r3, #32
 8002928:	f040 80eb 	bne.w	8002b02 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002938:	4619      	mov	r1, r3
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8fe 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
      return;
 8002940:	e0df      	b.n	8002b02 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800294e:	b29b      	uxth	r3, r3
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800295c:	b29b      	uxth	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80d1 	beq.w	8002b06 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 80cc 	beq.w	8002b06 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002982:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002990:	647b      	str	r3, [r7, #68]	@ 0x44
 8002992:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002994:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002998:	e841 2300 	strex	r3, r2, [r1]
 800299c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800299e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1e4      	bne.n	800296e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3308      	adds	r3, #8
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	e853 3f00 	ldrex	r3, [r3]
 80029b2:	623b      	str	r3, [r7, #32]
   return(result);
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3308      	adds	r3, #8
 80029c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80029cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80029ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80029da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e1      	bne.n	80029a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	e853 3f00 	ldrex	r3, [r3]
 8002a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f023 0310 	bic.w	r3, r3, #16
 8002a08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1a:	69b9      	ldr	r1, [r7, #24]
 8002a1c:	69fa      	ldr	r2, [r7, #28]
 8002a1e:	e841 2300 	strex	r3, r2, [r1]
 8002a22:	617b      	str	r3, [r7, #20]
   return(result);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1e4      	bne.n	80029f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f880 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a3c:	e063      	b.n	8002b06 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00e      	beq.n	8002a68 <HAL_UART_IRQHandler+0x5d8>
 8002a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a5e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f001 fbe3 	bl	800422c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a66:	e051      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d014      	beq.n	8002a9e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d03a      	beq.n	8002b0a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4798      	blx	r3
    }
    return;
 8002a9c:	e035      	b.n	8002b0a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <HAL_UART_IRQHandler+0x62e>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fe6c 	bl	8003794 <UART_EndTransmit_IT>
    return;
 8002abc:	e026      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_UART_IRQHandler+0x64e>
 8002aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ace:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f001 fbbc 	bl	8004254 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002adc:	e016      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ade:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d010      	beq.n	8002b0c <HAL_UART_IRQHandler+0x67c>
 8002aea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	da0c      	bge.n	8002b0c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f001 fba4 	bl	8004240 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002af8:	e008      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8002afa:	bf00      	nop
 8002afc:	e006      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
    return;
 8002afe:	bf00      	nop
 8002b00:	e004      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8002b02:	bf00      	nop
 8002b04:	e002      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
      return;
 8002b06:	bf00      	nop
 8002b08:	e000      	b.n	8002b0c <HAL_UART_IRQHandler+0x67c>
    return;
 8002b0a:	bf00      	nop
  }
}
 8002b0c:	37e8      	adds	r7, #232	@ 0xe8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop

08002b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b08c      	sub	sp, #48	@ 0x30
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4bab      	ldr	r3, [pc, #684]	@ (8002e30 <UART_SetConfig+0x2dc>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4aa0      	ldr	r2, [pc, #640]	@ (8002e34 <UART_SetConfig+0x2e0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002bca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002bd4:	430b      	orrs	r3, r1
 8002bd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	f023 010f 	bic.w	r1, r3, #15
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a91      	ldr	r2, [pc, #580]	@ (8002e38 <UART_SetConfig+0x2e4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d125      	bne.n	8002c44 <UART_SetConfig+0xf0>
 8002bf8:	4b90      	ldr	r3, [pc, #576]	@ (8002e3c <UART_SetConfig+0x2e8>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d81a      	bhi.n	8002c3c <UART_SetConfig+0xe8>
 8002c06:	a201      	add	r2, pc, #4	@ (adr r2, 8002c0c <UART_SetConfig+0xb8>)
 8002c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c2d 	.word	0x08002c2d
 8002c14:	08002c25 	.word	0x08002c25
 8002c18:	08002c35 	.word	0x08002c35
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c22:	e0d6      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2a:	e0d2      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c32:	e0ce      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002c34:	2308      	movs	r3, #8
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c3a:	e0ca      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c42:	e0c6      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a7d      	ldr	r2, [pc, #500]	@ (8002e40 <UART_SetConfig+0x2ec>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d138      	bne.n	8002cc0 <UART_SetConfig+0x16c>
 8002c4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e3c <UART_SetConfig+0x2e8>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d82d      	bhi.n	8002cb8 <UART_SetConfig+0x164>
 8002c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c64 <UART_SetConfig+0x110>)
 8002c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c62:	bf00      	nop
 8002c64:	08002c99 	.word	0x08002c99
 8002c68:	08002cb9 	.word	0x08002cb9
 8002c6c:	08002cb9 	.word	0x08002cb9
 8002c70:	08002cb9 	.word	0x08002cb9
 8002c74:	08002ca9 	.word	0x08002ca9
 8002c78:	08002cb9 	.word	0x08002cb9
 8002c7c:	08002cb9 	.word	0x08002cb9
 8002c80:	08002cb9 	.word	0x08002cb9
 8002c84:	08002ca1 	.word	0x08002ca1
 8002c88:	08002cb9 	.word	0x08002cb9
 8002c8c:	08002cb9 	.word	0x08002cb9
 8002c90:	08002cb9 	.word	0x08002cb9
 8002c94:	08002cb1 	.word	0x08002cb1
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c9e:	e098      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ca6:	e094      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002ca8:	2304      	movs	r3, #4
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cae:	e090      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002cb0:	2308      	movs	r3, #8
 8002cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cb6:	e08c      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002cb8:	2310      	movs	r3, #16
 8002cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cbe:	e088      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a5f      	ldr	r2, [pc, #380]	@ (8002e44 <UART_SetConfig+0x2f0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d125      	bne.n	8002d16 <UART_SetConfig+0x1c2>
 8002cca:	4b5c      	ldr	r3, [pc, #368]	@ (8002e3c <UART_SetConfig+0x2e8>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002cd4:	2b30      	cmp	r3, #48	@ 0x30
 8002cd6:	d016      	beq.n	8002d06 <UART_SetConfig+0x1b2>
 8002cd8:	2b30      	cmp	r3, #48	@ 0x30
 8002cda:	d818      	bhi.n	8002d0e <UART_SetConfig+0x1ba>
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d00a      	beq.n	8002cf6 <UART_SetConfig+0x1a2>
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d814      	bhi.n	8002d0e <UART_SetConfig+0x1ba>
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <UART_SetConfig+0x19a>
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d008      	beq.n	8002cfe <UART_SetConfig+0x1aa>
 8002cec:	e00f      	b.n	8002d0e <UART_SetConfig+0x1ba>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf4:	e06d      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cfc:	e069      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002cfe:	2304      	movs	r3, #4
 8002d00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d04:	e065      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d06:	2308      	movs	r3, #8
 8002d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d0c:	e061      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d0e:	2310      	movs	r3, #16
 8002d10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d14:	e05d      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4b      	ldr	r2, [pc, #300]	@ (8002e48 <UART_SetConfig+0x2f4>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d125      	bne.n	8002d6c <UART_SetConfig+0x218>
 8002d20:	4b46      	ldr	r3, [pc, #280]	@ (8002e3c <UART_SetConfig+0x2e8>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d2c:	d016      	beq.n	8002d5c <UART_SetConfig+0x208>
 8002d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002d30:	d818      	bhi.n	8002d64 <UART_SetConfig+0x210>
 8002d32:	2b80      	cmp	r3, #128	@ 0x80
 8002d34:	d00a      	beq.n	8002d4c <UART_SetConfig+0x1f8>
 8002d36:	2b80      	cmp	r3, #128	@ 0x80
 8002d38:	d814      	bhi.n	8002d64 <UART_SetConfig+0x210>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <UART_SetConfig+0x1f0>
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d008      	beq.n	8002d54 <UART_SetConfig+0x200>
 8002d42:	e00f      	b.n	8002d64 <UART_SetConfig+0x210>
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d4a:	e042      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e03e      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d54:	2304      	movs	r3, #4
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e03a      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e036      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d64:	2310      	movs	r3, #16
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e032      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a30      	ldr	r2, [pc, #192]	@ (8002e34 <UART_SetConfig+0x2e0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d12a      	bne.n	8002dcc <UART_SetConfig+0x278>
 8002d76:	4b31      	ldr	r3, [pc, #196]	@ (8002e3c <UART_SetConfig+0x2e8>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002d80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d84:	d01a      	beq.n	8002dbc <UART_SetConfig+0x268>
 8002d86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002d8a:	d81b      	bhi.n	8002dc4 <UART_SetConfig+0x270>
 8002d8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d90:	d00c      	beq.n	8002dac <UART_SetConfig+0x258>
 8002d92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d96:	d815      	bhi.n	8002dc4 <UART_SetConfig+0x270>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <UART_SetConfig+0x250>
 8002d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002da0:	d008      	beq.n	8002db4 <UART_SetConfig+0x260>
 8002da2:	e00f      	b.n	8002dc4 <UART_SetConfig+0x270>
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002daa:	e012      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002dac:	2302      	movs	r3, #2
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db2:	e00e      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002db4:	2304      	movs	r3, #4
 8002db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dba:	e00a      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc2:	e006      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dca:	e002      	b.n	8002dd2 <UART_SetConfig+0x27e>
 8002dcc:	2310      	movs	r3, #16
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a17      	ldr	r2, [pc, #92]	@ (8002e34 <UART_SetConfig+0x2e0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	f040 80a8 	bne.w	8002f2e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002dde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d834      	bhi.n	8002e50 <UART_SetConfig+0x2fc>
 8002de6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <UART_SetConfig+0x298>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e11 	.word	0x08002e11
 8002df0:	08002e51 	.word	0x08002e51
 8002df4:	08002e19 	.word	0x08002e19
 8002df8:	08002e51 	.word	0x08002e51
 8002dfc:	08002e1f 	.word	0x08002e1f
 8002e00:	08002e51 	.word	0x08002e51
 8002e04:	08002e51 	.word	0x08002e51
 8002e08:	08002e51 	.word	0x08002e51
 8002e0c:	08002e27 	.word	0x08002e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e10:	f7fe ffb2 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002e14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e16:	e021      	b.n	8002e5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	@ (8002e4c <UART_SetConfig+0x2f8>)
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e1c:	e01e      	b.n	8002e5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e1e:	f7fe ff3d 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8002e22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e24:	e01a      	b.n	8002e5c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e2c:	e016      	b.n	8002e5c <UART_SetConfig+0x308>
 8002e2e:	bf00      	nop
 8002e30:	cfff69f3 	.word	0xcfff69f3
 8002e34:	40008000 	.word	0x40008000
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40004400 	.word	0x40004400
 8002e44:	40004800 	.word	0x40004800
 8002e48:	40004c00 	.word	0x40004c00
 8002e4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002e5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 812a 	beq.w	80030b8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	4a9e      	ldr	r2, [pc, #632]	@ (80030e4 <UART_SetConfig+0x590>)
 8002e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d305      	bcc.n	8002e94 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d903      	bls.n	8002e9c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e9a:	e10d      	b.n	80030b8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	60fa      	str	r2, [r7, #12]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	4a8e      	ldr	r2, [pc, #568]	@ (80030e4 <UART_SetConfig+0x590>)
 8002eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ebe:	f7fd f9ff 	bl	80002c0 <__aeabi_uldivmod>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	020b      	lsls	r3, r1, #8
 8002ed4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002ed8:	0202      	lsls	r2, r0, #8
 8002eda:	6979      	ldr	r1, [r7, #20]
 8002edc:	6849      	ldr	r1, [r1, #4]
 8002ede:	0849      	lsrs	r1, r1, #1
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	460c      	mov	r4, r1
 8002ee4:	4605      	mov	r5, r0
 8002ee6:	eb12 0804 	adds.w	r8, r2, r4
 8002eea:	eb43 0905 	adc.w	r9, r3, r5
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	469a      	mov	sl, r3
 8002ef6:	4693      	mov	fp, r2
 8002ef8:	4652      	mov	r2, sl
 8002efa:	465b      	mov	r3, fp
 8002efc:	4640      	mov	r0, r8
 8002efe:	4649      	mov	r1, r9
 8002f00:	f7fd f9de 	bl	80002c0 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f12:	d308      	bcc.n	8002f26 <UART_SetConfig+0x3d2>
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f1a:	d204      	bcs.n	8002f26 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	60da      	str	r2, [r3, #12]
 8002f24:	e0c8      	b.n	80030b8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f2c:	e0c4      	b.n	80030b8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f36:	d167      	bne.n	8003008 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002f38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d828      	bhi.n	8002f92 <UART_SetConfig+0x43e>
 8002f40:	a201      	add	r2, pc, #4	@ (adr r2, 8002f48 <UART_SetConfig+0x3f4>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f6d 	.word	0x08002f6d
 8002f4c:	08002f75 	.word	0x08002f75
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08002f93 	.word	0x08002f93
 8002f58:	08002f83 	.word	0x08002f83
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f93 	.word	0x08002f93
 8002f64:	08002f93 	.word	0x08002f93
 8002f68:	08002f8b 	.word	0x08002f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f6c:	f7fe ff04 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f72:	e014      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f74:	f7fe ff16 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002f78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f7a:	e010      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80030e8 <UART_SetConfig+0x594>)
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f80:	e00d      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f82:	f7fe fe8b 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8002f86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f88:	e009      	b.n	8002f9e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f90:	e005      	b.n	8002f9e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8089 	beq.w	80030b8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	4a4e      	ldr	r2, [pc, #312]	@ (80030e4 <UART_SetConfig+0x590>)
 8002fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fb8:	005a      	lsls	r2, r3, #1
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	441a      	add	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d916      	bls.n	8003000 <UART_SetConfig+0x4ac>
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fd8:	d212      	bcs.n	8003000 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	f023 030f 	bic.w	r3, r3, #15
 8002fe2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	085b      	lsrs	r3, r3, #1
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	8bfb      	ldrh	r3, [r7, #30]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	8bfa      	ldrh	r2, [r7, #30]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	e05b      	b.n	80030b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003006:	e057      	b.n	80030b8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003008:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800300c:	2b08      	cmp	r3, #8
 800300e:	d828      	bhi.n	8003062 <UART_SetConfig+0x50e>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <UART_SetConfig+0x4c4>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800303d 	.word	0x0800303d
 800301c:	08003045 	.word	0x08003045
 8003020:	0800304d 	.word	0x0800304d
 8003024:	08003063 	.word	0x08003063
 8003028:	08003053 	.word	0x08003053
 800302c:	08003063 	.word	0x08003063
 8003030:	08003063 	.word	0x08003063
 8003034:	08003063 	.word	0x08003063
 8003038:	0800305b 	.word	0x0800305b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800303c:	f7fe fe9c 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003042:	e014      	b.n	800306e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003044:	f7fe feae 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8003048:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800304a:	e010      	b.n	800306e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800304c:	4b26      	ldr	r3, [pc, #152]	@ (80030e8 <UART_SetConfig+0x594>)
 800304e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003050:	e00d      	b.n	800306e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003052:	f7fe fe23 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8003056:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003058:	e009      	b.n	800306e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003060:	e005      	b.n	800306e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800306c:	bf00      	nop
    }

    if (pclk != 0U)
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	d021      	beq.n	80030b8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	4a1a      	ldr	r2, [pc, #104]	@ (80030e4 <UART_SetConfig+0x590>)
 800307a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307e:	461a      	mov	r2, r3
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	fbb3 f2f2 	udiv	r2, r3, r2
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	441a      	add	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	d909      	bls.n	80030b2 <UART_SetConfig+0x55e>
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a4:	d205      	bcs.n	80030b2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	e002      	b.n	80030b8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80030d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3730      	adds	r7, #48	@ 0x30
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	08005348 	.word	0x08005348
 80030e8:	00f42400 	.word	0x00f42400

080030ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01a      	beq.n	8003202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031ea:	d10a      	bne.n	8003202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b098      	sub	sp, #96	@ 0x60
 8003234:	af02      	add	r7, sp, #8
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003240:	f7fd fcaa 	bl	8000b98 <HAL_GetTick>
 8003244:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b08      	cmp	r3, #8
 8003252:	d12f      	bne.n	80032b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003254:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f88e 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d022      	beq.n	80032b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003282:	653b      	str	r3, [r7, #80]	@ 0x50
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800328c:	647b      	str	r3, [r7, #68]	@ 0x44
 800328e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800329a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e6      	bne.n	800326e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e063      	b.n	800337c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d149      	bne.n	8003356 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ca:	2200      	movs	r2, #0
 80032cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f857 	bl	8003384 <UART_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d03c      	beq.n	8003356 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	e853 3f00 	ldrex	r3, [r3]
 80032e8:	623b      	str	r3, [r7, #32]
   return(result);
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e6      	bne.n	80032dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3308      	adds	r3, #8
 8003314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	60fb      	str	r3, [r7, #12]
   return(result);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3308      	adds	r3, #8
 800332c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800332e:	61fa      	str	r2, [r7, #28]
 8003330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003332:	69b9      	ldr	r1, [r7, #24]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	617b      	str	r3, [r7, #20]
   return(result);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e5      	bne.n	800330e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e012      	b.n	800337c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2220      	movs	r2, #32
 800335a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3758      	adds	r7, #88	@ 0x58
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003394:	e04f      	b.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d04b      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339e:	f7fd fbfb 	bl	8000b98 <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d302      	bcc.n	80033b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e04e      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d037      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b80      	cmp	r3, #128	@ 0x80
 80033ca:	d034      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b40      	cmp	r3, #64	@ 0x40
 80033d0:	d031      	beq.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	f003 0308 	and.w	r3, r3, #8
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d110      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2208      	movs	r2, #8
 80033e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f000 f95b 	bl	80036a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2208      	movs	r2, #8
 80033f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e029      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003410:	d111      	bne.n	8003436 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800341a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f941 	bl	80036a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e00f      	b.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4013      	ands	r3, r2
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	429a      	cmp	r2, r3
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	429a      	cmp	r2, r3
 8003452:	d0a0      	beq.n	8003396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003460:	b480      	push	{r7}
 8003462:	b0a3      	sub	sp, #140	@ 0x8c
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003492:	d10e      	bne.n	80034b2 <UART_Start_Receive_IT+0x52>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <UART_Start_Receive_IT+0x48>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80034a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034a6:	e02d      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	22ff      	movs	r2, #255	@ 0xff
 80034ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034b0:	e028      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <UART_Start_Receive_IT+0x76>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d104      	bne.n	80034cc <UART_Start_Receive_IT+0x6c>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22ff      	movs	r2, #255	@ 0xff
 80034c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034ca:	e01b      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	227f      	movs	r2, #127	@ 0x7f
 80034d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034d4:	e016      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034de:	d10d      	bne.n	80034fc <UART_Start_Receive_IT+0x9c>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d104      	bne.n	80034f2 <UART_Start_Receive_IT+0x92>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	227f      	movs	r2, #127	@ 0x7f
 80034ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034f0:	e008      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	223f      	movs	r2, #63	@ 0x3f
 80034f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80034fa:	e003      	b.n	8003504 <UART_Start_Receive_IT+0xa4>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2222      	movs	r2, #34	@ 0x22
 8003510:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3308      	adds	r3, #8
 800351a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003524:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3308      	adds	r3, #8
 8003534:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003538:	673a      	str	r2, [r7, #112]	@ 0x70
 800353a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800353e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8003546:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e3      	bne.n	8003514 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003554:	d14f      	bne.n	80035f6 <UART_Start_Receive_IT+0x196>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	429a      	cmp	r2, r3
 8003560:	d349      	bcc.n	80035f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356a:	d107      	bne.n	800357c <UART_Start_Receive_IT+0x11c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d103      	bne.n	800357c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a47      	ldr	r2, [pc, #284]	@ (8003694 <UART_Start_Receive_IT+0x234>)
 8003578:	675a      	str	r2, [r3, #116]	@ 0x74
 800357a:	e002      	b.n	8003582 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4a46      	ldr	r2, [pc, #280]	@ (8003698 <UART_Start_Receive_IT+0x238>)
 8003580:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01a      	beq.n	80035c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800359e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80035ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80035b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80035ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e4      	bne.n	800358a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3308      	adds	r3, #8
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ca:	e853 3f00 	ldrex	r3, [r3]
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80035e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80035e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e8:	e841 2300 	strex	r3, r2, [r1]
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80035ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1e5      	bne.n	80035c0 <UART_Start_Receive_IT+0x160>
 80035f4:	e046      	b.n	8003684 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035fe:	d107      	bne.n	8003610 <UART_Start_Receive_IT+0x1b0>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d103      	bne.n	8003610 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a24      	ldr	r2, [pc, #144]	@ (800369c <UART_Start_Receive_IT+0x23c>)
 800360c:	675a      	str	r2, [r3, #116]	@ 0x74
 800360e:	e002      	b.n	8003616 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a23      	ldr	r2, [pc, #140]	@ (80036a0 <UART_Start_Receive_IT+0x240>)
 8003614:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d019      	beq.n	8003652 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003632:	677b      	str	r3, [r7, #116]	@ 0x74
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800363c:	637b      	str	r3, [r7, #52]	@ 0x34
 800363e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003642:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e6      	bne.n	800361e <UART_Start_Receive_IT+0x1be>
 8003650:	e018      	b.n	8003684 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	e853 3f00 	ldrex	r3, [r3]
 800365e:	613b      	str	r3, [r7, #16]
   return(result);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f043 0320 	orr.w	r3, r3, #32
 8003666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	461a      	mov	r2, r3
 800366e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	69f9      	ldr	r1, [r7, #28]
 8003676:	6a3a      	ldr	r2, [r7, #32]
 8003678:	e841 2300 	strex	r3, r2, [r1]
 800367c:	61bb      	str	r3, [r7, #24]
   return(result);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e6      	bne.n	8003652 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	378c      	adds	r7, #140	@ 0x8c
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	08003ec1 	.word	0x08003ec1
 8003698:	08003b5d 	.word	0x08003b5d
 800369c:	080039a5 	.word	0x080039a5
 80036a0:	080037ed 	.word	0x080037ed

080036a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b095      	sub	sp, #84	@ 0x54
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80036cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e6      	bne.n	80036ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3308      	adds	r3, #8
 80036e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800370a:	e841 2300 	strex	r3, r2, [r1]
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1e3      	bne.n	80036de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d118      	bne.n	8003750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	60bb      	str	r3, [r7, #8]
   return(result);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 0310 	bic.w	r3, r3, #16
 8003732:	647b      	str	r3, [r7, #68]	@ 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	613b      	str	r3, [r7, #16]
   return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e6      	bne.n	800371e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003764:	bf00      	nop
 8003766:	3754      	adds	r7, #84	@ 0x54
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff f9ce 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037b0:	61fb      	str	r3, [r7, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037be:	6979      	ldr	r1, [r7, #20]
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	613b      	str	r3, [r7, #16]
   return(result);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e6      	bne.n	800379c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff f999 	bl	8002b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e2:	bf00      	nop
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b09c      	sub	sp, #112	@ 0x70
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80037fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003804:	2b22      	cmp	r3, #34	@ 0x22
 8003806:	f040 80be 	bne.w	8003986 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003814:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003818:	b2d9      	uxtb	r1, r3
 800381a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	400a      	ands	r2, r1
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 80a1 	bne.w	8003996 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003872:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003874:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003878:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e6      	bne.n	8003854 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3308      	adds	r3, #8
 800388c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003890:	e853 3f00 	ldrex	r3, [r3]
 8003894:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	667b      	str	r3, [r7, #100]	@ 0x64
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	3308      	adds	r3, #8
 80038a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80038a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ae:	e841 2300 	strex	r3, r2, [r1]
 80038b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1e5      	bne.n	8003886 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a33      	ldr	r2, [pc, #204]	@ (80039a0 <UART_RxISR_8BIT+0x1b4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d01f      	beq.n	8003918 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	623b      	str	r3, [r7, #32]
   return(result);
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003904:	633b      	str	r3, [r7, #48]	@ 0x30
 8003906:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800390a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390c:	e841 2300 	strex	r3, r2, [r1]
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e6      	bne.n	80038e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800391c:	2b01      	cmp	r3, #1
 800391e:	d12e      	bne.n	800397e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	60fb      	str	r3, [r7, #12]
   return(result);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003944:	61fb      	str	r3, [r7, #28]
 8003946:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	617b      	str	r3, [r7, #20]
   return(result);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e6      	bne.n	8003926 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d103      	bne.n	800396e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2210      	movs	r2, #16
 800396c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff f8e0 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800397c:	e00b      	b.n	8003996 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fc fee2 	bl	8000748 <HAL_UART_RxCpltCallback>
}
 8003984:	e007      	b.n	8003996 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0208 	orr.w	r2, r2, #8
 8003994:	619a      	str	r2, [r3, #24]
}
 8003996:	bf00      	nop
 8003998:	3770      	adds	r7, #112	@ 0x70
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	40008000 	.word	0x40008000

080039a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b09c      	sub	sp, #112	@ 0x70
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80039b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039bc:	2b22      	cmp	r3, #34	@ 0x22
 80039be:	f040 80be 	bne.w	8003b3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80039d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80039d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80039da:	4013      	ands	r3, r2
 80039dc:	b29a      	uxth	r2, r3
 80039de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	1c9a      	adds	r2, r3, #2
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 80a1 	bne.w	8003b4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a14:	e853 3f00 	ldrex	r3, [r3]
 8003a18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a32:	e841 2300 	strex	r3, r2, [r1]
 8003a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1e6      	bne.n	8003a0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3308      	adds	r3, #8
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a33      	ldr	r2, [pc, #204]	@ (8003b58 <UART_RxISR_16BIT+0x1b4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01f      	beq.n	8003ad0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d018      	beq.n	8003ad0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ab2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003abe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac4:	e841 2300 	strex	r3, r2, [r1]
 8003ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e6      	bne.n	8003a9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d12e      	bne.n	8003b36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	e853 3f00 	ldrex	r3, [r3]
 8003aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f023 0310 	bic.w	r3, r3, #16
 8003af2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	461a      	mov	r2, r3
 8003afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b00:	6979      	ldr	r1, [r7, #20]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	e841 2300 	strex	r3, r2, [r1]
 8003b08:	613b      	str	r3, [r7, #16]
   return(result);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e6      	bne.n	8003ade <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d103      	bne.n	8003b26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2210      	movs	r2, #16
 8003b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff f804 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b34:	e00b      	b.n	8003b4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fc fe06 	bl	8000748 <HAL_UART_RxCpltCallback>
}
 8003b3c:	e007      	b.n	8003b4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699a      	ldr	r2, [r3, #24]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0208 	orr.w	r2, r2, #8
 8003b4c:	619a      	str	r2, [r3, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	3770      	adds	r7, #112	@ 0x70
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40008000 	.word	0x40008000

08003b5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003b6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b92:	2b22      	cmp	r3, #34	@ 0x22
 8003b94:	f040 8183 	bne.w	8003e9e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003b9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ba2:	e126      	b.n	8003df2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8003bb2:	b2d9      	uxtb	r1, r3
 8003bb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bbe:	400a      	ands	r2, r1
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d053      	beq.n	8003c9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d011      	beq.n	8003c26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8003c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00b      	beq.n	8003c26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2201      	movs	r2, #1
 8003c14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1c:	f043 0201 	orr.w	r2, r3, #1
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d011      	beq.n	8003c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8003c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2202      	movs	r2, #2
 8003c44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d011      	beq.n	8003c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8003c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2204      	movs	r2, #4
 8003c74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c7c:	f043 0202 	orr.w	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d006      	beq.n	8003c9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fe ff49 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80a3 	bne.w	8003df2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cb4:	e853 3f00 	ldrex	r3, [r3]
 8003cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8003cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003cd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003cd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8003cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e4      	bne.n	8003cac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3308      	adds	r3, #8
 8003ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	f023 0301 	bic.w	r3, r3, #1
 8003cfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3308      	adds	r3, #8
 8003d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d0a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8003d0c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003d10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e1      	bne.n	8003ce2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a60      	ldr	r2, [pc, #384]	@ (8003eb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d021      	beq.n	8003d80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d01a      	beq.n	8003d80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d52:	e853 3f00 	ldrex	r3, [r3]
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003d6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d6e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d72:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d74:	e841 2300 	strex	r3, r2, [r1]
 8003d78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1e4      	bne.n	8003d4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d130      	bne.n	8003dea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	e853 3f00 	ldrex	r3, [r3]
 8003d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	f023 0310 	bic.w	r3, r3, #16
 8003da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e4      	bne.n	8003d8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	2b10      	cmp	r3, #16
 8003dd0:	d103      	bne.n	8003dda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2210      	movs	r2, #16
 8003dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003de0:	4619      	mov	r1, r3
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fe feaa 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003de8:	e00e      	b.n	8003e08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fc fcac 	bl	8000748 <HAL_UART_RxCpltCallback>
        break;
 8003df0:	e00a      	b.n	8003e08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003df2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d006      	beq.n	8003e08 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8003dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f aece 	bne.w	8003ba4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003e0e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003e12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d049      	beq.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x352>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003e20:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d242      	bcs.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e54:	e841 2300 	strex	r3, r2, [r1]
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1e3      	bne.n	8003e28 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8003e64:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f043 0320 	orr.w	r3, r3, #32
 8003e7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	e841 2300 	strex	r3, r2, [r1]
 8003e94:	613b      	str	r3, [r7, #16]
   return(result);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d1e4      	bne.n	8003e66 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e9c:	e007      	b.n	8003eae <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699a      	ldr	r2, [r3, #24]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0208 	orr.w	r2, r2, #8
 8003eac:	619a      	str	r2, [r3, #24]
}
 8003eae:	bf00      	nop
 8003eb0:	37b0      	adds	r7, #176	@ 0xb0
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40008000 	.word	0x40008000
 8003ebc:	080037ed 	.word	0x080037ed

08003ec0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b0ae      	sub	sp, #184	@ 0xb8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003ece:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef6:	2b22      	cmp	r3, #34	@ 0x22
 8003ef8:	f040 8187 	bne.w	800420a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003f02:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003f06:	e12a      	b.n	800415e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8003f1a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8003f1e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d053      	beq.n	8004006 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <UART_RxISR_16BIT_FIFOEN+0xce>
 8003f6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8003f9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2202      	movs	r2, #2
 8003fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb4:	f043 0204 	orr.w	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fc2:	f003 0304 	and.w	r3, r3, #4
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <UART_RxISR_16BIT_FIFOEN+0x12e>
 8003fca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2204      	movs	r2, #4
 8003fdc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe4:	f043 0202 	orr.w	r2, r3, #2
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fe fd95 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 80a5 	bne.w	800415e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004022:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800403a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800403e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e2      	bne.n	8004014 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800405e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004060:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8004076:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800407c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800407e:	e841 2300 	strex	r3, r2, [r1]
 8004082:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1e1      	bne.n	800404e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a60      	ldr	r2, [pc, #384]	@ (8004224 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d021      	beq.n	80040ec <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d01a      	beq.n	80040ec <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040da:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e4      	bne.n	80040b6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d130      	bne.n	8004156 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410a:	f023 0310 	bic.w	r3, r3, #16
 800410e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800411c:	647b      	str	r3, [r7, #68]	@ 0x44
 800411e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004122:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e4      	bne.n	80040fa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b10      	cmp	r3, #16
 800413c:	d103      	bne.n	8004146 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2210      	movs	r2, #16
 8004144:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fe fcf4 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004154:	e00e      	b.n	8004174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fc faf6 	bl	8000748 <HAL_UART_RxCpltCallback>
        break;
 800415c:	e00a      	b.n	8004174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800415e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8004162:	2b00      	cmp	r3, #0
 8004164:	d006      	beq.n	8004174 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8004166:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	f47f aeca 	bne.w	8003f08 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800417a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800417e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8004182:	2b00      	cmp	r3, #0
 8004184:	d049      	beq.n	800421a <UART_RxISR_16BIT_FIFOEN+0x35a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800418c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8004190:	429a      	cmp	r2, r3
 8004192:	d242      	bcs.n	800421a <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3308      	adds	r3, #8
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	623b      	str	r3, [r7, #32]
   return(result);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3308      	adds	r3, #8
 80041b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80041b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e3      	bne.n	8004194 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a16      	ldr	r2, [pc, #88]	@ (8004228 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80041d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f043 0320 	orr.w	r3, r3, #32
 80041e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e4      	bne.n	80041d2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004208:	e007      	b.n	800421a <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 0208 	orr.w	r2, r2, #8
 8004218:	619a      	str	r2, [r3, #24]
}
 800421a:	bf00      	nop
 800421c:	37b8      	adds	r7, #184	@ 0xb8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	40008000 	.word	0x40008000
 8004228:	080039a5 	.word	0x080039a5

0800422c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_UARTEx_DisableFifoMode+0x16>
 800427a:	2302      	movs	r3, #2
 800427c:	e027      	b.n	80042ce <HAL_UARTEx_DisableFifoMode+0x66>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2224      	movs	r2, #36	@ 0x24
 800428a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80042ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e02d      	b.n	800434e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2224      	movs	r2, #36	@ 0x24
 80042fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0201 	bic.w	r2, r2, #1
 8004318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f850 	bl	80043d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800436a:	2302      	movs	r3, #2
 800436c:	e02d      	b.n	80043ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	@ 0x24
 800437a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f812 	bl	80043d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
	...

080043d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d108      	bne.n	80043f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80043f4:	e031      	b.n	800445a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80043f6:	2308      	movs	r3, #8
 80043f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80043fa:	2308      	movs	r3, #8
 80043fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	0e5b      	lsrs	r3, r3, #25
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	0f5b      	lsrs	r3, r3, #29
 8004416:	b2db      	uxtb	r3, r3
 8004418:	f003 0307 	and.w	r3, r3, #7
 800441c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800441e:	7bbb      	ldrb	r3, [r7, #14]
 8004420:	7b3a      	ldrb	r2, [r7, #12]
 8004422:	4911      	ldr	r1, [pc, #68]	@ (8004468 <UARTEx_SetNbDataToProcess+0x94>)
 8004424:	5c8a      	ldrb	r2, [r1, r2]
 8004426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800442a:	7b3a      	ldrb	r2, [r7, #12]
 800442c:	490f      	ldr	r1, [pc, #60]	@ (800446c <UARTEx_SetNbDataToProcess+0x98>)
 800442e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004430:	fb93 f3f2 	sdiv	r3, r3, r2
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	7b7a      	ldrb	r2, [r7, #13]
 8004440:	4909      	ldr	r1, [pc, #36]	@ (8004468 <UARTEx_SetNbDataToProcess+0x94>)
 8004442:	5c8a      	ldrb	r2, [r1, r2]
 8004444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004448:	7b7a      	ldrb	r2, [r7, #13]
 800444a:	4908      	ldr	r1, [pc, #32]	@ (800446c <UARTEx_SetNbDataToProcess+0x98>)
 800444c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800444e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	08005360 	.word	0x08005360
 800446c:	08005368 	.word	0x08005368

08004470 <__sflush_r>:
 8004470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	0716      	lsls	r6, r2, #28
 800447a:	4605      	mov	r5, r0
 800447c:	460c      	mov	r4, r1
 800447e:	d454      	bmi.n	800452a <__sflush_r+0xba>
 8004480:	684b      	ldr	r3, [r1, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	dc02      	bgt.n	800448c <__sflush_r+0x1c>
 8004486:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	dd48      	ble.n	800451e <__sflush_r+0xae>
 800448c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800448e:	2e00      	cmp	r6, #0
 8004490:	d045      	beq.n	800451e <__sflush_r+0xae>
 8004492:	2300      	movs	r3, #0
 8004494:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004498:	682f      	ldr	r7, [r5, #0]
 800449a:	6a21      	ldr	r1, [r4, #32]
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	d030      	beq.n	8004502 <__sflush_r+0x92>
 80044a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	0759      	lsls	r1, r3, #29
 80044a6:	d505      	bpl.n	80044b4 <__sflush_r+0x44>
 80044a8:	6863      	ldr	r3, [r4, #4]
 80044aa:	1ad2      	subs	r2, r2, r3
 80044ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ae:	b10b      	cbz	r3, 80044b4 <__sflush_r+0x44>
 80044b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044b2:	1ad2      	subs	r2, r2, r3
 80044b4:	2300      	movs	r3, #0
 80044b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044b8:	6a21      	ldr	r1, [r4, #32]
 80044ba:	4628      	mov	r0, r5
 80044bc:	47b0      	blx	r6
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	89a3      	ldrh	r3, [r4, #12]
 80044c2:	d106      	bne.n	80044d2 <__sflush_r+0x62>
 80044c4:	6829      	ldr	r1, [r5, #0]
 80044c6:	291d      	cmp	r1, #29
 80044c8:	d82b      	bhi.n	8004522 <__sflush_r+0xb2>
 80044ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <__sflush_r+0x104>)
 80044cc:	410a      	asrs	r2, r1
 80044ce:	07d6      	lsls	r6, r2, #31
 80044d0:	d427      	bmi.n	8004522 <__sflush_r+0xb2>
 80044d2:	2200      	movs	r2, #0
 80044d4:	6062      	str	r2, [r4, #4]
 80044d6:	04d9      	lsls	r1, r3, #19
 80044d8:	6922      	ldr	r2, [r4, #16]
 80044da:	6022      	str	r2, [r4, #0]
 80044dc:	d504      	bpl.n	80044e8 <__sflush_r+0x78>
 80044de:	1c42      	adds	r2, r0, #1
 80044e0:	d101      	bne.n	80044e6 <__sflush_r+0x76>
 80044e2:	682b      	ldr	r3, [r5, #0]
 80044e4:	b903      	cbnz	r3, 80044e8 <__sflush_r+0x78>
 80044e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80044e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ea:	602f      	str	r7, [r5, #0]
 80044ec:	b1b9      	cbz	r1, 800451e <__sflush_r+0xae>
 80044ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d002      	beq.n	80044fc <__sflush_r+0x8c>
 80044f6:	4628      	mov	r0, r5
 80044f8:	f000 fa0e 	bl	8004918 <_free_r>
 80044fc:	2300      	movs	r3, #0
 80044fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8004500:	e00d      	b.n	800451e <__sflush_r+0xae>
 8004502:	2301      	movs	r3, #1
 8004504:	4628      	mov	r0, r5
 8004506:	47b0      	blx	r6
 8004508:	4602      	mov	r2, r0
 800450a:	1c50      	adds	r0, r2, #1
 800450c:	d1c9      	bne.n	80044a2 <__sflush_r+0x32>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0c6      	beq.n	80044a2 <__sflush_r+0x32>
 8004514:	2b1d      	cmp	r3, #29
 8004516:	d001      	beq.n	800451c <__sflush_r+0xac>
 8004518:	2b16      	cmp	r3, #22
 800451a:	d11e      	bne.n	800455a <__sflush_r+0xea>
 800451c:	602f      	str	r7, [r5, #0]
 800451e:	2000      	movs	r0, #0
 8004520:	e022      	b.n	8004568 <__sflush_r+0xf8>
 8004522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004526:	b21b      	sxth	r3, r3
 8004528:	e01b      	b.n	8004562 <__sflush_r+0xf2>
 800452a:	690f      	ldr	r7, [r1, #16]
 800452c:	2f00      	cmp	r7, #0
 800452e:	d0f6      	beq.n	800451e <__sflush_r+0xae>
 8004530:	0793      	lsls	r3, r2, #30
 8004532:	680e      	ldr	r6, [r1, #0]
 8004534:	bf08      	it	eq
 8004536:	694b      	ldreq	r3, [r1, #20]
 8004538:	600f      	str	r7, [r1, #0]
 800453a:	bf18      	it	ne
 800453c:	2300      	movne	r3, #0
 800453e:	eba6 0807 	sub.w	r8, r6, r7
 8004542:	608b      	str	r3, [r1, #8]
 8004544:	f1b8 0f00 	cmp.w	r8, #0
 8004548:	dde9      	ble.n	800451e <__sflush_r+0xae>
 800454a:	6a21      	ldr	r1, [r4, #32]
 800454c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800454e:	4643      	mov	r3, r8
 8004550:	463a      	mov	r2, r7
 8004552:	4628      	mov	r0, r5
 8004554:	47b0      	blx	r6
 8004556:	2800      	cmp	r0, #0
 8004558:	dc08      	bgt.n	800456c <__sflush_r+0xfc>
 800455a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800455e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004562:	81a3      	strh	r3, [r4, #12]
 8004564:	f04f 30ff 	mov.w	r0, #4294967295
 8004568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800456c:	4407      	add	r7, r0
 800456e:	eba8 0800 	sub.w	r8, r8, r0
 8004572:	e7e7      	b.n	8004544 <__sflush_r+0xd4>
 8004574:	dfbffffe 	.word	0xdfbffffe

08004578 <_fflush_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	4605      	mov	r5, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b913      	cbnz	r3, 8004588 <_fflush_r+0x10>
 8004582:	2500      	movs	r5, #0
 8004584:	4628      	mov	r0, r5
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	b118      	cbz	r0, 8004592 <_fflush_r+0x1a>
 800458a:	6a03      	ldr	r3, [r0, #32]
 800458c:	b90b      	cbnz	r3, 8004592 <_fflush_r+0x1a>
 800458e:	f000 f8bb 	bl	8004708 <__sinit>
 8004592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f3      	beq.n	8004582 <_fflush_r+0xa>
 800459a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800459c:	07d0      	lsls	r0, r2, #31
 800459e:	d404      	bmi.n	80045aa <_fflush_r+0x32>
 80045a0:	0599      	lsls	r1, r3, #22
 80045a2:	d402      	bmi.n	80045aa <_fflush_r+0x32>
 80045a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045a6:	f000 f9b4 	bl	8004912 <__retarget_lock_acquire_recursive>
 80045aa:	4628      	mov	r0, r5
 80045ac:	4621      	mov	r1, r4
 80045ae:	f7ff ff5f 	bl	8004470 <__sflush_r>
 80045b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045b4:	07da      	lsls	r2, r3, #31
 80045b6:	4605      	mov	r5, r0
 80045b8:	d4e4      	bmi.n	8004584 <_fflush_r+0xc>
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	059b      	lsls	r3, r3, #22
 80045be:	d4e1      	bmi.n	8004584 <_fflush_r+0xc>
 80045c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045c2:	f000 f9a7 	bl	8004914 <__retarget_lock_release_recursive>
 80045c6:	e7dd      	b.n	8004584 <_fflush_r+0xc>

080045c8 <fflush>:
 80045c8:	4601      	mov	r1, r0
 80045ca:	b920      	cbnz	r0, 80045d6 <fflush+0xe>
 80045cc:	4a04      	ldr	r2, [pc, #16]	@ (80045e0 <fflush+0x18>)
 80045ce:	4905      	ldr	r1, [pc, #20]	@ (80045e4 <fflush+0x1c>)
 80045d0:	4805      	ldr	r0, [pc, #20]	@ (80045e8 <fflush+0x20>)
 80045d2:	f000 b8b1 	b.w	8004738 <_fwalk_sglue>
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <fflush+0x24>)
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	f7ff bfcd 	b.w	8004578 <_fflush_r>
 80045de:	bf00      	nop
 80045e0:	2000000c 	.word	0x2000000c
 80045e4:	08004579 	.word	0x08004579
 80045e8:	2000001c 	.word	0x2000001c
 80045ec:	20000018 	.word	0x20000018

080045f0 <std>:
 80045f0:	2300      	movs	r3, #0
 80045f2:	b510      	push	{r4, lr}
 80045f4:	4604      	mov	r4, r0
 80045f6:	e9c0 3300 	strd	r3, r3, [r0]
 80045fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045fe:	6083      	str	r3, [r0, #8]
 8004600:	8181      	strh	r1, [r0, #12]
 8004602:	6643      	str	r3, [r0, #100]	@ 0x64
 8004604:	81c2      	strh	r2, [r0, #14]
 8004606:	6183      	str	r3, [r0, #24]
 8004608:	4619      	mov	r1, r3
 800460a:	2208      	movs	r2, #8
 800460c:	305c      	adds	r0, #92	@ 0x5c
 800460e:	f000 f906 	bl	800481e <memset>
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <std+0x58>)
 8004614:	6263      	str	r3, [r4, #36]	@ 0x24
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <std+0x5c>)
 8004618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <std+0x60>)
 800461c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800461e:	4b0d      	ldr	r3, [pc, #52]	@ (8004654 <std+0x64>)
 8004620:	6323      	str	r3, [r4, #48]	@ 0x30
 8004622:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <std+0x68>)
 8004624:	6224      	str	r4, [r4, #32]
 8004626:	429c      	cmp	r4, r3
 8004628:	d006      	beq.n	8004638 <std+0x48>
 800462a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800462e:	4294      	cmp	r4, r2
 8004630:	d002      	beq.n	8004638 <std+0x48>
 8004632:	33d0      	adds	r3, #208	@ 0xd0
 8004634:	429c      	cmp	r4, r3
 8004636:	d105      	bne.n	8004644 <std+0x54>
 8004638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800463c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004640:	f000 b966 	b.w	8004910 <__retarget_lock_init_recursive>
 8004644:	bd10      	pop	{r4, pc}
 8004646:	bf00      	nop
 8004648:	08004799 	.word	0x08004799
 800464c:	080047bb 	.word	0x080047bb
 8004650:	080047f3 	.word	0x080047f3
 8004654:	08004817 	.word	0x08004817
 8004658:	20000128 	.word	0x20000128

0800465c <stdio_exit_handler>:
 800465c:	4a02      	ldr	r2, [pc, #8]	@ (8004668 <stdio_exit_handler+0xc>)
 800465e:	4903      	ldr	r1, [pc, #12]	@ (800466c <stdio_exit_handler+0x10>)
 8004660:	4803      	ldr	r0, [pc, #12]	@ (8004670 <stdio_exit_handler+0x14>)
 8004662:	f000 b869 	b.w	8004738 <_fwalk_sglue>
 8004666:	bf00      	nop
 8004668:	2000000c 	.word	0x2000000c
 800466c:	08004579 	.word	0x08004579
 8004670:	2000001c 	.word	0x2000001c

08004674 <cleanup_stdio>:
 8004674:	6841      	ldr	r1, [r0, #4]
 8004676:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <cleanup_stdio+0x34>)
 8004678:	4299      	cmp	r1, r3
 800467a:	b510      	push	{r4, lr}
 800467c:	4604      	mov	r4, r0
 800467e:	d001      	beq.n	8004684 <cleanup_stdio+0x10>
 8004680:	f7ff ff7a 	bl	8004578 <_fflush_r>
 8004684:	68a1      	ldr	r1, [r4, #8]
 8004686:	4b09      	ldr	r3, [pc, #36]	@ (80046ac <cleanup_stdio+0x38>)
 8004688:	4299      	cmp	r1, r3
 800468a:	d002      	beq.n	8004692 <cleanup_stdio+0x1e>
 800468c:	4620      	mov	r0, r4
 800468e:	f7ff ff73 	bl	8004578 <_fflush_r>
 8004692:	68e1      	ldr	r1, [r4, #12]
 8004694:	4b06      	ldr	r3, [pc, #24]	@ (80046b0 <cleanup_stdio+0x3c>)
 8004696:	4299      	cmp	r1, r3
 8004698:	d004      	beq.n	80046a4 <cleanup_stdio+0x30>
 800469a:	4620      	mov	r0, r4
 800469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a0:	f7ff bf6a 	b.w	8004578 <_fflush_r>
 80046a4:	bd10      	pop	{r4, pc}
 80046a6:	bf00      	nop
 80046a8:	20000128 	.word	0x20000128
 80046ac:	20000190 	.word	0x20000190
 80046b0:	200001f8 	.word	0x200001f8

080046b4 <global_stdio_init.part.0>:
 80046b4:	b510      	push	{r4, lr}
 80046b6:	4b0b      	ldr	r3, [pc, #44]	@ (80046e4 <global_stdio_init.part.0+0x30>)
 80046b8:	4c0b      	ldr	r4, [pc, #44]	@ (80046e8 <global_stdio_init.part.0+0x34>)
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <global_stdio_init.part.0+0x38>)
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	4620      	mov	r0, r4
 80046c0:	2200      	movs	r2, #0
 80046c2:	2104      	movs	r1, #4
 80046c4:	f7ff ff94 	bl	80045f0 <std>
 80046c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80046cc:	2201      	movs	r2, #1
 80046ce:	2109      	movs	r1, #9
 80046d0:	f7ff ff8e 	bl	80045f0 <std>
 80046d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80046d8:	2202      	movs	r2, #2
 80046da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046de:	2112      	movs	r1, #18
 80046e0:	f7ff bf86 	b.w	80045f0 <std>
 80046e4:	20000260 	.word	0x20000260
 80046e8:	20000128 	.word	0x20000128
 80046ec:	0800465d 	.word	0x0800465d

080046f0 <__sfp_lock_acquire>:
 80046f0:	4801      	ldr	r0, [pc, #4]	@ (80046f8 <__sfp_lock_acquire+0x8>)
 80046f2:	f000 b90e 	b.w	8004912 <__retarget_lock_acquire_recursive>
 80046f6:	bf00      	nop
 80046f8:	20000269 	.word	0x20000269

080046fc <__sfp_lock_release>:
 80046fc:	4801      	ldr	r0, [pc, #4]	@ (8004704 <__sfp_lock_release+0x8>)
 80046fe:	f000 b909 	b.w	8004914 <__retarget_lock_release_recursive>
 8004702:	bf00      	nop
 8004704:	20000269 	.word	0x20000269

08004708 <__sinit>:
 8004708:	b510      	push	{r4, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	f7ff fff0 	bl	80046f0 <__sfp_lock_acquire>
 8004710:	6a23      	ldr	r3, [r4, #32]
 8004712:	b11b      	cbz	r3, 800471c <__sinit+0x14>
 8004714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004718:	f7ff bff0 	b.w	80046fc <__sfp_lock_release>
 800471c:	4b04      	ldr	r3, [pc, #16]	@ (8004730 <__sinit+0x28>)
 800471e:	6223      	str	r3, [r4, #32]
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <__sinit+0x2c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f5      	bne.n	8004714 <__sinit+0xc>
 8004728:	f7ff ffc4 	bl	80046b4 <global_stdio_init.part.0>
 800472c:	e7f2      	b.n	8004714 <__sinit+0xc>
 800472e:	bf00      	nop
 8004730:	08004675 	.word	0x08004675
 8004734:	20000260 	.word	0x20000260

08004738 <_fwalk_sglue>:
 8004738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800473c:	4607      	mov	r7, r0
 800473e:	4688      	mov	r8, r1
 8004740:	4614      	mov	r4, r2
 8004742:	2600      	movs	r6, #0
 8004744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004748:	f1b9 0901 	subs.w	r9, r9, #1
 800474c:	d505      	bpl.n	800475a <_fwalk_sglue+0x22>
 800474e:	6824      	ldr	r4, [r4, #0]
 8004750:	2c00      	cmp	r4, #0
 8004752:	d1f7      	bne.n	8004744 <_fwalk_sglue+0xc>
 8004754:	4630      	mov	r0, r6
 8004756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800475a:	89ab      	ldrh	r3, [r5, #12]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d907      	bls.n	8004770 <_fwalk_sglue+0x38>
 8004760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004764:	3301      	adds	r3, #1
 8004766:	d003      	beq.n	8004770 <_fwalk_sglue+0x38>
 8004768:	4629      	mov	r1, r5
 800476a:	4638      	mov	r0, r7
 800476c:	47c0      	blx	r8
 800476e:	4306      	orrs	r6, r0
 8004770:	3568      	adds	r5, #104	@ 0x68
 8004772:	e7e9      	b.n	8004748 <_fwalk_sglue+0x10>

08004774 <iprintf>:
 8004774:	b40f      	push	{r0, r1, r2, r3}
 8004776:	b507      	push	{r0, r1, r2, lr}
 8004778:	4906      	ldr	r1, [pc, #24]	@ (8004794 <iprintf+0x20>)
 800477a:	ab04      	add	r3, sp, #16
 800477c:	6808      	ldr	r0, [r1, #0]
 800477e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004782:	6881      	ldr	r1, [r0, #8]
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	f000 f9e9 	bl	8004b5c <_vfiprintf_r>
 800478a:	b003      	add	sp, #12
 800478c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004790:	b004      	add	sp, #16
 8004792:	4770      	bx	lr
 8004794:	20000018 	.word	0x20000018

08004798 <__sread>:
 8004798:	b510      	push	{r4, lr}
 800479a:	460c      	mov	r4, r1
 800479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a0:	f000 f868 	bl	8004874 <_read_r>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	bfab      	itete	ge
 80047a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80047aa:	89a3      	ldrhlt	r3, [r4, #12]
 80047ac:	181b      	addge	r3, r3, r0
 80047ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80047b2:	bfac      	ite	ge
 80047b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80047b6:	81a3      	strhlt	r3, [r4, #12]
 80047b8:	bd10      	pop	{r4, pc}

080047ba <__swrite>:
 80047ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	461f      	mov	r7, r3
 80047c0:	898b      	ldrh	r3, [r1, #12]
 80047c2:	05db      	lsls	r3, r3, #23
 80047c4:	4605      	mov	r5, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4616      	mov	r6, r2
 80047ca:	d505      	bpl.n	80047d8 <__swrite+0x1e>
 80047cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d0:	2302      	movs	r3, #2
 80047d2:	2200      	movs	r2, #0
 80047d4:	f000 f83c 	bl	8004850 <_lseek_r>
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047e2:	81a3      	strh	r3, [r4, #12]
 80047e4:	4632      	mov	r2, r6
 80047e6:	463b      	mov	r3, r7
 80047e8:	4628      	mov	r0, r5
 80047ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047ee:	f000 b853 	b.w	8004898 <_write_r>

080047f2 <__sseek>:
 80047f2:	b510      	push	{r4, lr}
 80047f4:	460c      	mov	r4, r1
 80047f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047fa:	f000 f829 	bl	8004850 <_lseek_r>
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	bf15      	itete	ne
 8004804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800480a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800480e:	81a3      	strheq	r3, [r4, #12]
 8004810:	bf18      	it	ne
 8004812:	81a3      	strhne	r3, [r4, #12]
 8004814:	bd10      	pop	{r4, pc}

08004816 <__sclose>:
 8004816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800481a:	f000 b809 	b.w	8004830 <_close_r>

0800481e <memset>:
 800481e:	4402      	add	r2, r0
 8004820:	4603      	mov	r3, r0
 8004822:	4293      	cmp	r3, r2
 8004824:	d100      	bne.n	8004828 <memset+0xa>
 8004826:	4770      	bx	lr
 8004828:	f803 1b01 	strb.w	r1, [r3], #1
 800482c:	e7f9      	b.n	8004822 <memset+0x4>
	...

08004830 <_close_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4d06      	ldr	r5, [pc, #24]	@ (800484c <_close_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc f8a1 	bl	8000982 <_close>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_close_r+0x1a>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_close_r+0x1a>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000264 	.word	0x20000264

08004850 <_lseek_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d07      	ldr	r5, [pc, #28]	@ (8004870 <_lseek_r+0x20>)
 8004854:	4604      	mov	r4, r0
 8004856:	4608      	mov	r0, r1
 8004858:	4611      	mov	r1, r2
 800485a:	2200      	movs	r2, #0
 800485c:	602a      	str	r2, [r5, #0]
 800485e:	461a      	mov	r2, r3
 8004860:	f7fc f8b6 	bl	80009d0 <_lseek>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_lseek_r+0x1e>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_lseek_r+0x1e>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000264 	.word	0x20000264

08004874 <_read_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d07      	ldr	r5, [pc, #28]	@ (8004894 <_read_r+0x20>)
 8004878:	4604      	mov	r4, r0
 800487a:	4608      	mov	r0, r1
 800487c:	4611      	mov	r1, r2
 800487e:	2200      	movs	r2, #0
 8004880:	602a      	str	r2, [r5, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7fc f844 	bl	8000910 <_read>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_read_r+0x1e>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	b103      	cbz	r3, 8004892 <_read_r+0x1e>
 8004890:	6023      	str	r3, [r4, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	20000264 	.word	0x20000264

08004898 <_write_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	4d07      	ldr	r5, [pc, #28]	@ (80048b8 <_write_r+0x20>)
 800489c:	4604      	mov	r4, r0
 800489e:	4608      	mov	r0, r1
 80048a0:	4611      	mov	r1, r2
 80048a2:	2200      	movs	r2, #0
 80048a4:	602a      	str	r2, [r5, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f7fc f84f 	bl	800094a <_write>
 80048ac:	1c43      	adds	r3, r0, #1
 80048ae:	d102      	bne.n	80048b6 <_write_r+0x1e>
 80048b0:	682b      	ldr	r3, [r5, #0]
 80048b2:	b103      	cbz	r3, 80048b6 <_write_r+0x1e>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	bd38      	pop	{r3, r4, r5, pc}
 80048b8:	20000264 	.word	0x20000264

080048bc <__errno>:
 80048bc:	4b01      	ldr	r3, [pc, #4]	@ (80048c4 <__errno+0x8>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000018 	.word	0x20000018

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	@ (800490c <__libc_init_array+0x44>)
 80048dc:	f000 fd0c 	bl	80052f8 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	080053ac 	.word	0x080053ac
 8004904:	080053ac 	.word	0x080053ac
 8004908:	080053ac 	.word	0x080053ac
 800490c:	080053b0 	.word	0x080053b0

08004910 <__retarget_lock_init_recursive>:
 8004910:	4770      	bx	lr

08004912 <__retarget_lock_acquire_recursive>:
 8004912:	4770      	bx	lr

08004914 <__retarget_lock_release_recursive>:
 8004914:	4770      	bx	lr
	...

08004918 <_free_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4605      	mov	r5, r0
 800491c:	2900      	cmp	r1, #0
 800491e:	d041      	beq.n	80049a4 <_free_r+0x8c>
 8004920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004924:	1f0c      	subs	r4, r1, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	18e4      	addlt	r4, r4, r3
 800492c:	f000 f8e0 	bl	8004af0 <__malloc_lock>
 8004930:	4a1d      	ldr	r2, [pc, #116]	@ (80049a8 <_free_r+0x90>)
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	b933      	cbnz	r3, 8004944 <_free_r+0x2c>
 8004936:	6063      	str	r3, [r4, #4]
 8004938:	6014      	str	r4, [r2, #0]
 800493a:	4628      	mov	r0, r5
 800493c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004940:	f000 b8dc 	b.w	8004afc <__malloc_unlock>
 8004944:	42a3      	cmp	r3, r4
 8004946:	d908      	bls.n	800495a <_free_r+0x42>
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	1821      	adds	r1, r4, r0
 800494c:	428b      	cmp	r3, r1
 800494e:	bf01      	itttt	eq
 8004950:	6819      	ldreq	r1, [r3, #0]
 8004952:	685b      	ldreq	r3, [r3, #4]
 8004954:	1809      	addeq	r1, r1, r0
 8004956:	6021      	streq	r1, [r4, #0]
 8004958:	e7ed      	b.n	8004936 <_free_r+0x1e>
 800495a:	461a      	mov	r2, r3
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	b10b      	cbz	r3, 8004964 <_free_r+0x4c>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d9fa      	bls.n	800495a <_free_r+0x42>
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	1850      	adds	r0, r2, r1
 8004968:	42a0      	cmp	r0, r4
 800496a:	d10b      	bne.n	8004984 <_free_r+0x6c>
 800496c:	6820      	ldr	r0, [r4, #0]
 800496e:	4401      	add	r1, r0
 8004970:	1850      	adds	r0, r2, r1
 8004972:	4283      	cmp	r3, r0
 8004974:	6011      	str	r1, [r2, #0]
 8004976:	d1e0      	bne.n	800493a <_free_r+0x22>
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	4408      	add	r0, r1
 8004980:	6010      	str	r0, [r2, #0]
 8004982:	e7da      	b.n	800493a <_free_r+0x22>
 8004984:	d902      	bls.n	800498c <_free_r+0x74>
 8004986:	230c      	movs	r3, #12
 8004988:	602b      	str	r3, [r5, #0]
 800498a:	e7d6      	b.n	800493a <_free_r+0x22>
 800498c:	6820      	ldr	r0, [r4, #0]
 800498e:	1821      	adds	r1, r4, r0
 8004990:	428b      	cmp	r3, r1
 8004992:	bf04      	itt	eq
 8004994:	6819      	ldreq	r1, [r3, #0]
 8004996:	685b      	ldreq	r3, [r3, #4]
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	bf04      	itt	eq
 800499c:	1809      	addeq	r1, r1, r0
 800499e:	6021      	streq	r1, [r4, #0]
 80049a0:	6054      	str	r4, [r2, #4]
 80049a2:	e7ca      	b.n	800493a <_free_r+0x22>
 80049a4:	bd38      	pop	{r3, r4, r5, pc}
 80049a6:	bf00      	nop
 80049a8:	20000270 	.word	0x20000270

080049ac <sbrk_aligned>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4e0f      	ldr	r6, [pc, #60]	@ (80049ec <sbrk_aligned+0x40>)
 80049b0:	460c      	mov	r4, r1
 80049b2:	6831      	ldr	r1, [r6, #0]
 80049b4:	4605      	mov	r5, r0
 80049b6:	b911      	cbnz	r1, 80049be <sbrk_aligned+0x12>
 80049b8:	f000 fc0a 	bl	80051d0 <_sbrk_r>
 80049bc:	6030      	str	r0, [r6, #0]
 80049be:	4621      	mov	r1, r4
 80049c0:	4628      	mov	r0, r5
 80049c2:	f000 fc05 	bl	80051d0 <_sbrk_r>
 80049c6:	1c43      	adds	r3, r0, #1
 80049c8:	d103      	bne.n	80049d2 <sbrk_aligned+0x26>
 80049ca:	f04f 34ff 	mov.w	r4, #4294967295
 80049ce:	4620      	mov	r0, r4
 80049d0:	bd70      	pop	{r4, r5, r6, pc}
 80049d2:	1cc4      	adds	r4, r0, #3
 80049d4:	f024 0403 	bic.w	r4, r4, #3
 80049d8:	42a0      	cmp	r0, r4
 80049da:	d0f8      	beq.n	80049ce <sbrk_aligned+0x22>
 80049dc:	1a21      	subs	r1, r4, r0
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 fbf6 	bl	80051d0 <_sbrk_r>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d1f2      	bne.n	80049ce <sbrk_aligned+0x22>
 80049e8:	e7ef      	b.n	80049ca <sbrk_aligned+0x1e>
 80049ea:	bf00      	nop
 80049ec:	2000026c 	.word	0x2000026c

080049f0 <_malloc_r>:
 80049f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f4:	1ccd      	adds	r5, r1, #3
 80049f6:	f025 0503 	bic.w	r5, r5, #3
 80049fa:	3508      	adds	r5, #8
 80049fc:	2d0c      	cmp	r5, #12
 80049fe:	bf38      	it	cc
 8004a00:	250c      	movcc	r5, #12
 8004a02:	2d00      	cmp	r5, #0
 8004a04:	4606      	mov	r6, r0
 8004a06:	db01      	blt.n	8004a0c <_malloc_r+0x1c>
 8004a08:	42a9      	cmp	r1, r5
 8004a0a:	d904      	bls.n	8004a16 <_malloc_r+0x26>
 8004a0c:	230c      	movs	r3, #12
 8004a0e:	6033      	str	r3, [r6, #0]
 8004a10:	2000      	movs	r0, #0
 8004a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004aec <_malloc_r+0xfc>
 8004a1a:	f000 f869 	bl	8004af0 <__malloc_lock>
 8004a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a22:	461c      	mov	r4, r3
 8004a24:	bb44      	cbnz	r4, 8004a78 <_malloc_r+0x88>
 8004a26:	4629      	mov	r1, r5
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f7ff ffbf 	bl	80049ac <sbrk_aligned>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	4604      	mov	r4, r0
 8004a32:	d158      	bne.n	8004ae6 <_malloc_r+0xf6>
 8004a34:	f8d8 4000 	ldr.w	r4, [r8]
 8004a38:	4627      	mov	r7, r4
 8004a3a:	2f00      	cmp	r7, #0
 8004a3c:	d143      	bne.n	8004ac6 <_malloc_r+0xd6>
 8004a3e:	2c00      	cmp	r4, #0
 8004a40:	d04b      	beq.n	8004ada <_malloc_r+0xea>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	4639      	mov	r1, r7
 8004a46:	4630      	mov	r0, r6
 8004a48:	eb04 0903 	add.w	r9, r4, r3
 8004a4c:	f000 fbc0 	bl	80051d0 <_sbrk_r>
 8004a50:	4581      	cmp	r9, r0
 8004a52:	d142      	bne.n	8004ada <_malloc_r+0xea>
 8004a54:	6821      	ldr	r1, [r4, #0]
 8004a56:	1a6d      	subs	r5, r5, r1
 8004a58:	4629      	mov	r1, r5
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	f7ff ffa6 	bl	80049ac <sbrk_aligned>
 8004a60:	3001      	adds	r0, #1
 8004a62:	d03a      	beq.n	8004ada <_malloc_r+0xea>
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	442b      	add	r3, r5
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	bb62      	cbnz	r2, 8004acc <_malloc_r+0xdc>
 8004a72:	f8c8 7000 	str.w	r7, [r8]
 8004a76:	e00f      	b.n	8004a98 <_malloc_r+0xa8>
 8004a78:	6822      	ldr	r2, [r4, #0]
 8004a7a:	1b52      	subs	r2, r2, r5
 8004a7c:	d420      	bmi.n	8004ac0 <_malloc_r+0xd0>
 8004a7e:	2a0b      	cmp	r2, #11
 8004a80:	d917      	bls.n	8004ab2 <_malloc_r+0xc2>
 8004a82:	1961      	adds	r1, r4, r5
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	6025      	str	r5, [r4, #0]
 8004a88:	bf18      	it	ne
 8004a8a:	6059      	strne	r1, [r3, #4]
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	bf08      	it	eq
 8004a90:	f8c8 1000 	streq.w	r1, [r8]
 8004a94:	5162      	str	r2, [r4, r5]
 8004a96:	604b      	str	r3, [r1, #4]
 8004a98:	4630      	mov	r0, r6
 8004a9a:	f000 f82f 	bl	8004afc <__malloc_unlock>
 8004a9e:	f104 000b 	add.w	r0, r4, #11
 8004aa2:	1d23      	adds	r3, r4, #4
 8004aa4:	f020 0007 	bic.w	r0, r0, #7
 8004aa8:	1ac2      	subs	r2, r0, r3
 8004aaa:	bf1c      	itt	ne
 8004aac:	1a1b      	subne	r3, r3, r0
 8004aae:	50a3      	strne	r3, [r4, r2]
 8004ab0:	e7af      	b.n	8004a12 <_malloc_r+0x22>
 8004ab2:	6862      	ldr	r2, [r4, #4]
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	bf0c      	ite	eq
 8004ab8:	f8c8 2000 	streq.w	r2, [r8]
 8004abc:	605a      	strne	r2, [r3, #4]
 8004abe:	e7eb      	b.n	8004a98 <_malloc_r+0xa8>
 8004ac0:	4623      	mov	r3, r4
 8004ac2:	6864      	ldr	r4, [r4, #4]
 8004ac4:	e7ae      	b.n	8004a24 <_malloc_r+0x34>
 8004ac6:	463c      	mov	r4, r7
 8004ac8:	687f      	ldr	r7, [r7, #4]
 8004aca:	e7b6      	b.n	8004a3a <_malloc_r+0x4a>
 8004acc:	461a      	mov	r2, r3
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	d1fb      	bne.n	8004acc <_malloc_r+0xdc>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6053      	str	r3, [r2, #4]
 8004ad8:	e7de      	b.n	8004a98 <_malloc_r+0xa8>
 8004ada:	230c      	movs	r3, #12
 8004adc:	6033      	str	r3, [r6, #0]
 8004ade:	4630      	mov	r0, r6
 8004ae0:	f000 f80c 	bl	8004afc <__malloc_unlock>
 8004ae4:	e794      	b.n	8004a10 <_malloc_r+0x20>
 8004ae6:	6005      	str	r5, [r0, #0]
 8004ae8:	e7d6      	b.n	8004a98 <_malloc_r+0xa8>
 8004aea:	bf00      	nop
 8004aec:	20000270 	.word	0x20000270

08004af0 <__malloc_lock>:
 8004af0:	4801      	ldr	r0, [pc, #4]	@ (8004af8 <__malloc_lock+0x8>)
 8004af2:	f7ff bf0e 	b.w	8004912 <__retarget_lock_acquire_recursive>
 8004af6:	bf00      	nop
 8004af8:	20000268 	.word	0x20000268

08004afc <__malloc_unlock>:
 8004afc:	4801      	ldr	r0, [pc, #4]	@ (8004b04 <__malloc_unlock+0x8>)
 8004afe:	f7ff bf09 	b.w	8004914 <__retarget_lock_release_recursive>
 8004b02:	bf00      	nop
 8004b04:	20000268 	.word	0x20000268

08004b08 <__sfputc_r>:
 8004b08:	6893      	ldr	r3, [r2, #8]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	b410      	push	{r4}
 8004b10:	6093      	str	r3, [r2, #8]
 8004b12:	da08      	bge.n	8004b26 <__sfputc_r+0x1e>
 8004b14:	6994      	ldr	r4, [r2, #24]
 8004b16:	42a3      	cmp	r3, r4
 8004b18:	db01      	blt.n	8004b1e <__sfputc_r+0x16>
 8004b1a:	290a      	cmp	r1, #10
 8004b1c:	d103      	bne.n	8004b26 <__sfputc_r+0x1e>
 8004b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b22:	f000 bac1 	b.w	80050a8 <__swbuf_r>
 8004b26:	6813      	ldr	r3, [r2, #0]
 8004b28:	1c58      	adds	r0, r3, #1
 8004b2a:	6010      	str	r0, [r2, #0]
 8004b2c:	7019      	strb	r1, [r3, #0]
 8004b2e:	4608      	mov	r0, r1
 8004b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <__sfputs_r>:
 8004b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b38:	4606      	mov	r6, r0
 8004b3a:	460f      	mov	r7, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	18d5      	adds	r5, r2, r3
 8004b40:	42ac      	cmp	r4, r5
 8004b42:	d101      	bne.n	8004b48 <__sfputs_r+0x12>
 8004b44:	2000      	movs	r0, #0
 8004b46:	e007      	b.n	8004b58 <__sfputs_r+0x22>
 8004b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b4c:	463a      	mov	r2, r7
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f7ff ffda 	bl	8004b08 <__sfputc_r>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d1f3      	bne.n	8004b40 <__sfputs_r+0xa>
 8004b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b5c <_vfiprintf_r>:
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	460d      	mov	r5, r1
 8004b62:	b09d      	sub	sp, #116	@ 0x74
 8004b64:	4614      	mov	r4, r2
 8004b66:	4698      	mov	r8, r3
 8004b68:	4606      	mov	r6, r0
 8004b6a:	b118      	cbz	r0, 8004b74 <_vfiprintf_r+0x18>
 8004b6c:	6a03      	ldr	r3, [r0, #32]
 8004b6e:	b90b      	cbnz	r3, 8004b74 <_vfiprintf_r+0x18>
 8004b70:	f7ff fdca 	bl	8004708 <__sinit>
 8004b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b76:	07d9      	lsls	r1, r3, #31
 8004b78:	d405      	bmi.n	8004b86 <_vfiprintf_r+0x2a>
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_vfiprintf_r+0x2a>
 8004b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b82:	f7ff fec6 	bl	8004912 <__retarget_lock_acquire_recursive>
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	071b      	lsls	r3, r3, #28
 8004b8a:	d501      	bpl.n	8004b90 <_vfiprintf_r+0x34>
 8004b8c:	692b      	ldr	r3, [r5, #16]
 8004b8e:	b99b      	cbnz	r3, 8004bb8 <_vfiprintf_r+0x5c>
 8004b90:	4629      	mov	r1, r5
 8004b92:	4630      	mov	r0, r6
 8004b94:	f000 fac6 	bl	8005124 <__swsetup_r>
 8004b98:	b170      	cbz	r0, 8004bb8 <_vfiprintf_r+0x5c>
 8004b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b9c:	07dc      	lsls	r4, r3, #31
 8004b9e:	d504      	bpl.n	8004baa <_vfiprintf_r+0x4e>
 8004ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba4:	b01d      	add	sp, #116	@ 0x74
 8004ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004baa:	89ab      	ldrh	r3, [r5, #12]
 8004bac:	0598      	lsls	r0, r3, #22
 8004bae:	d4f7      	bmi.n	8004ba0 <_vfiprintf_r+0x44>
 8004bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004bb2:	f7ff feaf 	bl	8004914 <__retarget_lock_release_recursive>
 8004bb6:	e7f3      	b.n	8004ba0 <_vfiprintf_r+0x44>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc6:	2330      	movs	r3, #48	@ 0x30
 8004bc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004d78 <_vfiprintf_r+0x21c>
 8004bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bd0:	f04f 0901 	mov.w	r9, #1
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	469a      	mov	sl, r3
 8004bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bdc:	b10a      	cbz	r2, 8004be2 <_vfiprintf_r+0x86>
 8004bde:	2a25      	cmp	r2, #37	@ 0x25
 8004be0:	d1f9      	bne.n	8004bd6 <_vfiprintf_r+0x7a>
 8004be2:	ebba 0b04 	subs.w	fp, sl, r4
 8004be6:	d00b      	beq.n	8004c00 <_vfiprintf_r+0xa4>
 8004be8:	465b      	mov	r3, fp
 8004bea:	4622      	mov	r2, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f7ff ffa1 	bl	8004b36 <__sfputs_r>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	f000 80a7 	beq.w	8004d48 <_vfiprintf_r+0x1ec>
 8004bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bfc:	445a      	add	r2, fp
 8004bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c00:	f89a 3000 	ldrb.w	r3, [sl]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 809f 	beq.w	8004d48 <_vfiprintf_r+0x1ec>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c14:	f10a 0a01 	add.w	sl, sl, #1
 8004c18:	9304      	str	r3, [sp, #16]
 8004c1a:	9307      	str	r3, [sp, #28]
 8004c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c22:	4654      	mov	r4, sl
 8004c24:	2205      	movs	r2, #5
 8004c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c2a:	4853      	ldr	r0, [pc, #332]	@ (8004d78 <_vfiprintf_r+0x21c>)
 8004c2c:	f7fb faf8 	bl	8000220 <memchr>
 8004c30:	9a04      	ldr	r2, [sp, #16]
 8004c32:	b9d8      	cbnz	r0, 8004c6c <_vfiprintf_r+0x110>
 8004c34:	06d1      	lsls	r1, r2, #27
 8004c36:	bf44      	itt	mi
 8004c38:	2320      	movmi	r3, #32
 8004c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c3e:	0713      	lsls	r3, r2, #28
 8004c40:	bf44      	itt	mi
 8004c42:	232b      	movmi	r3, #43	@ 0x2b
 8004c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c48:	f89a 3000 	ldrb.w	r3, [sl]
 8004c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c4e:	d015      	beq.n	8004c7c <_vfiprintf_r+0x120>
 8004c50:	9a07      	ldr	r2, [sp, #28]
 8004c52:	4654      	mov	r4, sl
 8004c54:	2000      	movs	r0, #0
 8004c56:	f04f 0c0a 	mov.w	ip, #10
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c60:	3b30      	subs	r3, #48	@ 0x30
 8004c62:	2b09      	cmp	r3, #9
 8004c64:	d94b      	bls.n	8004cfe <_vfiprintf_r+0x1a2>
 8004c66:	b1b0      	cbz	r0, 8004c96 <_vfiprintf_r+0x13a>
 8004c68:	9207      	str	r2, [sp, #28]
 8004c6a:	e014      	b.n	8004c96 <_vfiprintf_r+0x13a>
 8004c6c:	eba0 0308 	sub.w	r3, r0, r8
 8004c70:	fa09 f303 	lsl.w	r3, r9, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	46a2      	mov	sl, r4
 8004c7a:	e7d2      	b.n	8004c22 <_vfiprintf_r+0xc6>
 8004c7c:	9b03      	ldr	r3, [sp, #12]
 8004c7e:	1d19      	adds	r1, r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	9103      	str	r1, [sp, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bfbb      	ittet	lt
 8004c88:	425b      	neglt	r3, r3
 8004c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c8e:	9307      	strge	r3, [sp, #28]
 8004c90:	9307      	strlt	r3, [sp, #28]
 8004c92:	bfb8      	it	lt
 8004c94:	9204      	strlt	r2, [sp, #16]
 8004c96:	7823      	ldrb	r3, [r4, #0]
 8004c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c9a:	d10a      	bne.n	8004cb2 <_vfiprintf_r+0x156>
 8004c9c:	7863      	ldrb	r3, [r4, #1]
 8004c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ca0:	d132      	bne.n	8004d08 <_vfiprintf_r+0x1ac>
 8004ca2:	9b03      	ldr	r3, [sp, #12]
 8004ca4:	1d1a      	adds	r2, r3, #4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	9203      	str	r2, [sp, #12]
 8004caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004cae:	3402      	adds	r4, #2
 8004cb0:	9305      	str	r3, [sp, #20]
 8004cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004d88 <_vfiprintf_r+0x22c>
 8004cb6:	7821      	ldrb	r1, [r4, #0]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4650      	mov	r0, sl
 8004cbc:	f7fb fab0 	bl	8000220 <memchr>
 8004cc0:	b138      	cbz	r0, 8004cd2 <_vfiprintf_r+0x176>
 8004cc2:	9b04      	ldr	r3, [sp, #16]
 8004cc4:	eba0 000a 	sub.w	r0, r0, sl
 8004cc8:	2240      	movs	r2, #64	@ 0x40
 8004cca:	4082      	lsls	r2, r0
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	3401      	adds	r4, #1
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd6:	4829      	ldr	r0, [pc, #164]	@ (8004d7c <_vfiprintf_r+0x220>)
 8004cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cdc:	2206      	movs	r2, #6
 8004cde:	f7fb fa9f 	bl	8000220 <memchr>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d03f      	beq.n	8004d66 <_vfiprintf_r+0x20a>
 8004ce6:	4b26      	ldr	r3, [pc, #152]	@ (8004d80 <_vfiprintf_r+0x224>)
 8004ce8:	bb1b      	cbnz	r3, 8004d32 <_vfiprintf_r+0x1d6>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	3307      	adds	r3, #7
 8004cee:	f023 0307 	bic.w	r3, r3, #7
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cf8:	443b      	add	r3, r7
 8004cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cfc:	e76a      	b.n	8004bd4 <_vfiprintf_r+0x78>
 8004cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d02:	460c      	mov	r4, r1
 8004d04:	2001      	movs	r0, #1
 8004d06:	e7a8      	b.n	8004c5a <_vfiprintf_r+0xfe>
 8004d08:	2300      	movs	r3, #0
 8004d0a:	3401      	adds	r4, #1
 8004d0c:	9305      	str	r3, [sp, #20]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f04f 0c0a 	mov.w	ip, #10
 8004d14:	4620      	mov	r0, r4
 8004d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d1a:	3a30      	subs	r2, #48	@ 0x30
 8004d1c:	2a09      	cmp	r2, #9
 8004d1e:	d903      	bls.n	8004d28 <_vfiprintf_r+0x1cc>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0c6      	beq.n	8004cb2 <_vfiprintf_r+0x156>
 8004d24:	9105      	str	r1, [sp, #20]
 8004d26:	e7c4      	b.n	8004cb2 <_vfiprintf_r+0x156>
 8004d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d2c:	4604      	mov	r4, r0
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7f0      	b.n	8004d14 <_vfiprintf_r+0x1b8>
 8004d32:	ab03      	add	r3, sp, #12
 8004d34:	9300      	str	r3, [sp, #0]
 8004d36:	462a      	mov	r2, r5
 8004d38:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <_vfiprintf_r+0x228>)
 8004d3a:	a904      	add	r1, sp, #16
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f3af 8000 	nop.w
 8004d42:	4607      	mov	r7, r0
 8004d44:	1c78      	adds	r0, r7, #1
 8004d46:	d1d6      	bne.n	8004cf6 <_vfiprintf_r+0x19a>
 8004d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d4a:	07d9      	lsls	r1, r3, #31
 8004d4c:	d405      	bmi.n	8004d5a <_vfiprintf_r+0x1fe>
 8004d4e:	89ab      	ldrh	r3, [r5, #12]
 8004d50:	059a      	lsls	r2, r3, #22
 8004d52:	d402      	bmi.n	8004d5a <_vfiprintf_r+0x1fe>
 8004d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d56:	f7ff fddd 	bl	8004914 <__retarget_lock_release_recursive>
 8004d5a:	89ab      	ldrh	r3, [r5, #12]
 8004d5c:	065b      	lsls	r3, r3, #25
 8004d5e:	f53f af1f 	bmi.w	8004ba0 <_vfiprintf_r+0x44>
 8004d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d64:	e71e      	b.n	8004ba4 <_vfiprintf_r+0x48>
 8004d66:	ab03      	add	r3, sp, #12
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	4b05      	ldr	r3, [pc, #20]	@ (8004d84 <_vfiprintf_r+0x228>)
 8004d6e:	a904      	add	r1, sp, #16
 8004d70:	4630      	mov	r0, r6
 8004d72:	f000 f879 	bl	8004e68 <_printf_i>
 8004d76:	e7e4      	b.n	8004d42 <_vfiprintf_r+0x1e6>
 8004d78:	08005370 	.word	0x08005370
 8004d7c:	0800537a 	.word	0x0800537a
 8004d80:	00000000 	.word	0x00000000
 8004d84:	08004b37 	.word	0x08004b37
 8004d88:	08005376 	.word	0x08005376

08004d8c <_printf_common>:
 8004d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	4616      	mov	r6, r2
 8004d92:	4698      	mov	r8, r3
 8004d94:	688a      	ldr	r2, [r1, #8]
 8004d96:	690b      	ldr	r3, [r1, #16]
 8004d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	bfb8      	it	lt
 8004da0:	4613      	movlt	r3, r2
 8004da2:	6033      	str	r3, [r6, #0]
 8004da4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004da8:	4607      	mov	r7, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	b10a      	cbz	r2, 8004db2 <_printf_common+0x26>
 8004dae:	3301      	adds	r3, #1
 8004db0:	6033      	str	r3, [r6, #0]
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	0699      	lsls	r1, r3, #26
 8004db6:	bf42      	ittt	mi
 8004db8:	6833      	ldrmi	r3, [r6, #0]
 8004dba:	3302      	addmi	r3, #2
 8004dbc:	6033      	strmi	r3, [r6, #0]
 8004dbe:	6825      	ldr	r5, [r4, #0]
 8004dc0:	f015 0506 	ands.w	r5, r5, #6
 8004dc4:	d106      	bne.n	8004dd4 <_printf_common+0x48>
 8004dc6:	f104 0a19 	add.w	sl, r4, #25
 8004dca:	68e3      	ldr	r3, [r4, #12]
 8004dcc:	6832      	ldr	r2, [r6, #0]
 8004dce:	1a9b      	subs	r3, r3, r2
 8004dd0:	42ab      	cmp	r3, r5
 8004dd2:	dc26      	bgt.n	8004e22 <_printf_common+0x96>
 8004dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004dd8:	6822      	ldr	r2, [r4, #0]
 8004dda:	3b00      	subs	r3, #0
 8004ddc:	bf18      	it	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	0692      	lsls	r2, r2, #26
 8004de2:	d42b      	bmi.n	8004e3c <_printf_common+0xb0>
 8004de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004de8:	4641      	mov	r1, r8
 8004dea:	4638      	mov	r0, r7
 8004dec:	47c8      	blx	r9
 8004dee:	3001      	adds	r0, #1
 8004df0:	d01e      	beq.n	8004e30 <_printf_common+0xa4>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	6922      	ldr	r2, [r4, #16]
 8004df6:	f003 0306 	and.w	r3, r3, #6
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	bf02      	ittt	eq
 8004dfe:	68e5      	ldreq	r5, [r4, #12]
 8004e00:	6833      	ldreq	r3, [r6, #0]
 8004e02:	1aed      	subeq	r5, r5, r3
 8004e04:	68a3      	ldr	r3, [r4, #8]
 8004e06:	bf0c      	ite	eq
 8004e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e0c:	2500      	movne	r5, #0
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	bfc4      	itt	gt
 8004e12:	1a9b      	subgt	r3, r3, r2
 8004e14:	18ed      	addgt	r5, r5, r3
 8004e16:	2600      	movs	r6, #0
 8004e18:	341a      	adds	r4, #26
 8004e1a:	42b5      	cmp	r5, r6
 8004e1c:	d11a      	bne.n	8004e54 <_printf_common+0xc8>
 8004e1e:	2000      	movs	r0, #0
 8004e20:	e008      	b.n	8004e34 <_printf_common+0xa8>
 8004e22:	2301      	movs	r3, #1
 8004e24:	4652      	mov	r2, sl
 8004e26:	4641      	mov	r1, r8
 8004e28:	4638      	mov	r0, r7
 8004e2a:	47c8      	blx	r9
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d103      	bne.n	8004e38 <_printf_common+0xac>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e38:	3501      	adds	r5, #1
 8004e3a:	e7c6      	b.n	8004dca <_printf_common+0x3e>
 8004e3c:	18e1      	adds	r1, r4, r3
 8004e3e:	1c5a      	adds	r2, r3, #1
 8004e40:	2030      	movs	r0, #48	@ 0x30
 8004e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e46:	4422      	add	r2, r4
 8004e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e50:	3302      	adds	r3, #2
 8004e52:	e7c7      	b.n	8004de4 <_printf_common+0x58>
 8004e54:	2301      	movs	r3, #1
 8004e56:	4622      	mov	r2, r4
 8004e58:	4641      	mov	r1, r8
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	47c8      	blx	r9
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d0e6      	beq.n	8004e30 <_printf_common+0xa4>
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7d9      	b.n	8004e1a <_printf_common+0x8e>
	...

08004e68 <_printf_i>:
 8004e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	7e0f      	ldrb	r7, [r1, #24]
 8004e6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e70:	2f78      	cmp	r7, #120	@ 0x78
 8004e72:	4691      	mov	r9, r2
 8004e74:	4680      	mov	r8, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e7e:	d807      	bhi.n	8004e90 <_printf_i+0x28>
 8004e80:	2f62      	cmp	r7, #98	@ 0x62
 8004e82:	d80a      	bhi.n	8004e9a <_printf_i+0x32>
 8004e84:	2f00      	cmp	r7, #0
 8004e86:	f000 80d2 	beq.w	800502e <_printf_i+0x1c6>
 8004e8a:	2f58      	cmp	r7, #88	@ 0x58
 8004e8c:	f000 80b9 	beq.w	8005002 <_printf_i+0x19a>
 8004e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e98:	e03a      	b.n	8004f10 <_printf_i+0xa8>
 8004e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e9e:	2b15      	cmp	r3, #21
 8004ea0:	d8f6      	bhi.n	8004e90 <_printf_i+0x28>
 8004ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ea8 <_printf_i+0x40>)
 8004ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004e91 	.word	0x08004e91
 8004eb4:	08004e91 	.word	0x08004e91
 8004eb8:	08004e91 	.word	0x08004e91
 8004ebc:	08004e91 	.word	0x08004e91
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004e91 	.word	0x08004e91
 8004ec8:	08004e91 	.word	0x08004e91
 8004ecc:	08004e91 	.word	0x08004e91
 8004ed0:	08004e91 	.word	0x08004e91
 8004ed4:	08005015 	.word	0x08005015
 8004ed8:	08004f3f 	.word	0x08004f3f
 8004edc:	08004fcf 	.word	0x08004fcf
 8004ee0:	08004e91 	.word	0x08004e91
 8004ee4:	08004e91 	.word	0x08004e91
 8004ee8:	08005037 	.word	0x08005037
 8004eec:	08004e91 	.word	0x08004e91
 8004ef0:	08004f3f 	.word	0x08004f3f
 8004ef4:	08004e91 	.word	0x08004e91
 8004ef8:	08004e91 	.word	0x08004e91
 8004efc:	08004fd7 	.word	0x08004fd7
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	1d1a      	adds	r2, r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6032      	str	r2, [r6, #0]
 8004f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f10:	2301      	movs	r3, #1
 8004f12:	e09d      	b.n	8005050 <_printf_i+0x1e8>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	1d19      	adds	r1, r3, #4
 8004f1a:	6031      	str	r1, [r6, #0]
 8004f1c:	0606      	lsls	r6, r0, #24
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0xbc>
 8004f20:	681d      	ldr	r5, [r3, #0]
 8004f22:	e003      	b.n	8004f2c <_printf_i+0xc4>
 8004f24:	0645      	lsls	r5, r0, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0xb8>
 8004f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f2c:	2d00      	cmp	r5, #0
 8004f2e:	da03      	bge.n	8004f38 <_printf_i+0xd0>
 8004f30:	232d      	movs	r3, #45	@ 0x2d
 8004f32:	426d      	negs	r5, r5
 8004f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f38:	4859      	ldr	r0, [pc, #356]	@ (80050a0 <_printf_i+0x238>)
 8004f3a:	230a      	movs	r3, #10
 8004f3c:	e011      	b.n	8004f62 <_printf_i+0xfa>
 8004f3e:	6821      	ldr	r1, [r4, #0]
 8004f40:	6833      	ldr	r3, [r6, #0]
 8004f42:	0608      	lsls	r0, r1, #24
 8004f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f48:	d402      	bmi.n	8004f50 <_printf_i+0xe8>
 8004f4a:	0649      	lsls	r1, r1, #25
 8004f4c:	bf48      	it	mi
 8004f4e:	b2ad      	uxthmi	r5, r5
 8004f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f52:	4853      	ldr	r0, [pc, #332]	@ (80050a0 <_printf_i+0x238>)
 8004f54:	6033      	str	r3, [r6, #0]
 8004f56:	bf14      	ite	ne
 8004f58:	230a      	movne	r3, #10
 8004f5a:	2308      	moveq	r3, #8
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f62:	6866      	ldr	r6, [r4, #4]
 8004f64:	60a6      	str	r6, [r4, #8]
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	bfa2      	ittt	ge
 8004f6a:	6821      	ldrge	r1, [r4, #0]
 8004f6c:	f021 0104 	bicge.w	r1, r1, #4
 8004f70:	6021      	strge	r1, [r4, #0]
 8004f72:	b90d      	cbnz	r5, 8004f78 <_printf_i+0x110>
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	d04b      	beq.n	8005010 <_printf_i+0x1a8>
 8004f78:	4616      	mov	r6, r2
 8004f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8004f82:	5dc7      	ldrb	r7, [r0, r7]
 8004f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f88:	462f      	mov	r7, r5
 8004f8a:	42bb      	cmp	r3, r7
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	d9f4      	bls.n	8004f7a <_printf_i+0x112>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d10b      	bne.n	8004fac <_printf_i+0x144>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	07df      	lsls	r7, r3, #31
 8004f98:	d508      	bpl.n	8004fac <_printf_i+0x144>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	6861      	ldr	r1, [r4, #4]
 8004f9e:	4299      	cmp	r1, r3
 8004fa0:	bfde      	ittt	le
 8004fa2:	2330      	movle	r3, #48	@ 0x30
 8004fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004fac:	1b92      	subs	r2, r2, r6
 8004fae:	6122      	str	r2, [r4, #16]
 8004fb0:	f8cd a000 	str.w	sl, [sp]
 8004fb4:	464b      	mov	r3, r9
 8004fb6:	aa03      	add	r2, sp, #12
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7ff fee6 	bl	8004d8c <_printf_common>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d14a      	bne.n	800505a <_printf_i+0x1f2>
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fc8:	b004      	add	sp, #16
 8004fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	4833      	ldr	r0, [pc, #204]	@ (80050a4 <_printf_i+0x23c>)
 8004fd8:	2778      	movs	r7, #120	@ 0x78
 8004fda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fde:	6823      	ldr	r3, [r4, #0]
 8004fe0:	6831      	ldr	r1, [r6, #0]
 8004fe2:	061f      	lsls	r7, r3, #24
 8004fe4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fe8:	d402      	bmi.n	8004ff0 <_printf_i+0x188>
 8004fea:	065f      	lsls	r7, r3, #25
 8004fec:	bf48      	it	mi
 8004fee:	b2ad      	uxthmi	r5, r5
 8004ff0:	6031      	str	r1, [r6, #0]
 8004ff2:	07d9      	lsls	r1, r3, #31
 8004ff4:	bf44      	itt	mi
 8004ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8004ffa:	6023      	strmi	r3, [r4, #0]
 8004ffc:	b11d      	cbz	r5, 8005006 <_printf_i+0x19e>
 8004ffe:	2310      	movs	r3, #16
 8005000:	e7ac      	b.n	8004f5c <_printf_i+0xf4>
 8005002:	4827      	ldr	r0, [pc, #156]	@ (80050a0 <_printf_i+0x238>)
 8005004:	e7e9      	b.n	8004fda <_printf_i+0x172>
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	f023 0320 	bic.w	r3, r3, #32
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	e7f6      	b.n	8004ffe <_printf_i+0x196>
 8005010:	4616      	mov	r6, r2
 8005012:	e7bd      	b.n	8004f90 <_printf_i+0x128>
 8005014:	6833      	ldr	r3, [r6, #0]
 8005016:	6825      	ldr	r5, [r4, #0]
 8005018:	6961      	ldr	r1, [r4, #20]
 800501a:	1d18      	adds	r0, r3, #4
 800501c:	6030      	str	r0, [r6, #0]
 800501e:	062e      	lsls	r6, r5, #24
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	d501      	bpl.n	8005028 <_printf_i+0x1c0>
 8005024:	6019      	str	r1, [r3, #0]
 8005026:	e002      	b.n	800502e <_printf_i+0x1c6>
 8005028:	0668      	lsls	r0, r5, #25
 800502a:	d5fb      	bpl.n	8005024 <_printf_i+0x1bc>
 800502c:	8019      	strh	r1, [r3, #0]
 800502e:	2300      	movs	r3, #0
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	4616      	mov	r6, r2
 8005034:	e7bc      	b.n	8004fb0 <_printf_i+0x148>
 8005036:	6833      	ldr	r3, [r6, #0]
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	6032      	str	r2, [r6, #0]
 800503c:	681e      	ldr	r6, [r3, #0]
 800503e:	6862      	ldr	r2, [r4, #4]
 8005040:	2100      	movs	r1, #0
 8005042:	4630      	mov	r0, r6
 8005044:	f7fb f8ec 	bl	8000220 <memchr>
 8005048:	b108      	cbz	r0, 800504e <_printf_i+0x1e6>
 800504a:	1b80      	subs	r0, r0, r6
 800504c:	6060      	str	r0, [r4, #4]
 800504e:	6863      	ldr	r3, [r4, #4]
 8005050:	6123      	str	r3, [r4, #16]
 8005052:	2300      	movs	r3, #0
 8005054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005058:	e7aa      	b.n	8004fb0 <_printf_i+0x148>
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	47d0      	blx	sl
 8005064:	3001      	adds	r0, #1
 8005066:	d0ad      	beq.n	8004fc4 <_printf_i+0x15c>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	079b      	lsls	r3, r3, #30
 800506c:	d413      	bmi.n	8005096 <_printf_i+0x22e>
 800506e:	68e0      	ldr	r0, [r4, #12]
 8005070:	9b03      	ldr	r3, [sp, #12]
 8005072:	4298      	cmp	r0, r3
 8005074:	bfb8      	it	lt
 8005076:	4618      	movlt	r0, r3
 8005078:	e7a6      	b.n	8004fc8 <_printf_i+0x160>
 800507a:	2301      	movs	r3, #1
 800507c:	4632      	mov	r2, r6
 800507e:	4649      	mov	r1, r9
 8005080:	4640      	mov	r0, r8
 8005082:	47d0      	blx	sl
 8005084:	3001      	adds	r0, #1
 8005086:	d09d      	beq.n	8004fc4 <_printf_i+0x15c>
 8005088:	3501      	adds	r5, #1
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	9903      	ldr	r1, [sp, #12]
 800508e:	1a5b      	subs	r3, r3, r1
 8005090:	42ab      	cmp	r3, r5
 8005092:	dcf2      	bgt.n	800507a <_printf_i+0x212>
 8005094:	e7eb      	b.n	800506e <_printf_i+0x206>
 8005096:	2500      	movs	r5, #0
 8005098:	f104 0619 	add.w	r6, r4, #25
 800509c:	e7f5      	b.n	800508a <_printf_i+0x222>
 800509e:	bf00      	nop
 80050a0:	08005381 	.word	0x08005381
 80050a4:	08005392 	.word	0x08005392

080050a8 <__swbuf_r>:
 80050a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050aa:	460e      	mov	r6, r1
 80050ac:	4614      	mov	r4, r2
 80050ae:	4605      	mov	r5, r0
 80050b0:	b118      	cbz	r0, 80050ba <__swbuf_r+0x12>
 80050b2:	6a03      	ldr	r3, [r0, #32]
 80050b4:	b90b      	cbnz	r3, 80050ba <__swbuf_r+0x12>
 80050b6:	f7ff fb27 	bl	8004708 <__sinit>
 80050ba:	69a3      	ldr	r3, [r4, #24]
 80050bc:	60a3      	str	r3, [r4, #8]
 80050be:	89a3      	ldrh	r3, [r4, #12]
 80050c0:	071a      	lsls	r2, r3, #28
 80050c2:	d501      	bpl.n	80050c8 <__swbuf_r+0x20>
 80050c4:	6923      	ldr	r3, [r4, #16]
 80050c6:	b943      	cbnz	r3, 80050da <__swbuf_r+0x32>
 80050c8:	4621      	mov	r1, r4
 80050ca:	4628      	mov	r0, r5
 80050cc:	f000 f82a 	bl	8005124 <__swsetup_r>
 80050d0:	b118      	cbz	r0, 80050da <__swbuf_r+0x32>
 80050d2:	f04f 37ff 	mov.w	r7, #4294967295
 80050d6:	4638      	mov	r0, r7
 80050d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	6922      	ldr	r2, [r4, #16]
 80050de:	1a98      	subs	r0, r3, r2
 80050e0:	6963      	ldr	r3, [r4, #20]
 80050e2:	b2f6      	uxtb	r6, r6
 80050e4:	4283      	cmp	r3, r0
 80050e6:	4637      	mov	r7, r6
 80050e8:	dc05      	bgt.n	80050f6 <__swbuf_r+0x4e>
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f7ff fa43 	bl	8004578 <_fflush_r>
 80050f2:	2800      	cmp	r0, #0
 80050f4:	d1ed      	bne.n	80050d2 <__swbuf_r+0x2a>
 80050f6:	68a3      	ldr	r3, [r4, #8]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	60a3      	str	r3, [r4, #8]
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	6022      	str	r2, [r4, #0]
 8005102:	701e      	strb	r6, [r3, #0]
 8005104:	6962      	ldr	r2, [r4, #20]
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	429a      	cmp	r2, r3
 800510a:	d004      	beq.n	8005116 <__swbuf_r+0x6e>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	07db      	lsls	r3, r3, #31
 8005110:	d5e1      	bpl.n	80050d6 <__swbuf_r+0x2e>
 8005112:	2e0a      	cmp	r6, #10
 8005114:	d1df      	bne.n	80050d6 <__swbuf_r+0x2e>
 8005116:	4621      	mov	r1, r4
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff fa2d 	bl	8004578 <_fflush_r>
 800511e:	2800      	cmp	r0, #0
 8005120:	d0d9      	beq.n	80050d6 <__swbuf_r+0x2e>
 8005122:	e7d6      	b.n	80050d2 <__swbuf_r+0x2a>

08005124 <__swsetup_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4b29      	ldr	r3, [pc, #164]	@ (80051cc <__swsetup_r+0xa8>)
 8005128:	4605      	mov	r5, r0
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	460c      	mov	r4, r1
 800512e:	b118      	cbz	r0, 8005138 <__swsetup_r+0x14>
 8005130:	6a03      	ldr	r3, [r0, #32]
 8005132:	b90b      	cbnz	r3, 8005138 <__swsetup_r+0x14>
 8005134:	f7ff fae8 	bl	8004708 <__sinit>
 8005138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513c:	0719      	lsls	r1, r3, #28
 800513e:	d422      	bmi.n	8005186 <__swsetup_r+0x62>
 8005140:	06da      	lsls	r2, r3, #27
 8005142:	d407      	bmi.n	8005154 <__swsetup_r+0x30>
 8005144:	2209      	movs	r2, #9
 8005146:	602a      	str	r2, [r5, #0]
 8005148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	f04f 30ff 	mov.w	r0, #4294967295
 8005152:	e033      	b.n	80051bc <__swsetup_r+0x98>
 8005154:	0758      	lsls	r0, r3, #29
 8005156:	d512      	bpl.n	800517e <__swsetup_r+0x5a>
 8005158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800515a:	b141      	cbz	r1, 800516e <__swsetup_r+0x4a>
 800515c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005160:	4299      	cmp	r1, r3
 8005162:	d002      	beq.n	800516a <__swsetup_r+0x46>
 8005164:	4628      	mov	r0, r5
 8005166:	f7ff fbd7 	bl	8004918 <_free_r>
 800516a:	2300      	movs	r3, #0
 800516c:	6363      	str	r3, [r4, #52]	@ 0x34
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	2300      	movs	r3, #0
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	f043 0308 	orr.w	r3, r3, #8
 8005184:	81a3      	strh	r3, [r4, #12]
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	b94b      	cbnz	r3, 800519e <__swsetup_r+0x7a>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005194:	d003      	beq.n	800519e <__swsetup_r+0x7a>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f84f 	bl	800523c <__smakebuf_r>
 800519e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a2:	f013 0201 	ands.w	r2, r3, #1
 80051a6:	d00a      	beq.n	80051be <__swsetup_r+0x9a>
 80051a8:	2200      	movs	r2, #0
 80051aa:	60a2      	str	r2, [r4, #8]
 80051ac:	6962      	ldr	r2, [r4, #20]
 80051ae:	4252      	negs	r2, r2
 80051b0:	61a2      	str	r2, [r4, #24]
 80051b2:	6922      	ldr	r2, [r4, #16]
 80051b4:	b942      	cbnz	r2, 80051c8 <__swsetup_r+0xa4>
 80051b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051ba:	d1c5      	bne.n	8005148 <__swsetup_r+0x24>
 80051bc:	bd38      	pop	{r3, r4, r5, pc}
 80051be:	0799      	lsls	r1, r3, #30
 80051c0:	bf58      	it	pl
 80051c2:	6962      	ldrpl	r2, [r4, #20]
 80051c4:	60a2      	str	r2, [r4, #8]
 80051c6:	e7f4      	b.n	80051b2 <__swsetup_r+0x8e>
 80051c8:	2000      	movs	r0, #0
 80051ca:	e7f7      	b.n	80051bc <__swsetup_r+0x98>
 80051cc:	20000018 	.word	0x20000018

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	@ (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fb fc06 	bl	80009ec <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000264 	.word	0x20000264

080051f0 <__swhatbuf_r>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	460c      	mov	r4, r1
 80051f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f8:	2900      	cmp	r1, #0
 80051fa:	b096      	sub	sp, #88	@ 0x58
 80051fc:	4615      	mov	r5, r2
 80051fe:	461e      	mov	r6, r3
 8005200:	da0d      	bge.n	800521e <__swhatbuf_r+0x2e>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	bf14      	ite	ne
 800520e:	2340      	movne	r3, #64	@ 0x40
 8005210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005214:	2000      	movs	r0, #0
 8005216:	6031      	str	r1, [r6, #0]
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	b016      	add	sp, #88	@ 0x58
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	466a      	mov	r2, sp
 8005220:	f000 f848 	bl	80052b4 <_fstat_r>
 8005224:	2800      	cmp	r0, #0
 8005226:	dbec      	blt.n	8005202 <__swhatbuf_r+0x12>
 8005228:	9901      	ldr	r1, [sp, #4]
 800522a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800522e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005232:	4259      	negs	r1, r3
 8005234:	4159      	adcs	r1, r3
 8005236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800523a:	e7eb      	b.n	8005214 <__swhatbuf_r+0x24>

0800523c <__smakebuf_r>:
 800523c:	898b      	ldrh	r3, [r1, #12]
 800523e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005240:	079d      	lsls	r5, r3, #30
 8005242:	4606      	mov	r6, r0
 8005244:	460c      	mov	r4, r1
 8005246:	d507      	bpl.n	8005258 <__smakebuf_r+0x1c>
 8005248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	2301      	movs	r3, #1
 8005252:	6163      	str	r3, [r4, #20]
 8005254:	b003      	add	sp, #12
 8005256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005258:	ab01      	add	r3, sp, #4
 800525a:	466a      	mov	r2, sp
 800525c:	f7ff ffc8 	bl	80051f0 <__swhatbuf_r>
 8005260:	9f00      	ldr	r7, [sp, #0]
 8005262:	4605      	mov	r5, r0
 8005264:	4639      	mov	r1, r7
 8005266:	4630      	mov	r0, r6
 8005268:	f7ff fbc2 	bl	80049f0 <_malloc_r>
 800526c:	b948      	cbnz	r0, 8005282 <__smakebuf_r+0x46>
 800526e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005272:	059a      	lsls	r2, r3, #22
 8005274:	d4ee      	bmi.n	8005254 <__smakebuf_r+0x18>
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	81a3      	strh	r3, [r4, #12]
 8005280:	e7e2      	b.n	8005248 <__smakebuf_r+0xc>
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	6020      	str	r0, [r4, #0]
 8005286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528a:	81a3      	strh	r3, [r4, #12]
 800528c:	9b01      	ldr	r3, [sp, #4]
 800528e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005292:	b15b      	cbz	r3, 80052ac <__smakebuf_r+0x70>
 8005294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005298:	4630      	mov	r0, r6
 800529a:	f000 f81d 	bl	80052d8 <_isatty_r>
 800529e:	b128      	cbz	r0, 80052ac <__smakebuf_r+0x70>
 80052a0:	89a3      	ldrh	r3, [r4, #12]
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	f043 0301 	orr.w	r3, r3, #1
 80052aa:	81a3      	strh	r3, [r4, #12]
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	431d      	orrs	r5, r3
 80052b0:	81a5      	strh	r5, [r4, #12]
 80052b2:	e7cf      	b.n	8005254 <__smakebuf_r+0x18>

080052b4 <_fstat_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	4d07      	ldr	r5, [pc, #28]	@ (80052d4 <_fstat_r+0x20>)
 80052b8:	2300      	movs	r3, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f7fb fb6a 	bl	800099a <_fstat>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d102      	bne.n	80052d0 <_fstat_r+0x1c>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	b103      	cbz	r3, 80052d0 <_fstat_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	bf00      	nop
 80052d4:	20000264 	.word	0x20000264

080052d8 <_isatty_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4d06      	ldr	r5, [pc, #24]	@ (80052f4 <_isatty_r+0x1c>)
 80052dc:	2300      	movs	r3, #0
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb fb69 	bl	80009ba <_isatty>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_isatty_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_isatty_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000264 	.word	0x20000264

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
